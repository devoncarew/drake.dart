// Generated by dart2js, the Dart to JavaScript compiler version: 0.1.2.0_r24239.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
$$._HTMLElement = {
  "": function _HTMLElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.AnchorElement = {
  "": function AnchorElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$download: function(receiver) {
    return receiver.download;
  },
  set$download: function(receiver, v) {
    receiver.download = v;
  },
  get$hash: function(receiver) {
    return receiver.hash;
  },
  set$hash: function(receiver, v) {
    receiver.hash = v;
  },
  get$host: function(receiver) {
    return receiver.host;
  },
  set$host: function(receiver, v) {
    receiver.host = v;
  },
  get$hostname: function(receiver) {
    return receiver.hostname;
  },
  set$hostname: function(receiver, v) {
    receiver.hostname = v;
  },
  get$href: function(receiver) {
    return receiver.href;
  },
  set$href: function(receiver, v) {
    receiver.href = v;
  },
  get$hreflang: function(receiver) {
    return receiver.hreflang;
  },
  set$hreflang: function(receiver, v) {
    receiver.hreflang = v;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  },
  get$origin: function(receiver) {
    return receiver.origin;
  },
  get$pathname: function(receiver) {
    return receiver.pathname;
  },
  set$pathname: function(receiver, v) {
    receiver.pathname = v;
  },
  get$ping: function(receiver) {
    return receiver.ping;
  },
  set$ping: function(receiver, v) {
    receiver.ping = v;
  },
  get$port: function(receiver) {
    return receiver.port;
  },
  set$port: function(receiver, v) {
    receiver.port = v;
  },
  get$protocol: function(receiver) {
    return receiver.protocol;
  },
  set$protocol: function(receiver, v) {
    receiver.protocol = v;
  },
  get$rel: function(receiver) {
    return receiver.rel;
  },
  set$rel: function(receiver, v) {
    receiver.rel = v;
  },
  get$search: function(receiver) {
    return receiver.search;
  },
  set$search: function(receiver, v) {
    receiver.search = v;
  },
  get$target: function(receiver) {
    return receiver.target;
  },
  set$target: function(receiver, v) {
    receiver.target = v;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  set$type: function(receiver, v) {
    receiver.type = v;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "@toString$0": function() {
    return [$.DomName_LNw, $.Type_cOY];
  }
};

$$.AnimationEvent = {
  "": function AnimationEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$animationName: function(receiver) {
    return receiver.animationName;
  },
  get$elapsedTime: function(receiver) {
    return receiver.elapsedTime;
  }
};

$$.AreaElement = {
  "": function AreaElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$alt: function(receiver) {
    return receiver.alt;
  },
  set$alt: function(receiver, v) {
    receiver.alt = v;
  },
  get$coords: function(receiver) {
    return receiver.coords;
  },
  set$coords: function(receiver, v) {
    receiver.coords = v;
  },
  get$hash: function(receiver) {
    return receiver.hash;
  },
  get$host: function(receiver) {
    return receiver.host;
  },
  get$hostname: function(receiver) {
    return receiver.hostname;
  },
  get$href: function(receiver) {
    return receiver.href;
  },
  set$href: function(receiver, v) {
    receiver.href = v;
  },
  get$pathname: function(receiver) {
    return receiver.pathname;
  },
  get$ping: function(receiver) {
    return receiver.ping;
  },
  set$ping: function(receiver, v) {
    receiver.ping = v;
  },
  get$port: function(receiver) {
    return receiver.port;
  },
  get$protocol: function(receiver) {
    return receiver.protocol;
  },
  get$search: function(receiver) {
    return receiver.search;
  },
  get$shape: function(receiver) {
    return receiver.shape;
  },
  set$shape: function(receiver, v) {
    receiver.shape = v;
  },
  get$target: function(receiver) {
    return receiver.target;
  },
  set$target: function(receiver, v) {
    receiver.target = v;
  }
};

$$.AudioElement = {
  "": function AudioElement() {
    throw "Called unused constructor";
  },
  "super": "MediaElement"
};

$$.AutocompleteErrorEvent = {
  "": function AutocompleteErrorEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$reason: function(receiver) {
    return receiver.reason;
  }
};

$$.BRElement = {
  "": function BRElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement"
};

$$.BarProp = {
  "": function BarProp() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$visible: function(receiver) {
    return receiver.visible;
  }
};

$$.BaseElement = {
  "": function BaseElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$href: function(receiver) {
    return receiver.href;
  },
  set$href: function(receiver, v) {
    receiver.href = v;
  },
  get$target: function(receiver) {
    return receiver.target;
  },
  set$target: function(receiver, v) {
    receiver.target = v;
  }
};

$$.BeforeLoadEvent = {
  "": function BeforeLoadEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$url: function(receiver) {
    return receiver.url;
  }
};

$$.Blob = {
  "": function Blob() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$size: function(receiver) {
    return receiver.size;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  $isBlob: true,
  $asBlob: null
};

$$.BodyElement = {
  "": function BodyElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  $isBodyElement: true,
  $asBodyElement: null
};

$$.ButtonElement = {
  "": function ButtonElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$autofocus: function(receiver) {
    return receiver.autofocus;
  },
  set$autofocus: function(receiver, v) {
    receiver.autofocus = v;
  },
  get$disabled: function(receiver) {
    return receiver.disabled;
  },
  set$disabled: function(receiver, v) {
    receiver.disabled = v;
  },
  get$form: function(receiver) {
    return receiver.form;
  },
  get$formAction: function(receiver) {
    return receiver.formAction;
  },
  set$formAction: function(receiver, v) {
    receiver.formAction = v;
  },
  get$formEnctype: function(receiver) {
    return receiver.formEnctype;
  },
  set$formEnctype: function(receiver, v) {
    receiver.formEnctype = v;
  },
  get$formMethod: function(receiver) {
    return receiver.formMethod;
  },
  set$formMethod: function(receiver, v) {
    receiver.formMethod = v;
  },
  get$formNoValidate: function(receiver) {
    return receiver.formNoValidate;
  },
  set$formNoValidate: function(receiver, v) {
    receiver.formNoValidate = v;
  },
  get$formTarget: function(receiver) {
    return receiver.formTarget;
  },
  set$formTarget: function(receiver, v) {
    receiver.formTarget = v;
  },
  get$labels: function(receiver) {
    return receiver.labels;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  set$type: function(receiver, v) {
    receiver.type = v;
  },
  get$validationMessage: function(receiver) {
    return receiver.validationMessage;
  },
  get$validity: function(receiver) {
    return receiver.validity;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  },
  get$willValidate: function(receiver) {
    return receiver.willValidate;
  }
};

$$.CDataSection = {
  "": function CDataSection() {
    throw "Called unused constructor";
  },
  "super": "Text"
};

$$.CanvasElement = {
  "": function CanvasElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$height: function(receiver) {
    return receiver.height;
  },
  set$height: function(receiver, v) {
    receiver.height = v;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  set$width: function(receiver, v) {
    receiver.width = v;
  }
};

$$.CharacterData = {
  "": function CharacterData() {
    throw "Called unused constructor";
  },
  "super": "Node",
  get$data: function(receiver) {
    return receiver.data;
  },
  set$data: function(receiver, v) {
    receiver.data = v;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  get$nextElementSibling: function(receiver) {
    return receiver.nextElementSibling;
  },
  get$previousElementSibling: function(receiver) {
    return receiver.previousElementSibling;
  }
};

$$.CloseEvent = {
  "": function CloseEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$code: function(receiver) {
    return receiver.code;
  },
  get$reason: function(receiver) {
    return receiver.reason;
  },
  get$wasClean: function(receiver) {
    return receiver.wasClean;
  }
};

$$.Comment0 = {
  "": function Comment() {
    throw "Called unused constructor";
  },
  "super": "CharacterData"
};

$$.CompositionEvent = {
  "": function CompositionEvent() {
    throw "Called unused constructor";
  },
  "super": "UIEvent",
  get$data: function(receiver) {
    return receiver.data;
  }
};

$$.ContentElement = {
  "": function ContentElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$resetStyleInheritance: function(receiver) {
    return receiver.resetStyleInheritance;
  },
  set$resetStyleInheritance: function(receiver, v) {
    receiver.resetStyleInheritance = v;
  },
  get$select: function(receiver) {
    return receiver.select;
  },
  set$select: function(receiver, v) {
    receiver.select = v;
  }
};

$$.CssFontFaceLoadEvent = {
  "": function CssFontFaceLoadEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$error: function(receiver) {
    return receiver.error;
  },
  get$fontface: function(receiver) {
    return receiver.fontface;
  },
  error$2: function($receiver, arg0, arg1) {
    return this.error.call$2(arg0, arg1);
  }
};

$$.CssStyleDeclaration = {
  "": function CssStyleDeclaration() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$cssText: function(receiver) {
    return receiver.cssText;
  },
  set$cssText: function(receiver, v) {
    receiver.cssText = v;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  get$parentRule: function(receiver) {
    return receiver.parentRule;
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  "@setProperty$3": function() {
    return [$.DomName_EkK];
  },
  "+setProperty:2:1": 0,
  setProperty$2: function($receiver, propertyName, value) {
    return this.setProperty$3($receiver, propertyName, value, null);
  },
  get$display: function(receiver) {
    var propValue = receiver.getPropertyValue("display");
    return propValue != null ? propValue : "";
  },
  set$display: function(receiver, value) {
    this.setProperty$3(receiver, "display", value, "");
  },
  set$flex: function(receiver, value) {
    this.setProperty$3(receiver, $.Device_cssPrefix() + "flex", value, "");
  },
  set$flexDirection: function(receiver, value) {
    this.setProperty$3(receiver, $.Device_cssPrefix() + "flex-direction", value, "");
  },
  get$height: function(receiver) {
    var propValue = receiver.getPropertyValue("height");
    return propValue != null ? propValue : "";
  },
  get$left: function(receiver) {
    var propValue = receiver.getPropertyValue("left");
    return propValue != null ? propValue : "";
  },
  set$left: function(receiver, value) {
    this.setProperty$3(receiver, "left", value, "");
  },
  set$marginTop: function(receiver, value) {
    this.setProperty$3(receiver, "margin-top", value, "");
  },
  get$resize: function(receiver) {
    var propValue = receiver.getPropertyValue("resize");
    return propValue != null ? propValue : "";
  },
  "+resize": 0,
  resize$0: function($receiver) {
    return this.get$resize($receiver).call$0();
  },
  get$top: function(receiver) {
    var propValue = receiver.getPropertyValue("top");
    return propValue != null ? propValue : "";
  },
  set$top: function(receiver, value) {
    this.setProperty$3(receiver, "top", value, "");
  },
  get$visibility: function(receiver) {
    var propValue = receiver.getPropertyValue("visibility");
    return propValue != null ? propValue : "";
  },
  visibility$1: function($receiver, arg0) {
    return this.get$visibility($receiver).call$1(arg0);
  },
  set$visibility: function(receiver, value) {
    this.setProperty$3(receiver, "visibility", value, "");
  },
  get$width: function(receiver) {
    var propValue = receiver.getPropertyValue("width");
    return propValue != null ? propValue : "";
  },
  set$width: function(receiver, value) {
    this.setProperty$3(receiver, "width", value, "");
  }
};

$$.CustomElementConstructor = {
  "": function CustomElementConstructor() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.CustomEvent = {
  "": function CustomEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$detail: function(receiver) {
    return receiver.detail;
  },
  $$dom_initCustomEvent$4: function(receiver, typeArg, canBubbleArg, cancelableArg, detailArg) {
    return receiver.initCustomEvent(typeArg, canBubbleArg, cancelableArg, detailArg);
  },
  "@$$dom_initCustomEvent$4": function() {
    return [$.JSName_initCustomEvent, $.DomName_B8J, $.Type_cOY];
  }
};

$$.DListElement = {
  "": function DListElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement"
};

$$.DataListElement = {
  "": function DataListElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$options: function(receiver) {
    return receiver.options;
  }
};

$$.DetailsElement = {
  "": function DetailsElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$open: function(receiver) {
    return receiver.open;
  },
  set$open: function(receiver, v) {
    receiver.open = v;
  }
};

$$.DeviceMotionEvent = {
  "": function DeviceMotionEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$acceleration: function(receiver) {
    return receiver.acceleration;
  },
  get$accelerationIncludingGravity: function(receiver) {
    return receiver.accelerationIncludingGravity;
  },
  get$interval: function(receiver) {
    return receiver.interval;
  },
  get$rotationRate: function(receiver) {
    return receiver.rotationRate;
  }
};

$$.DeviceOrientationEvent = {
  "": function DeviceOrientationEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$absolute: function(receiver) {
    return receiver.absolute;
  },
  get$alpha: function(receiver) {
    return receiver.alpha;
  },
  get$beta: function(receiver) {
    return receiver.beta;
  },
  get$gamma: function(receiver) {
    return receiver.gamma;
  }
};

$$.DialogElement = {
  "": function DialogElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$open: function(receiver) {
    return receiver.open;
  },
  set$open: function(receiver, v) {
    receiver.open = v;
  },
  close$0: function(receiver) {
    return receiver.close();
  },
  "@close$0": function() {
    return [$.DomName_2jN, $.Type_cOY];
  },
  show$0: function(receiver) {
    return receiver.show();
  },
  "@show$0": function() {
    return [$.DomName_8lB, $.Type_cOY];
  }
};

$$.DirectoryEntry = {
  "": function DirectoryEntry() {
    throw "Called unused constructor";
  },
  "super": "Entry"
};

$$.DivElement = {
  "": function DivElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement"
};

$$.Document = {
  "": function Document() {
    throw "Called unused constructor";
  },
  "super": "Node",
  get$$$dom_body: function(receiver) {
    return receiver.body;
  },
  set$$$dom_body: function(receiver, v) {
    receiver.body = v;
  },
  get$charset: function(receiver) {
    return receiver.charset;
  },
  set$charset: function(receiver, v) {
    receiver.charset = v;
  },
  get$childElementCount: function(receiver) {
    return receiver.childElementCount;
  },
  get$children: function(receiver) {
    return receiver.children;
  },
  get$cookie: function(receiver) {
    return receiver.cookie;
  },
  set$cookie: function(receiver, v) {
    receiver.cookie = v;
  },
  get$_get_window: function(receiver) {
    return receiver.defaultView;
  },
  get$documentElement: function(receiver) {
    return receiver.documentElement;
  },
  get$domain: function(receiver) {
    return receiver.domain;
  },
  get$firstElementChild: function(receiver) {
    return receiver.firstElementChild;
  },
  get$fontloader: function(receiver) {
    return receiver.fontloader;
  },
  get$$$dom_head: function(receiver) {
    return receiver.head;
  },
  get$implementation: function(receiver) {
    return receiver.implementation;
  },
  get$lastElementChild: function(receiver) {
    return receiver.lastElementChild;
  },
  get$$$dom_lastModified: function(receiver) {
    return receiver.lastModified;
  },
  get$$$dom_preferredStylesheetSet: function(receiver) {
    return receiver.preferredStylesheetSet;
  },
  get$readyState: function(receiver) {
    return receiver.readyState;
  },
  get$$$dom_referrer: function(receiver) {
    return receiver.referrer;
  },
  get$securityPolicy: function(receiver) {
    return receiver.securityPolicy;
  },
  get$$$dom_selectedStylesheetSet: function(receiver) {
    return receiver.selectedStylesheetSet;
  },
  set$$$dom_selectedStylesheetSet: function(receiver, v) {
    receiver.selectedStylesheetSet = v;
  },
  get$$$dom_styleSheets: function(receiver) {
    return receiver.styleSheets;
  },
  get$$$dom_title: function(receiver) {
    return receiver.title;
  },
  set$$$dom_title: function(receiver, v) {
    receiver.title = v;
  },
  get$$$dom_webkitFullscreenElement: function(receiver) {
    return receiver.webkitFullscreenElement;
  },
  get$$$dom_webkitFullscreenEnabled: function(receiver) {
    return receiver.webkitFullscreenEnabled;
  },
  get$$$dom_webkitHidden: function(receiver) {
    return receiver.webkitHidden;
  },
  get$$$dom_webkitIsFullScreen: function(receiver) {
    return receiver.webkitIsFullScreen;
  },
  get$$$dom_webkitPointerLockElement: function(receiver) {
    return receiver.webkitPointerLockElement;
  },
  get$$$dom_webkitVisibilityState: function(receiver) {
    return receiver.webkitVisibilityState;
  },
  get$window: function(receiver) {
    return $._convertNativeToDart_Window(receiver.defaultView);
  },
  get$onChange: function(receiver) {
    var t1 = new $._EventStream(receiver, $.EventStreamProvider_change._eventType, false);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  "@get$onChange": function() {
    return [$.DomName_0kY, $.Type_cOY];
  },
  get$onClick: function(receiver) {
    var t1 = new $._EventStream(receiver, $.EventStreamProvider_click._eventType, false);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  "@get$onClick": function() {
    return [$.DomName_gvY, $.Type_cOY];
  },
  get$onKeyPress: function(receiver) {
    var t1 = new $._EventStream(receiver, $.EventStreamProvider_keypress._eventType, false);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  "@get$onKeyPress": function() {
    return [$.DomName_wsa, $.Type_cOY];
  }
};

$$.DocumentFragment = {
  "": function DocumentFragment() {
    throw "Called unused constructor";
  },
  "super": "Node",
  get$_liblib3$_children: function(receiver) {
    return receiver._children;
  },
  set$_liblib3$_children: function(receiver, v) {
    receiver._children = v;
  },
  get$childElementCount: function(receiver) {
    return receiver.childElementCount;
  },
  get$firstElementChild: function(receiver) {
    return receiver.firstElementChild;
  },
  get$lastElementChild: function(receiver) {
    return receiver.lastElementChild;
  },
  get$children: function(receiver) {
    var t1;
    if (receiver._children == null) {
      t1 = new $.FilteredElementList(receiver, new $._ChildNodeListLazy(receiver));
      t1.$builtinTypeInfo = [null];
      receiver._children = t1;
    }
    return receiver._children;
  },
  set$children: function(receiver, value) {
    var copy, t1, children;
    copy = $.List_List$from(value, true, null);
    if (receiver._children == null) {
      t1 = new $.FilteredElementList(receiver, new $._ChildNodeListLazy(receiver));
      t1.$builtinTypeInfo = [null];
      receiver._children = t1;
    }
    children = receiver._children;
    t1 = $.getInterceptor$ax(children);
    t1.clear$0(children);
    t1.addAll$1(children, copy);
  },
  get$innerHtml: function(receiver) {
    var e, t1;
    e = document.createElement("div");
    t1 = $.getInterceptor$x(e);
    t1.append$1(e, this.clone$1(receiver, true));
    return t1.get$innerHtml(e);
  },
  innerHtml$1: function($receiver, arg0) {
    return this.get$innerHtml($receiver).call$1(arg0);
  },
  set$innerHtml: function(receiver, value) {
    var e, t1, t2;
    new $._ChildNodeListLazy(receiver)._this.textContent = "";
    e = document.createElement("div");
    t1 = $.getInterceptor$x(e);
    t1.set$innerHtml(e, value);
    t2 = new $._ChildNodeListLazy(receiver);
    t2.addAll$1(t2, $.List_List$from(t1.get$nodes(e), false, null));
  }
};

$$.DocumentType = {
  "": function DocumentType() {
    throw "Called unused constructor";
  },
  "super": "Node"
};

$$.DomError = {
  "": function DomError() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$name: function(receiver) {
    return receiver.name;
  }
};

$$.DomException = {
  "": function DomException() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$message: function(receiver) {
    return receiver.message;
  },
  get$name: function(receiver) {
    var errorName, t1;
    errorName = receiver.name;
    if ($.Device__isWebKit == null) {
      if ($.Device__isOpera == null)
        $.Device__isOpera = $.contains$2$asx(window.navigator.userAgent, "Opera", 0);
      $.Device__isWebKit = $.Device__isOpera !== true && $.contains$2$asx(window.navigator.userAgent, "WebKit", 0) === true;
    }
    t1 = $.Device__isWebKit;
    if (t1 === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if (t1 == null) {
      if ($.Device__isOpera == null)
        $.Device__isOpera = $.contains$2$asx(window.navigator.userAgent, "Opera", 0);
      $.Device__isWebKit = $.Device__isOpera !== true && $.contains$2$asx(window.navigator.userAgent, "WebKit", 0) === true;
    }
    if ($.Device__isWebKit === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "@toString$0": function() {
    return [$.DomName_bh5, $.Type_cOY];
  }
};

$$.DomImplementation = {
  "": function DomImplementation() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.Element = {
  "": function Element() {
    throw "Called unused constructor";
  },
  "super": "Node",
  get$_xtag: function(receiver) {
    return receiver._xtag;
  },
  set$_xtag: function(receiver, v) {
    receiver._xtag = v;
  },
  get$_attributeBindings: function(receiver) {
    return receiver._attributeBindings;
  },
  set$_attributeBindings: function(receiver, v) {
    receiver._attributeBindings = v;
  },
  get$_model: function(receiver) {
    return receiver._model;
  },
  set$_model: function(receiver, v) {
    receiver._model = v;
  },
  get$_templateIterator: function(receiver) {
    return receiver._templateIterator;
  },
  set$_templateIterator: function(receiver, v) {
    receiver._templateIterator = v;
  },
  get$_templateInstanceRef: function(receiver) {
    return receiver._templateInstanceRef;
  },
  set$_templateInstanceRef: function(receiver, v) {
    receiver._templateInstanceRef = v;
  },
  get$_templateContent: function(receiver) {
    return receiver._templateContent;
  },
  set$_templateContent: function(receiver, v) {
    receiver._templateContent = v;
  },
  get$_templateIsDecorated: function(receiver) {
    return receiver._templateIsDecorated;
  },
  set$_templateIsDecorated: function(receiver, v) {
    receiver._templateIsDecorated = v;
  },
  get$contentEditable: function(receiver) {
    return receiver.contentEditable;
  },
  set$contentEditable: function(receiver, v) {
    receiver.contentEditable = v;
  },
  get$dir: function(receiver) {
    return receiver.dir;
  },
  set$dir: function(receiver, v) {
    receiver.dir = v;
  },
  get$draggable: function(receiver) {
    return receiver.draggable;
  },
  set$draggable: function(receiver, v) {
    receiver.draggable = v;
  },
  get$hidden: function(receiver) {
    return receiver.hidden;
  },
  set$hidden: function(receiver, v) {
    receiver.hidden = v;
  },
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, v) {
    receiver.id = v;
  },
  get$innerHtml: function(receiver) {
    return receiver.innerHTML;
  },
  set$innerHtml: function(receiver, v) {
    receiver.innerHTML = v;
  },
  get$isContentEditable: function(receiver) {
    return receiver.isContentEditable;
  },
  get$lang: function(receiver) {
    return receiver.lang;
  },
  set$lang: function(receiver, v) {
    receiver.lang = v;
  },
  get$outerHtml: function(receiver) {
    return receiver.outerHTML;
  },
  get$spellcheck: function(receiver) {
    return receiver.spellcheck;
  },
  set$spellcheck: function(receiver, v) {
    receiver.spellcheck = v;
  },
  get$tabIndex: function(receiver) {
    return receiver.tabIndex;
  },
  set$tabIndex: function(receiver, v) {
    receiver.tabIndex = v;
  },
  get$title: function(receiver) {
    return receiver.title;
  },
  set$title: function(receiver, v) {
    receiver.title = v;
  },
  get$translate: function(receiver) {
    return receiver.translate;
  },
  set$translate: function(receiver, v) {
    receiver.translate = v;
  },
  get$dropzone: function(receiver) {
    return receiver.webkitdropzone;
  },
  set$dropzone: function(receiver, v) {
    receiver.webkitdropzone = v;
  },
  get$$$dom_attributes: function(receiver) {
    return receiver.attributes;
  },
  get$$$dom_childElementCount: function(receiver) {
    return receiver.childElementCount;
  },
  get$$$dom_children: function(receiver) {
    return receiver.children;
  },
  get$$$dom_className: function(receiver) {
    return receiver.className;
  },
  set$$$dom_className: function(receiver, v) {
    receiver.className = v;
  },
  get$clientHeight: function(receiver) {
    return receiver.clientHeight;
  },
  get$clientLeft: function(receiver) {
    return receiver.clientLeft;
  },
  get$clientTop: function(receiver) {
    return receiver.clientTop;
  },
  get$clientWidth: function(receiver) {
    return receiver.clientWidth;
  },
  get$$$dom_firstElementChild: function(receiver) {
    return receiver.firstElementChild;
  },
  get$$$dom_lastElementChild: function(receiver) {
    return receiver.lastElementChild;
  },
  get$nextElementSibling: function(receiver) {
    return receiver.nextElementSibling;
  },
  get$offsetHeight: function(receiver) {
    return receiver.offsetHeight;
  },
  get$offsetLeft: function(receiver) {
    return receiver.offsetLeft;
  },
  get$offsetParent: function(receiver) {
    return receiver.offsetParent;
  },
  get$offsetTop: function(receiver) {
    return receiver.offsetTop;
  },
  get$offsetWidth: function(receiver) {
    return receiver.offsetWidth;
  },
  get$previousElementSibling: function(receiver) {
    return receiver.previousElementSibling;
  },
  get$scrollHeight: function(receiver) {
    return receiver.scrollHeight;
  },
  get$scrollLeft: function(receiver) {
    return receiver.scrollLeft;
  },
  set$scrollLeft: function(receiver, v) {
    receiver.scrollLeft = v;
  },
  get$scrollTop: function(receiver) {
    return receiver.scrollTop;
  },
  set$scrollTop: function(receiver, v) {
    receiver.scrollTop = v;
  },
  get$scrollWidth: function(receiver) {
    return receiver.scrollWidth;
  },
  get$style: function(receiver) {
    return receiver.style;
  },
  get$tagName: function(receiver) {
    return receiver.tagName;
  },
  get$pseudo: function(receiver) {
    return receiver.webkitPseudo;
  },
  set$pseudo: function(receiver, v) {
    receiver.webkitPseudo = v;
  },
  get$regionOverset: function(receiver) {
    return receiver.webkitRegionOverset;
  },
  get$shadowRoot: function(receiver) {
    return receiver.webkitShadowRoot;
  },
  get$attributes: function(receiver) {
    return new $._ElementAttributeMap(receiver);
  },
  get$children: function(receiver) {
    return new $._ChildrenElementList(receiver, this.get$$$dom_children(receiver));
  },
  set$children: function(receiver, value) {
    var copy, children;
    copy = $.List_List$from(value, true, null);
    children = this.get$children(receiver);
    children.clear$0(children);
    children.addAll$1(children, copy);
  },
  get$classes: function(receiver) {
    return new $._ElementCssClassSet(receiver);
  },
  get$client: function(receiver) {
    return new $.Rect(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight);
  },
  get$offset: function(receiver) {
    return new $.Rect(receiver.offsetLeft, receiver.offsetTop, receiver.offsetWidth, receiver.offsetHeight);
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  matches$1: function(receiver, selectors) {
    if (!!receiver.matches)
      return receiver.matches(selectors);
    else if (!!receiver.webkitMatchesSelector)
      return receiver.webkitMatchesSelector(selectors);
    else if (!!receiver.mozMatchesSelector)
      return receiver.mozMatchesSelector(selectors);
    else if (!!receiver.msMatchesSelector)
      return receiver.msMatchesSelector(selectors);
    throw $.wrapException(new $.UnsupportedError("Not supported on this platform"));
  },
  "@matches$1": function() {
    return [$.Type_0];
  },
  innerHtml$1: function($receiver, arg0) {
    return this.innerHTML.call$1(arg0);
  },
  focus$0: function(receiver) {
    return receiver.focus();
  },
  "@focus$0": function() {
    return [$.DomName_ad7, $.Type_cOY];
  },
  getBoundingClientRect$0: function(receiver) {
    return receiver.getBoundingClientRect();
  },
  "@getBoundingClientRect$0": function() {
    return [$.DomName_efl, $.Type_cOY];
  },
  get$onChange: function(receiver) {
    var t1 = new $._EventStream(receiver, $.EventStreamProvider_change._eventType, false);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  "@get$onChange": function() {
    return [$.DomName_Yq8, $.Type_cOY];
  },
  get$onClick: function(receiver) {
    var t1 = new $._EventStream(receiver, $.EventStreamProvider_click._eventType, false);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  "@get$onClick": function() {
    return [$.DomName_Imr, $.Type_cOY];
  },
  get$onKeyPress: function(receiver) {
    var t1 = new $._EventStream(receiver, $.EventStreamProvider_keypress._eventType, false);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  "@get$onKeyPress": function() {
    return [$.DomName_ZaB, $.Type_cOY];
  },
  $isElement: true,
  $asElement: null
};

$$.EmbedElement = {
  "": function EmbedElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$align: function(receiver) {
    return receiver.align;
  },
  set$align: function(receiver, v) {
    receiver.align = v;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  set$height: function(receiver, v) {
    receiver.height = v;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  },
  get$src: function(receiver) {
    return receiver.src;
  },
  set$src: function(receiver, v) {
    receiver.src = v;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  set$type: function(receiver, v) {
    receiver.type = v;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  set$width: function(receiver, v) {
    receiver.width = v;
  }
};

$$.Entry = {
  "": function Entry() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$filesystem: function(receiver) {
    return receiver.filesystem;
  },
  get$fullPath: function(receiver) {
    return receiver.fullPath;
  },
  get$isDirectory: function(receiver) {
    return receiver.isDirectory;
  },
  get$isFile: function(receiver) {
    return receiver.isFile;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  _remove$2: function(receiver, successCallback, errorCallback) {
    return receiver.remove($.convertDartClosureToJS(successCallback, 0), $.convertDartClosureToJS(errorCallback, 1));
  },
  "@_remove$2": function() {
    return [$.JSName_remove, $.DomName_W8O, $.Type_cOY];
  },
  "+_remove:1:1": 0,
  remove$0: function(receiver) {
    var t1, t2, completer, futureImpl;
    t1 = null;
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [t1];
    completer = new $._AsyncCompleter(t2, false);
    completer.$builtinTypeInfo = [t1];
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    this._remove$2(receiver, new $.Entry_remove_closure(completer), new $.Entry_remove_closure0(completer));
    return futureImpl;
  },
  "@remove$0": function() {
    return [$.JSName_remove, $.DomName_W8O, $.Type_cOY];
  }
};

$$.ErrorEvent = {
  "": function ErrorEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$filename: function(receiver) {
    return receiver.filename;
  },
  get$lineno: function(receiver) {
    return receiver.lineno;
  },
  get$message: function(receiver) {
    return receiver.message;
  }
};

$$.Event = {
  "": function Event() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$bubbles: function(receiver) {
    return receiver.bubbles;
  },
  get$cancelBubble: function(receiver) {
    return receiver.cancelBubble;
  },
  set$cancelBubble: function(receiver, v) {
    receiver.cancelBubble = v;
  },
  get$cancelable: function(receiver) {
    return receiver.cancelable;
  },
  get$clipboardData: function(receiver) {
    return receiver.clipboardData;
  },
  get$_get_currentTarget: function(receiver) {
    return receiver.currentTarget;
  },
  get$defaultPrevented: function(receiver) {
    return receiver.defaultPrevented;
  },
  get$eventPhase: function(receiver) {
    return receiver.eventPhase;
  },
  get$path: function(receiver) {
    return receiver.path;
  },
  get$_get_target: function(receiver) {
    return receiver.target;
  },
  get$timeStamp: function(receiver) {
    return receiver.timeStamp;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  get$currentTarget: function(receiver) {
    return $._convertNativeToDart_EventTarget(receiver.currentTarget);
  },
  get$target: function(receiver) {
    return $._convertNativeToDart_EventTarget(receiver.target);
  },
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  },
  "@preventDefault$0": function() {
    return [$.DomName_iDZ, $.Type_cOY];
  },
  stopImmediatePropagation$0: function(receiver) {
    return receiver.stopImmediatePropagation();
  },
  "@stopImmediatePropagation$0": function() {
    return [$.DomName_6L0, $.Type_cOY];
  },
  stopPropagation$0: function(receiver) {
    return receiver.stopPropagation();
  },
  "@stopPropagation$0": function() {
    return [$.DomName_EW9, $.Type_cOY];
  }
};

$$.EventException = {
  "": function EventException() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$code: function(receiver) {
    return receiver.code;
  },
  get$message: function(receiver) {
    return receiver.message;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "@toString$0": function() {
    return [$.DomName_Y6D, $.Type_cOY];
  }
};

$$.EventTarget = {
  "": function EventTarget() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$on: function(receiver) {
    return new $.Events(receiver);
  },
  "+on": 0,
  on$2: function($receiver, arg0, arg1) {
    return this.get$on($receiver).call$2(arg0, arg1);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  "@$$dom_addEventListener$3": function() {
    return [$.JSName_addEventListener, $.DomName_3uR, $.Type_cOY];
  },
  "+$dom_addEventListener:2:1": 0,
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  "@$$dom_removeEventListener$3": function() {
    return [$.JSName_removeEventListener, $.DomName_yvP, $.Type_cOY];
  },
  "+$dom_removeEventListener:2:1": 0,
  $isEventTarget: true,
  $asEventTarget: null
};

$$.FieldSetElement = {
  "": function FieldSetElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$disabled: function(receiver) {
    return receiver.disabled;
  },
  set$disabled: function(receiver, v) {
    receiver.disabled = v;
  },
  get$elements: function(receiver) {
    return receiver.elements;
  },
  get$form: function(receiver) {
    return receiver.form;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  get$validationMessage: function(receiver) {
    return receiver.validationMessage;
  },
  get$validity: function(receiver) {
    return receiver.validity;
  },
  get$willValidate: function(receiver) {
    return receiver.willValidate;
  }
};

$$.File0 = {
  "": function File() {
    throw "Called unused constructor";
  },
  "super": "Blob",
  get$_get_lastModifiedDate: function(receiver) {
    return receiver.lastModifiedDate;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  get$relativePath: function(receiver) {
    return receiver.webkitRelativePath;
  },
  $isFile0: true,
  $asFile0: null
};

$$.FileEntry = {
  "": function FileEntry() {
    throw "Called unused constructor";
  },
  "super": "Entry"
};

$$.FileError = {
  "": function FileError() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$code: function(receiver) {
    return receiver.code;
  }
};

$$.FileException = {
  "": function FileException() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$code: function(receiver) {
    return receiver.code;
  },
  get$message: function(receiver) {
    return receiver.message;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "@toString$0": function() {
    return [$.DomName_dCN, $.Type_cOY];
  }
};

$$.FocusEvent = {
  "": function FocusEvent() {
    throw "Called unused constructor";
  },
  "super": "UIEvent",
  get$_get_relatedTarget: function(receiver) {
    return receiver.relatedTarget;
  }
};

$$.FormElement = {
  "": function FormElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$acceptCharset: function(receiver) {
    return receiver.acceptCharset;
  },
  set$acceptCharset: function(receiver, v) {
    receiver.acceptCharset = v;
  },
  get$action: function(receiver) {
    return receiver.action;
  },
  set$action: function(receiver, v) {
    receiver.action = v;
  },
  get$autocomplete: function(receiver) {
    return receiver.autocomplete;
  },
  set$autocomplete: function(receiver, v) {
    receiver.autocomplete = v;
  },
  get$encoding: function(receiver) {
    return receiver.encoding;
  },
  set$encoding: function(receiver, v) {
    receiver.encoding = v;
  },
  get$enctype: function(receiver) {
    return receiver.enctype;
  },
  set$enctype: function(receiver, v) {
    receiver.enctype = v;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  get$method: function(receiver) {
    return receiver.method;
  },
  set$method: function(receiver, v) {
    receiver.method = v;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  },
  get$noValidate: function(receiver) {
    return receiver.noValidate;
  },
  set$noValidate: function(receiver, v) {
    receiver.noValidate = v;
  },
  get$target: function(receiver) {
    return receiver.target;
  },
  set$target: function(receiver, v) {
    receiver.target = v;
  }
};

$$.HRElement = {
  "": function HRElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement"
};

$$.HashChangeEvent = {
  "": function HashChangeEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$newUrl: function(receiver) {
    return receiver.newURL;
  },
  get$oldUrl: function(receiver) {
    return receiver.oldURL;
  }
};

$$.HeadElement = {
  "": function HeadElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement"
};

$$.HeadingElement = {
  "": function HeadingElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement"
};

$$.HtmlCollection = {
  "": function HtmlCollection() {
    throw "Called unused constructor";
  },
  "super": "Interceptor_ListMixin_ImmutableListMixin",
  get$length: function(receiver) {
    return receiver.length;
  },
  "@get$length": function() {
    return [$.DomName_nxd, $.Type_cOY];
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException(new $.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw $.wrapException(new $.StateError("No elements"));
    throw $.wrapException(new $.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {
  "": function HtmlDocument() {
    throw "Called unused constructor";
  },
  "super": "Document",
  get$activeElement: function(receiver) {
    return receiver.activeElement;
  },
  get$body: function(receiver) {
    return receiver.body;
  },
  set$body: function(receiver, v) {
    receiver.body = v;
  },
  get$_templateContentsOwner: function(receiver) {
    return receiver._templateContentsOwner;
  },
  set$_templateContentsOwner: function(receiver, v) {
    receiver._templateContentsOwner = v;
  }
};

$$.HtmlElement0 = {
  "": function HtmlElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement"
};

$$.HtmlFormControlsCollection = {
  "": function HtmlFormControlsCollection() {
    throw "Called unused constructor";
  },
  "super": "HtmlCollection"
};

$$.HtmlOptionsCollection = {
  "": function HtmlOptionsCollection() {
    throw "Called unused constructor";
  },
  "super": "HtmlCollection"
};

$$.HttpRequest = {
  "": function HttpRequest() {
    throw "Called unused constructor";
  },
  "super": "EventTarget",
  get$readyState: function(receiver) {
    return receiver.readyState;
  },
  get$response: function(receiver) {
    return receiver.response;
  },
  get$responseText: function(receiver) {
    return receiver.responseText;
  },
  get$responseType: function(receiver) {
    return receiver.responseType;
  },
  set$responseType: function(receiver, v) {
    receiver.responseType = v;
  },
  get$responseXml: function(receiver) {
    return receiver.responseXML;
  },
  get$status: function(receiver) {
    return receiver.status;
  },
  get$statusText: function(receiver) {
    return receiver.statusText;
  },
  get$upload: function(receiver) {
    return receiver.upload;
  },
  get$withCredentials: function(receiver) {
    return receiver.withCredentials;
  },
  set$withCredentials: function(receiver, v) {
    receiver.withCredentials = v;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  "@$$dom_addEventListener$3": function() {
    return [$.JSName_addEventListener, $.DomName_FZB, $.Type_cOY];
  },
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method, url, async, user, password);
  },
  "@open$5$async$password$user": function() {
    return [$.DomName_skV, $.Type_cOY];
  },
  "+open:2:3": 0,
  open$3$async: function($receiver, method, url, async) {
    return $receiver.open(method, url, async);
  },
  "+open:3:0": 0,
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  "@$$dom_removeEventListener$3": function() {
    return [$.JSName_removeEventListener, $.DomName_AKW, $.Type_cOY];
  }
};

$$.HttpRequestProgressEvent = {
  "": function HttpRequestProgressEvent() {
    throw "Called unused constructor";
  },
  "super": "ProgressEvent",
  get$position: function(receiver) {
    return receiver.position;
  },
  get$totalSize: function(receiver) {
    return receiver.totalSize;
  }
};

$$.IFrameElement = {
  "": function IFrameElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$_get_contentWindow: function(receiver) {
    return receiver.contentWindow;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  set$height: function(receiver, v) {
    receiver.height = v;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  },
  get$sandbox: function(receiver) {
    return receiver.sandbox;
  },
  set$sandbox: function(receiver, v) {
    receiver.sandbox = v;
  },
  get$seamless: function(receiver) {
    return receiver.seamless;
  },
  set$seamless: function(receiver, v) {
    receiver.seamless = v;
  },
  get$src: function(receiver) {
    return receiver.src;
  },
  set$src: function(receiver, v) {
    receiver.src = v;
  },
  get$srcdoc: function(receiver) {
    return receiver.srcdoc;
  },
  set$srcdoc: function(receiver, v) {
    receiver.srcdoc = v;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  set$width: function(receiver, v) {
    receiver.width = v;
  }
};

$$.ImageElement = {
  "": function ImageElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$alt: function(receiver) {
    return receiver.alt;
  },
  set$alt: function(receiver, v) {
    receiver.alt = v;
  },
  get$border: function(receiver) {
    return receiver.border;
  },
  set$border: function(receiver, v) {
    receiver.border = v;
  },
  get$complete: function(receiver) {
    return receiver.complete;
  },
  get$crossOrigin: function(receiver) {
    return receiver.crossOrigin;
  },
  set$crossOrigin: function(receiver, v) {
    receiver.crossOrigin = v;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  set$height: function(receiver, v) {
    receiver.height = v;
  },
  get$isMap: function(receiver) {
    return receiver.isMap;
  },
  set$isMap: function(receiver, v) {
    receiver.isMap = v;
  },
  get$lowsrc: function(receiver) {
    return receiver.lowsrc;
  },
  set$lowsrc: function(receiver, v) {
    receiver.lowsrc = v;
  },
  get$naturalHeight: function(receiver) {
    return receiver.naturalHeight;
  },
  get$naturalWidth: function(receiver) {
    return receiver.naturalWidth;
  },
  get$src: function(receiver) {
    return receiver.src;
  },
  set$src: function(receiver, v) {
    receiver.src = v;
  },
  get$useMap: function(receiver) {
    return receiver.useMap;
  },
  set$useMap: function(receiver, v) {
    receiver.useMap = v;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  set$width: function(receiver, v) {
    receiver.width = v;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  },
  $isImageElement: true,
  $asImageElement: null
};

$$.InputElement = {
  "": function InputElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$_valueBinding: function(receiver) {
    return receiver._valueBinding;
  },
  set$_valueBinding: function(receiver, v) {
    receiver._valueBinding = v;
  },
  get$_checkedBinding: function(receiver) {
    return receiver._checkedBinding;
  },
  set$_checkedBinding: function(receiver, v) {
    receiver._checkedBinding = v;
  },
  get$accept: function(receiver) {
    return receiver.accept;
  },
  set$accept: function(receiver, v) {
    receiver.accept = v;
  },
  get$alt: function(receiver) {
    return receiver.alt;
  },
  set$alt: function(receiver, v) {
    receiver.alt = v;
  },
  get$autocomplete: function(receiver) {
    return receiver.autocomplete;
  },
  set$autocomplete: function(receiver, v) {
    receiver.autocomplete = v;
  },
  get$autofocus: function(receiver) {
    return receiver.autofocus;
  },
  set$autofocus: function(receiver, v) {
    receiver.autofocus = v;
  },
  get$checked: function(receiver) {
    return receiver.checked;
  },
  set$checked: function(receiver, v) {
    receiver.checked = v;
  },
  get$defaultChecked: function(receiver) {
    return receiver.defaultChecked;
  },
  set$defaultChecked: function(receiver, v) {
    receiver.defaultChecked = v;
  },
  get$defaultValue: function(receiver) {
    return receiver.defaultValue;
  },
  set$defaultValue: function(receiver, v) {
    receiver.defaultValue = v;
  },
  get$dirName: function(receiver) {
    return receiver.dirName;
  },
  set$dirName: function(receiver, v) {
    receiver.dirName = v;
  },
  get$disabled: function(receiver) {
    return receiver.disabled;
  },
  set$disabled: function(receiver, v) {
    receiver.disabled = v;
  },
  get$files: function(receiver) {
    return receiver.files;
  },
  set$files: function(receiver, v) {
    receiver.files = v;
  },
  get$form: function(receiver) {
    return receiver.form;
  },
  get$formAction: function(receiver) {
    return receiver.formAction;
  },
  set$formAction: function(receiver, v) {
    receiver.formAction = v;
  },
  get$formEnctype: function(receiver) {
    return receiver.formEnctype;
  },
  set$formEnctype: function(receiver, v) {
    receiver.formEnctype = v;
  },
  get$formMethod: function(receiver) {
    return receiver.formMethod;
  },
  set$formMethod: function(receiver, v) {
    receiver.formMethod = v;
  },
  get$formNoValidate: function(receiver) {
    return receiver.formNoValidate;
  },
  set$formNoValidate: function(receiver, v) {
    receiver.formNoValidate = v;
  },
  get$formTarget: function(receiver) {
    return receiver.formTarget;
  },
  set$formTarget: function(receiver, v) {
    receiver.formTarget = v;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  set$height: function(receiver, v) {
    receiver.height = v;
  },
  get$incremental: function(receiver) {
    return receiver.incremental;
  },
  set$incremental: function(receiver, v) {
    receiver.incremental = v;
  },
  get$indeterminate: function(receiver) {
    return receiver.indeterminate;
  },
  set$indeterminate: function(receiver, v) {
    receiver.indeterminate = v;
  },
  get$labels: function(receiver) {
    return receiver.labels;
  },
  get$list: function(receiver) {
    return receiver.list;
  },
  get$max: function(receiver) {
    return receiver.max;
  },
  set$max: function(receiver, v) {
    receiver.max = v;
  },
  get$maxLength: function(receiver) {
    return receiver.maxLength;
  },
  set$maxLength: function(receiver, v) {
    receiver.maxLength = v;
  },
  get$min: function(receiver) {
    return receiver.min;
  },
  set$min: function(receiver, v) {
    receiver.min = v;
  },
  get$multiple: function(receiver) {
    return receiver.multiple;
  },
  set$multiple: function(receiver, v) {
    receiver.multiple = v;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  },
  get$pattern: function(receiver) {
    return receiver.pattern;
  },
  set$pattern: function(receiver, v) {
    receiver.pattern = v;
  },
  get$placeholder: function(receiver) {
    return receiver.placeholder;
  },
  set$placeholder: function(receiver, v) {
    receiver.placeholder = v;
  },
  get$readOnly: function(receiver) {
    return receiver.readOnly;
  },
  set$readOnly: function(receiver, v) {
    receiver.readOnly = v;
  },
  get$required: function(receiver) {
    return receiver.required;
  },
  set$required: function(receiver, v) {
    receiver.required = v;
  },
  get$selectionDirection: function(receiver) {
    return receiver.selectionDirection;
  },
  set$selectionDirection: function(receiver, v) {
    receiver.selectionDirection = v;
  },
  get$selectionEnd: function(receiver) {
    return receiver.selectionEnd;
  },
  set$selectionEnd: function(receiver, v) {
    receiver.selectionEnd = v;
  },
  get$selectionStart: function(receiver) {
    return receiver.selectionStart;
  },
  set$selectionStart: function(receiver, v) {
    receiver.selectionStart = v;
  },
  get$size: function(receiver) {
    return receiver.size;
  },
  set$size: function(receiver, v) {
    receiver.size = v;
  },
  get$src: function(receiver) {
    return receiver.src;
  },
  set$src: function(receiver, v) {
    receiver.src = v;
  },
  get$step: function(receiver) {
    return receiver.step;
  },
  set$step: function(receiver, v) {
    receiver.step = v;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  set$type: function(receiver, v) {
    receiver.type = v;
  },
  get$useMap: function(receiver) {
    return receiver.useMap;
  },
  set$useMap: function(receiver, v) {
    receiver.useMap = v;
  },
  get$validationMessage: function(receiver) {
    return receiver.validationMessage;
  },
  get$validity: function(receiver) {
    return receiver.validity;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  },
  get$_get_valueAsDate: function(receiver) {
    return receiver.valueAsDate;
  },
  get$valueAsNumber: function(receiver) {
    return receiver.valueAsNumber;
  },
  set$valueAsNumber: function(receiver, v) {
    receiver.valueAsNumber = v;
  },
  get$entries: function(receiver) {
    return receiver.webkitEntries;
  },
  get$grammar: function(receiver) {
    return receiver.webkitGrammar;
  },
  set$grammar: function(receiver, v) {
    receiver.webkitGrammar = v;
  },
  get$speech: function(receiver) {
    return receiver.webkitSpeech;
  },
  set$speech: function(receiver, v) {
    receiver.webkitSpeech = v;
  },
  get$directory: function(receiver) {
    return receiver.webkitdirectory;
  },
  set$directory: function(receiver, v) {
    receiver.webkitdirectory = v;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  set$width: function(receiver, v) {
    receiver.width = v;
  },
  get$willValidate: function(receiver) {
    return receiver.willValidate;
  },
  accept$1: function($receiver, arg0) {
    return this.accept.call$1(arg0);
  },
  setSelectionRange$3: function(receiver, start, end, direction) {
    return receiver.setSelectionRange(start, end, direction);
  },
  "@setSelectionRange$3": function() {
    return [$.DomName_2rX, $.Type_cOY];
  },
  setSelectionRange$2: function($receiver, start, end) {
    return $receiver.setSelectionRange(start, end);
  },
  $isInputElement: true,
  $asInputElement: null,
  $isElement: true,
  $asElement: null,
  $isNode: true,
  $asNode: null,
  $isEventTarget: true,
  $asEventTarget: null
};

$$.KeyboardEvent = {
  "": function KeyboardEvent() {
    throw "Called unused constructor";
  },
  "super": "UIEvent",
  get$altGraphKey: function(receiver) {
    return receiver.altGraphKey;
  },
  get$altKey: function(receiver) {
    return receiver.altKey;
  },
  get$ctrlKey: function(receiver) {
    return receiver.ctrlKey;
  },
  get$$$dom_keyIdentifier: function(receiver) {
    return receiver.keyIdentifier;
  },
  get$keyLocation: function(receiver) {
    return receiver.keyLocation;
  },
  get$metaKey: function(receiver) {
    return receiver.metaKey;
  },
  get$shiftKey: function(receiver) {
    return receiver.shiftKey;
  },
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  },
  "@get$keyCode": function() {
    return [$.DomName_gg4];
  }
};

$$.KeygenElement = {
  "": function KeygenElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$autofocus: function(receiver) {
    return receiver.autofocus;
  },
  set$autofocus: function(receiver, v) {
    receiver.autofocus = v;
  },
  get$challenge: function(receiver) {
    return receiver.challenge;
  },
  set$challenge: function(receiver, v) {
    receiver.challenge = v;
  },
  get$disabled: function(receiver) {
    return receiver.disabled;
  },
  set$disabled: function(receiver, v) {
    receiver.disabled = v;
  },
  get$form: function(receiver) {
    return receiver.form;
  },
  get$keytype: function(receiver) {
    return receiver.keytype;
  },
  set$keytype: function(receiver, v) {
    receiver.keytype = v;
  },
  get$labels: function(receiver) {
    return receiver.labels;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  get$validationMessage: function(receiver) {
    return receiver.validationMessage;
  },
  get$validity: function(receiver) {
    return receiver.validity;
  },
  get$willValidate: function(receiver) {
    return receiver.willValidate;
  }
};

$$.LIElement = {
  "": function LIElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$type: function(receiver) {
    return receiver.type;
  },
  set$type: function(receiver, v) {
    receiver.type = v;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$.LabelElement = {
  "": function LabelElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$control: function(receiver) {
    return receiver.control;
  },
  get$form: function(receiver) {
    return receiver.form;
  },
  get$htmlFor: function(receiver) {
    return receiver.htmlFor;
  },
  set$htmlFor: function(receiver, v) {
    receiver.htmlFor = v;
  }
};

$$.LegendElement = {
  "": function LegendElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$form: function(receiver) {
    return receiver.form;
  }
};

$$.LinkElement = {
  "": function LinkElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$disabled: function(receiver) {
    return receiver.disabled;
  },
  set$disabled: function(receiver, v) {
    receiver.disabled = v;
  },
  get$href: function(receiver) {
    return receiver.href;
  },
  set$href: function(receiver, v) {
    receiver.href = v;
  },
  get$hreflang: function(receiver) {
    return receiver.hreflang;
  },
  set$hreflang: function(receiver, v) {
    receiver.hreflang = v;
  },
  get$$import: function(receiver) {
    return receiver.import;
  },
  get$media: function(receiver) {
    return receiver.media;
  },
  set$media: function(receiver, v) {
    receiver.media = v;
  },
  get$rel: function(receiver) {
    return receiver.rel;
  },
  set$rel: function(receiver, v) {
    receiver.rel = v;
  },
  get$sheet: function(receiver) {
    return receiver.sheet;
  },
  get$sizes: function(receiver) {
    return receiver.sizes;
  },
  set$sizes: function(receiver, v) {
    receiver.sizes = v;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  set$type: function(receiver, v) {
    receiver.type = v;
  },
  $isLinkElement: true,
  $asLinkElement: null
};

$$.MapElement = {
  "": function MapElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$areas: function(receiver) {
    return receiver.areas;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  }
};

$$.MediaElement = {
  "": function MediaElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$autoplay: function(receiver) {
    return receiver.autoplay;
  },
  set$autoplay: function(receiver, v) {
    receiver.autoplay = v;
  },
  get$buffered: function(receiver) {
    return receiver.buffered;
  },
  get$controller: function(receiver) {
    return receiver.controller;
  },
  set$controller: function(receiver, v) {
    receiver.controller = v;
  },
  get$controls: function(receiver) {
    return receiver.controls;
  },
  set$controls: function(receiver, v) {
    receiver.controls = v;
  },
  get$currentSrc: function(receiver) {
    return receiver.currentSrc;
  },
  get$currentTime: function(receiver) {
    return receiver.currentTime;
  },
  set$currentTime: function(receiver, v) {
    receiver.currentTime = v;
  },
  get$defaultMuted: function(receiver) {
    return receiver.defaultMuted;
  },
  set$defaultMuted: function(receiver, v) {
    receiver.defaultMuted = v;
  },
  get$defaultPlaybackRate: function(receiver) {
    return receiver.defaultPlaybackRate;
  },
  set$defaultPlaybackRate: function(receiver, v) {
    receiver.defaultPlaybackRate = v;
  },
  get$duration: function(receiver) {
    return receiver.duration;
  },
  get$ended: function(receiver) {
    return receiver.ended;
  },
  get$error: function(receiver) {
    return receiver.error;
  },
  get$initialTime: function(receiver) {
    return receiver.initialTime;
  },
  get$loop: function(receiver) {
    return receiver.loop;
  },
  set$loop: function(receiver, v) {
    receiver.loop = v;
  },
  get$mediaGroup: function(receiver) {
    return receiver.mediaGroup;
  },
  set$mediaGroup: function(receiver, v) {
    receiver.mediaGroup = v;
  },
  get$mediaKeys: function(receiver) {
    return receiver.mediaKeys;
  },
  set$mediaKeys: function(receiver, v) {
    receiver.mediaKeys = v;
  },
  get$muted: function(receiver) {
    return receiver.muted;
  },
  set$muted: function(receiver, v) {
    receiver.muted = v;
  },
  get$networkState: function(receiver) {
    return receiver.networkState;
  },
  get$paused: function(receiver) {
    return receiver.paused;
  },
  get$playbackRate: function(receiver) {
    return receiver.playbackRate;
  },
  set$playbackRate: function(receiver, v) {
    receiver.playbackRate = v;
  },
  get$played: function(receiver) {
    return receiver.played;
  },
  get$preload: function(receiver) {
    return receiver.preload;
  },
  set$preload: function(receiver, v) {
    receiver.preload = v;
  },
  get$readyState: function(receiver) {
    return receiver.readyState;
  },
  get$seekable: function(receiver) {
    return receiver.seekable;
  },
  get$seeking: function(receiver) {
    return receiver.seeking;
  },
  get$src: function(receiver) {
    return receiver.src;
  },
  set$src: function(receiver, v) {
    receiver.src = v;
  },
  get$startTime: function(receiver) {
    return receiver.startTime;
  },
  get$textTracks: function(receiver) {
    return receiver.textTracks;
  },
  get$volume: function(receiver) {
    return receiver.volume;
  },
  set$volume: function(receiver, v) {
    receiver.volume = v;
  },
  get$audioDecodedByteCount: function(receiver) {
    return receiver.webkitAudioDecodedByteCount;
  },
  get$closedCaptionsVisible: function(receiver) {
    return receiver.webkitClosedCaptionsVisible;
  },
  set$closedCaptionsVisible: function(receiver, v) {
    receiver.webkitClosedCaptionsVisible = v;
  },
  get$hasClosedCaptions: function(receiver) {
    return receiver.webkitHasClosedCaptions;
  },
  get$preservesPitch: function(receiver) {
    return receiver.webkitPreservesPitch;
  },
  set$preservesPitch: function(receiver, v) {
    receiver.webkitPreservesPitch = v;
  },
  get$videoDecodedByteCount: function(receiver) {
    return receiver.webkitVideoDecodedByteCount;
  },
  error$2: function($receiver, arg0, arg1) {
    return this.error.call$2(arg0, arg1);
  }
};

$$.MediaError = {
  "": function MediaError() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$code: function(receiver) {
    return receiver.code;
  }
};

$$.MediaKeyError = {
  "": function MediaKeyError() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$code: function(receiver) {
    return receiver.code;
  },
  get$systemCode: function(receiver) {
    return receiver.systemCode;
  }
};

$$.MediaKeyEvent = {
  "": function MediaKeyEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$defaultUrl: function(receiver) {
    return receiver.defaultURL;
  },
  get$errorCode: function(receiver) {
    return receiver.errorCode;
  },
  get$initData: function(receiver) {
    return receiver.initData;
  },
  get$keySystem: function(receiver) {
    return receiver.keySystem;
  },
  get$message: function(receiver) {
    return receiver.message;
  },
  get$sessionId: function(receiver) {
    return receiver.sessionId;
  },
  get$systemCode: function(receiver) {
    return receiver.systemCode;
  }
};

$$.MediaKeyMessageEvent = {
  "": function MediaKeyMessageEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$destinationUrl: function(receiver) {
    return receiver.destinationURL;
  },
  get$message: function(receiver) {
    return receiver.message;
  }
};

$$.MediaKeyNeededEvent = {
  "": function MediaKeyNeededEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$initData: function(receiver) {
    return receiver.initData;
  }
};

$$.MediaStream = {
  "": function MediaStream() {
    throw "Called unused constructor";
  },
  "super": "EventTarget",
  get$ended: function(receiver) {
    return receiver.ended;
  },
  get$id: function(receiver) {
    return receiver.id;
  },
  get$label: function(receiver) {
    return receiver.label;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  "@$$dom_addEventListener$3": function() {
    return [$.JSName_addEventListener, $.DomName_C04, $.Type_cOY];
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  "@$$dom_removeEventListener$3": function() {
    return [$.JSName_removeEventListener, $.DomName_ylU, $.Type_cOY];
  }
};

$$.MediaStreamEvent = {
  "": function MediaStreamEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$stream: function(receiver) {
    return receiver.stream;
  }
};

$$.MediaStreamTrackEvent = {
  "": function MediaStreamTrackEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$track: function(receiver) {
    return receiver.track;
  }
};

$$.MenuElement = {
  "": function MenuElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement"
};

$$.MessageEvent = {
  "": function MessageEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$_get_data: function(receiver) {
    return receiver.data;
  },
  get$lastEventId: function(receiver) {
    return receiver.lastEventId;
  },
  get$origin: function(receiver) {
    return receiver.origin;
  },
  get$ports: function(receiver) {
    return receiver.ports;
  },
  get$_get_source: function(receiver) {
    return receiver.source;
  },
  get$source: function(receiver) {
    return $._convertNativeToDart_Window(receiver.source);
  }
};

$$.MetaElement = {
  "": function MetaElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$content: function(receiver) {
    return receiver.content;
  },
  set$content: function(receiver, v) {
    receiver.content = v;
  },
  get$httpEquiv: function(receiver) {
    return receiver.httpEquiv;
  },
  set$httpEquiv: function(receiver, v) {
    receiver.httpEquiv = v;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  }
};

$$.MeterElement = {
  "": function MeterElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$high: function(receiver) {
    return receiver.high;
  },
  set$high: function(receiver, v) {
    receiver.high = v;
  },
  get$labels: function(receiver) {
    return receiver.labels;
  },
  get$low: function(receiver) {
    return receiver.low;
  },
  set$low: function(receiver, v) {
    receiver.low = v;
  },
  get$max: function(receiver) {
    return receiver.max;
  },
  set$max: function(receiver, v) {
    receiver.max = v;
  },
  get$min: function(receiver) {
    return receiver.min;
  },
  set$min: function(receiver, v) {
    receiver.min = v;
  },
  get$optimum: function(receiver) {
    return receiver.optimum;
  },
  set$optimum: function(receiver, v) {
    receiver.optimum = v;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$.MidiConnectionEvent = {
  "": function MidiConnectionEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$port: function(receiver) {
    return receiver.port;
  }
};

$$.MidiMessageEvent = {
  "": function MidiMessageEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$data: function(receiver) {
    return receiver.data;
  },
  get$receivedTime: function(receiver) {
    return receiver.receivedTime;
  }
};

$$.ModElement = {
  "": function ModElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$cite: function(receiver) {
    return receiver.cite;
  },
  set$cite: function(receiver, v) {
    receiver.cite = v;
  },
  get$dateTime: function(receiver) {
    return receiver.dateTime;
  },
  set$dateTime: function(receiver, v) {
    receiver.dateTime = v;
  }
};

$$.MouseEvent = {
  "": function MouseEvent() {
    throw "Called unused constructor";
  },
  "super": "UIEvent",
  get$altKey: function(receiver) {
    return receiver.altKey;
  },
  get$button: function(receiver) {
    return receiver.button;
  },
  get$$$dom_clientX: function(receiver) {
    return receiver.clientX;
  },
  get$$$dom_clientY: function(receiver) {
    return receiver.clientY;
  },
  get$ctrlKey: function(receiver) {
    return receiver.ctrlKey;
  },
  get$dataTransfer: function(receiver) {
    return receiver.dataTransfer;
  },
  get$fromElement: function(receiver) {
    return receiver.fromElement;
  },
  get$metaKey: function(receiver) {
    return receiver.metaKey;
  },
  get$_get_relatedTarget: function(receiver) {
    return receiver.relatedTarget;
  },
  get$$$dom_screenX: function(receiver) {
    return receiver.screenX;
  },
  get$$$dom_screenY: function(receiver) {
    return receiver.screenY;
  },
  get$shiftKey: function(receiver) {
    return receiver.shiftKey;
  },
  get$toElement: function(receiver) {
    return receiver.toElement;
  },
  get$$$dom_webkitMovementX: function(receiver) {
    return receiver.webkitMovementX;
  },
  get$$$dom_webkitMovementY: function(receiver) {
    return receiver.webkitMovementY;
  },
  get$client: function(receiver) {
    return new $.Point(receiver.clientX, receiver.clientY);
  },
  "@get$client": function() {
    return [$.DomName_ASw, $.DomName_ASw0];
  },
  get$offset: function(receiver) {
    var t1, t2, t3, t4, t5;
    if (!!receiver.offsetX)
      return new $.Point(receiver.offsetX, receiver.offsetY);
    else {
      t1 = $._convertNativeToDart_EventTarget(receiver.target);
      if (typeof t1 !== "object" || t1 === null || !$.getInterceptor(t1).$isElement)
        throw $.wrapException(new $.UnsupportedError("offsetX is only supported on elements"));
      t1 = new $.Point(receiver.clientX, receiver.clientY);
      t2 = $.get$topLeft$x($.getBoundingClientRect$0$x($._convertNativeToDart_EventTarget(receiver.target)));
      t3 = t1.x;
      if (typeof t3 !== "number")
        return this.get$offset$bailout(1, t1, t3, t2);
      t4 = $.getInterceptor$x(t2);
      t5 = t4.get$x(t2);
      if (typeof t5 !== "number")
        return this.get$offset$bailout(2, t1, t3, t2, t5, t4);
      t5 = t3 - t5;
      t1 = t1.y;
      if (typeof t1 !== "number")
        return this.get$offset$bailout(3, t1, 0, t2, t5, t4);
      t2 = t4.get$y(t2);
      if (typeof t2 !== "number")
        return this.get$offset$bailout(4, t1, 0, t2, t5);
      t2 = new $.Point(t5, t1 - t2);
      return new $.Point($.toInt$0$nx(t2.x), $.toInt$0$nx(t2.y));
    }
  },
  get$offset$bailout: function(state0, t1, t3, t2, t5, t4) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 0 && !!receiver.offsetX)
          return new $.Point(receiver.offsetX, receiver.offsetY);
        else
          switch (state0) {
            case 0:
              t1 = $._convertNativeToDart_EventTarget(receiver.target);
              if (typeof t1 !== "object" || t1 === null || !$.getInterceptor(t1).$isElement)
                throw $.wrapException(new $.UnsupportedError("offsetX is only supported on elements"));
              t1 = new $.Point(receiver.clientX, receiver.clientY);
              t2 = $.get$topLeft$x($.getBoundingClientRect$0$x($._convertNativeToDart_EventTarget(receiver.target)));
              t3 = t1.x;
            case 1:
              state0 = 0;
              t4 = $.getInterceptor$x(t2);
              t5 = t4.get$x(t2);
            case 2:
              state0 = 0;
              t5 = $.$sub$n(t3, t5);
              t1 = t1.y;
            case 3:
              state0 = 0;
              t2 = t4.get$y(t2);
            case 4:
              state0 = 0;
              t2 = new $.Point(t5, $.$sub$n(t1, t2));
              return new $.Point($.toInt$0$nx(t2.x), $.toInt$0$nx(t2.y));
          }
    }
  }
};

$$.MutationEvent = {
  "": function MutationEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$attrChange: function(receiver) {
    return receiver.attrChange;
  },
  get$attrName: function(receiver) {
    return receiver.attrName;
  },
  get$newValue: function(receiver) {
    return receiver.newValue;
  },
  get$prevValue: function(receiver) {
    return receiver.prevValue;
  },
  get$relatedNode: function(receiver) {
    return receiver.relatedNode;
  }
};

$$.MutationObserver = {
  "": function MutationObserver() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  observe$8$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$subtree: function(receiver, target, attributeFilter, attributeOldValue, attributes, characterData, characterDataOldValue, childList, subtree) {
    var parsedOptions, t1;
    parsedOptions = {};
    t1 = new $.MutationObserver_observe_override(parsedOptions);
    t1.call$2("childList", childList);
    t1.call$2("attributes", attributes);
    t1.call$2("characterData", characterData);
    t1.call$2("subtree", subtree);
    t1.call$2("attributeOldValue", attributeOldValue);
    t1.call$2("characterDataOldValue", characterDataOldValue);
    receiver.observe(target, parsedOptions);
  },
  "+observe:1:7": 0,
  observe$2$attributes: function($receiver, target, attributes) {
    return this.observe$8$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$subtree($receiver, target, null, null, attributes, null, null, null, null);
  },
  "+observe:2:0": 0
};

$$.MutationRecord = {
  "": function MutationRecord() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$addedNodes: function(receiver) {
    return receiver.addedNodes;
  },
  get$attributeName: function(receiver) {
    return receiver.attributeName;
  },
  get$attributeNamespace: function(receiver) {
    return receiver.attributeNamespace;
  },
  get$nextSibling: function(receiver) {
    return receiver.nextSibling;
  },
  get$oldValue: function(receiver) {
    return receiver.oldValue;
  },
  get$previousSibling: function(receiver) {
    return receiver.previousSibling;
  },
  get$removedNodes: function(receiver) {
    return receiver.removedNodes;
  },
  get$target: function(receiver) {
    return receiver.target;
  },
  get$type: function(receiver) {
    return receiver.type;
  }
};

$$.Navigator = {
  "": function Navigator() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$appCodeName: function(receiver) {
    return receiver.appCodeName;
  },
  get$appName: function(receiver) {
    return receiver.appName;
  },
  get$appVersion: function(receiver) {
    return receiver.appVersion;
  },
  get$cookieEnabled: function(receiver) {
    return receiver.cookieEnabled;
  },
  get$doNotTrack: function(receiver) {
    return receiver.doNotTrack;
  },
  get$geolocation: function(receiver) {
    return receiver.geolocation;
  },
  get$mimeTypes: function(receiver) {
    return receiver.mimeTypes;
  },
  get$onLine: function(receiver) {
    return receiver.onLine;
  },
  get$platform: function(receiver) {
    return receiver.platform;
  },
  get$plugins: function(receiver) {
    return receiver.plugins;
  },
  get$product: function(receiver) {
    return receiver.product;
  },
  get$productSub: function(receiver) {
    return receiver.productSub;
  },
  get$userAgent: function(receiver) {
    return receiver.userAgent;
  },
  get$vendor: function(receiver) {
    return receiver.vendor;
  },
  get$vendorSub: function(receiver) {
    return receiver.vendorSub;
  },
  get$persistentStorage: function(receiver) {
    return receiver.webkitPersistentStorage;
  },
  get$temporaryStorage: function(receiver) {
    return receiver.webkitTemporaryStorage;
  }
};

$$.NavigatorUserMediaError = {
  "": function NavigatorUserMediaError() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$constraintName: function(receiver) {
    return receiver.constraintName;
  },
  get$message: function(receiver) {
    return receiver.message;
  },
  get$name: function(receiver) {
    return receiver.name;
  }
};

$$.Node = {
  "": function Node() {
    throw "Called unused constructor";
  },
  "super": "EventTarget",
  get$_templateInstance: function(receiver) {
    return receiver._templateInstance;
  },
  set$_templateInstance: function(receiver, v) {
    receiver._templateInstance = v;
  },
  get$$$dom_childNodes: function(receiver) {
    return receiver.childNodes;
  },
  get$$$dom_firstChild: function(receiver) {
    return receiver.firstChild;
  },
  get$$$dom_lastChild: function(receiver) {
    return receiver.lastChild;
  },
  get$$$dom_localName: function(receiver) {
    return receiver.localName;
  },
  get$$$dom_namespaceUri: function(receiver) {
    return receiver.namespaceURI;
  },
  get$nextNode: function(receiver) {
    return receiver.nextSibling;
  },
  get$nodeType: function(receiver) {
    return receiver.nodeType;
  },
  get$nodeValue: function(receiver) {
    return receiver.nodeValue;
  },
  get$document: function(receiver) {
    return receiver.ownerDocument;
  },
  get$parent: function(receiver) {
    return receiver.parentElement;
  },
  get$parentNode: function(receiver) {
    return receiver.parentNode;
  },
  get$previousNode: function(receiver) {
    return receiver.previousSibling;
  },
  get$text: function(receiver) {
    return receiver.textContent;
  },
  set$text: function(receiver, v) {
    receiver.textContent = v;
  },
  get$nodes: function(receiver) {
    return new $._ChildNodeListLazy(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  "@remove$0": function() {
    return [$.DomName_465];
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  "@replaceWith$1": function() {
    return [$.DomName_jiZ];
  },
  insertAllBefore$2: function(receiver, newNodes, refChild) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(newNodes, newNodes.$asJSArray, 0);
    t2 = new $.ListIterator(newNodes, newNodes.length, 0, null);
    t2.$builtinTypeInfo = [t1];
    for (; t2.moveNext$0();)
      receiver.insertBefore(t2._liblib$_current, refChild);
  },
  "+insertAllBefore:2:0": 0,
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? $.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  text$1: function($receiver, arg0) {
    return this.textContent.call$1(arg0);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  "@$$dom_addEventListener$3": function() {
    return [$.JSName_addEventListener, $.DomName_kWO, $.Type_cOY];
  },
  append$1: function(receiver, newChild) {
    return receiver.appendChild(newChild);
  },
  "@append$1": function() {
    return [$.JSName_appendChild, $.DomName_KuA, $.Type_cOY];
  },
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  "@clone$1": function() {
    return [$.JSName_cloneNode, $.DomName_YZQ, $.Type_cOY];
  },
  "+clone:1:0": 0,
  contains$1: function(receiver, other) {
    return receiver.contains(other);
  },
  "@contains$1": function() {
    return [$.DomName_nAM, $.Type_cOY];
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  "@$$dom_removeEventListener$3": function() {
    return [$.JSName_removeEventListener, $.DomName_4650, $.Type_cOY];
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  "@$$dom_replaceChild$2": function() {
    return [$.JSName_replaceChild, $.DomName_jiZ, $.Type_cOY];
  },
  $isNode: true,
  $asNode: null
};

$$.NodeList0 = {
  "": function NodeList() {
    throw "Called unused constructor";
  },
  "super": "Interceptor_ListMixin_ImmutableListMixin0",
  get$length: function(receiver) {
    return receiver.length;
  },
  "@get$length": function() {
    return [$.DomName_CWk, $.Type_cOY];
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException(new $.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw $.wrapException(new $.StateError("No elements"));
    throw $.wrapException(new $.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Notation = {
  "": function Notation() {
    throw "Called unused constructor";
  },
  "super": "Node",
  get$publicId: function(receiver) {
    return receiver.publicId;
  },
  get$systemId: function(receiver) {
    return receiver.systemId;
  }
};

$$.OListElement = {
  "": function OListElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$reversed: function(receiver) {
    return receiver.reversed;
  },
  set$reversed: function(receiver, v) {
    receiver.reversed = v;
  },
  get$start: function(receiver) {
    return receiver.start;
  },
  set$start: function(receiver, v) {
    receiver.start = v;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  set$type: function(receiver, v) {
    receiver.type = v;
  }
};

$$.ObjectElement = {
  "": function ObjectElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$code: function(receiver) {
    return receiver.code;
  },
  set$code: function(receiver, v) {
    receiver.code = v;
  },
  get$data: function(receiver) {
    return receiver.data;
  },
  set$data: function(receiver, v) {
    receiver.data = v;
  },
  get$form: function(receiver) {
    return receiver.form;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  set$height: function(receiver, v) {
    receiver.height = v;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  set$type: function(receiver, v) {
    receiver.type = v;
  },
  get$useMap: function(receiver) {
    return receiver.useMap;
  },
  set$useMap: function(receiver, v) {
    receiver.useMap = v;
  },
  get$validationMessage: function(receiver) {
    return receiver.validationMessage;
  },
  get$validity: function(receiver) {
    return receiver.validity;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  set$width: function(receiver, v) {
    receiver.width = v;
  },
  get$willValidate: function(receiver) {
    return receiver.willValidate;
  }
};

$$.OptGroupElement = {
  "": function OptGroupElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$disabled: function(receiver) {
    return receiver.disabled;
  },
  set$disabled: function(receiver, v) {
    receiver.disabled = v;
  },
  get$label: function(receiver) {
    return receiver.label;
  },
  set$label: function(receiver, v) {
    receiver.label = v;
  }
};

$$.OptionElement = {
  "": function OptionElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$defaultSelected: function(receiver) {
    return receiver.defaultSelected;
  },
  set$defaultSelected: function(receiver, v) {
    receiver.defaultSelected = v;
  },
  get$disabled: function(receiver) {
    return receiver.disabled;
  },
  set$disabled: function(receiver, v) {
    receiver.disabled = v;
  },
  get$form: function(receiver) {
    return receiver.form;
  },
  get$index: function(receiver) {
    return receiver.index;
  },
  get$label: function(receiver) {
    return receiver.label;
  },
  set$label: function(receiver, v) {
    receiver.label = v;
  },
  get$selected: function(receiver) {
    return receiver.selected;
  },
  set$selected: function(receiver, v) {
    receiver.selected = v;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$.OutputElement = {
  "": function OutputElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$defaultValue: function(receiver) {
    return receiver.defaultValue;
  },
  set$defaultValue: function(receiver, v) {
    receiver.defaultValue = v;
  },
  get$form: function(receiver) {
    return receiver.form;
  },
  get$htmlFor: function(receiver) {
    return receiver.htmlFor;
  },
  get$labels: function(receiver) {
    return receiver.labels;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  get$validationMessage: function(receiver) {
    return receiver.validationMessage;
  },
  get$validity: function(receiver) {
    return receiver.validity;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  },
  get$willValidate: function(receiver) {
    return receiver.willValidate;
  }
};

$$.OverflowEvent = {
  "": function OverflowEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$horizontalOverflow: function(receiver) {
    return receiver.horizontalOverflow;
  },
  get$orient: function(receiver) {
    return receiver.orient;
  },
  get$verticalOverflow: function(receiver) {
    return receiver.verticalOverflow;
  }
};

$$.PageTransitionEvent = {
  "": function PageTransitionEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$persisted: function(receiver) {
    return receiver.persisted;
  }
};

$$.ParagraphElement = {
  "": function ParagraphElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement"
};

$$.ParamElement = {
  "": function ParamElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$.PopStateEvent = {
  "": function PopStateEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$_get_state: function(receiver) {
    return receiver.state;
  }
};

$$.PositionError = {
  "": function PositionError() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$code: function(receiver) {
    return receiver.code;
  },
  get$message: function(receiver) {
    return receiver.message;
  }
};

$$.PreElement = {
  "": function PreElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$wrap: function(receiver) {
    return receiver.wrap;
  },
  set$wrap: function(receiver, v) {
    receiver.wrap = v;
  }
};

$$.ProcessingInstruction = {
  "": function ProcessingInstruction() {
    throw "Called unused constructor";
  },
  "super": "Node",
  get$data: function(receiver) {
    return receiver.data;
  },
  set$data: function(receiver, v) {
    receiver.data = v;
  },
  get$sheet: function(receiver) {
    return receiver.sheet;
  },
  get$target: function(receiver) {
    return receiver.target;
  }
};

$$.ProgressElement = {
  "": function ProgressElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$labels: function(receiver) {
    return receiver.labels;
  },
  get$max: function(receiver) {
    return receiver.max;
  },
  set$max: function(receiver, v) {
    receiver.max = v;
  },
  get$position: function(receiver) {
    return receiver.position;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$.ProgressEvent = {
  "": function ProgressEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$lengthComputable: function(receiver) {
    return receiver.lengthComputable;
  },
  get$loaded: function(receiver) {
    return receiver.loaded;
  },
  get$total: function(receiver) {
    return receiver.total;
  }
};

$$.QuoteElement = {
  "": function QuoteElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$cite: function(receiver) {
    return receiver.cite;
  },
  set$cite: function(receiver, v) {
    receiver.cite = v;
  }
};

$$.ResourceProgressEvent = {
  "": function ResourceProgressEvent() {
    throw "Called unused constructor";
  },
  "super": "ProgressEvent",
  get$url: function(receiver) {
    return receiver.url;
  }
};

$$.RtcDataChannelEvent = {
  "": function RtcDataChannelEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$channel: function(receiver) {
    return receiver.channel;
  }
};

$$.RtcDtmfToneChangeEvent = {
  "": function RtcDtmfToneChangeEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$tone: function(receiver) {
    return receiver.tone;
  }
};

$$.RtcIceCandidateEvent = {
  "": function RtcIceCandidateEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$candidate: function(receiver) {
    return receiver.candidate;
  }
};

$$.ScriptElement = {
  "": function ScriptElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$async: function(receiver) {
    return receiver.async;
  },
  set$async: function(receiver, v) {
    receiver.async = v;
  },
  get$charset: function(receiver) {
    return receiver.charset;
  },
  set$charset: function(receiver, v) {
    receiver.charset = v;
  },
  get$crossOrigin: function(receiver) {
    return receiver.crossOrigin;
  },
  set$crossOrigin: function(receiver, v) {
    receiver.crossOrigin = v;
  },
  get$defer: function(receiver) {
    return receiver.defer;
  },
  set$defer: function(receiver, v) {
    receiver.defer = v;
  },
  get$event: function(receiver) {
    return receiver.event;
  },
  set$event: function(receiver, v) {
    receiver.event = v;
  },
  get$htmlFor: function(receiver) {
    return receiver.htmlFor;
  },
  set$htmlFor: function(receiver, v) {
    receiver.htmlFor = v;
  },
  get$nonce: function(receiver) {
    return receiver.nonce;
  },
  set$nonce: function(receiver, v) {
    receiver.nonce = v;
  },
  get$src: function(receiver) {
    return receiver.src;
  },
  set$src: function(receiver, v) {
    receiver.src = v;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  set$type: function(receiver, v) {
    receiver.type = v;
  }
};

$$.SecurityPolicyViolationEvent = {
  "": function SecurityPolicyViolationEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$blockedUri: function(receiver) {
    return receiver.blockedURI;
  },
  get$columnNumber: function(receiver) {
    return receiver.columnNumber;
  },
  get$documentUri: function(receiver) {
    return receiver.documentURI;
  },
  get$effectiveDirective: function(receiver) {
    return receiver.effectiveDirective;
  },
  get$lineNumber: function(receiver) {
    return receiver.lineNumber;
  },
  get$originalPolicy: function(receiver) {
    return receiver.originalPolicy;
  },
  get$referrer: function(receiver) {
    return receiver.referrer;
  },
  get$sourceFile: function(receiver) {
    return receiver.sourceFile;
  },
  get$violatedDirective: function(receiver) {
    return receiver.violatedDirective;
  }
};

$$.SelectElement = {
  "": function SelectElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$autofocus: function(receiver) {
    return receiver.autofocus;
  },
  set$autofocus: function(receiver, v) {
    receiver.autofocus = v;
  },
  get$disabled: function(receiver) {
    return receiver.disabled;
  },
  set$disabled: function(receiver, v) {
    receiver.disabled = v;
  },
  get$form: function(receiver) {
    return receiver.form;
  },
  get$labels: function(receiver) {
    return receiver.labels;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, v) {
    receiver.length = v;
  },
  get$multiple: function(receiver) {
    return receiver.multiple;
  },
  set$multiple: function(receiver, v) {
    receiver.multiple = v;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  },
  get$required: function(receiver) {
    return receiver.required;
  },
  set$required: function(receiver, v) {
    receiver.required = v;
  },
  get$selectedIndex: function(receiver) {
    return receiver.selectedIndex;
  },
  set$selectedIndex: function(receiver, v) {
    receiver.selectedIndex = v;
  },
  get$size: function(receiver) {
    return receiver.size;
  },
  set$size: function(receiver, v) {
    receiver.size = v;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  get$validationMessage: function(receiver) {
    return receiver.validationMessage;
  },
  get$validity: function(receiver) {
    return receiver.validity;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  },
  get$willValidate: function(receiver) {
    return receiver.willValidate;
  },
  $isSelectElement: true,
  $asSelectElement: null
};

$$.Selection0 = {
  "": function Selection() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$anchorNode: function(receiver) {
    return receiver.anchorNode;
  },
  get$anchorOffset: function(receiver) {
    return receiver.anchorOffset;
  },
  get$baseNode: function(receiver) {
    return receiver.baseNode;
  },
  get$baseOffset: function(receiver) {
    return receiver.baseOffset;
  },
  get$extentNode: function(receiver) {
    return receiver.extentNode;
  },
  get$extentOffset: function(receiver) {
    return receiver.extentOffset;
  },
  get$focusNode: function(receiver) {
    return receiver.focusNode;
  },
  get$focusOffset: function(receiver) {
    return receiver.focusOffset;
  },
  get$isCollapsed: function(receiver) {
    return receiver.isCollapsed;
  },
  get$rangeCount: function(receiver) {
    return receiver.rangeCount;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "@toString$0": function() {
    return [$.DomName_jnr, $.Type_cOY];
  }
};

$$.ShadowElement = {
  "": function ShadowElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$olderShadowRoot: function(receiver) {
    return receiver.olderShadowRoot;
  },
  get$resetStyleInheritance: function(receiver) {
    return receiver.resetStyleInheritance;
  },
  set$resetStyleInheritance: function(receiver, v) {
    receiver.resetStyleInheritance = v;
  }
};

$$.ShadowRoot = {
  "": function ShadowRoot() {
    throw "Called unused constructor";
  },
  "super": "DocumentFragment",
  get$activeElement: function(receiver) {
    return receiver.activeElement;
  },
  get$applyAuthorStyles: function(receiver) {
    return receiver.applyAuthorStyles;
  },
  set$applyAuthorStyles: function(receiver, v) {
    receiver.applyAuthorStyles = v;
  },
  get$innerHtml: function(receiver) {
    return receiver.innerHTML;
  },
  set$innerHtml: function(receiver, v) {
    receiver.innerHTML = v;
  },
  get$resetStyleInheritance: function(receiver) {
    return receiver.resetStyleInheritance;
  },
  set$resetStyleInheritance: function(receiver, v) {
    receiver.resetStyleInheritance = v;
  },
  innerHtml$1: function($receiver, arg0) {
    return this.innerHTML.call$1(arg0);
  },
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  "@clone$1": function() {
    return [$.JSName_cloneNode, $.DomName_b1T, $.Type_cOY];
  },
  getSelection$0: function(receiver) {
    return receiver.getSelection();
  },
  "@getSelection$0": function() {
    return [$.DomName_yPV, $.Type_cOY];
  }
};

$$.SourceElement = {
  "": function SourceElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$media: function(receiver) {
    return receiver.media;
  },
  set$media: function(receiver, v) {
    receiver.media = v;
  },
  get$src: function(receiver) {
    return receiver.src;
  },
  set$src: function(receiver, v) {
    receiver.src = v;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  set$type: function(receiver, v) {
    receiver.type = v;
  }
};

$$.SpanElement = {
  "": function SpanElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement"
};

$$.SpeechInputEvent = {
  "": function SpeechInputEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$results: function(receiver) {
    return receiver.results;
  }
};

$$.SpeechRecognitionError = {
  "": function SpeechRecognitionError() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$error: function(receiver) {
    return receiver.error;
  },
  get$message: function(receiver) {
    return receiver.message;
  },
  error$2: function($receiver, arg0, arg1) {
    return this.error.call$2(arg0, arg1);
  }
};

$$.SpeechRecognitionEvent = {
  "": function SpeechRecognitionEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$emma: function(receiver) {
    return receiver.emma;
  },
  get$interpretation: function(receiver) {
    return receiver.interpretation;
  },
  get$resultIndex: function(receiver) {
    return receiver.resultIndex;
  },
  get$results: function(receiver) {
    return receiver.results;
  }
};

$$.SpeechSynthesisEvent = {
  "": function SpeechSynthesisEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$charIndex: function(receiver) {
    return receiver.charIndex;
  },
  get$elapsedTime: function(receiver) {
    return receiver.elapsedTime;
  },
  get$name: function(receiver) {
    return receiver.name;
  }
};

$$.StorageEvent = {
  "": function StorageEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$key: function(receiver) {
    return receiver.key;
  },
  get$newValue: function(receiver) {
    return receiver.newValue;
  },
  get$oldValue: function(receiver) {
    return receiver.oldValue;
  },
  get$storageArea: function(receiver) {
    return receiver.storageArea;
  },
  get$url: function(receiver) {
    return receiver.url;
  }
};

$$.StyleElement = {
  "": function StyleElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$disabled: function(receiver) {
    return receiver.disabled;
  },
  set$disabled: function(receiver, v) {
    receiver.disabled = v;
  },
  get$media: function(receiver) {
    return receiver.media;
  },
  set$media: function(receiver, v) {
    receiver.media = v;
  },
  get$scoped: function(receiver) {
    return receiver.scoped;
  },
  set$scoped: function(receiver, v) {
    receiver.scoped = v;
  },
  get$sheet: function(receiver) {
    return receiver.sheet;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  set$type: function(receiver, v) {
    receiver.type = v;
  }
};

$$.TableCaptionElement = {
  "": function TableCaptionElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement"
};

$$.TableCellElement = {
  "": function TableCellElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$cellIndex: function(receiver) {
    return receiver.cellIndex;
  },
  get$colSpan: function(receiver) {
    return receiver.colSpan;
  },
  set$colSpan: function(receiver, v) {
    receiver.colSpan = v;
  },
  get$headers: function(receiver) {
    return receiver.headers;
  },
  set$headers: function(receiver, v) {
    receiver.headers = v;
  },
  get$rowSpan: function(receiver) {
    return receiver.rowSpan;
  },
  set$rowSpan: function(receiver, v) {
    receiver.rowSpan = v;
  }
};

$$.TableColElement = {
  "": function TableColElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$span: function(receiver) {
    return receiver.span;
  },
  set$span: function(receiver, v) {
    receiver.span = v;
  }
};

$$.TableElement = {
  "": function TableElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$border: function(receiver) {
    return receiver.border;
  },
  set$border: function(receiver, v) {
    receiver.border = v;
  },
  get$caption: function(receiver) {
    return receiver.caption;
  },
  set$caption: function(receiver, v) {
    receiver.caption = v;
  },
  get$$$dom_rows: function(receiver) {
    return receiver.rows;
  },
  get$$$dom_tBodies: function(receiver) {
    return receiver.tBodies;
  },
  get$tFoot: function(receiver) {
    return receiver.tFoot;
  },
  set$tFoot: function(receiver, v) {
    receiver.tFoot = v;
  },
  get$tHead: function(receiver) {
    return receiver.tHead;
  },
  set$tHead: function(receiver, v) {
    receiver.tHead = v;
  }
};

$$.TableRowElement = {
  "": function TableRowElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$$$dom_cells: function(receiver) {
    return receiver.cells;
  },
  get$rowIndex: function(receiver) {
    return receiver.rowIndex;
  },
  get$sectionRowIndex: function(receiver) {
    return receiver.sectionRowIndex;
  }
};

$$.TableSectionElement = {
  "": function TableSectionElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$$$dom_rows: function(receiver) {
    return receiver.rows;
  }
};

$$.TemplateElement = {
  "": function TemplateElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$$$dom_content: function(receiver) {
    return receiver.content;
  }
};

$$.Text = {
  "": function Text() {
    throw "Called unused constructor";
  },
  "super": "CharacterData",
  get$wholeText: function(receiver) {
    return receiver.wholeText;
  },
  get$_textBinding: function(receiver) {
    return receiver._textBinding;
  },
  set$_textBinding: function(receiver, v) {
    receiver._textBinding = v;
  }
};

$$.TextAreaElement = {
  "": function TextAreaElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$autofocus: function(receiver) {
    return receiver.autofocus;
  },
  set$autofocus: function(receiver, v) {
    receiver.autofocus = v;
  },
  get$cols: function(receiver) {
    return receiver.cols;
  },
  set$cols: function(receiver, v) {
    receiver.cols = v;
  },
  get$defaultValue: function(receiver) {
    return receiver.defaultValue;
  },
  set$defaultValue: function(receiver, v) {
    receiver.defaultValue = v;
  },
  get$dirName: function(receiver) {
    return receiver.dirName;
  },
  set$dirName: function(receiver, v) {
    receiver.dirName = v;
  },
  get$disabled: function(receiver) {
    return receiver.disabled;
  },
  set$disabled: function(receiver, v) {
    receiver.disabled = v;
  },
  get$form: function(receiver) {
    return receiver.form;
  },
  get$labels: function(receiver) {
    return receiver.labels;
  },
  get$maxLength: function(receiver) {
    return receiver.maxLength;
  },
  set$maxLength: function(receiver, v) {
    receiver.maxLength = v;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  },
  get$placeholder: function(receiver) {
    return receiver.placeholder;
  },
  set$placeholder: function(receiver, v) {
    receiver.placeholder = v;
  },
  get$readOnly: function(receiver) {
    return receiver.readOnly;
  },
  set$readOnly: function(receiver, v) {
    receiver.readOnly = v;
  },
  get$required: function(receiver) {
    return receiver.required;
  },
  set$required: function(receiver, v) {
    receiver.required = v;
  },
  get$rows: function(receiver) {
    return receiver.rows;
  },
  set$rows: function(receiver, v) {
    receiver.rows = v;
  },
  get$selectionDirection: function(receiver) {
    return receiver.selectionDirection;
  },
  set$selectionDirection: function(receiver, v) {
    receiver.selectionDirection = v;
  },
  get$selectionEnd: function(receiver) {
    return receiver.selectionEnd;
  },
  set$selectionEnd: function(receiver, v) {
    receiver.selectionEnd = v;
  },
  get$selectionStart: function(receiver) {
    return receiver.selectionStart;
  },
  set$selectionStart: function(receiver, v) {
    receiver.selectionStart = v;
  },
  get$textLength: function(receiver) {
    return receiver.textLength;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  get$validationMessage: function(receiver) {
    return receiver.validationMessage;
  },
  get$validity: function(receiver) {
    return receiver.validity;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  },
  get$willValidate: function(receiver) {
    return receiver.willValidate;
  },
  get$wrap: function(receiver) {
    return receiver.wrap;
  },
  set$wrap: function(receiver, v) {
    receiver.wrap = v;
  },
  setSelectionRange$3: function(receiver, start, end, direction) {
    return receiver.setSelectionRange(start, end, direction);
  },
  "@setSelectionRange$3": function() {
    return [$.DomName_YUp, $.Type_cOY];
  },
  setSelectionRange$2: function($receiver, start, end) {
    return $receiver.setSelectionRange(start, end);
  }
};

$$.TextEvent = {
  "": function TextEvent() {
    throw "Called unused constructor";
  },
  "super": "UIEvent",
  get$data: function(receiver) {
    return receiver.data;
  }
};

$$.TitleElement = {
  "": function TitleElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement"
};

$$.TouchEvent = {
  "": function TouchEvent() {
    throw "Called unused constructor";
  },
  "super": "UIEvent",
  get$altKey: function(receiver) {
    return receiver.altKey;
  },
  get$changedTouches: function(receiver) {
    return receiver.changedTouches;
  },
  get$ctrlKey: function(receiver) {
    return receiver.ctrlKey;
  },
  get$metaKey: function(receiver) {
    return receiver.metaKey;
  },
  get$shiftKey: function(receiver) {
    return receiver.shiftKey;
  },
  get$targetTouches: function(receiver) {
    return receiver.targetTouches;
  },
  get$touches: function(receiver) {
    return receiver.touches;
  }
};

$$.TrackElement = {
  "": function TrackElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement",
  get$defaultValue: function(receiver) {
    return receiver.default;
  },
  set$defaultValue: function(receiver, v) {
    receiver.default = v;
  },
  get$kind: function(receiver) {
    return receiver.kind;
  },
  set$kind: function(receiver, v) {
    receiver.kind = v;
  },
  get$label: function(receiver) {
    return receiver.label;
  },
  set$label: function(receiver, v) {
    receiver.label = v;
  },
  get$readyState: function(receiver) {
    return receiver.readyState;
  },
  get$src: function(receiver) {
    return receiver.src;
  },
  set$src: function(receiver, v) {
    receiver.src = v;
  },
  get$srclang: function(receiver) {
    return receiver.srclang;
  },
  set$srclang: function(receiver, v) {
    receiver.srclang = v;
  },
  get$track: function(receiver) {
    return receiver.track;
  }
};

$$.TrackEvent = {
  "": function TrackEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$track: function(receiver) {
    return receiver.track;
  }
};

$$.TransitionEvent = {
  "": function TransitionEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$elapsedTime: function(receiver) {
    return receiver.elapsedTime;
  },
  get$propertyName: function(receiver) {
    return receiver.propertyName;
  },
  get$pseudoElement: function(receiver) {
    return receiver.pseudoElement;
  }
};

$$.UIEvent = {
  "": function UIEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$$$dom_charCode: function(receiver) {
    return receiver.charCode;
  },
  get$detail: function(receiver) {
    return receiver.detail;
  },
  get$$$dom_keyCode: function(receiver) {
    return receiver.keyCode;
  },
  get$$$dom_layerX: function(receiver) {
    return receiver.layerX;
  },
  get$$$dom_layerY: function(receiver) {
    return receiver.layerY;
  },
  get$$$dom_pageX: function(receiver) {
    return receiver.pageX;
  },
  get$$$dom_pageY: function(receiver) {
    return receiver.pageY;
  },
  get$_get_view: function(receiver) {
    return receiver.view;
  },
  get$which: function(receiver) {
    return receiver.which;
  }
};

$$.UListElement = {
  "": function UListElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement"
};

$$.UnknownElement = {
  "": function UnknownElement() {
    throw "Called unused constructor";
  },
  "super": "_HTMLElement"
};

$$.VideoElement = {
  "": function VideoElement() {
    throw "Called unused constructor";
  },
  "super": "MediaElement",
  get$height: function(receiver) {
    return receiver.height;
  },
  set$height: function(receiver, v) {
    receiver.height = v;
  },
  get$poster: function(receiver) {
    return receiver.poster;
  },
  set$poster: function(receiver, v) {
    receiver.poster = v;
  },
  get$videoHeight: function(receiver) {
    return receiver.videoHeight;
  },
  get$videoWidth: function(receiver) {
    return receiver.videoWidth;
  },
  get$decodedFrameCount: function(receiver) {
    return receiver.webkitDecodedFrameCount;
  },
  get$displayingFullscreen: function(receiver) {
    return receiver.webkitDisplayingFullscreen;
  },
  get$droppedFrameCount: function(receiver) {
    return receiver.webkitDroppedFrameCount;
  },
  get$supportsFullscreen: function(receiver) {
    return receiver.webkitSupportsFullscreen;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  set$width: function(receiver, v) {
    receiver.width = v;
  }
};

$$.WheelEvent = {
  "": function WheelEvent() {
    throw "Called unused constructor";
  },
  "super": "MouseEvent",
  get$directionInvertedFromDevice: function(receiver) {
    return receiver.webkitDirectionInvertedFromDevice;
  }
};

$$.Window = {
  "": function Window() {
    throw "Called unused constructor";
  },
  "super": "EventTarget",
  get$_location_wrapper: function(receiver) {
    return receiver._location_wrapper;
  },
  set$_location_wrapper: function(receiver, v) {
    receiver._location_wrapper = v;
  },
  get$css: function(receiver) {
    return receiver.CSS;
  },
  get$applicationCache: function(receiver) {
    return receiver.applicationCache;
  },
  get$closed: function(receiver) {
    return receiver.closed;
  },
  get$crypto: function(receiver) {
    return receiver.crypto;
  },
  get$defaultStatus: function(receiver) {
    return receiver.defaultStatus;
  },
  set$defaultStatus: function(receiver, v) {
    receiver.defaultStatus = v;
  },
  get$defaultstatus: function(receiver) {
    return receiver.defaultstatus;
  },
  set$defaultstatus: function(receiver, v) {
    receiver.defaultstatus = v;
  },
  get$devicePixelRatio: function(receiver) {
    return receiver.devicePixelRatio;
  },
  get$event: function(receiver) {
    return receiver.event;
  },
  get$history: function(receiver) {
    return receiver.history;
  },
  get$innerHeight: function(receiver) {
    return receiver.innerHeight;
  },
  get$innerWidth: function(receiver) {
    return receiver.innerWidth;
  },
  get$localStorage: function(receiver) {
    return receiver.localStorage;
  },
  get$locationbar: function(receiver) {
    return receiver.locationbar;
  },
  get$menubar: function(receiver) {
    return receiver.menubar;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  set$name: function(receiver, v) {
    receiver.name = v;
  },
  get$navigator: function(receiver) {
    return receiver.navigator;
  },
  get$offscreenBuffering: function(receiver) {
    return receiver.offscreenBuffering;
  },
  get$_get_opener: function(receiver) {
    return receiver.opener;
  },
  get$outerHeight: function(receiver) {
    return receiver.outerHeight;
  },
  get$outerWidth: function(receiver) {
    return receiver.outerWidth;
  },
  get$pageXOffset: function(receiver) {
    return receiver.pageXOffset;
  },
  get$pageYOffset: function(receiver) {
    return receiver.pageYOffset;
  },
  get$_get_parent: function(receiver) {
    return receiver.parent;
  },
  get$performance: function(receiver) {
    return receiver.performance;
  },
  get$personalbar: function(receiver) {
    return receiver.personalbar;
  },
  get$screen: function(receiver) {
    return receiver.screen;
  },
  get$screenLeft: function(receiver) {
    return receiver.screenLeft;
  },
  get$screenTop: function(receiver) {
    return receiver.screenTop;
  },
  get$screenX: function(receiver) {
    return receiver.screenX;
  },
  get$screenY: function(receiver) {
    return receiver.screenY;
  },
  get$scrollX: function(receiver) {
    return receiver.scrollX;
  },
  get$scrollY: function(receiver) {
    return receiver.scrollY;
  },
  get$scrollbars: function(receiver) {
    return receiver.scrollbars;
  },
  get$_get_self: function(receiver) {
    return receiver.self;
  },
  get$sessionStorage: function(receiver) {
    return receiver.sessionStorage;
  },
  get$speechSynthesis: function(receiver) {
    return receiver.speechSynthesis;
  },
  get$status: function(receiver) {
    return receiver.status;
  },
  set$status: function(receiver, v) {
    receiver.status = v;
  },
  get$statusbar: function(receiver) {
    return receiver.statusbar;
  },
  get$styleMedia: function(receiver) {
    return receiver.styleMedia;
  },
  get$toolbar: function(receiver) {
    return receiver.toolbar;
  },
  get$_get_top: function(receiver) {
    return receiver.top;
  },
  get$notifications: function(receiver) {
    return receiver.webkitNotifications;
  },
  get$storageInfo: function(receiver) {
    return receiver.webkitStorageInfo;
  },
  get$_get_window: function(receiver) {
    return receiver.window;
  },
  lookupPort$1: function(receiver, $name) {
    var t1, portStr;
    t1 = receiver.document.documentElement;
    t1.get$attributes;
    portStr = new $._ElementAttributeMap(t1)._element.getAttribute("dart-port:" + $name);
    if (portStr == null)
      return;
    return new $._JsDeserializer0(null).deserialize$1($.parse(portStr, null));
  },
  "+lookupPort:1:0": 0,
  get$document: function(receiver) {
    return receiver.document;
  },
  get$parent: function(receiver) {
    return $._convertNativeToDart_Window(receiver.parent);
  },
  get$top: function(receiver) {
    return $._convertNativeToDart_Window(receiver.top);
  },
  get$window: function(receiver) {
    return $._convertNativeToDart_Window(receiver.window);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  "@$$dom_addEventListener$3": function() {
    return [$.JSName_addEventListener, $.DomName_nMC, $.Type_cOY];
  },
  close$0: function(receiver) {
    return receiver.close();
  },
  "@close$0": function() {
    return [$.DomName_Ogs, $.Type_cOY];
  },
  getSelection$0: function(receiver) {
    return receiver.getSelection();
  },
  "@getSelection$0": function() {
    return [$.DomName_TJV, $.Type_cOY];
  },
  postMessage$3: function(receiver, message, targetOrigin, messagePorts) {
    receiver.postMessage($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin);
    return;
  },
  "@postMessage$3": function() {
    return [$.DomName_Ipg, $.Type_cOY];
  },
  "+postMessage:2:1": 0,
  postMessage$2: function($receiver, message, targetOrigin) {
    return this.postMessage$3($receiver, message, targetOrigin, null);
  },
  "+postMessage:2:0": 0,
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  "@$$dom_removeEventListener$3": function() {
    return [$.JSName_removeEventListener, $.DomName_i09, $.Type_cOY];
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "@toString$0": function() {
    return [$.DomName_AdS, $.Type_cOY];
  },
  get$onChange: function(receiver) {
    var t1 = new $._EventStream(receiver, $.EventStreamProvider_change._eventType, false);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  "@get$onChange": function() {
    return [$.DomName_efW, $.Type_cOY];
  },
  get$onClick: function(receiver) {
    var t1 = new $._EventStream(receiver, $.EventStreamProvider_click._eventType, false);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  "@get$onClick": function() {
    return [$.DomName_wKL, $.Type_cOY];
  },
  get$onKeyPress: function(receiver) {
    var t1 = new $._EventStream(receiver, $.EventStreamProvider_keypress._eventType, false);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  "@get$onKeyPress": function() {
    return [$.DomName_9Op, $.Type_cOY];
  }
};

$$.XPathException = {
  "": function XPathException() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$code: function(receiver) {
    return receiver.code;
  },
  get$message: function(receiver) {
    return receiver.message;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "@toString$0": function() {
    return [$.DomName_LyZ, $.Type_cOY];
  }
};

$$._Attr = {
  "": function _Attr() {
    throw "Called unused constructor";
  },
  "super": "Node",
  get$isId: function(receiver) {
    return receiver.isId;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  get$ownerElement: function(receiver) {
    return receiver.ownerElement;
  },
  get$specified: function(receiver) {
    return receiver.specified;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$._ClientRect = {
  "": function _ClientRect() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$bottom: function(receiver) {
    return receiver.bottom;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$left: function(receiver) {
    return receiver.left;
  },
  get$right: function(receiver) {
    return receiver.right;
  },
  get$top: function(receiver) {
    return receiver.top;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  toString$0: function(receiver) {
    return "(" + $.S(receiver.left) + ", " + $.S(receiver.top) + ", " + $.S(receiver.width) + ", " + $.S(receiver.height) + ")";
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = receiver.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = receiver.top;
      t3 = t2.get$top(other);
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = receiver.width;
        t3 = t2.get$width(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t1 = receiver.height;
          t2 = t2.get$height(other);
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  union$1: function(receiver, rect) {
    var t1, t2, t3, right, bottom, left, $top;
    t1 = receiver.left;
    t2 = receiver.width;
    if (t1 == null)
      throw t1.$add();
    if (t2 == null)
      throw $.iae(t2);
    t3 = $.getInterceptor$x(rect);
    right = $.max(t1 + t2, $.$add$ns(t3.get$left(rect), t3.get$width(rect)));
    t2 = receiver.top;
    t1 = receiver.height;
    if (t2 == null)
      throw t2.$add();
    if (t1 == null)
      throw $.iae(t1);
    bottom = $.max(t2 + t1, $.$add$ns(t3.get$top(rect), t3.get$height(rect)));
    left = $.min(receiver.left, t3.get$left(rect));
    $top = $.min(receiver.top, t3.get$top(rect));
    return new $.Rect(left, $top, right - left, bottom - $top);
  },
  toInt$0: function(receiver) {
    return new $.Rect($.toInt$0$nx(receiver.left), $.toInt$0$nx(receiver.top), $.toInt$0$nx(receiver.width), $.toInt$0$nx(receiver.height));
  },
  get$topLeft: function(receiver) {
    return new $.Point(receiver.left, receiver.top);
  },
  $isRect: true,
  $asRect: null
};

$$._Entity = {
  "": function _Entity() {
    throw "Called unused constructor";
  },
  "super": "Node",
  get$notationName: function(receiver) {
    return receiver.notationName;
  },
  get$publicId: function(receiver) {
    return receiver.publicId;
  },
  get$systemId: function(receiver) {
    return receiver.systemId;
  }
};

$$._EntryArray = {
  "": function _EntryArray() {
    throw "Called unused constructor";
  },
  "super": "Interceptor_ListMixin_ImmutableListMixin1",
  get$length: function(receiver) {
    return receiver.length;
  },
  "@get$length": function() {
    return [$.DomName_PTL, $.Type_cOY];
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException(new $.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw $.wrapException(new $.StateError("No elements"));
    throw $.wrapException(new $.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Entry]; },
  $isIterable: true,
  $asIterable: function() { return [$.Entry]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._NamedNodeMap = {
  "": function _NamedNodeMap() {
    throw "Called unused constructor";
  },
  "super": "Interceptor_ListMixin_ImmutableListMixin2",
  get$length: function(receiver) {
    return receiver.length;
  },
  "@get$length": function() {
    return [$.DomName_ASm, $.Type_cOY];
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException(new $.StateError("No elements"));
  },
  get$single: function(receiver) {
    var len = receiver.length;
    if (len === 1)
      return receiver[0];
    if (len === 0)
      throw $.wrapException(new $.StateError("No elements"));
    throw $.wrapException(new $.StateError("More than one element"));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.VersionChangeEvent = {
  "": function VersionChangeEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$newVersion: function(receiver) {
    return receiver.newVersion;
  },
  get$oldVersion: function(receiver) {
    return receiver.oldVersion;
  }
};

$$.AElement = {
  "": function AElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$target: function(receiver) {
    return receiver.target;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  },
  get$href: function(receiver) {
    return receiver.href;
  }
};

$$.AltGlyphElement = {
  "": function AltGlyphElement() {
    throw "Called unused constructor";
  },
  "super": "TextPositioningElement",
  get$format: function(receiver) {
    return receiver.format;
  },
  set$format: function(receiver, v) {
    receiver.format = v;
  },
  get$glyphRef: function(receiver) {
    return receiver.glyphRef;
  },
  set$glyphRef: function(receiver, v) {
    receiver.glyphRef = v;
  },
  get$href: function(receiver) {
    return receiver.href;
  }
};

$$.AnimateElement = {
  "": function AnimateElement() {
    throw "Called unused constructor";
  },
  "super": "AnimationElement"
};

$$.AnimateMotionElement = {
  "": function AnimateMotionElement() {
    throw "Called unused constructor";
  },
  "super": "AnimationElement"
};

$$.AnimateTransformElement = {
  "": function AnimateTransformElement() {
    throw "Called unused constructor";
  },
  "super": "AnimationElement"
};

$$.AnimatedEnumeration = {
  "": function AnimatedEnumeration() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$animVal: function(receiver) {
    return receiver.animVal;
  },
  get$baseVal: function(receiver) {
    return receiver.baseVal;
  },
  set$baseVal: function(receiver, v) {
    receiver.baseVal = v;
  }
};

$$.AnimatedLength = {
  "": function AnimatedLength() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$animVal: function(receiver) {
    return receiver.animVal;
  },
  get$baseVal: function(receiver) {
    return receiver.baseVal;
  }
};

$$.AnimatedLengthList = {
  "": function AnimatedLengthList() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$animVal: function(receiver) {
    return receiver.animVal;
  },
  get$baseVal: function(receiver) {
    return receiver.baseVal;
  }
};

$$.AnimatedNumber = {
  "": function AnimatedNumber() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$animVal: function(receiver) {
    return receiver.animVal;
  },
  get$baseVal: function(receiver) {
    return receiver.baseVal;
  },
  set$baseVal: function(receiver, v) {
    receiver.baseVal = v;
  }
};

$$.AnimatedNumberList = {
  "": function AnimatedNumberList() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$animVal: function(receiver) {
    return receiver.animVal;
  },
  get$baseVal: function(receiver) {
    return receiver.baseVal;
  }
};

$$.AnimatedString = {
  "": function AnimatedString() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$animVal: function(receiver) {
    return receiver.animVal;
  },
  get$baseVal: function(receiver) {
    return receiver.baseVal;
  },
  set$baseVal: function(receiver, v) {
    receiver.baseVal = v;
  }
};

$$.AnimationElement = {
  "": function AnimationElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement",
  get$targetElement: function(receiver) {
    return receiver.targetElement;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  }
};

$$.CircleElement = {
  "": function CircleElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$cx: function(receiver) {
    return receiver.cx;
  },
  get$cy: function(receiver) {
    return receiver.cy;
  },
  get$r: function(receiver) {
    return receiver.r;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  }
};

$$.ClipPathElement = {
  "": function ClipPathElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$clipPathUnits: function(receiver) {
    return receiver.clipPathUnits;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  }
};

$$.DefsElement = {
  "": function DefsElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  }
};

$$.DescElement = {
  "": function DescElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  }
};

$$.EllipseElement = {
  "": function EllipseElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$cx: function(receiver) {
    return receiver.cx;
  },
  get$cy: function(receiver) {
    return receiver.cy;
  },
  get$rx: function(receiver) {
    return receiver.rx;
  },
  get$ry: function(receiver) {
    return receiver.ry;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  }
};

$$.FEBlendElement = {
  "": function FEBlendElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$in1: function(receiver) {
    return receiver.in1;
  },
  get$in2: function(receiver) {
    return receiver.in2;
  },
  get$mode: function(receiver) {
    return receiver.mode;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FEColorMatrixElement = {
  "": function FEColorMatrixElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$in1: function(receiver) {
    return receiver.in1;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  get$values: function(receiver) {
    return receiver.values;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FEComponentTransferElement = {
  "": function FEComponentTransferElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$in1: function(receiver) {
    return receiver.in1;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FECompositeElement = {
  "": function FECompositeElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$in1: function(receiver) {
    return receiver.in1;
  },
  get$in2: function(receiver) {
    return receiver.in2;
  },
  get$k1: function(receiver) {
    return receiver.k1;
  },
  get$k2: function(receiver) {
    return receiver.k2;
  },
  get$k3: function(receiver) {
    return receiver.k3;
  },
  get$k4: function(receiver) {
    return receiver.k4;
  },
  get$operator: function(receiver) {
    return receiver.operator;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FEConvolveMatrixElement = {
  "": function FEConvolveMatrixElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$bias: function(receiver) {
    return receiver.bias;
  },
  get$divisor: function(receiver) {
    return receiver.divisor;
  },
  get$edgeMode: function(receiver) {
    return receiver.edgeMode;
  },
  get$in1: function(receiver) {
    return receiver.in1;
  },
  get$kernelMatrix: function(receiver) {
    return receiver.kernelMatrix;
  },
  get$kernelUnitLengthX: function(receiver) {
    return receiver.kernelUnitLengthX;
  },
  get$kernelUnitLengthY: function(receiver) {
    return receiver.kernelUnitLengthY;
  },
  get$orderX: function(receiver) {
    return receiver.orderX;
  },
  get$orderY: function(receiver) {
    return receiver.orderY;
  },
  get$preserveAlpha: function(receiver) {
    return receiver.preserveAlpha;
  },
  get$targetX: function(receiver) {
    return receiver.targetX;
  },
  get$targetY: function(receiver) {
    return receiver.targetY;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FEDiffuseLightingElement = {
  "": function FEDiffuseLightingElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$diffuseConstant: function(receiver) {
    return receiver.diffuseConstant;
  },
  get$in1: function(receiver) {
    return receiver.in1;
  },
  get$kernelUnitLengthX: function(receiver) {
    return receiver.kernelUnitLengthX;
  },
  get$kernelUnitLengthY: function(receiver) {
    return receiver.kernelUnitLengthY;
  },
  get$surfaceScale: function(receiver) {
    return receiver.surfaceScale;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FEDisplacementMapElement = {
  "": function FEDisplacementMapElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$in1: function(receiver) {
    return receiver.in1;
  },
  get$in2: function(receiver) {
    return receiver.in2;
  },
  get$scale: function(receiver) {
    return receiver.scale;
  },
  get$xChannelSelector: function(receiver) {
    return receiver.xChannelSelector;
  },
  get$yChannelSelector: function(receiver) {
    return receiver.yChannelSelector;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FEDistantLightElement = {
  "": function FEDistantLightElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement",
  get$azimuth: function(receiver) {
    return receiver.azimuth;
  },
  get$elevation: function(receiver) {
    return receiver.elevation;
  }
};

$$.FEFloodElement = {
  "": function FEFloodElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FEFuncAElement = {
  "": function FEFuncAElement() {
    throw "Called unused constructor";
  },
  "super": "_SVGComponentTransferFunctionElement"
};

$$.FEFuncBElement = {
  "": function FEFuncBElement() {
    throw "Called unused constructor";
  },
  "super": "_SVGComponentTransferFunctionElement"
};

$$.FEFuncGElement = {
  "": function FEFuncGElement() {
    throw "Called unused constructor";
  },
  "super": "_SVGComponentTransferFunctionElement"
};

$$.FEFuncRElement = {
  "": function FEFuncRElement() {
    throw "Called unused constructor";
  },
  "super": "_SVGComponentTransferFunctionElement"
};

$$.FEGaussianBlurElement = {
  "": function FEGaussianBlurElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$in1: function(receiver) {
    return receiver.in1;
  },
  get$stdDeviationX: function(receiver) {
    return receiver.stdDeviationX;
  },
  get$stdDeviationY: function(receiver) {
    return receiver.stdDeviationY;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FEImageElement = {
  "": function FEImageElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$preserveAspectRatio: function(receiver) {
    return receiver.preserveAspectRatio;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$href: function(receiver) {
    return receiver.href;
  }
};

$$.FEMergeElement = {
  "": function FEMergeElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FEMergeNodeElement = {
  "": function FEMergeNodeElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement",
  get$in1: function(receiver) {
    return receiver.in1;
  }
};

$$.FEMorphologyElement = {
  "": function FEMorphologyElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$in1: function(receiver) {
    return receiver.in1;
  },
  get$operator: function(receiver) {
    return receiver.operator;
  },
  get$radiusX: function(receiver) {
    return receiver.radiusX;
  },
  get$radiusY: function(receiver) {
    return receiver.radiusY;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FEOffsetElement = {
  "": function FEOffsetElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$dx: function(receiver) {
    return receiver.dx;
  },
  get$dy: function(receiver) {
    return receiver.dy;
  },
  get$in1: function(receiver) {
    return receiver.in1;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FEPointLightElement = {
  "": function FEPointLightElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement",
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  },
  get$z: function(receiver) {
    return receiver.z;
  }
};

$$.FESpecularLightingElement = {
  "": function FESpecularLightingElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$in1: function(receiver) {
    return receiver.in1;
  },
  get$specularConstant: function(receiver) {
    return receiver.specularConstant;
  },
  get$specularExponent: function(receiver) {
    return receiver.specularExponent;
  },
  get$surfaceScale: function(receiver) {
    return receiver.surfaceScale;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FESpotLightElement = {
  "": function FESpotLightElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement",
  get$limitingConeAngle: function(receiver) {
    return receiver.limitingConeAngle;
  },
  get$pointsAtX: function(receiver) {
    return receiver.pointsAtX;
  },
  get$pointsAtY: function(receiver) {
    return receiver.pointsAtY;
  },
  get$pointsAtZ: function(receiver) {
    return receiver.pointsAtZ;
  },
  get$specularExponent: function(receiver) {
    return receiver.specularExponent;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  },
  get$z: function(receiver) {
    return receiver.z;
  }
};

$$.FETileElement = {
  "": function FETileElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$in1: function(receiver) {
    return receiver.in1;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FETurbulenceElement = {
  "": function FETurbulenceElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$baseFrequencyX: function(receiver) {
    return receiver.baseFrequencyX;
  },
  get$baseFrequencyY: function(receiver) {
    return receiver.baseFrequencyY;
  },
  get$numOctaves: function(receiver) {
    return receiver.numOctaves;
  },
  get$seed: function(receiver) {
    return receiver.seed;
  },
  get$stitchTiles: function(receiver) {
    return receiver.stitchTiles;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$result: function(receiver) {
    return receiver.result;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.FilterElement = {
  "": function FilterElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$filterResX: function(receiver) {
    return receiver.filterResX;
  },
  get$filterResY: function(receiver) {
    return receiver.filterResY;
  },
  get$filterUnits: function(receiver) {
    return receiver.filterUnits;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$primitiveUnits: function(receiver) {
    return receiver.primitiveUnits;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$href: function(receiver) {
    return receiver.href;
  }
};

$$.ForeignObjectElement = {
  "": function ForeignObjectElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$height: function(receiver) {
    return receiver.height;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  }
};

$$.GElement = {
  "": function GElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  }
};

$$.ImageElement0 = {
  "": function ImageElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$height: function(receiver) {
    return receiver.height;
  },
  get$preserveAspectRatio: function(receiver) {
    return receiver.preserveAspectRatio;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  },
  get$href: function(receiver) {
    return receiver.href;
  }
};

$$.LineElement = {
  "": function LineElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$x1: function(receiver) {
    return receiver.x1;
  },
  get$x2: function(receiver) {
    return receiver.x2;
  },
  get$y1: function(receiver) {
    return receiver.y1;
  },
  get$y2: function(receiver) {
    return receiver.y2;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  }
};

$$.LinearGradientElement = {
  "": function LinearGradientElement() {
    throw "Called unused constructor";
  },
  "super": "_GradientElement",
  get$x1: function(receiver) {
    return receiver.x1;
  },
  get$x2: function(receiver) {
    return receiver.x2;
  },
  get$y1: function(receiver) {
    return receiver.y1;
  },
  get$y2: function(receiver) {
    return receiver.y2;
  }
};

$$.MarkerElement = {
  "": function MarkerElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$markerHeight: function(receiver) {
    return receiver.markerHeight;
  },
  get$markerUnits: function(receiver) {
    return receiver.markerUnits;
  },
  get$markerWidth: function(receiver) {
    return receiver.markerWidth;
  },
  get$orientAngle: function(receiver) {
    return receiver.orientAngle;
  },
  get$orientType: function(receiver) {
    return receiver.orientType;
  },
  get$refX: function(receiver) {
    return receiver.refX;
  },
  get$refY: function(receiver) {
    return receiver.refY;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$preserveAspectRatio: function(receiver) {
    return receiver.preserveAspectRatio;
  },
  get$viewBox: function(receiver) {
    return receiver.viewBox;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  }
};

$$.MaskElement = {
  "": function MaskElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$height: function(receiver) {
    return receiver.height;
  },
  get$maskContentUnits: function(receiver) {
    return receiver.maskContentUnits;
  },
  get$maskUnits: function(receiver) {
    return receiver.maskUnits;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  }
};

$$.MetadataElement = {
  "": function MetadataElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement"
};

$$.PathElement = {
  "": function PathElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$animatedNormalizedPathSegList: function(receiver) {
    return receiver.animatedNormalizedPathSegList;
  },
  get$animatedPathSegList: function(receiver) {
    return receiver.animatedPathSegList;
  },
  get$normalizedPathSegList: function(receiver) {
    return receiver.normalizedPathSegList;
  },
  get$pathLength: function(receiver) {
    return receiver.pathLength;
  },
  get$pathSegList: function(receiver) {
    return receiver.pathSegList;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  }
};

$$.PatternElement = {
  "": function PatternElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$height: function(receiver) {
    return receiver.height;
  },
  get$patternContentUnits: function(receiver) {
    return receiver.patternContentUnits;
  },
  get$patternTransform: function(receiver) {
    return receiver.patternTransform;
  },
  get$patternUnits: function(receiver) {
    return receiver.patternUnits;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$preserveAspectRatio: function(receiver) {
    return receiver.preserveAspectRatio;
  },
  get$viewBox: function(receiver) {
    return receiver.viewBox;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$href: function(receiver) {
    return receiver.href;
  }
};

$$.PolygonElement = {
  "": function PolygonElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$animatedPoints: function(receiver) {
    return receiver.animatedPoints;
  },
  get$points: function(receiver) {
    return receiver.points;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  }
};

$$.PolylineElement = {
  "": function PolylineElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$animatedPoints: function(receiver) {
    return receiver.animatedPoints;
  },
  get$points: function(receiver) {
    return receiver.points;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  }
};

$$.RadialGradientElement = {
  "": function RadialGradientElement() {
    throw "Called unused constructor";
  },
  "super": "_GradientElement",
  get$cx: function(receiver) {
    return receiver.cx;
  },
  get$cy: function(receiver) {
    return receiver.cy;
  },
  get$fr: function(receiver) {
    return receiver.fr;
  },
  get$fx: function(receiver) {
    return receiver.fx;
  },
  get$fy: function(receiver) {
    return receiver.fy;
  },
  get$r: function(receiver) {
    return receiver.r;
  }
};

$$.RectElement = {
  "": function RectElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$height: function(receiver) {
    return receiver.height;
  },
  get$rx: function(receiver) {
    return receiver.rx;
  },
  get$ry: function(receiver) {
    return receiver.ry;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  }
};

$$.ScriptElement0 = {
  "": function ScriptElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement",
  get$type: function(receiver) {
    return receiver.type;
  },
  set$type: function(receiver, v) {
    receiver.type = v;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$href: function(receiver) {
    return receiver.href;
  }
};

$$.SetElement = {
  "": function SetElement() {
    throw "Called unused constructor";
  },
  "super": "AnimationElement"
};

$$.StopElement = {
  "": function StopElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$gradientOffset: function(receiver) {
    return receiver.offset;
  }
};

$$.StyleElement0 = {
  "": function StyleElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement",
  get$disabled: function(receiver) {
    return receiver.disabled;
  },
  set$disabled: function(receiver, v) {
    receiver.disabled = v;
  },
  get$media: function(receiver) {
    return receiver.media;
  },
  set$media: function(receiver, v) {
    receiver.media = v;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  set$type: function(receiver, v) {
    receiver.type = v;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  }
};

$$.StyledElement = {
  "": function StyledElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement"
};

$$.SvgDocument = {
  "": function SvgDocument() {
    throw "Called unused constructor";
  },
  "super": "Document",
  get$rootElement: function(receiver) {
    return receiver.rootElement;
  }
};

$$.SvgElement = {
  "": function SvgElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$_cssClassSet: function(receiver) {
    return receiver._cssClassSet;
  },
  set$_cssClassSet: function(receiver, v) {
    receiver._cssClassSet = v;
  },
  get$ownerSvgElement: function(receiver) {
    return receiver.ownerSVGElement;
  },
  get$viewportElement: function(receiver) {
    return receiver.viewportElement;
  },
  get$xmlbase: function(receiver) {
    return receiver.xmlbase;
  },
  set$xmlbase: function(receiver, v) {
    receiver.xmlbase = v;
  },
  get$classes: function(receiver) {
    if (receiver._cssClassSet == null)
      receiver._cssClassSet = new $._AttributeClassSet(receiver);
    return receiver._cssClassSet;
  },
  get$children: function(receiver) {
    var t1 = new $.FilteredElementList(receiver, new $._ChildNodeListLazy(receiver));
    t1.$builtinTypeInfo = [$.Element];
    return t1;
  },
  set$children: function(receiver, value) {
    var children = new $.FilteredElementList(receiver, new $._ChildNodeListLazy(receiver));
    children.$builtinTypeInfo = [$.Element];
    children._childNodes._this.textContent = "";
    children.addAll$1(children, value);
  },
  get$innerHtml: function(receiver) {
    var container, cloned, t1;
    container = document.createElement("div");
    cloned = receiver.cloneNode(true);
    t1 = $.getInterceptor$x(container);
    $.addAll$1$ax(t1.get$children(container), $.get$children$x(cloned));
    return t1.get$innerHtml(container);
  },
  innerHtml$1: function($receiver, arg0) {
    return this.get$innerHtml($receiver).call$1(arg0);
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1, children;
    container = document.createElement("div");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    t1 = $.get$children$x($.$index$asx(t1.get$children(container), 0));
    children = new $.FilteredElementList(receiver, $._ChildNodeListLazy$(receiver));
    children.$builtinTypeInfo = [$.Element];
    children._childNodes._this.textContent = "";
    children.addAll$1(children, t1);
  },
  get$$$dom_children: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot get dom_children on SVG."));
  },
  "+$dom_children": 0,
  get$id: function(receiver) {
    return receiver.id;
  }
};

$$.SvgException = {
  "": function SvgException() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$code: function(receiver) {
    return receiver.code;
  },
  get$message: function(receiver) {
    return receiver.message;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "@toString$0": function() {
    return [$.DomName_Au4, $.Type_cOY];
  }
};

$$.SvgSvgElement = {
  "": function SvgSvgElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$contentScriptType: function(receiver) {
    return receiver.contentScriptType;
  },
  set$contentScriptType: function(receiver, v) {
    receiver.contentScriptType = v;
  },
  get$contentStyleType: function(receiver) {
    return receiver.contentStyleType;
  },
  set$contentStyleType: function(receiver, v) {
    receiver.contentStyleType = v;
  },
  get$currentScale: function(receiver) {
    return receiver.currentScale;
  },
  set$currentScale: function(receiver, v) {
    receiver.currentScale = v;
  },
  get$currentTranslate: function(receiver) {
    return receiver.currentTranslate;
  },
  get$currentView: function(receiver) {
    return receiver.currentView;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$pixelUnitToMillimeterX: function(receiver) {
    return receiver.pixelUnitToMillimeterX;
  },
  get$pixelUnitToMillimeterY: function(receiver) {
    return receiver.pixelUnitToMillimeterY;
  },
  get$screenPixelToMillimeterX: function(receiver) {
    return receiver.screenPixelToMillimeterX;
  },
  get$screenPixelToMillimeterY: function(receiver) {
    return receiver.screenPixelToMillimeterY;
  },
  get$useCurrentView: function(receiver) {
    return receiver.useCurrentView;
  },
  get$viewport: function(receiver) {
    return receiver.viewport;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$preserveAspectRatio: function(receiver) {
    return receiver.preserveAspectRatio;
  },
  get$viewBox: function(receiver) {
    return receiver.viewBox;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  },
  get$zoomAndPan: function(receiver) {
    return receiver.zoomAndPan;
  },
  set$zoomAndPan: function(receiver, v) {
    receiver.zoomAndPan = v;
  }
};

$$.SwitchElement = {
  "": function SwitchElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  }
};

$$.SymbolElement = {
  "": function SymbolElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$preserveAspectRatio: function(receiver) {
    return receiver.preserveAspectRatio;
  },
  get$viewBox: function(receiver) {
    return receiver.viewBox;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  }
};

$$.TSpanElement = {
  "": function TSpanElement() {
    throw "Called unused constructor";
  },
  "super": "TextPositioningElement"
};

$$.TextContentElement = {
  "": function TextContentElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$lengthAdjust: function(receiver) {
    return receiver.lengthAdjust;
  },
  get$textLength: function(receiver) {
    return receiver.textLength;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  }
};

$$.TextElement = {
  "": function TextElement() {
    throw "Called unused constructor";
  },
  "super": "TextPositioningElement",
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  }
};

$$.TextPathElement = {
  "": function TextPathElement() {
    throw "Called unused constructor";
  },
  "super": "TextContentElement",
  get$method: function(receiver) {
    return receiver.method;
  },
  get$spacing: function(receiver) {
    return receiver.spacing;
  },
  get$startOffset: function(receiver) {
    return receiver.startOffset;
  },
  get$href: function(receiver) {
    return receiver.href;
  }
};

$$.TextPositioningElement = {
  "": function TextPositioningElement() {
    throw "Called unused constructor";
  },
  "super": "TextContentElement",
  get$dx: function(receiver) {
    return receiver.dx;
  },
  get$dy: function(receiver) {
    return receiver.dy;
  },
  get$rotate: function(receiver) {
    return receiver.rotate;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  }
};

$$.TitleElement0 = {
  "": function TitleElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  }
};

$$.UseElement = {
  "": function UseElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$animatedInstanceRoot: function(receiver) {
    return receiver.animatedInstanceRoot;
  },
  get$height: function(receiver) {
    return receiver.height;
  },
  get$instanceRoot: function(receiver) {
    return receiver.instanceRoot;
  },
  get$width: function(receiver) {
    return receiver.width;
  },
  get$x: function(receiver) {
    return receiver.x;
  },
  get$y: function(receiver) {
    return receiver.y;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$xmllang: function(receiver) {
    return receiver.xmllang;
  },
  set$xmllang: function(receiver, v) {
    receiver.xmllang = v;
  },
  get$xmlspace: function(receiver) {
    return receiver.xmlspace;
  },
  set$xmlspace: function(receiver, v) {
    receiver.xmlspace = v;
  },
  get$farthestViewportElement: function(receiver) {
    return receiver.farthestViewportElement;
  },
  get$nearestViewportElement: function(receiver) {
    return receiver.nearestViewportElement;
  },
  get$requiredExtensions: function(receiver) {
    return receiver.requiredExtensions;
  },
  get$requiredFeatures: function(receiver) {
    return receiver.requiredFeatures;
  },
  get$systemLanguage: function(receiver) {
    return receiver.systemLanguage;
  },
  get$transform: function(receiver) {
    return receiver.transform;
  },
  get$href: function(receiver) {
    return receiver.href;
  }
};

$$.ViewElement = {
  "": function ViewElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement",
  get$viewTarget: function(receiver) {
    return receiver.viewTarget;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$preserveAspectRatio: function(receiver) {
    return receiver.preserveAspectRatio;
  },
  get$viewBox: function(receiver) {
    return receiver.viewBox;
  },
  get$zoomAndPan: function(receiver) {
    return receiver.zoomAndPan;
  },
  set$zoomAndPan: function(receiver, v) {
    receiver.zoomAndPan = v;
  }
};

$$.ZoomEvent = {
  "": function ZoomEvent() {
    throw "Called unused constructor";
  },
  "super": "UIEvent",
  get$newScale: function(receiver) {
    return receiver.newScale;
  },
  get$newTranslate: function(receiver) {
    return receiver.newTranslate;
  },
  get$previousScale: function(receiver) {
    return receiver.previousScale;
  },
  get$previousTranslate: function(receiver) {
    return receiver.previousTranslate;
  },
  get$zoomRectScreen: function(receiver) {
    return receiver.zoomRectScreen;
  }
};

$$._GradientElement = {
  "": function _GradientElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$gradientTransform: function(receiver) {
    return receiver.gradientTransform;
  },
  get$gradientUnits: function(receiver) {
    return receiver.gradientUnits;
  },
  get$spreadMethod: function(receiver) {
    return receiver.spreadMethod;
  },
  get$externalResourcesRequired: function(receiver) {
    return receiver.externalResourcesRequired;
  },
  get$href: function(receiver) {
    return receiver.href;
  }
};

$$._SVGComponentTransferFunctionElement = {
  "": function _SVGComponentTransferFunctionElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement"
};

$$.AudioContext = {
  "": function AudioContext() {
    throw "Called unused constructor";
  },
  "super": "EventTarget",
  get$activeSourceCount: function(receiver) {
    return receiver.activeSourceCount;
  },
  get$currentTime: function(receiver) {
    return receiver.currentTime;
  },
  get$destination: function(receiver) {
    return receiver.destination;
  },
  get$listener: function(receiver) {
    return receiver.listener;
  },
  get$sampleRate: function(receiver) {
    return receiver.sampleRate;
  }
};

$$.AudioDestinationNode = {
  "": function AudioDestinationNode() {
    throw "Called unused constructor";
  },
  "super": "AudioNode",
  get$maxChannelCount: function(receiver) {
    return receiver.maxChannelCount;
  }
};

$$.AudioNode = {
  "": function AudioNode() {
    throw "Called unused constructor";
  },
  "super": "EventTarget",
  get$channelCount: function(receiver) {
    return receiver.channelCount;
  },
  set$channelCount: function(receiver, v) {
    receiver.channelCount = v;
  },
  get$channelCountMode: function(receiver) {
    return receiver.channelCountMode;
  },
  set$channelCountMode: function(receiver, v) {
    receiver.channelCountMode = v;
  },
  get$channelInterpretation: function(receiver) {
    return receiver.channelInterpretation;
  },
  set$channelInterpretation: function(receiver, v) {
    receiver.channelInterpretation = v;
  },
  get$context: function(receiver) {
    return receiver.context;
  },
  get$numberOfInputs: function(receiver) {
    return receiver.numberOfInputs;
  },
  get$numberOfOutputs: function(receiver) {
    return receiver.numberOfOutputs;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  "@$$dom_addEventListener$3": function() {
    return [$.JSName_addEventListener, $.DomName_apl, $.Type_cOY];
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  "@$$dom_removeEventListener$3": function() {
    return [$.JSName_removeEventListener, $.DomName_MjY, $.Type_cOY];
  }
};

$$.AudioProcessingEvent = {
  "": function AudioProcessingEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$inputBuffer: function(receiver) {
    return receiver.inputBuffer;
  },
  get$outputBuffer: function(receiver) {
    return receiver.outputBuffer;
  }
};

$$.AudioSourceNode = {
  "": function AudioSourceNode() {
    throw "Called unused constructor";
  },
  "super": "AudioNode"
};

$$.OfflineAudioCompletionEvent = {
  "": function OfflineAudioCompletionEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$renderedBuffer: function(receiver) {
    return receiver.renderedBuffer;
  }
};

$$.OfflineAudioContext = {
  "": function OfflineAudioContext() {
    throw "Called unused constructor";
  },
  "super": "AudioContext",
  $isEventTarget: true,
  $asEventTarget: null
};

$$.OscillatorNode = {
  "": function OscillatorNode() {
    throw "Called unused constructor";
  },
  "super": "AudioSourceNode",
  get$detune: function(receiver) {
    return receiver.detune;
  },
  get$frequency: function(receiver) {
    return receiver.frequency;
  },
  get$playbackState: function(receiver) {
    return receiver.playbackState;
  },
  get$type: function(receiver) {
    return receiver.type;
  },
  set$type: function(receiver, v) {
    receiver.type = v;
  }
};

$$.ContextEvent = {
  "": function ContextEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$statusMessage: function(receiver) {
    return receiver.statusMessage;
  }
};

$$.SqlError = {
  "": function SqlError() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$code: function(receiver) {
    return receiver.code;
  },
  get$message: function(receiver) {
    return receiver.message;
  }
};

$$.SqlException = {
  "": function SqlException() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$code: function(receiver) {
    return receiver.code;
  },
  get$message: function(receiver) {
    return receiver.message;
  }
};

$$.ByteBuffer = {
  "": function ByteBuffer() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$lengthInBytes: function(receiver) {
    return receiver.byteLength;
  },
  $isByteBuffer: true,
  $asByteBuffer: null
};

$$.TypedData = {
  "": function TypedData() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$buffer: function(receiver) {
    return receiver.buffer;
  },
  get$lengthInBytes: function(receiver) {
    return receiver.byteLength;
  },
  get$offsetInBytes: function(receiver) {
    return receiver.byteOffset;
  },
  get$elementSizeInBytes: function(receiver) {
    return receiver.BYTES_PER_ELEMENT;
  },
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) === true || t1.$ge(index, $length) === true)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $length));
    else
      throw $.wrapException(new $.ArgumentError("Invalid list index " + $.S(index)));
  },
  "+_invalidIndex:2:0": 0,
  $isTypedData: true,
  $asTypedData: null
};

$$.ByteData = {
  "": function ByteData() {
    throw "Called unused constructor";
  },
  "super": "TypedData"
};

$$.Float32List = {
  "": function Float32List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    var t1 = new $.ListIterator(receiver, receiver.length, 0, null);
    t1.$builtinTypeInfo = [$.JSNumber];
    return t1;
  },
  fold$2: function(receiver, initialValue, combine) {
    return $.IterableMixinWorkaround_fold(receiver, initialValue, combine);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    var t1 = new $.MappedListIterable(receiver, f);
    t1.$builtinTypeInfo = [null, null];
    return t1;
  },
  where$1: function(receiver, f) {
    var t1 = new $.WhereIterable(receiver, f);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSNumber);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, start) {
    return $._Lists_lastIndexOf(receiver, element, receiver.length - 1);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException(new $.StateError("No elements"));
  },
  get$single: function(receiver) {
    var t1 = receiver.length;
    if (t1 === 1) {
      if (0 >= t1)
        throw $.ioore(0);
      return receiver[0];
    }
    if (t1 === 0)
      throw $.wrapException(new $.StateError("No elements"));
    throw $.wrapException(new $.StateError("More than one element"));
  },
  insert$2: function(receiver, index, element) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeAt$1: function(receiver, pos) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  replaceRange$3: function(receiver, start, end, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify an immutable List."));
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSDouble]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Float64List = {
  "": function Float64List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    var t1 = new $.ListIterator(receiver, receiver.length, 0, null);
    t1.$builtinTypeInfo = [$.JSNumber];
    return t1;
  },
  fold$2: function(receiver, initialValue, combine) {
    return $.IterableMixinWorkaround_fold(receiver, initialValue, combine);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    var t1 = new $.MappedListIterable(receiver, f);
    t1.$builtinTypeInfo = [null, null];
    return t1;
  },
  where$1: function(receiver, f) {
    var t1 = new $.WhereIterable(receiver, f);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSNumber);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, start) {
    return $._Lists_lastIndexOf(receiver, element, receiver.length - 1);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException(new $.StateError("No elements"));
  },
  get$single: function(receiver) {
    var t1 = receiver.length;
    if (t1 === 1) {
      if (0 >= t1)
        throw $.ioore(0);
      return receiver[0];
    }
    if (t1 === 0)
      throw $.wrapException(new $.StateError("No elements"));
    throw $.wrapException(new $.StateError("More than one element"));
  },
  insert$2: function(receiver, index, element) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeAt$1: function(receiver, pos) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  replaceRange$3: function(receiver, start, end, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify an immutable List."));
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSDouble]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int16List = {
  "": function Int16List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    var t1 = new $.ListIterator(receiver, receiver.length, 0, null);
    t1.$builtinTypeInfo = [$.JSInt];
    return t1;
  },
  fold$2: function(receiver, initialValue, combine) {
    return $.IterableMixinWorkaround_fold(receiver, initialValue, combine);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    var t1 = new $.MappedListIterable(receiver, f);
    t1.$builtinTypeInfo = [null, null];
    return t1;
  },
  where$1: function(receiver, f) {
    var t1 = new $.WhereIterable(receiver, f);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, start) {
    return $._Lists_lastIndexOf(receiver, element, receiver.length - 1);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException(new $.StateError("No elements"));
  },
  get$single: function(receiver) {
    var t1 = receiver.length;
    if (t1 === 1) {
      if (0 >= t1)
        throw $.ioore(0);
      return receiver[0];
    }
    if (t1 === 0)
      throw $.wrapException(new $.StateError("No elements"));
    throw $.wrapException(new $.StateError("More than one element"));
  },
  insert$2: function(receiver, index, element) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeAt$1: function(receiver, pos) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  replaceRange$3: function(receiver, start, end, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify an immutable List."));
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int32List = {
  "": function Int32List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    var t1 = new $.ListIterator(receiver, receiver.length, 0, null);
    t1.$builtinTypeInfo = [$.JSInt];
    return t1;
  },
  fold$2: function(receiver, initialValue, combine) {
    return $.IterableMixinWorkaround_fold(receiver, initialValue, combine);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    var t1 = new $.MappedListIterable(receiver, f);
    t1.$builtinTypeInfo = [null, null];
    return t1;
  },
  where$1: function(receiver, f) {
    var t1 = new $.WhereIterable(receiver, f);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, start) {
    return $._Lists_lastIndexOf(receiver, element, receiver.length - 1);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException(new $.StateError("No elements"));
  },
  get$single: function(receiver) {
    var t1 = receiver.length;
    if (t1 === 1) {
      if (0 >= t1)
        throw $.ioore(0);
      return receiver[0];
    }
    if (t1 === 0)
      throw $.wrapException(new $.StateError("No elements"));
    throw $.wrapException(new $.StateError("More than one element"));
  },
  insert$2: function(receiver, index, element) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeAt$1: function(receiver, pos) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  replaceRange$3: function(receiver, start, end, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify an immutable List."));
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int8List = {
  "": function Int8List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    var t1 = new $.ListIterator(receiver, receiver.length, 0, null);
    t1.$builtinTypeInfo = [$.JSInt];
    return t1;
  },
  fold$2: function(receiver, initialValue, combine) {
    return $.IterableMixinWorkaround_fold(receiver, initialValue, combine);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    var t1 = new $.MappedListIterable(receiver, f);
    t1.$builtinTypeInfo = [null, null];
    return t1;
  },
  where$1: function(receiver, f) {
    var t1 = new $.WhereIterable(receiver, f);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, start) {
    return $._Lists_lastIndexOf(receiver, element, receiver.length - 1);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException(new $.StateError("No elements"));
  },
  get$single: function(receiver) {
    var t1 = receiver.length;
    if (t1 === 1) {
      if (0 >= t1)
        throw $.ioore(0);
      return receiver[0];
    }
    if (t1 === 0)
      throw $.wrapException(new $.StateError("No elements"));
    throw $.wrapException(new $.StateError("More than one element"));
  },
  insert$2: function(receiver, index, element) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeAt$1: function(receiver, pos) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  replaceRange$3: function(receiver, start, end, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify an immutable List."));
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint16List = {
  "": function Uint16List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    var t1 = new $.ListIterator(receiver, receiver.length, 0, null);
    t1.$builtinTypeInfo = [$.JSInt];
    return t1;
  },
  fold$2: function(receiver, initialValue, combine) {
    return $.IterableMixinWorkaround_fold(receiver, initialValue, combine);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    var t1 = new $.MappedListIterable(receiver, f);
    t1.$builtinTypeInfo = [null, null];
    return t1;
  },
  where$1: function(receiver, f) {
    var t1 = new $.WhereIterable(receiver, f);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, start) {
    return $._Lists_lastIndexOf(receiver, element, receiver.length - 1);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException(new $.StateError("No elements"));
  },
  get$single: function(receiver) {
    var t1 = receiver.length;
    if (t1 === 1) {
      if (0 >= t1)
        throw $.ioore(0);
      return receiver[0];
    }
    if (t1 === 0)
      throw $.wrapException(new $.StateError("No elements"));
    throw $.wrapException(new $.StateError("More than one element"));
  },
  insert$2: function(receiver, index, element) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeAt$1: function(receiver, pos) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  replaceRange$3: function(receiver, start, end, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify an immutable List."));
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint32List = {
  "": function Uint32List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    var t1 = new $.ListIterator(receiver, receiver.length, 0, null);
    t1.$builtinTypeInfo = [$.JSInt];
    return t1;
  },
  fold$2: function(receiver, initialValue, combine) {
    return $.IterableMixinWorkaround_fold(receiver, initialValue, combine);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    var t1 = new $.MappedListIterable(receiver, f);
    t1.$builtinTypeInfo = [null, null];
    return t1;
  },
  where$1: function(receiver, f) {
    var t1 = new $.WhereIterable(receiver, f);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, start) {
    return $._Lists_lastIndexOf(receiver, element, receiver.length - 1);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException(new $.StateError("No elements"));
  },
  get$single: function(receiver) {
    var t1 = receiver.length;
    if (t1 === 1) {
      if (0 >= t1)
        throw $.ioore(0);
      return receiver[0];
    }
    if (t1 === 0)
      throw $.wrapException(new $.StateError("No elements"));
    throw $.wrapException(new $.StateError("More than one element"));
  },
  insert$2: function(receiver, index, element) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeAt$1: function(receiver, pos) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  replaceRange$3: function(receiver, start, end, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify an immutable List."));
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8ClampedList = {
  "": function Uint8ClampedList() {
    throw "Called unused constructor";
  },
  "super": "Uint8List",
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout1(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout1(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    var t1 = new $.ListIterator(receiver, receiver.length, 0, null);
    t1.$builtinTypeInfo = [$.JSInt];
    return t1;
  },
  fold$2: function(receiver, initialValue, combine) {
    return $.IterableMixinWorkaround_fold(receiver, initialValue, combine);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    var t1 = new $.MappedListIterable(receiver, f);
    t1.$builtinTypeInfo = [null, null];
    return t1;
  },
  where$1: function(receiver, f) {
    var t1 = new $.WhereIterable(receiver, f);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, start) {
    return $._Lists_lastIndexOf(receiver, element, receiver.length - 1);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException(new $.StateError("No elements"));
  },
  get$single: function(receiver) {
    var t1 = receiver.length;
    if (t1 === 1) {
      if (0 >= t1)
        throw $.ioore(0);
      return receiver[0];
    }
    if (t1 === 0)
      throw $.wrapException(new $.StateError("No elements"));
    throw $.wrapException(new $.StateError("More than one element"));
  },
  insert$2: function(receiver, index, element) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeAt$1: function(receiver, pos) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  replaceRange$3: function(receiver, start, end, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify an immutable List."));
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8List = {
  "": function Uint8List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    var t1 = new $.ListIterator(receiver, receiver.length, 0, null);
    t1.$builtinTypeInfo = [$.JSInt];
    return t1;
  },
  fold$2: function(receiver, initialValue, combine) {
    return $.IterableMixinWorkaround_fold(receiver, initialValue, combine);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  join$1: function(receiver, separator) {
    return $.IterableMixinWorkaround_joinList(receiver, separator);
  },
  map$1: function(receiver, f) {
    var t1 = new $.MappedListIterable(receiver, f);
    t1.$builtinTypeInfo = [null, null];
    return t1;
  },
  where$1: function(receiver, f) {
    var t1 = new $.WhereIterable(receiver, f);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return !this.get$isEmpty(receiver);
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $._Lists_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, start) {
    return $._Lists_lastIndexOf(receiver, element, receiver.length - 1);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException(new $.StateError("No elements"));
  },
  get$single: function(receiver) {
    var t1 = receiver.length;
    if (t1 === 1) {
      if (0 >= t1)
        throw $.ioore(0);
      return receiver[0];
    }
    if (t1 === 0)
      throw $.wrapException(new $.StateError("No elements"));
    throw $.wrapException(new $.StateError("More than one element"));
  },
  insert$2: function(receiver, index, element) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeAt$1: function(receiver, pos) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  replaceRange$3: function(receiver, start, end, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify an immutable List."));
  },
  toString$0: function(receiver) {
    var buffer = new $.StringBuffer("");
    buffer._contents = "[";
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

// Bound closures
$$.BoundClosure$2 = {
  "": function BoundClosure$2(_self, _target, _receiver) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
  },
  "super": "BoundClosure",
  call$2: function(p0, p1) {
    return this._self[this._target](p0, p1);
  }
};

$$.BoundClosure$i1 = {
  "": function BoundClosure$i1(_self, _target, _receiver) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
  },
  "super": "BoundClosure",
  call$1: function(p0) {
    return this._self[this._target](this._receiver, p0);
  }
};

$$.BoundClosure$i2 = {
  "": function BoundClosure$i2(_self, _target, _receiver) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
  },
  "super": "BoundClosure",
  call$2: function(p0, p1) {
    return this._self[this._target](this._receiver, p0, p1);
  }
};

$$.BoundClosure$1 = {
  "": function BoundClosure$1(_self, _target, _receiver) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
  },
  "super": "BoundClosure",
  call$1: function(p0) {
    return this._self[this._target](p0);
  }
};

$$.BoundClosure$0 = {
  "": function BoundClosure$0(_self, _target, _receiver) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
  },
  "super": "BoundClosure",
  call$0: function() {
    return this._self[this._target]();
  }
};

$$.Bound_addError__AsBroadcastStreamController = {
  "": function Bound_addError__AsBroadcastStreamController(_self, _target, _receiver) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
  },
  "super": "BoundClosure",
  call$2: function(p0, p1) {
    return this._self[this._target](p0, p1);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  }
};

$$.BoundClosure$i0 = {
  "": function BoundClosure$i0(_self, _target, _receiver) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
  },
  "super": "BoundClosure",
  call$0: function() {
    return this._self[this._target](this._receiver);
  }
};

$$.BoundClosure$4 = {
  "": function BoundClosure$4(_self, _target, _receiver) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
  },
  "super": "BoundClosure",
  call$4: function(p0, p1, p2, p3) {
    return this._self[this._target](p0, p1, p2, p3);
  }
};

$$.Closure$_processWorkerMessage = {
  "": function Closure$_processWorkerMessage(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_throwFormatException = {
  "": function Closure$_throwFormatException(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$wrapException = {
  "": function Closure$wrapException(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$toStringWrapper = {
  "": function Closure$toStringWrapper(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$invokeClosure = {
  "": function Closure$invokeClosure(call$5, $name) {
    this.call$5 = call$5;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$typeNameInChrome = {
  "": function Closure$typeNameInChrome(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$typeNameInSafari = {
  "": function Closure$typeNameInSafari(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$typeNameInOpera = {
  "": function Closure$typeNameInOpera(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$typeNameInFirefox = {
  "": function Closure$typeNameInFirefox(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$typeNameInIE = {
  "": function Closure$typeNameInIE(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$constructorNameFallback = {
  "": function Closure$constructorNameFallback(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_matchString = {
  "": function Closure$_matchString(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_stringIdentity = {
  "": function Closure$_stringIdentity(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_asyncRunCallback = {
  "": function Closure$_asyncRunCallback(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_nullDataHandler = {
  "": function Closure$_nullDataHandler(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_nullErrorHandler = {
  "": function Closure$_nullErrorHandler(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_nullDoneHandler = {
  "": function Closure$_nullDoneHandler(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$compare = {
  "": function Closure$compare(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_completeMicrotasks = {
  "": function Closure$_completeMicrotasks(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_serializeDataTree = {
  "": function Closure$_serializeDataTree(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_serialize = {
  "": function Closure$_serialize(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_deserialize = {
  "": function Closure$_deserialize(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_serializeDataTree0 = {
  "": function Closure$_serializeDataTree0(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_serialize0 = {
  "": function Closure$_serialize0(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_deserialize0 = {
  "": function Closure$_deserialize0(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_defaultErrorFormatter = {
  "": function Closure$_defaultErrorFormatter(call$5, $name) {
    this.call$5 = call$5;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$runTests = {
  "": function Closure$runTests(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$escapeString = {
  "": function Closure$escapeString(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$_escapeChar = {
  "": function Closure$_escapeChar(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  },
  "super": "Closure"
};

$$.Closure$main = {
  "": function Closure$main(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  },
  "super": "Closure"
};

init.mangledNames = {$$dom_initCustomEvent$4: "$dom_initCustomEvent:4:0", $$dom_replaceChild$2: "$dom_replaceChild:2:0", _activate$1: "_activate:1:0", _callback$2: "_callback:2:0", _complete$1: "_complete:1:0", _complete$3: "_complete:3:0", _doParse$0: "_doParse:0:0", _liblib2$_onData$1: "_onData:1:0", _liblib3$_callback$1: "_callback:1:0", _markCallbackComplete$0: "_markCallbackComplete:0:0", _onCallback$0: "_onCallback:0:0", _onError$1: "_onError:1:0", _runNextJob$0: "_runNextJob:0:0", _runTest$0: "_runTest:0:0", _scheduleNextJob$0: "_scheduleNextJob:0:0", _selected$1: "_selected:1:0", _selected$2: "_selected:2:0", _setResult$3: "_setResult:3:0", _unpickle$2: "_unpickle:2:0", _updateEditorState$1: "_updateEditorState:1:0", accept$1: "accept:1:0", accept2$2: "accept2:2:0", addListener$1: "addListener:1:0", append$1: "append:1:0", appendBeginToken$1: "appendBeginToken:1:0", appendCommentToken$2: "appendCommentToken:2:0", appendEndToken$2: "appendEndToken:2:0", appendEofToken$0: "appendEofToken:0:0", appendKeywordToken$1: "appendKeywordToken:1:0", appendStringToken$2: "appendStringToken:2:0", appendStringToken2$3: "appendStringToken2:3:0", appendToken$1: "appendToken:1:0", appendToken2$2: "appendToken2:2:0", becomeParentOf$1: "becomeParentOf:1:0", bigSwitch$1: "bigSwitch:1:0", call$3$onDone$onError: "call:3:0", call$4$cancelOnError$onDone$onError: "call:4:0", call$5: "call:5:0", callSync$1: "callSync:1:0", callback$1: "callback:1:0", chooseEntry$2: "chooseEntry:2:0", closeRequest$1: "closeRequest:1:0", create$2: "create:2:0", create$3: "create:3:0", createContent$1: "createContent:1:0", createWriter$2: "createWriter:2:0", describeMismatch$4: "describeMismatch:4:0", destroy$1: "destroy:1:0", edit$1: "edit:1:0", error$2: "error:2:0", fail$2: "fail:2:0", file$1: "file:1:0", findTokenMatchingClosingBraceInInterpolationExpression$0: "findTokenMatchingClosingBraceInInterpolationExpression:0:0", focusRequest$1: "focusRequest:1:0", get$$$dom_className: "$dom_className", get$2: "get:2:0", get$Array: "Array", get$Blob: "Blob", get$EditSession: "EditSession", get$FileReader: "FileReader", get$JSON: "JSON", get$_STATE_CLOSED: "_STATE_CLOSED", get$_aceContainer: "_aceContainer", get$_aceTheme: "_aceTheme", get$_activePart: "_activePart", get$_arrowElement: "_arrowElement", get$_bootstrapTheme: "_bootstrapTheme", get$_callback: "_callback", get$_callbackFunctionsOutstanding: "_callbackFunctionsOutstanding", get$_changeHandler: "_changeHandler", get$_children: "_children", get$_completer: "_completer", get$_consoleView: "_consoleView", get$_contentElement: "_contentElement", get$_contents: "_contents", get$_dirty: "_dirty", get$_duration: "_duration", get$_eventState: "_eventState", get$_file: "_file", get$_fileEntry: "_fileEntry", get$_isDone: "_isDone", get$_isExecutingCallback: "_isExecutingCallback", get$_isolateId: "_isolateId", get$_key: "_key", get$_keyword: "_keyword", get$_kind: "_kind", get$_liblib$_name: "_name", get$_liblib0$_element: "_element", get$_liblib14$_comment: "_comment", get$_liblib14$_metadata: "_metadata", get$_liblib16$_librarySource: "_librarySource", get$_liblib16$_resolutionErrors: "_resolutionErrors", get$_liblib20$_id: "_id", get$_liblib20$_registry: "_registry", get$_liblib23$_streamController: "_streamController", get$_liblib4$_token: "_token", get$_liblib8$_aceEditor: "_aceEditor", get$_lineStarts: "_lineStarts", get$_mainElement: "_mainElement", get$_matcher: "_matcher", get$_messageElement: "_messageElement", get$_next: "_next", get$_nextListener: "_nextListener", get$_nextState: "_nextState", get$_onListen: "_onListen", get$_openCallbacks: "_openCallbacks", get$_parentZone: "_parentZone", get$_previous: "_previous", get$_printMargin: "_printMargin", get$_proxy: "_proxy", get$_receivePort: "_receivePort", get$_reconcileTimer: "_reconcileTimer", get$_resolutionErrorsState: "_resolutionErrorsState", get$_resolvedUnit: "_resolvedUnit", get$_resolvedUnitState: "_resolvedUnitState", get$_result: "_result", get$_resultOrListeners: "_resultOrListeners", get$_runningJob: "_runningJob", get$_state: "_state", get$_subscription: "_subscription", get$_syntax: "_syntax", get$_testComplete: "_testComplete", get$_timer: "_timer", get$_type: "_type", get$_value: "_value", get$_variables: "_variables", get$_workerId: "_workerId", get$_workspace: "_workspace", get$_zone: "_zone", get$aboutPopover: "aboutPopover", get$ace: "ace", get$aceEditor: "aceEditor", get$aceMode: "aceMode", get$altKey: "altKey", get$app: "app", get$ast: "ast", get$attributes: "attributes", get$beginToken: "beginToken", get$binding: "binding", get$changeListener: "changeListener", get$children: "children", get$chrome: "chrome", get$classes: "classes", get$client: "client", get$column: "column", get$contentDiv: "contentDiv", get$contentManager: "contentManager", get$contents: "contents", get$ctrlKey: "ctrlKey", get$currentTarget: "currentTarget", get$declarations: "declarations", get$description: "description", get$detail: "detail", get$directives: "directives", get$display: "display", get$dockLeft: "dockLeft", get$document: "document", get$documentProxy: "documentProxy", get$doubleClick: "doubleClick", get$elements: "elements", get$endToken: "endToken", get$errors: "errors", get$eventStream: "eventStream", get$fileSystem: "fileSystem", get$finished: "finished", get$fireReconcileEvent: "fireReconcileEvent", get$future: "future", get$height: "height", get$i18n: "i18n", get$identifier: "identifier", get$initializer: "initializer", get$innerHtml: "innerHtml", get$isComplete: "isComplete", get$isDartMode: "isDartMode", get$isDirectory: "isDirectory", get$isFile: "isFile", get$isolateStatics: "isolateStatics", get$job: "job", get$keyCode: "keyCode", get$keyword: "keyword", get$kind: "kind", get$label: "label", get$left: "left", get$lexeme: "lexeme", get$listViewer: "listViewer", get$message: "message", get$messageArea: "messageArea", get$metaKey: "metaKey", get$millisecondsSinceEpoch: "millisecondsSinceEpoch", get$modifyable: "modifyable", get$nodes: "nodes", get$offset: "offset", get$offsetHeight: "offsetHeight", get$onClick: "onClick", get$onClosed: "onClosed", get$onKeyPress: "onKeyPress", get$ordinal: "ordinal", get$parentNode: "parentNode", get$partMap: "partMap", get$precedingComments: "precedingComments", get$preferences: "preferences", get$preferencesPopover: "preferencesPopover", get$previous: "previous", get$progress: "progress", get$proxy: "proxy", get$relativeToElement: "relativeToElement", get$responseText: "responseText", get$result: "result", get$row: "row", get$runtime: "runtime", get$sb: "sb", get$searchBox: "searchBox", get$selection: "selection", get$session: "session", get$shiftKey: "shiftKey", get$socket: "socket", get$socketId: "socketId", get$source: "source", get$stackTrace: "stackTrace", get$started: "started", get$statusLine: "statusLine", get$statusText: "statusText", get$storage: "storage", get$streamController: "streamController", get$style: "style", get$syntax: "syntax", get$target: "target", get$testSetup: "testSetup", get$testTeardown: "testTeardown", get$text: "text", get$top: "top", get$topLeft: "topLeft", get$type: "type", get$variables: "variables", get$visibility: "visibility", get$width: "width", get$window: "window", get$workbench: "workbench", get$x: "x", get$y: "y", getBoundingClientRect$0: "getBoundingClientRect:0:0", getChildren$0: "getChildren:0:0", getDescription$0: "getDescription:0:0", getErrors2$1: "getErrors2:1:0", getHandlerForName$1: "getHandlerForName:1:0", getKey$0: "getKey:0:0", getLibrariesContaining$1: "getLibrariesContaining:1:0", getManifest$0: "getManifest:0:0", getRange$0: "getRange:0:0", getSession$0: "getSession:0:0", getState$1: "getState:1:0", getURL$1: "getURL:1:0", getWritableEntry$2: "getWritableEntry:2:0", handleActivated$0: "handleActivated:0:0", handleDeactivated$0: "handleDeactivated:0:0", indexOf$2: "indexOf:2:0", indexToPosition$2: "indexToPosition:2:0", invoke$0: "invoke:0:0", isAdditiveOperator$0: "isAdditiveOperator:0:0", isAssignable$0: "isAssignable:0:0", isAssignmentOperator$0: "isAssignmentOperator:0:0", isEqualityOperator$0: "isEqualityOperator:0:0", isIncrementOperator$0: "isIncrementOperator:0:0", isMultiplicativeOperator$0: "isMultiplicativeOperator:0:0", isOperator$0: "isOperator:0:0", isPseudoKeyword$0: "isPseudoKeyword:0:0", isRelationalOperator$0: "isRelationalOperator:0:0", isShiftOperator$0: "isShiftOperator:0:0", isUserDefinableOperator$0: "isUserDefinableOperator:0:0", join$1: "join:1:0", keyword$0: "keyword:0:0", link$1: "link:1:0", listen$4$cancelOnError$onDone$onError: "listen:4:0", matchAsPrefix$2: "matchAsPrefix:2:0", matches$1: "matches:1:0", matches$2: "matches:2:0", maybeSchedule$0: "maybeSchedule:0:0", modify$1: "modify:1:0", next$1: "next:1:0", on$2: "on:2:0", parseCompilationUnit$1: "parseCompilationUnit:1:0", parseJson$1: "parseJson:1:0", pickle$1: "pickle:1:0", preventDefault$0: "preventDefault:0:0", readAsText$1: "readAsText:1:0", readClasses$0: "readClasses:0:0", readContents$1: "readContents:1:0", recalc$1: "recalc:1:0", remove$0: "remove:0:0", remove$2: "remove:2:0", replaceWith$1: "replaceWith:1:0", run$1: "run:1:0", save$0: "save:0:0", select$3: "select:3:0", select4$4: "select4:4:0", send$2: "send:2:0", set$$$dom_className: "$dom_className=", set$2: "set:2:0", set$_aceEditor: "_aceEditor=", set$_activePart: "_activePart=", set$_callbackFunctionsOutstanding: "_callbackFunctionsOutstanding=", set$_contents: "_contents=", set$_dirty: "_dirty=", set$_eventState: "_eventState=", set$_file: "_file=", set$_handle: "_handle=", set$_isComplete: "_isComplete=", set$_isDone: "_isDone=", set$_liblib8$_name: "_name=", set$_lineInfo: "_lineInfo=", set$_next: "_next=", set$_nextListener: "_nextListener=", set$_openCallbacks: "_openCallbacks=", set$_parsingErrors: "_parsingErrors=", set$_previous: "_previous=", set$_reconcileTimer: "_reconcileTimer=", set$_runningJob: "_runningJob=", set$_runningTime: "_runningTime=", set$_startTime: "_startTime=", set$_state: "_state=", set$_testComplete: "_testComplete=", set$_value: "_value=", set$aceTheme: "aceTheme=", set$bootstrapTheme: "bootstrapTheme=", set$changeListener: "changeListener=", set$children: "children=", set$contentDiv: "contentDiv=", set$display: "display=", set$document: "document=", set$flex: "flex=", set$flexDirection: "flexDirection=", set$innerHtml: "innerHtml=", set$left: "left=", set$marginTop: "marginTop=", set$menubar: "menubar=", set$onerror: "onerror=", set$onloadend: "onloadend=", set$onwriteend: "onwriteend=", set$parent: "parent=", set$previous: "previous=", set$proxy: "proxy=", set$selection: "selection=", set$showPrintMargin: "showPrintMargin=", set$text: "text=", set$top: "top=", set$type: "type=", set$undoManager: "undoManager=", set$viewPartContainer: "viewPartContainer=", set$visibility: "visibility=", setEnd$2: "setEnd:2:0", setInput$1: "setInput:1:0", setNext$1: "setNext:1:0", setProperty$2: "setProperty:2:0", setRange$4: "setRange:4:0", setSourceStart$3: "setSourceStart:3:0", setStart$2: "setStart:2:0", setState$2: "setState:2:0", setValue$1: "setValue:1:0", setValue$2: "setValue:2:0", shouldCallBack$0: "shouldCallBack:0:0", stopImmediatePropagation$0: "stopImmediatePropagation:0:0", stopPropagation$0: "stopPropagation:0:0", stringify$1: "stringify:1:0", stringifyValue$1: "stringifyValue:1:0", substring$2: "substring:2:0", then$2$onError: "then:2:0", toJs$0: "toJs:0:0", toJson$0: "toJson:0:0", toggleOpen$1: "toggleOpen:1:0", tokenize$0: "tokenize:0:0", tokenizeAmpersand$1: "tokenizeAmpersand:1:0", tokenizeBar$1: "tokenizeBar:1:0", tokenizeDotOrNumber$1: "tokenizeDotOrNumber:1:0", tokenizeEquals$1: "tokenizeEquals:1:0", tokenizeExclamation$1: "tokenizeExclamation:1:0", tokenizeExponent$1: "tokenizeExponent:1:0", tokenizeFractionPart$2: "tokenizeFractionPart:2:0", tokenizeGreaterThan$1: "tokenizeGreaterThan:1:0", tokenizeHex$1: "tokenizeHex:1:0", tokenizeHexOrNumber$1: "tokenizeHexOrNumber:1:0", tokenizeIdentifier$3: "tokenizeIdentifier:3:0", tokenizeInterpolatedExpression$2: "tokenizeInterpolatedExpression:2:0", tokenizeInterpolatedIdentifier$2: "tokenizeInterpolatedIdentifier:2:0", tokenizeKeywordOrIdentifier$2: "tokenizeKeywordOrIdentifier:2:0", tokenizeLessThan$1: "tokenizeLessThan:1:0", tokenizeMinus$1: "tokenizeMinus:1:0", tokenizeMultiLineComment$1: "tokenizeMultiLineComment:1:0", tokenizeMultiLineRawString$2: "tokenizeMultiLineRawString:2:0", tokenizeMultiLineString$3: "tokenizeMultiLineString:3:0", tokenizeNumber$1: "tokenizeNumber:1:0", tokenizeOpenSquareBracket$1: "tokenizeOpenSquareBracket:1:0", tokenizePlus$1: "tokenizePlus:1:0", tokenizeSingleLineComment$1: "tokenizeSingleLineComment:1:0", tokenizeSingleLineRawString$3: "tokenizeSingleLineRawString:3:0", tokenizeSingleLineString$3: "tokenizeSingleLineString:3:0", tokenizeSlashOrComment$1: "tokenizeSlashOrComment:1:0", tokenizeString$3: "tokenizeString:3:0", tokenizeStringInterpolation$1: "tokenizeStringInterpolation:1:0", tokenizeTag$1: "tokenizeTag:1:0", tokenizeTilde$1: "tokenizeTilde:1:0", updateEnabled$0: "updateEnabled:0:0", updatedValue$3: "updatedValue:3:0", visitSendPortSync$1: "visitSendPortSync:1:0", write$1: "write:1:0", write$2: "write:2:0"};
(function (reflectionData) {
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = {};
  if (!init.mangledGlobalNames) init.mangledGlobalNames = {};
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var descriptor = data[3];
    var classes = [];
    var functions = [];
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property)) continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar == "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
      } else if (firstChar == "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (typeof element === "function") {
        $[previousProperty = property] = element;
        functions.push(property);
      } else {
        previousProperty = property;
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop)) continue;
          firstChar = prop.substring(0, 1);
          if (firstChar == "+") {
            mangledNames[previousProp] = prop.substring(1);
          } else if (firstChar == "@" && prop != "@") {
            newDesc[prop.substring(1)]["@"] =element[prop];
          } else {
            newDesc[previousProp = prop] = element[prop];
          }
        }
        $$[property] = newDesc;
        classes.push(property);
      }
    }
    libraries.push([name, uri, classes, functions, metadata]);
  }
})([
["_interceptors", "dart:_interceptors", , {
_symbolMapToStringMap_closure0: {
  "": function _symbolMapToStringMap_closure(result_0) {
    this.result_0 = result_0;
  },
  "super": "Closure",
  call$2: function(key, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, key.get$_liblib$_name(), value);
  },
  "+call:2:0": 0,
  $isFunction: true
},

"+_symbolMapToStringMap_closure": 0,

Interceptor: {
  "": function Interceptor() {
  },
  "super": "Object",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  "+==:1:0": 0,
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  "+hashCode": 0,
  toString$0: function(receiver) {
    return "Instance of '" + $.Primitives_objectTypeName(receiver) + "'";
  },
  "+toString:0:0": 0,
  noSuchMethod$1: function(receiver, invocation) {
    throw $.wrapException(new $.NoSuchMethodError(receiver, invocation.get$memberName().get$_liblib$_name(), invocation.get$positionalArguments(), $._symbolMapToStringMap0(invocation.get$namedArguments()), null));
  },
  "+noSuchMethod:1:0": 0,
  get$runtimeType: function(receiver) {
    return new $.TypeImpl($.getRuntimeTypeString(receiver));
  },
  "+runtimeType": 0
},

"+Interceptor": 0,

JSBool: {
  "": function JSBool() {
  },
  "super": "Interceptor",
  $name: "bool",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  get$runtimeType: function(receiver) {
    return $.Type_a9w;
  },
  $isbool: true
},

"+JSBool": 0,

JSNull: {
  "": function JSNull() {
  },
  "super": "Interceptor",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  get$runtimeType: function(receiver) {
    return $.Type_woc;
  }
},

"+JSNull": 0,

JSUnknown: {
  "": function JSUnknown() {
  },
  "super": "Interceptor",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  get$runtimeType: function(receiver) {
    return;
  }
},

"+JSUnknown": 0,

JSArray: {
  "": function JSArray() {
  },
  "super": "Interceptor",
  $name: "List",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("add"));
    receiver.push(value);
  },
  "+add:1:0": 0,
  removeAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index < 0 || index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("removeAt"));
    return receiver.splice(index, 1)[0];
  },
  "+removeAt:1:0": 0,
  insert$2: function(receiver, index, value) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index < 0 || index > receiver.length)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("insert"));
    receiver.splice(index, 0, value);
  },
  "+insert:2:0": 0,
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException(new $.RangeError("value -1"));
    return receiver.pop();
  },
  "+removeLast:0:0": 0,
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("remove"));
    for (i = 0; i < receiver.length; ++i)
      if ($.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  "+remove:1:0": 0,
  where$1: function(receiver, f) {
    var t1 = new $.WhereIterable(receiver, f);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  "+where:1:0": 0,
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = $.get$iterator$ax(collection); t1.moveNext$0() === true;)
      this.add$1(receiver, t1.get$current());
  },
  "+addAll:1:0": 0,
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  "+clear:0:0": 0,
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  "+forEach:1:0": 0,
  map$1: function(receiver, f) {
    var t1 = new $.MappedListIterable(receiver, f);
    t1.$builtinTypeInfo = [null, null];
    return t1;
  },
  "+map:1:0": 0,
  join$1: function(receiver, separator) {
    var list, t1, i, t2;
    list = $.List_List(receiver.length, null);
    for (t1 = list.length, i = 0; i < receiver.length; ++i) {
      t2 = $.S(receiver[i]);
      if (i >= t1)
        throw $.ioore(i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  "+join:0:1": 0,
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  "+skip:1:0": 0,
  fold$2: function(receiver, initialValue, combine) {
    return $.IterableMixinWorkaround_fold(receiver, initialValue, combine);
  },
  "+fold:2:0": 0,
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  "+elementAt:1:0": 0,
  sublist$2: function(receiver, start, end) {
    var t1;
    if (start == null)
      $.throwExpression(new $.ArgumentError(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException(new $.ArgumentError(start));
    if (start < 0 || start > receiver.length) {
      t1 = receiver.length;
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + t1));
    }
    if (end == null)
      end = receiver.length;
    else {
      if (typeof end !== "number" || Math.floor(end) !== end)
        throw $.wrapException(new $.ArgumentError(end));
      if (end < start || end > receiver.length) {
        t1 = receiver.length;
        throw $.wrapException(new $.RangeError("value " + $.S(end) + " not in range " + $.S(start) + ".." + t1));
      }
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  "+sublist:1:1": 0,
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException(new $.StateError("No elements"));
  },
  "+first": 0,
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.wrapException(new $.StateError("No elements"));
  },
  "+last": 0,
  get$single: function(receiver) {
    var t1 = receiver.length;
    if (t1 === 1) {
      if (0 >= t1)
        throw $.ioore(0);
      return receiver[0];
    }
    if (t1 === 0)
      throw $.wrapException(new $.StateError("No elements"));
    throw $.wrapException(new $.StateError("More than one element"));
  },
  "+single": 0,
  removeRange$2: function(receiver, start, end) {
    var receiverLength, t1;
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("removeRange"));
    receiverLength = receiver.length;
    t1 = $.getInterceptor$n(start);
    if (t1.$lt(start, 0) === true || t1.$gt(start, receiverLength) === true)
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + receiverLength));
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) === true || t1.$gt(end, receiverLength) === true)
      throw $.wrapException(new $.RangeError("value " + $.S(end) + " not in range " + $.S(start) + ".." + receiverLength));
    if (typeof end !== "number")
      throw $.iae(end);
    $.Arrays_copy(receiver, end, receiver, start, receiverLength - end);
    if (typeof start !== "number")
      throw $.iae(start);
    this.set$length(receiver, receiverLength - (end - start));
  },
  "+removeRange:2:0": 0,
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    if (!!receiver.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  "+setRange:3:1": 0,
  replaceRange$3: function(receiver, start, end, iterable) {
    var t1 = !!receiver.fixed$length;
    if (t1)
      $.throwExpression(new $.UnsupportedError("removeRange"));
    $.IterableMixinWorkaround__rangeCheck(receiver, start, end);
    this.removeRange$2(receiver, start, end);
    if (t1)
      $.throwExpression(new $.UnsupportedError("insertAll"));
    $.IterableMixinWorkaround_insertAllList(receiver, start, iterable);
  },
  "+replaceRange:3:0": 0,
  indexOf$2: function(receiver, element, start) {
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  "+indexOf:1:1": 0,
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  "+indexOf:1:0": 0,
  lastIndexOf$2: function(receiver, element, start) {
    return $.Arrays_lastIndexOf(receiver, element, receiver.length - 1);
  },
  "+lastIndexOf:1:1": 0,
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  "+lastIndexOf:1:0": 0,
  contains$1: function(receiver, other) {
    var t1, i;
    for (t1 = $.getInterceptor(other), i = 0; i < receiver.length; ++i)
      if (t1.$eq(other, receiver[i]))
        return true;
    return false;
  },
  "+contains:1:0": 0,
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  "+isEmpty": 0,
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  "+isNotEmpty": 0,
  toString$0: function(receiver) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(receiver, result, $.List_List($, null));
    return result._contents;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.getRuntimeTypeArgument(receiver, receiver.$asJSArray, 0));
  },
  "+toList:0:1": 0,
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  "+toList:0:0": 0,
  get$iterator: function(receiver) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(receiver, receiver.$asJSArray, 0);
    t2 = new $.ListIterator(receiver, receiver.length, 0, null);
    t2.$builtinTypeInfo = [t1];
    return t2;
  },
  "+iterator": 0,
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  "+length": 0,
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException(new $.ArgumentError(newLength));
    if (newLength < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(newLength)));
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("set length"));
    receiver.length = newLength;
  },
  "+length=": 0,
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver[index];
  },
  "+[]:1:0": 0,
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression(new $.UnsupportedError("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    receiver[index] = value;
  },
  "+[]=:2:0": 0,
  $asInterceptor: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
},

"+JSArray": 0,

JSMutableArray: {
  "": function JSMutableArray() {
  },
  "super": "JSArray",
  $isJSMutableArray: true,
  $asJSArray: function() { return [null]; },
  $asList: function() { return [null]; },
  $asIterable: function() { return [null]; }
},

"+JSMutableArray": 0,

JSFixedArray: {
  "": function JSFixedArray() {
  },
  "super": "JSMutableArray"
},

"+JSFixedArray": 0,

JSExtendableArray: {
  "": function JSExtendableArray() {
  },
  "super": "JSMutableArray",
  $isJSExtendableArray: true
},

"+JSExtendableArray": 0,

JSNumber: {
  "": function JSNumber() {
  },
  "super": "Interceptor",
  $name: "num",
  compareTo$1: function(receiver, b) {
    var t1, bIsNegative;
    if (typeof b !== "number")
      throw $.wrapException(new $.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      t1 = receiver === 0;
      if (t1) {
        bIsNegative = this.get$isNegative(b);
        if ((t1 ? 1 / receiver < 0 : receiver < 0) === bIsNegative)
          return 0;
        if (t1 ? 1 / receiver < 0 : receiver < 0)
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  "+compareTo:1:0": 0,
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  "+isNegative": 0,
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  "+isNaN": 0,
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  "+abs:0:0": 0,
  toInt$0: function(receiver) {
    var truncated;
    if (isNaN(receiver))
      throw $.wrapException(new $.UnsupportedError("NaN"));
    if (receiver == Infinity || receiver == -Infinity)
      throw $.wrapException(new $.UnsupportedError("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  "+toInt:0:0": 0,
  toStringAsFixed$1: function(receiver, fractionDigits) {
    var result, t1;
    if (fractionDigits < 0 || fractionDigits > 20)
      throw $.wrapException(new $.RangeError(fractionDigits));
    result = receiver.toFixed(fractionDigits);
    t1 = receiver === 0;
    if (t1)
      t1 = t1 ? 1 / receiver < 0 : receiver < 0;
    else
      t1 = false;
    if (t1)
      return "-" + result;
    return result;
  },
  "+toStringAsFixed:1:0": 0,
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  "++:1:0": 0,
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver - other;
  },
  "+-:1:0": 0,
  $div: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver / other;
  },
  "+/:1:0": 0,
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver * other;
  },
  "+*:1:0": 0,
  $tdiv: function(receiver, other) {
    var t1, truncated;
    t1 = receiver / other;
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  "+~/:1:0": 0,
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.wrapException(new $.ArgumentError(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  "+<<:1:0": 0,
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  "+>>:1:0": 0,
  $and: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return (receiver & other) >>> 0;
  },
  "+&:1:0": 0,
  $or: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  "+|:1:0": 0,
  $xor: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return (receiver ^ other) >>> 0;
  },
  "+^:1:0": 0,
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver < other;
  },
  "+<:1:0": 0,
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver > other;
  },
  "+>:1:0": 0,
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver <= other;
  },
  "+<=:1:0": 0,
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver >= other;
  },
  "+>=:1:0": 0,
  $isnum: true
},

"+JSNumber": 0,

JSInt: {
  "": function JSInt() {
  },
  "super": "JSNumber",
  $name: "int",
  get$runtimeType: function(receiver) {
    return $.Type_8aB;
  },
  $isdouble: true,
  $isnum: true,
  $isint: true
},

"+JSInt": 0,

JSDouble: {
  "": function JSDouble() {
  },
  "super": "JSNumber",
  $name: "double",
  get$runtimeType: function(receiver) {
    return $.Type_cGl;
  },
  $isdouble: true,
  $isnum: true
},

"+JSDouble": 0,

JSString: {
  "": function JSString() {
  },
  "super": "Interceptor",
  $name: "String",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number")
      throw $.wrapException(new $.ArgumentError(index));
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    if (index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver.charCodeAt(index);
  },
  "+codeUnitAt:1:0": 0,
  allMatches$1: function(receiver, str) {
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  "+allMatches:1:0": 0,
  matchAsPrefix$2: function(receiver, string, start) {
    var t1, t2, i, t3;
    if (start < 0 || start > string.length)
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + string.length));
    t1 = receiver.length;
    t2 = string.length;
    if (start + t1 > t2)
      return;
    for (i = 0; i < t1; ++i) {
      t3 = start + i;
      if (t3 < 0)
        $.throwExpression(new $.RangeError("value " + $.S(t3)));
      if (t3 >= t2)
        $.throwExpression(new $.RangeError("value " + $.S(t3)));
      t3 = string.charCodeAt(t3);
      if (i >= t1)
        $.throwExpression(new $.RangeError("value " + i));
      if (t3 !== receiver.charCodeAt(i))
        return;
    }
    return new $.StringMatch(start, string, receiver);
  },
  "+matchAsPrefix:1:1": 0,
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  "+endsWith:1:0": 0,
  replaceAll$2: function(receiver, from, to) {
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  "+replaceAll:2:0": 0,
  split$1: function(receiver, pattern) {
    return receiver.split(pattern);
  },
  "+split:1:0": 0,
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw $.wrapException(new $.RangeError("value " + index + " not in range 0.." + receiver.length));
    endIndex = index + pattern.length;
    if (endIndex > receiver.length)
      return false;
    return pattern == receiver.substring(index, endIndex);
    return this.matchAsPrefix$2(pattern, receiver, index) != null;
  },
  "+startsWith:1:1": 0,
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  "+startsWith:1:0": 0,
  substring$2: function(receiver, startIndex, endIndex) {
    if (typeof startIndex !== "number")
      return this.substring$2$bailout(1, startIndex, endIndex, receiver);
    if (typeof endIndex !== "number")
      return this.substring$2$bailout(1, startIndex, endIndex, receiver);
    if (startIndex < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(startIndex)));
    if (startIndex > endIndex)
      throw $.wrapException(new $.RangeError("value " + $.S(startIndex)));
    if (endIndex > receiver.length)
      throw $.wrapException(new $.RangeError("value " + $.S(endIndex)));
    return receiver.substring(startIndex, endIndex);
  },
  "+substring:1:1": 0,
  substring$2$bailout: function(state0, startIndex, endIndex, receiver) {
    var t1;
    if (typeof startIndex !== "number")
      $.throwExpression(new $.ArgumentError(startIndex));
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression(new $.ArgumentError(endIndex));
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw $.wrapException(new $.RangeError("value " + $.S(startIndex)));
    if (t1.$gt(startIndex, endIndex) === true)
      throw $.wrapException(new $.RangeError("value " + $.S(startIndex)));
    if ($.$gt$n(endIndex, receiver.length) === true)
      throw $.wrapException(new $.RangeError("value " + $.S(endIndex)));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  "+substring:1:0": 0,
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  "+toLowerCase:0:0": 0,
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase();
  },
  "+toUpperCase:0:0": 0,
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        $.throwExpression(new $.RangeError("value " + startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || $.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        $.throwExpression(new $.RangeError("value " + endIndex1));
      if (endIndex1 >= endIndex)
        $.throwExpression(new $.RangeError("value " + endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || $.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  "+trim:0:0": 0,
  indexOf$2: function(receiver, pattern, start) {
    var match, t1, t2, i;
    if (pattern == null)
      $.throwExpression(new $.ArgumentError(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException(new $.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + receiver.length));
    if (typeof pattern === "string")
      return receiver.indexOf(pattern, start);
    if (typeof pattern === "object" && pattern !== null && !!$.getInterceptor(pattern).$isJSSyntaxRegExp) {
      match = pattern._execGlobal$2(receiver, start);
      if (match == null)
        t1 = -1;
      else {
        match.get$start;
        t1 = match._match.index;
      }
      return t1;
    }
    for (t1 = receiver.length, t2 = $.getInterceptor$s(pattern), i = start; i <= t1; ++i)
      if (t2.matchAsPrefix$2(pattern, receiver, i) != null)
        return i;
    return -1;
  },
  indexOf$1: function($receiver, pattern) {
    return this.indexOf$2($receiver, pattern, 0);
  },
  lastIndexOf$2: function(receiver, pattern, start) {
    var t1, t2, i;
    start = receiver.length;
    if (start == null)
      return this.lastIndexOf$2$bailout(1, pattern, receiver, start);
    t1 = pattern.length;
    t2 = receiver.length;
    if (start + t1 > t2)
      start = t2 - t1;
    return receiver.lastIndexOf(pattern, start);
    for (i = start; i >= 0; --i)
      if (this.matchAsPrefix$2(pattern, receiver, i) != null)
        return i;
    return -1;
  },
  lastIndexOf$2$bailout: function(state0, pattern, receiver, start) {
    var t1, t2, i;
    t1 = pattern.length;
    if (start == null)
      throw start.$add();
    t2 = receiver.length;
    if (start + t1 > t2)
      start = t2 - t1;
    return receiver.lastIndexOf(pattern, start);
    i = start;
    while (true) {
      if (i == null)
        throw i.$ge();
      if (!(i >= 0))
        break;
      if (this.matchAsPrefix$2(pattern, receiver, i) != null)
        return i;
      --i;
    }
    return -1;
  },
  lastIndexOf$1: function($receiver, pattern) {
    return this.lastIndexOf$2($receiver, pattern, null);
  },
  contains$2: function(receiver, other, startIndex) {
    if (other == null)
      $.throwExpression(new $.ArgumentError(null));
    if (startIndex < 0 || startIndex > receiver.length)
      throw $.wrapException(new $.RangeError("value " + startIndex + " not in range 0.." + receiver.length));
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  "+contains:1:1": 0,
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  get$isNotEmpty: function(receiver) {
    return receiver.length !== 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$runtimeType: function(receiver) {
    return $.Type_IYi;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver[index];
  },
  $isString: true
},

"+JSString": 0,

_symbolMapToStringMap0: function(map) {
  var result;
  if (map == null)
    return;
  result = new $.HashMap(0, null, null, null, null);
  result.$builtinTypeInfo = [$.JSString, null];
  $.forEach$1$ax(map, new $._symbolMapToStringMap_closure0(result));
  return result;
},

"+_symbolMapToStringMap:1:0": 0,

getInterceptor: function(object) {
  return $.getInterceptor(object);
},

"+getInterceptor:1:0": 0,

getDispatchProperty: function(object) {
  return object[$.dispatchPropertyName];
},

"+getDispatchProperty:1:0": 0,

setDispatchProperty: function(object, value) {
  Object.defineProperty(object, $.dispatchPropertyName, {value: value, enumerable: false, writable: true, configurable: true});
},

"+setDispatchProperty:2:0": 0,

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

"+makeDispatchRecord:4:0": 0,

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  if (record == null)
    return $.C_JSUnknown;
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
},

"+getNativeInterceptor:1:0": 0,

initializeDispatchPropertyCSP: function(setGetDispatchPropertyFn, getterFunctions, jsObjectInterceptor) {
  var objectProto, rootProperty, i, getter, property;
  objectProto = Object.prototype;
  for (rootProperty = null, i = 0; true; ++i) {
    if (i < getterFunctions.length) {
      getter = getterFunctions[i];
      property = ("" + getter).match(/\.([^;}]*)/)[1];
      rootProperty = property;
    } else {
      property = rootProperty + "_" + i;
      getter = null;
    }
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      if (getter != null)
        setGetDispatchPropertyFn(getter);
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

"+initializeDispatchPropertyCSP:3:0": 0,

JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
},

"+_isWhitespace:1:0": 0}],
["_isolate_helper", "dart:_isolate_helper", , {
CloseToken: {
  "": function CloseToken() {
  },
  "super": "Object",
  $isCloseToken: true
},

"+CloseToken": 0,

JsIsolateSink: {
  "": function JsIsolateSink(_isClosed, _port) {
    this._isClosed = _isClosed;
    this._port = _port;
  },
  "super": "EventSink",
  get$_isClosed: function() {
    return this._isClosed;
  },
  set$_isClosed: function(v) {
    this._isClosed = v;
  },
  get$_port: function() {
    return this._port;
  },
  add$1: function(_, message) {
    var t1 = this._port;
    t1.send$1(t1, message);
  },
  close$0: function(_) {
    var t1;
    if (this._isClosed === true)
      return;
    t1 = this._port;
    t1.send$1(t1, $.C_CloseToken);
    this._isClosed = true;
  },
  "+close:0:0": 0,
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asEventSink: function() { return [null]; },
  $asIsolateSink: null,
  $isIsolateSink: true
},

"+JsIsolateSink": 0,

_Manager: {
  "": function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
  },
  "super": "Object",
  get$nextIsolateId: function() {
    return this.nextIsolateId;
  },
  set$nextIsolateId: function(v) {
    this.nextIsolateId = v;
  },
  get$currentManagerId: function() {
    return this.currentManagerId;
  },
  set$currentManagerId: function(v) {
    this.currentManagerId = v;
  },
  get$nextManagerId: function() {
    return this.nextManagerId;
  },
  set$nextManagerId: function(v) {
    this.nextManagerId = v;
  },
  get$currentContext: function() {
    return this.currentContext;
  },
  set$currentContext: function(v) {
    this.currentContext = v;
  },
  get$rootContext: function() {
    return this.rootContext;
  },
  set$rootContext: function(v) {
    this.rootContext = v;
  },
  get$topEventLoop: function() {
    return this.topEventLoop;
  },
  set$topEventLoop: function(v) {
    this.topEventLoop = v;
  },
  get$fromCommandLine: function() {
    return this.fromCommandLine;
  },
  set$fromCommandLine: function(v) {
    this.fromCommandLine = v;
  },
  get$isWorker: function() {
    return this.isWorker;
  },
  set$isWorker: function(v) {
    this.isWorker = v;
  },
  get$supportsWorkers: function() {
    return this.supportsWorkers;
  },
  set$supportsWorkers: function(v) {
    this.supportsWorkers = v;
  },
  get$isolates: function() {
    return this.isolates;
  },
  set$isolates: function(v) {
    this.isolates = v;
  },
  get$mainManager: function() {
    return this.mainManager;
  },
  set$mainManager: function(v) {
    this.mainManager = v;
  },
  get$managers: function() {
    return this.managers;
  },
  set$managers: function(v) {
    this.managers = v;
  },
  get$entry: function() {
    return this.entry;
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  "+_nativeDetectEnvironment:0:0": 0,
  _Manager$1: function(entry) {
    var t1, $function;
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new $._EventLoop($.ListQueue$(null, $._IsolateEvent), 0);
    t1 = new $.HashMap(0, null, null, null, null);
    t1.$builtinTypeInfo = [$.JSInt, $._IsolateContext];
    this.isolates = t1;
    t1 = new $.HashMap(0, null, null, null, null);
    t1.$builtinTypeInfo = [$.JSInt, null];
    this.managers = t1;
    if (this.isWorker === true) {
      this.mainManager = new $._MainManagerStub();
      $function = function (e) { $.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
      $.get$globalThis().onmessage = $function;
      $.get$globalThis().dartPrint = function (object) {};
    }
  }
},

"+_Manager": 0,

_IsolateContext: {
  "": function _IsolateContext(id, ports, isolateStatics) {
    this.id = id;
    this.ports = ports;
    this.isolateStatics = isolateStatics;
  },
  "super": "Object",
  get$id: function(receiver) {
    return this.id;
  },
  set$id: function(receiver, v) {
    this.id = v;
  },
  get$ports: function(receiver) {
    return this.ports;
  },
  set$ports: function(receiver, v) {
    this.ports = v;
  },
  get$isolateStatics: function() {
    return this.isolateStatics;
  },
  set$isolateStatics: function(v) {
    this.isolateStatics = v;
  },
  eval$1: function(code) {
    var old, result, t1;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null) {
        t1 = old;
        t1._setGlobals$0;
        $ = t1.get$isolateStatics();
      }
    }
    return result;
  },
  "+eval:1:0": 0,
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  "+lookup:1:0": 0,
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw $.wrapException(new $._ExceptionImplementation("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  "+register:2:0": 0
},

"+_IsolateContext": 0,

_EventLoop: {
  "": function _EventLoop(events, activeTimerCount) {
    this.events = events;
    this.activeTimerCount = activeTimerCount;
  },
  "super": "Object",
  get$events: function() {
    return this.events;
  },
  get$activeTimerCount: function() {
    return this.activeTimerCount;
  },
  set$activeTimerCount: function(v) {
    this.activeTimerCount = v;
  },
  dequeue$0: function() {
    var t1 = this.events;
    if ($.$eq(t1._head, t1._tail))
      return;
    return t1.removeFirst$0();
  },
  "+dequeue:0:0": 0,
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._liblib0$_length === 0)
      throw $.wrapException(new $._ExceptionImplementation("Program exited with open ReceivePorts."));
  },
  "+checkOpenReceivePortsFromCommandLine:0:0": 0,
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true) {
        t2 = t1.isolates;
        t2.get$isEmpty;
        t2 = t2._liblib0$_length === 0 && t1.topEventLoop.activeTimerCount === 0;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "close"]));
        t1.postMessage$1;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  "+runIteration:0:0": 0,
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  "+_runHelper:0:0": 0,
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)]));
        t1.postMessage$1;
        self.postMessage(t2);
      }

  },
  "+run:0:0": 0
},

"+_EventLoop": 0,

_EventLoop__runHelper_next: {
  "": function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    if (this.this_0.runIteration$0() !== true)
      return;
    var t1 = $.get$_Zone__current();
    new $._ZoneTimer(t1, this, null, false)._ZoneTimer$3(t1, $.Duration_0, this);
  },
  "+call:0:0": 0,
  $isFunction: true
},

"+_EventLoop__runHelper_next": 0,

_IsolateEvent: {
  "": function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  },
  "super": "Object",
  get$isolate: function() {
    return this.isolate;
  },
  set$isolate: function(v) {
    this.isolate = v;
  },
  get$fn: function() {
    return this.fn;
  },
  set$fn: function(v) {
    this.fn = v;
  },
  get$message: function(receiver) {
    return this.message;
  },
  set$message: function(receiver, v) {
    this.message = v;
  },
  process$0: function() {
    this.isolate.eval$1(this.fn);
  },
  "+process:0:0": 0
},

"+_IsolateEvent": 0,

_MainManagerStub: {
  "": function _MainManagerStub() {
  },
  "super": "Object"
},

"+_MainManagerStub": 0,

IsolateNatives__processWorkerMessage_closure: {
  "": function IsolateNatives__processWorkerMessage_closure(entryPoint_0, replyTo_1) {
    this.entryPoint_0 = entryPoint_0;
    this.replyTo_1 = replyTo_1;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2;
    t1 = $.ReceivePortImpl__nextFreeId;
    $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
    t1 = new $.ReceivePortImpl(t1, null);
    t2 = $._globalState().currentContext;
    t2.register$2(t2, t1._id, t1);
    $.lazyPort = t1;
    if ($.lazyPort == null)
      $.lazyPort = $.ReceivePortImpl$();
    t1 = $.lazyPort;
    t1.toSendPort$0;
    $.send$2$x(this.replyTo_1, "spawned", new $._NativeJsSendPort(t1, $globalState.currentContext.id));
    this.entryPoint_0.call$0();
  },
  $isFunction: true
},

"+IsolateNatives__processWorkerMessage_closure": 0,

_BaseSendPort: {
  "": function _BaseSendPort(_isolateId) {
    this._isolateId = _isolateId;
  },
  "super": "Object",
  get$_isolateId: function() {
    return this._isolateId;
  },
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException(new $._ExceptionImplementation("SendPort.send: Illegal replyTo port type"));
  },
  "+_checkReplyTo:1:0": 0,
  call$1: function(message) {
    var t1, t2, completer, futureImpl, port, t3;
    t1 = null;
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [t1];
    completer = new $._AsyncCompleter(t2, false);
    completer.$builtinTypeInfo = [t1];
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    t1 = $.ReceivePortImpl__nextFreeId;
    $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
    port = new $.ReceivePortImpl(t1, null);
    t1 = $globalState.currentContext;
    t2 = port._id;
    t1.register$2;
    if (t1.ports.containsKey$1(t2))
      $.throwExpression($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t3 = t1.ports;
    t3.$indexSet(t3, t2, port);
    t2 = $globalState.isolates;
    t2.$indexSet(t2, t1.id, t1);
    this.send$2(this, message, new $._NativeJsSendPort(port, $globalState.currentContext.id));
    port._callback = new $._BaseSendPort_call_closure(completer, port);
    return futureImpl;
  },
  "+call:1:0": 0,
  $isFunction: true,
  $isSendPort: true
},

"+_BaseSendPort": 0,

_BaseSendPort_call_closure: {
  "": function _BaseSendPort_call_closure(completer_0, port_1) {
    this.completer_0 = completer_0;
    this.port_1 = port_1;
  },
  "super": "Closure",
  call$2: function(value, ignoreReplyTo) {
    var t1, t2, t3;
    t1 = this.port_1;
    t1._callback = null;
    t2 = $globalState.currentContext;
    t2.unregister$1;
    t3 = t2.ports;
    t3.remove$1(t3, t1._id);
    if (t2.ports._liblib0$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, t2.id);
    }
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException)
      t1.completeError$1(value);
    else {
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t2 = t1.future._zone;
      t2._openCallbacks = t2._openCallbacks - 1;
      if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      t1._setFutureValue$1(value);
    }
  },
  $isFunction: true
},

"+_BaseSendPort_call_closure": 0,

_NativeJsSendPort: {
  "": function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
  },
  "super": "_BaseSendPort",
  get$_receivePort: function() {
    return this._receivePort;
  },
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  "+send:1:1": 0,
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  "+send:1:0": 0,
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

"+_NativeJsSendPort": 0,

_NativeJsSendPort_send_closure: {
  "": function _NativeJsSendPort_send_closure(this_1, message_2, replyTo_3) {
    this.this_1 = this_1;
    this.message_2 = message_2;
    this.replyTo_3 = replyTo_3;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t2.get$_isolateId();
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    t3 = $globalState.topEventLoop;
    t4 = "receive " + $.S(msg);
    t3.enqueue$3;
    t3 = t3.events;
    t3._add$1(t3, new $._IsolateEvent(isolate, new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), t4));
  },
  $isFunction: true
},

"+_NativeJsSendPort_send_closure": 0,

_NativeJsSendPort_send__closure: {
  "": function _NativeJsSendPort_send__closure(box_0, this_4, shouldSerialize_5) {
    this.box_0 = box_0;
    this.this_4 = this_4;
    this.shouldSerialize_5 = shouldSerialize_5;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isFunction: true
},

"+_NativeJsSendPort_send__closure": 0,

_WorkerSendPort: {
  "": function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  },
  "super": "_BaseSendPort",
  get$_workerId: function() {
    return this._workerId;
  },
  get$_receivePortId: function() {
    return this._receivePortId;
  },
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort)
      t1 = $.$eq(this._workerId, other._workerId) && $.$eq(this._isolateId, other._isolateId) && $.$eq(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.$xor$n($.$xor$n($.$shl$n(this._workerId, 16), $.$shl$n(this._isolateId, 8)), this._receivePortId);
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

"+_WorkerSendPort": 0,

_WorkerSendPort_send_closure: {
  "": function _WorkerSendPort_send_closure(this_0, message_1, replyTo_2) {
    this.this_0 = this_0;
    this.message_1 = message_1;
    this.replyTo_2 = replyTo_2;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.postMessage$1;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  },
  $isFunction: true
},

"+_WorkerSendPort_send_closure": 0,

ReceivePortImpl: {
  "": function ReceivePortImpl(_id, _callback) {
    this._id = _id;
    this._callback = _callback;
  },
  "super": "Object",
  get$_id: function() {
    return this._id;
  },
  set$_id: function(v) {
    this._id = v;
  },
  get$_callback: function() {
    return this._callback;
  },
  set$_callback: function(v) {
    this._callback = v;
  },
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  close$0: function(_) {
    var t1, t2;
    this._callback = null;
    t1 = $globalState.currentContext;
    t1.unregister$1;
    t2 = t1.ports;
    t2.remove$1(t2, this._id);
    if (t1.ports._liblib0$_length === 0) {
      t2 = $globalState.isolates;
      t2.remove$1(t2, t1.id);
    }
  },
  toSendPort$0: function() {
    return new $._NativeJsSendPort(this, $globalState.currentContext.id);
  },
  "+toSendPort:0:0": 0
},

"+ReceivePortImpl": 0,

_waitForPendingPorts_closure: {
  "": function _waitForPendingPorts_closure(callback_0) {
    this.callback_0 = callback_0;
  },
  "super": "Closure",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true
},

"+_waitForPendingPorts_closure": 0,

_PendingSendPortFinder: {
  "": function _PendingSendPortFinder(ports, _visited) {
    this.ports = ports;
    this._visited = _visited;
  },
  "super": "_MessageTraverser",
  get$ports: function(receiver) {
    return this.ports;
  },
  set$ports: function(receiver, v) {
    this.ports = v;
  },
  visitPrimitive$1: function(x) {
  },
  "+visitPrimitive:1:0": 0,
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  "+visitList:1:0": 0,
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax(map.get$values(map), new $._PendingSendPortFinder_visitMap_closure(this));
  },
  "+visitMap:1:0": 0,
  visitSendPort$1: function(port) {
  },
  "+visitSendPort:1:0": 0,
  visitIsolateSink$1: function(sink) {
    var t1 = sink._port;
  },
  "+visitIsolateSink:1:0": 0,
  visitCloseToken$1: function(token) {
  },
  "+visitCloseToken:1:0": 0
},

"+_PendingSendPortFinder": 0,

_PendingSendPortFinder_visitList_closure: {
  "": function _PendingSendPortFinder_visitList_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
},

"+_PendingSendPortFinder_visitList_closure": 0,

_PendingSendPortFinder_visitMap_closure: {
  "": function _PendingSendPortFinder_visitMap_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
},

"+_PendingSendPortFinder_visitMap_closure": 0,

_JsSerializer: {
  "": function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  },
  "super": "_Serializer",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  }
},

"+_JsSerializer": 0,

_JsCopier: {
  "": function _JsCopier(_visited) {
    this._visited = _visited;
  },
  "super": "_Copier",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return new $._NativeJsSendPort(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return new $._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var result = new $.JsIsolateSink(false, this.visitSendPort$1(sink._port));
    result._isClosed = sink._isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  }
},

"+_JsCopier": 0,

_JsDeserializer: {
  "": function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  },
  "super": "_Deserializer",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new $._NativeJsSendPort(receivePort, isolateId);
    } else
      return new $._WorkerSendPort(managerId, receivePortId, isolateId);
  },
  "+deserializeSendPort:1:0": 0,
  deserializeIsolateSink$1: function(list) {
    var t1, port, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    result = new $.JsIsolateSink(false, port);
    result._isClosed = t1.$index(list, 2);
    return result;
  },
  "+deserializeIsolateSink:1:0": 0,
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  },
  "+deserializeCloseToken:1:0": 0
},

"+_JsDeserializer": 0,

_JsVisitedMap: {
  "": function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  },
  "super": "Object",
  get$tagged: function() {
    return this.tagged;
  },
  set$tagged: function(v) {
    this.tagged = v;
  },
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($, null);
  },
  "+reset:0:0": 0,
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  },
  "+cleanup:0:0": 0
},

"+_JsVisitedMap": 0,

_MessageTraverserVisitedMap: {
  "": function _MessageTraverserVisitedMap() {
  },
  "super": "Object",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

"+_MessageTraverserVisitedMap": 0,

_MessageTraverser: {
  "": function _MessageTraverser(_visited) {
    this._visited = _visited;
  },
  "super": "Object",
  get$_visited: function() {
    return this._visited;
  },
  set$_visited: function(v) {
    this._visited = v;
  },
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  "+traverse:1:0": 0,
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPortSync)
      return this.visitSendPortSync$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    return this.visitObject$1(x);
  },
  "+_dispatch:1:0": 0,
  visitObject$1: function(x) {
    throw $.wrapException("Message serialization: Illegal value " + $.S(x) + " passed");
  },
  "+visitObject:1:0": 0
},

"+_MessageTraverser": 0,

_Copier: {
  "": function _Copier(_visited) {
    this._visited = _visited;
  },
  "super": "_MessageTraverser",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    if (typeof len !== "number")
      throw $.iae(len);
    t2 = copy.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2, copy;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    copy = new $.HashMap(0, null, null, null, null);
    copy.$builtinTypeInfo = [null, null];
    t1.copy_0 = copy;
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

"+_Copier": 0,

_Copier_visitMap_closure: {
  "": function _Copier_visitMap_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  },
  "super": "Closure",
  call$2: function(key, val) {
    var t1 = this.this_1;
    $.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $isFunction: true
},

"+_Copier_visitMap_closure": 0,

_Serializer: {
  "": function _Serializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  },
  "super": "_MessageTraverser",
  get$_nextFreeRefId: function() {
    return this._nextFreeRefId;
  },
  set$_nextFreeRefId: function(v) {
    this._nextFreeRefId = v;
  },
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1($.toList$0$ax(map.get$keys())), this._serializeList$1($.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  "+_serializeList:1:0": 0,
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len, null);
    if (typeof len !== "number")
      throw $.iae(len);
    t2 = result.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
},

"+_Serializer": 0,

_Deserializer: {
  "": function _Deserializer(_deserialized) {
    this._deserialized = _deserialized;
  },
  "super": "Object",
  get$_deserialized: function() {
    return this._deserialized;
  },
  set$_deserialized: function(v) {
    this._deserialized = v;
  },
  deserialize$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = new $.HashMap(0, null, null, null, null);
    t1.$builtinTypeInfo = [null, null];
    this._deserialized = t1;
    return this._deserializeHelper$1(x);
  },
  "+deserialize:1:0": 0,
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = $.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  "+_deserializeHelper:1:0": 0,
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.isJsIndexable(dartList, dartList[$.dispatchPropertyName]))
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  "+_deserializeList:1:0": 0,
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw $.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = new $.HashMap(0, null, null, null, null);
    result.$builtinTypeInfo = [null, null];
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.isJsIndexable(keys, keys[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(1, x, keys, t1, result);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.isJsIndexable(values, values[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(2, 0, keys, 0, result, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  "+_deserializeMap:1:0": 0,
  _deserializeMap$1$bailout: function(state0, x, keys, t1, result, values) {
    switch (state0) {
      case 0:
        result = new $.HashMap(0, null, null, null, null);
        result.$builtinTypeInfo = [null, null];
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        if (typeof len !== "number")
          throw $.iae(len);
        t2 = $.getInterceptor$asx(values);
        i = 0;
        for (; i < len; ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.wrapException("Unexpected serialized object");
  },
  "+deserializeObject:1:0": 0
},

"+_Deserializer": 0,

TimerImpl: {
  "": function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  },
  "super": "Object",
  get$_once: function() {
    return this._once;
  },
  get$_inEventLoop: function() {
    return this._inEventLoop;
  },
  set$_inEventLoop: function(v) {
    this._inEventLoop = v;
  },
  get$_handle: function() {
    return this._handle;
  },
  set$_handle: function(v) {
    this._handle = v;
  },
  cancel$0: function() {
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw $.wrapException(new $.UnsupportedError("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.wrapException(new $.UnsupportedError("Canceling a timer."));
  },
  "+cancel:0:0": 0,
  TimerImpl$periodic$2: function(milliseconds, callback) {
    var t1;
    if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setInterval($.convertDartClosureToJS(new $.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
    } else
      throw $.wrapException(new $.UnsupportedError("Periodic timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.enqueue$3;
      t1 = t1.events;
      t1._add$1(t1, new $._IsolateEvent(t2, callback, "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback(this, callback), 0), milliseconds);
    } else
      throw $.wrapException(new $.UnsupportedError("Timer greater than 0."));
  }
},

"+TimerImpl": 0,

TimerImpl_internalCallback: {
  "": function TimerImpl_internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  },
  "super": "Closure",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  },
  $isFunction: true
},

"+TimerImpl_internalCallback": 0,

TimerImpl$periodic_closure: {
  "": function TimerImpl$periodic_closure(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  },
  "super": "Closure",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  },
  $isFunction: true
},

"+TimerImpl$periodic_closure": 0,

startRootIsolate: function(entry) {
  var rootContext, t1, t2;
  $globalState = $._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = new $._IsolateContext(null, null, null);
  t1 = $globalState;
  t2 = t1.nextIsolateId;
  t1.nextIsolateId = t2 + 1;
  rootContext.id = t2;
  t2 = new $.HashMap(0, null, null, null, null);
  $.setRuntimeTypeInfo(t2, [$.JSInt, $.ReceivePort]);
  rootContext.ports = t2;
  rootContext.isolateStatics = new Isolate();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

"+startRootIsolate:1:0": 0,

_globalState: function() {
  return $globalState;
},

"+_globalState": 0,

_Manager$: function(entry) {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
},

"+new _Manager:1:0": 0,

IsolateNatives_computeThisScript: function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException(new $.UnsupportedError("Cannot extract URI from \"" + stack + "\""));
},

"+computeThisScript:0:0": 0,

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2, values;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : $[functionName];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = new $._IsolateContext(null, null, null);
      t1 = $globalState;
      t2 = t1.nextIsolateId;
      t1.nextIsolateId = t2 + 1;
      context.id = t2;
      t2 = new $.HashMap(0, null, null, null, null);
      $.setRuntimeTypeInfo(t2, [$.JSInt, $.ReceivePort]);
      context.ports = t2;
      context.isolateStatics = new Isolate();
      t2 = $globalState.topEventLoop;
      t2.enqueue$3;
      t2 = t2.events;
      t2._add$1(t2, new $._IsolateEvent(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        $.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      values = $.Primitives_getProperty(sender, "expando$values");
      t1.remove$1(t1, values == null ? null : $.Primitives_getProperty(values, t2._getKey$0()));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg]));
        t1.postMessage$1;
        self.postMessage(t2);
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
},

"+_processWorkerMessage:2:0": 0,

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg]));
    t1.postMessage$1;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.wrapException(new $._ExceptionImplementation(trace));
    }

},

"+_log:1:0": 0,

IsolateNatives__spawnWorker: function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { $.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
},

"+_spawnWorker:3:0": 0,

ReceivePortImpl$: function() {
  var t1, t2, t3, t4;
  t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t2 = $globalState.currentContext;
  t3 = t1._id;
  t2.register$2;
  if (t2.ports.containsKey$1(t3))
    $.throwExpression(new $._ExceptionImplementation("Registry: ports must be registered only once."));
  t4 = t2.ports;
  t4.$indexSet(t4, t3, t1);
  t3 = $globalState.isolates;
  t3.$indexSet(t3, t2.id, t2);
  return t1;
},

"+new ReceivePortImpl:0:0": 0,

_waitForPendingPorts: function(message, callback) {
  var finder = new $._PendingSendPortFinder([], new $._MessageTraverserVisitedMap());
  finder._visited = new $._JsVisitedMap(null);
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports, $.JSArray).then$1(new $._waitForPendingPorts_closure(callback));
},

"+_waitForPendingPorts:2:0": 0,

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new $._JsSerializer(0, new $._MessageTraverserVisitedMap());
    t1._visited = new $._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new $._JsCopier(new $._MessageTraverserVisitedMap());
    t1._visited = new $._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

"+_serializeMessage:1:0": 0,

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new $._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

"+_deserializeMessage:1:0": 0,

TimerImpl$: function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
},

"+new TimerImpl:2:0": 0,

TimerImpl$periodic: function(milliseconds, callback) {
  var t1 = new $.TimerImpl(false, false, null);
  t1.TimerImpl$periodic$2(milliseconds, callback);
  return t1;
},

"+new TimerImpl$periodic:2:0": 0}],
["_js_helper", "dart:_js_helper", , {
ConstantMap: {
  "": function ConstantMap(length, _jsObject, _liblib18$_keys) {
    this.length = length;
    this._jsObject = _jsObject;
    this._liblib18$_keys = _liblib18$_keys;
  },
  "super": "Object",
  get$length: function(receiver) {
    return this.length;
  },
  get$_jsObject: function() {
    return this._jsObject;
  },
  get$_liblib18$_keys: function() {
    return this._liblib18$_keys;
  },
  containsKey$1: function(key) {
    if (typeof key !== "string")
      return this.containsKey$1$bailout(1, key);
    if (key === "__proto__")
      return false;
    return this._jsObject.hasOwnProperty(key);
  },
  "+containsKey:1:0": 0,
  containsKey$1$bailout: function(state0, key) {
    if ($.$eq(key, "__proto__"))
      return false;
    return this._jsObject.hasOwnProperty(key);
  },
  $index: function(_, key) {
    if (!this.containsKey$1(key))
      return;
    return this._jsObject[key];
  },
  forEach$1: function(_, f) {
    $.forEach$1$ax(this._liblib18$_keys, new $.ConstantMap_forEach_closure(this, f));
  },
  get$keys: function() {
    return new $._ConstantMapKeyIterable(this);
  },
  "+keys": 0,
  get$values: function(_) {
    return $.map$1$ax(this._liblib18$_keys, new $.ConstantMap_values_closure(this));
  },
  "+values": 0,
  get$isEmpty: function(_) {
    var t1 = this.length;
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$eq(t1, 0);
  },
  get$isNotEmpty: function(_) {
    return !$.$eq(this.length, 0);
  },
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  _throwUnmodifiable$0: function() {
    throw $.wrapException(new $.UnsupportedError("Cannot modify unmodifiable Map"));
  },
  "+_throwUnmodifiable:0:0": 0,
  $indexSet: function(_, key, val) {
    return this._throwUnmodifiable$0();
  },
  remove$1: function(_, key) {
    return this._throwUnmodifiable$0();
  },
  $isMap: true,
  $asMap: function (V) { return [$.JSString, V]; }
},

"+ConstantMap": 0,

ConstantMap_forEach_closure: {
  "": function ConstantMap_forEach_closure(this_0, f_1) {
    this.this_0 = this_0;
    this.f_1 = f_1;
  },
  "super": "Closure",
  call$1: function(key) {
    return this.f_1.call$2(key, $.$index$asx(this.this_0, key));
  },
  $isFunction: true
},

"+ConstantMap_forEach_closure": 0,

ConstantMap_values_closure: {
  "": function ConstantMap_values_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(key) {
    return $.$index$asx(this.this_0, key);
  },
  $isFunction: true
},

"+ConstantMap_values_closure": 0,

ConstantProtoMap: {
  "": function ConstantProtoMap(_protoValue, length, _jsObject, _liblib18$_keys) {
    this._protoValue = _protoValue;
    this.length = length;
    this._jsObject = _jsObject;
    this._liblib18$_keys = _liblib18$_keys;
  },
  "super": "ConstantMap",
  get$_protoValue: function() {
    return this._protoValue;
  },
  containsKey$1: function(key) {
    if (typeof key !== "string")
      return this.containsKey$1$bailout1(1, key);
    if (key === "__proto__")
      return true;
    return $.ConstantMap.prototype.containsKey$1.call(this, key);
  },
  containsKey$1$bailout1: function(state0, key) {
    if ($.$eq(key, "__proto__"))
      return true;
    return $.ConstantMap.prototype.containsKey$1.call(this, key);
  },
  $index: function(_, key) {
    if (typeof key !== "string")
      return this.$$index$bailout1(1, key);
    if (key === "__proto__")
      return this._protoValue;
    return $.ConstantMap.prototype.$index.call(this, this, key);
  },
  $$index$bailout1: function(state0, key) {
    if ($.$eq(key, "__proto__"))
      return this._protoValue;
    return $.ConstantMap.prototype.$index.call(this, this, key);
  },
  $asConstantMap: null,
  $asMap: function (V) { return [$.JSString, V]; }
},

"+ConstantProtoMap": 0,

_ConstantMapKeyIterable: {
  "": function _ConstantMapKeyIterable(_liblib18$_map) {
    this._liblib18$_map = _liblib18$_map;
  },
  "super": "IterableBase",
  get$_liblib18$_map: function() {
    return this._liblib18$_map;
  },
  set$_liblib18$_map: function(v) {
    this._liblib18$_map = v;
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this._liblib18$_map._liblib18$_keys);
  },
  $asIterableBase: function() { return [$.JSString]; },
  $asIterable: function() { return [$.JSString]; }
},

"+_ConstantMapKeyIterable": 0,

JSInvocationMirror: {
  "": function JSInvocationMirror(_liblib18$_memberName, _internalName, _liblib18$_kind, _liblib18$_arguments, _namedArgumentNames, _namedIndices) {
    this._liblib18$_memberName = _liblib18$_memberName;
    this._internalName = _internalName;
    this._liblib18$_kind = _liblib18$_kind;
    this._liblib18$_arguments = _liblib18$_arguments;
    this._namedArgumentNames = _namedArgumentNames;
    this._namedIndices = _namedIndices;
  },
  "super": "Object",
  get$_liblib18$_memberName: function() {
    return this._liblib18$_memberName;
  },
  set$_liblib18$_memberName: function(v) {
    this._liblib18$_memberName = v;
  },
  get$_internalName: function() {
    return this._internalName;
  },
  get$_liblib18$_kind: function() {
    return this._liblib18$_kind;
  },
  get$_liblib18$_arguments: function() {
    return this._liblib18$_arguments;
  },
  get$_namedArgumentNames: function() {
    return this._namedArgumentNames;
  },
  get$_namedIndices: function() {
    return this._namedIndices;
  },
  set$_namedIndices: function(v) {
    this._namedIndices = v;
  },
  get$memberName: function() {
    var $name, t1, unmangledName;
    $name = this._liblib18$_memberName;
    if (typeof $name === "object" && $name !== null && !!$.getInterceptor($name).$isSymbol)
      return $name;
    t1 = $.get$mangledNames();
    unmangledName = t1.$index(t1, $name);
    if (unmangledName != null)
      $name = $.$index$asx($.split$1$s(unmangledName, ":"), 0);
    this._liblib18$_memberName = new $.Symbol0($name);
    return this._liblib18$_memberName;
  },
  "+memberName": 0,
  get$isGetter: function() {
    return $.$eq(this._liblib18$_kind, 1);
  },
  "+isGetter": 0,
  get$isSetter: function() {
    return $.$eq(this._liblib18$_kind, 2);
  },
  "+isSetter": 0,
  get$positionalArguments: function() {
    var list, t1, t2, t3, argumentCount, index;
    if ($.$eq(this._liblib18$_kind, 1))
      return;
    list = [];
    t1 = this._liblib18$_arguments;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.get$positionalArguments$bailout(1, t1, list);
    t2 = t1.length;
    t3 = $.get$length$asx(this._namedArgumentNames);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    argumentCount = t2 - t3;
    for (index = 0; index < argumentCount; ++index) {
      if (index >= t1.length)
        throw $.ioore(index);
      list.push(t1[index]);
    }
    return list;
  },
  "+positionalArguments": 0,
  get$positionalArguments$bailout: function(state0, t1, list) {
    var t2, t3, t4, argumentCount, index;
    t2 = $.getInterceptor$asx(t1);
    t3 = t2.get$length(t1);
    t4 = $.get$length$asx(this._namedArgumentNames);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    argumentCount = $.$sub$n(t3, t4);
    if (typeof argumentCount !== "number")
      throw $.iae(argumentCount);
    index = 0;
    for (; index < argumentCount; ++index)
      list.push(t2.$index(t1, index));
    return list;
  },
  get$namedArguments: function() {
    var map, t1, t2, namedArgumentCount, t3, namedArgumentsStartIndex, i, t4;
    if (!$.$eq(this._liblib18$_kind, 0))
      return;
    map = new $.HashMap(0, null, null, null, null);
    map.$builtinTypeInfo = [$.Symbol, null];
    t1 = this._namedArgumentNames;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.get$namedArguments$bailout(1, map, t1);
    t2 = $.getInterceptor(t1);
    namedArgumentCount = t1.length;
    t3 = this._liblib18$_arguments;
    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !$.isJsIndexable(t3, t3[$.dispatchPropertyName])))
      return this.get$namedArguments$bailout(2, map, t1, namedArgumentCount, t3, t2);
    namedArgumentsStartIndex = t3.length - namedArgumentCount;
    for (i = 0; i < namedArgumentCount; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i];
      t4 = namedArgumentsStartIndex + i;
      if (t4 < 0 || t4 >= t3.length)
        throw $.ioore(t4);
      map.$indexSet(map, new $.Symbol0(t2), t3[t4]);
    }
    return map;
  },
  "+namedArguments": 0,
  get$namedArguments$bailout: function(state0, map, t1, namedArgumentCount, t3, t2) {
    switch (state0) {
      case 0:
        if (!$.$eq(this._liblib18$_kind, 0))
          return;
        map = new $.HashMap(0, null, null, null, null);
        map.$builtinTypeInfo = [$.Symbol, null];
        t1 = this._namedArgumentNames;
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$asx(t1);
        namedArgumentCount = t2.get$length(t1);
        t3 = this._liblib18$_arguments;
      case 2:
        var t4, namedArgumentsStartIndex, t5, i;
        state0 = 0;
        t4 = $.getInterceptor$asx(t3);
        namedArgumentsStartIndex = $.$sub$n(t4.get$length(t3), namedArgumentCount);
        if (typeof namedArgumentCount !== "number")
          throw $.iae(namedArgumentCount);
        t5 = $.getInterceptor$ns(namedArgumentsStartIndex);
        i = 0;
        for (; i < namedArgumentCount; ++i)
          map.$indexSet(map, new $.Symbol0(t2.$index(t1, i)), t4.$index(t3, t5.$add(namedArgumentsStartIndex, i)));
        return map;
    }
  }
},

"+JSInvocationMirror": 0,

Primitives_applyFunction_closure: {
  "": function Primitives_applyFunction_closure(namedArguments_0, buffer_1, arguments_2) {
    this.namedArguments_0 = namedArguments_0;
    this.buffer_1 = buffer_1;
    this.arguments_2 = arguments_2;
  },
  "super": "Closure",
  call$1: function($name) {
    var t1, t2;
    t1 = this.buffer_1;
    t2 = "$" + $.S($name);
    t1._contents = t1._contents + t2;
    t1 = this.namedArguments_0;
    this.arguments_2.push(t1.$index(t1, $name));
  },
  $isFunction: true
},

"+Primitives_applyFunction_closure": 0,

DartError: {
  "": function DartError() {
  },
  "super": "Object",
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.stack == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.stack);
  }
},

"+DartError": 0,

_StackTrace: {
  "": function _StackTrace(_stack) {
    this._stack = _stack;
  },
  "super": "Object",
  get$_stack: function() {
    return this._stack;
  },
  set$_stack: function(v) {
    this._stack = v;
  },
  toString$0: function(_) {
    var t1 = this._stack;
    return t1 != null ? t1 : "";
  },
  $isStackTrace: true
},

"+_StackTrace": 0,

invokeClosure_closure: {
  "": function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  },
  "super": "Closure",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isFunction: true
},

"+invokeClosure_closure": 0,

invokeClosure_closure0: {
  "": function invokeClosure_closure(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  },
  "super": "Closure",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isFunction: true
},

"+invokeClosure_closure": 0,

invokeClosure_closure1: {
  "": function invokeClosure_closure(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  },
  "super": "Closure",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isFunction: true
},

"+invokeClosure_closure": 0,

Closure: {
  "": function Closure() {
  },
  "super": "Object",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true
},

"+Closure": 0,

BoundClosure: {
  "": function BoundClosure(_self, _target, _receiver) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
  },
  "super": "Closure",
  get$_self: function() {
    return this._self;
  },
  get$_target: function() {
    return this._target;
  },
  get$_receiver: function() {
    return this._receiver;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (this === other)
      return true;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isBoundClosure)
      return false;
    return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._self) + $.get$hashCode$(this._target) + $.get$hashCode$(this._receiver) & 0x3ffffff;
  },
  $isBoundClosure: true
},

"+BoundClosure": 0,

Creates: {
  "": function Creates(types) {
    this.types = types;
  },
  "super": "Object",
  get$types: function() {
    return this.types;
  }
},

"+Creates": 0,

Returns: {
  "": function Returns(types) {
    this.types = types;
  },
  "super": "Object",
  get$types: function() {
    return this.types;
  }
},

"+Returns": 0,

JSName: {
  "": function JSName(name) {
    this.name = name;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  }
},

"+JSName": 0,

Null: {
  "": function Null() {
  },
  "super": "Object"
},

"+Null": 0,

TypeErrorImplementation: {
  "": function TypeErrorImplementation(message) {
    this.message = message;
  },
  "super": "Object",
  get$message: function(receiver) {
    return this.message;
  },
  toString$0: function(_) {
    return this.message;
  }
},

"+TypeErrorImplementation": 0,

CastErrorImplementation: {
  "": function CastErrorImplementation(message) {
    this.message = message;
  },
  "super": "Object",
  get$message: function(receiver) {
    return this.message;
  },
  toString$0: function(_) {
    return this.message;
  }
},

"+CastErrorImplementation": 0,

FallThroughErrorImplementation: {
  "": function FallThroughErrorImplementation() {
  },
  "super": "Object",
  toString$0: function(_) {
    return "Switch case fall-through.";
  }
},

"+FallThroughErrorImplementation": 0,

TypeImpl: {
  "": function TypeImpl(_typeName) {
    this._typeName = _typeName;
  },
  "super": "Object",
  get$_typeName: function() {
    return this._typeName;
  },
  toString$0: function(_) {
    return this._typeName;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isTypeImpl && $.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true
},

"+TypeImpl": 0,

JSSyntaxRegExp: {
  "": function JSSyntaxRegExp(_nativeRegExp, _nativeGlobalRegExp, _nativeAnchoredRegExp) {
    this._nativeRegExp = _nativeRegExp;
    this._nativeGlobalRegExp = _nativeGlobalRegExp;
    this._nativeAnchoredRegExp = _nativeAnchoredRegExp;
  },
  "super": "Object",
  get$_nativeRegExp: function() {
    return this._nativeRegExp;
  },
  get$_nativeGlobalRegExp: function() {
    return this._nativeGlobalRegExp;
  },
  set$_nativeGlobalRegExp: function(v) {
    this._nativeGlobalRegExp = v;
  },
  get$_nativeAnchoredRegExp: function() {
    return this._nativeAnchoredRegExp;
  },
  set$_nativeAnchoredRegExp: function(v) {
    this._nativeAnchoredRegExp = v;
  },
  get$_nativeGlobalVersion: function() {
    var t1 = this._nativeGlobalRegExp;
    if (t1 != null)
      return t1;
    t1 = this._nativeRegExp;
    t1 = $.JSSyntaxRegExp_makeNative(t1.source, t1.multiline, !t1.ignoreCase, true);
    this._nativeGlobalRegExp = t1;
    return t1;
  },
  "+_nativeGlobalVersion": 0,
  get$_nativeAnchoredVersion: function() {
    var t1 = this._nativeAnchoredRegExp;
    if (t1 != null)
      return t1;
    t1 = this._nativeRegExp;
    t1 = $.JSSyntaxRegExp_makeNative(t1.source + "|()", t1.multiline, !t1.ignoreCase, true);
    this._nativeAnchoredRegExp = t1;
    return t1;
  },
  "+_nativeAnchoredVersion": 0,
  firstMatch$1: function(str) {
    var m;
    if (typeof str !== "string")
      $.throwExpression(new $.ArgumentError(str));
    m = this._nativeRegExp.exec(str);
    if (m == null)
      return;
    return new $._MatchImplementation(this, m);
  },
  "+firstMatch:1:0": 0,
  allMatches$1: function(_, str) {
    return new $._AllMatchesIterable(this, str);
  },
  _execGlobal$2: function(string, start) {
    var regexp, match;
    regexp = this.get$_nativeGlobalVersion();
    regexp.lastIndex = start;
    match = regexp.exec(string);
    if (match == null)
      return;
    return new $._MatchImplementation(this, match);
  },
  "+_execGlobal:2:0": 0,
  _execAnchored$2: function(string, start) {
    var regexp, match, t1, t2;
    regexp = this.get$_nativeAnchoredVersion();
    regexp.lastIndex = start;
    match = regexp.exec(string);
    if (match == null)
      return;
    t1 = match.length;
    t2 = t1 - 1;
    if (t2 < 0)
      throw $.ioore(t2);
    if (match[t2] != null)
      return;
    $.set$length$asx(match, t2);
    return new $._MatchImplementation(this, match);
  },
  "+_execAnchored:2:0": 0,
  matchAsPrefix$2: function(_, string, start) {
    if (start < 0 || start > string.length)
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + string.length));
    return this._execAnchored$2(string, start);
  },
  $isJSSyntaxRegExp: true,
  $isRegExp: true
},

"+JSSyntaxRegExp": 0,

_MatchImplementation: {
  "": function _MatchImplementation(pattern, _match) {
    this.pattern = pattern;
    this._match = _match;
  },
  "super": "Object",
  get$pattern: function(receiver) {
    return this.pattern;
  },
  get$_match: function() {
    return this._match;
  },
  group$1: function(index) {
    var t1 = this._match;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  "+group:1:0": 0,
  $index: function(_, index) {
    var t1 = this._match;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  }
},

"+_MatchImplementation": 0,

_AllMatchesIterable: {
  "": function _AllMatchesIterable(_re, _liblib18$_string) {
    this._re = _re;
    this._liblib18$_string = _liblib18$_string;
  },
  "super": "IterableBase",
  get$_re: function() {
    return this._re;
  },
  get$_liblib18$_string: function() {
    return this._liblib18$_string;
  },
  get$iterator: function(_) {
    return new $._AllMatchesIterator(this._re, this._liblib18$_string, null);
  },
  $asIterableBase: function() { return [$.Match]; },
  $asIterable: function() { return [$.Match]; }
},

"+_AllMatchesIterable": 0,

_AllMatchesIterator: {
  "": function _AllMatchesIterator(_regExp, _liblib18$_string, _liblib18$_current) {
    this._regExp = _regExp;
    this._liblib18$_string = _liblib18$_string;
    this._liblib18$_current = _liblib18$_current;
  },
  "super": "Object",
  get$_regExp: function() {
    return this._regExp;
  },
  get$_liblib18$_string: function() {
    return this._liblib18$_string;
  },
  set$_liblib18$_string: function(v) {
    this._liblib18$_string = v;
  },
  get$_liblib18$_current: function() {
    return this._liblib18$_current;
  },
  set$_liblib18$_current: function(v) {
    this._liblib18$_current = v;
  },
  get$current: function() {
    return this._liblib18$_current;
  },
  "+current": 0,
  current$0: function() {
    return this.get$current().call$0();
  },
  moveNext$0: function() {
    var t1, t2, index;
    if (this._liblib18$_string == null)
      return false;
    t1 = this._liblib18$_current;
    if (t1 != null) {
      t1.get$end;
      t1 = t1._match;
      t2 = t1.index;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1 = $.get$length$asx(t1[0]);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      index = t2 + t1;
      t1 = this._liblib18$_current;
      t1.get$start;
      if (t1._match.index === index)
        ++index;
    } else
      index = 0;
    this._liblib18$_current = this._regExp._execGlobal$2(this._liblib18$_string, index);
    if (this._liblib18$_current == null) {
      this._liblib18$_string = null;
      return false;
    }
    return true;
  },
  "+moveNext:0:0": 0
},

"+_AllMatchesIterator": 0,

StringMatch: {
  "": function StringMatch(start, str, pattern) {
    this.start = start;
    this.str = str;
    this.pattern = pattern;
  },
  "super": "Object",
  get$start: function(receiver) {
    return this.start;
  },
  get$str: function() {
    return this.str;
  },
  get$pattern: function(receiver) {
    return this.pattern;
  },
  $index: function(_, g) {
    if (typeof g !== "number")
      return this.$$index$bailout(1, g);
    if (g !== 0)
      $.throwExpression(new $.RangeError("value " + $.S(g)));
    return this.pattern;
  },
  $$index$bailout: function(state0, g) {
    if (!$.$eq(g, 0))
      $.throwExpression(new $.RangeError("value " + $.S(g)));
    return this.pattern;
  },
  group$1: function(group_) {
    if (!$.$eq(group_, 0))
      throw $.wrapException(new $.RangeError("value " + $.S(group_)));
    return this.pattern;
  }
},

"+StringMatch": 0,

isJsIndexable: function(object, record) {
  var result;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  return typeof object === "object" && object !== null && !!$.getInterceptor(object).$isJavaScriptIndexingBehavior;
},

"+isJsIndexable:2:0": 0,

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException(new $.ArgumentError(value));
  return res;
},

"+S:1:0": 0,

createInvocationMirror: function($name, internalName, type, $arguments, argumentNames) {
  return new $.JSInvocationMirror($name, internalName, type, $arguments, argumentNames, null);
},

"+createInvocationMirror:5:0": 0,

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

"+objectHashCode:1:0": 0,

Primitives_printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
},

"+printString:1:0": 0,

Primitives__throwFormatException: function(string) {
  throw $.wrapException(new $.FormatException(string));
},

"+_throwFormatException:1:0": 0,

Primitives_parseInt: function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i, t2;
  handleError = $.Primitives__throwFormatException$closure;
  if (typeof source !== "string")
    $.throwExpression(new $.ArgumentError(source));
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    if (match != null) {
      t1 = match.length;
      if (2 >= t1)
        throw $.ioore(2);
      if (match[2] != null)
        return parseInt(source, 16);
      if (3 >= t1)
        throw $.ioore(3);
      if (match[3] != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    if (typeof radix !== "number" || Math.floor(radix) !== radix)
      throw $.wrapException(new $.ArgumentError("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw $.wrapException(new $.RangeError("Radix " + radix + " not in range 2..36"));
    if (match != null) {
      if (radix === 10) {
        if (3 >= match.length)
          throw $.ioore(3);
        t1 = match[3] != null;
      } else
        t1 = false;
      if (t1)
        return parseInt(source, 10);
      if (radix >= 10) {
        if (3 >= match.length)
          throw $.ioore(3);
        t1 = match[3] == null;
      } else
        t1 = true;
      if (t1) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        if (1 >= match.length)
          throw $.ioore(1);
        digitsPart = $.toLowerCase$0$s(match[1]);
        t1 = $.getInterceptor$asx(digitsPart);
        i = 0;
        while (true) {
          t2 = t1.get$length(digitsPart);
          if (typeof t2 !== "number")
            throw $.iae(t2);
          if (!(i < t2))
            break;
          if ($.$gt$n(t1.codeUnitAt$1(digitsPart, i), maxCharCode) === true)
            return handleError.call$1(source);
          ++i;
        }
      }
    }
    radix = radix;
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
},

"+parseInt:3:0": 0,

Primitives_parseDouble: function(source, handleError) {
  var result, trimmed, t1;
  if (typeof source !== "string")
    $.throwExpression(new $.ArgumentError(source));
  handleError = $.Primitives__throwFormatException$closure;
  if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
    return handleError.call$1(source);
  result = parseFloat(source);
  if (isNaN(result)) {
    trimmed = $.trim$0$s(source);
    t1 = $.getInterceptor(trimmed);
    if (t1.$eq(trimmed, "NaN") || t1.$eq(trimmed, "+NaN") || t1.$eq(trimmed, "-NaN"))
      return result;
    return handleError.call$1(source);
  }
  return result;
},

"+parseDouble:2:0": 0,

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback($.getInterceptor(object));
  if ($.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = $.getRuntimeTypeInfo(object);
  return $.S($name) + $.joinArguments(t1, 0);
},

"+objectTypeName:1:0": 0,

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

"+_fromCharCodeApply:1:0": 0,

Primitives_stringFromCodePoints: function(codePoints) {
  var a, t1, t2, i;
  a = [];
  t1 = $.getRuntimeTypeArgument(codePoints, codePoints.$asJSArray, 0);
  t2 = new $.ListIterator(codePoints, codePoints.length, 0, null);
  t2.$builtinTypeInfo = [t1];
  for (; t2.moveNext$0();) {
    i = t2._liblib$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException(new $.ArgumentError(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + ($.JSNumber_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw $.wrapException(new $.ArgumentError(i));
  }
  return $.Primitives__fromCharCodeApply(a);
},

"+stringFromCodePoints:1:0": 0,

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, t2, i;
  t1 = $.getRuntimeTypeArgument(charCodes, charCodes.$asJSArray, 0);
  t2 = new $.ListIterator(charCodes, charCodes.length, 0, null);
  t2.$builtinTypeInfo = [t1];
  for (; t2.moveNext$0();) {
    i = t2._liblib$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException(new $.ArgumentError(i));
    if (i < 0)
      throw $.wrapException(new $.ArgumentError(i));
    if (i > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
},

"+stringFromCharCodes:1:0": 0,

Primitives_stringConcatUnchecked: function(string1, string2) {
  return string1 + string2;
},

"+stringConcatUnchecked:2:0": 0,

Primitives_lazyAsJsDate: function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
},

"+lazyAsJsDate:1:0": 0,

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException(new $.ArgumentError(object));
  return object[key];
},

"+getProperty:2:0": 0,

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException(new $.ArgumentError(object));
  object[key] = value;
},

"+setProperty:3:0": 0,

Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
  var buffer, $arguments, t1, argumentCount, t2, listOfNamedArguments, selectorName, jsFunction;
  buffer = new $.StringBuffer("");
  buffer._contents = "";
  $arguments = [];
  if (positionalArguments != null) {
    t1 = $.get$length$asx(positionalArguments);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    argumentCount = 0 + t1;
    $.JSArray_methods.addAll$1($arguments, positionalArguments);
  } else
    argumentCount = 0;
  if (namedArguments != null) {
    namedArguments.get$isEmpty;
    t1 = namedArguments._liblib0$_length !== 0;
  } else
    t1 = false;
  if (t1) {
    namedArguments.get$keys;
    t1 = $.getRuntimeTypeArgument(namedArguments, namedArguments.$asLinkedHashMap, 0);
    t2 = new $.LinkedHashMapKeyIterable(namedArguments);
    t2.$builtinTypeInfo = [t1];
    listOfNamedArguments = $.List_List$from(t2, true, $.JSString);
    namedArguments.get$length;
    argumentCount += namedArguments._liblib0$_length;
    listOfNamedArguments.sort();
    $.IterableMixinWorkaround_forEach(listOfNamedArguments, new $.Primitives_applyFunction_closure(namedArguments, buffer, $arguments));
  }
  selectorName = "call$" + $.S(argumentCount) + $.S(buffer);
  jsFunction = $function[selectorName];
  if (jsFunction == null)
    throw $.wrapException(new $.NoSuchMethodError($function, selectorName, $arguments, $.makeLiteralMap([]), null));
  return jsFunction.apply($function, $arguments);
},

"+applyFunction:3:0": 0,

iae: function(argument) {
  throw $.wrapException(new $.ArgumentError(argument));
},

"+iae:1:0": 0,

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.iae(index);
  throw $.wrapException(new $.RangeError("value " + $.S(index)));
},

"+ioore:1:0": 0,

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.C_NullThrownError;
  wrapper = new $.DartError();
  wrapper.dartException = ex;
  wrapper.toString = $.DartError_toStringWrapper$closure.call$0;
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException$closure);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
},

"+wrapException:1:0": 0,

throwExpression: function(ex) {
  throw $.wrapException(ex);
},

"+throwExpression:1:0": 0,

DartError_toStringWrapper: function() {
  return $.toString$0(this);
},

"+toStringWrapper:0:0": 0,

unwrapException: function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return ex.dartException;
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") || t1.$eq(type, "called_non_callable") || t1.$eq(type, "non_object_property_call") || t1.$eq(type, "non_object_property_load");
    } else
      t1 = true;
    if (t1)
      return new $.NoSuchMethodError(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method"))
      return new $.NoSuchMethodError("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return new $.NoSuchMethodError(null, message, [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return new $.NoSuchMethodError("", message, [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return new $._ExceptionImplementation(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new $.StackOverflowError();
    return new $.ArgumentError(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new $.StackOverflowError();
  return ex;
},

"+unwrapException:1:0": 0,

getTraceFromException: function(exception) {
  if (exception == null)
    return;
  if (typeof exception !== "object")
    return;
  if ("stack" in exception)
    return new $._StackTrace(exception.stack);
  else
    return;
},

"+getTraceFromException:1:0": 0,

makeLiteralMap: function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.get$iterator$ax(keyValuePairs);
  result = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  result.$builtinTypeInfo = [null, null];
  for (; iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
},

"+makeLiteralMap:1:0": 0,

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1, result;
  t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0)) {
    result = isolate.eval$1(new $.invokeClosure_closure(closure));
    $globalState.topEventLoop.run$0();
    return result;
  } else if (t1.$eq(numberOfArguments, 1)) {
    result = isolate.eval$1(new $.invokeClosure_closure0(closure, arg1));
    $globalState.topEventLoop.run$0();
    return result;
  } else if (t1.$eq(numberOfArguments, 2)) {
    result = isolate.eval$1(new $.invokeClosure_closure1(closure, arg1, arg2));
    $globalState.topEventLoop.run$0();
    return result;
  } else
    throw $.wrapException(new $._ExceptionImplementation("Unsupported number of arguments for wrapped closure"));
},

"+invokeClosure:5:0": 0,

convertDartClosureToJS: function(closure, arity) {
  var $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($globalState.currentContext, $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

"+convertDartClosureToJS:2:0": 0,

boolTypeCast: function(value) {
  if (typeof value === "boolean" || value == null)
    return value;
  throw $.wrapException(new $.CastErrorImplementation("CastError: Casting value of type " + $.Primitives_objectTypeName(value) + " to incompatible type bool"));
},

"+boolTypeCast:1:0": 0,

intTypeCast: function(value) {
  if (typeof value === "number" && Math.floor(value) === value || value == null)
    return value;
  throw $.wrapException(new $.CastErrorImplementation("CastError: Casting value of type " + $.Primitives_objectTypeName(value) + " to incompatible type int"));
},

"+intTypeCast:1:0": 0,

propertyTypeCastError: function(value, property) {
  var actualType, t1, expectedType;
  actualType = $.Primitives_objectTypeName(value);
  t1 = $.getInterceptor$asx(property);
  expectedType = t1.substring$2(property, 3, t1.get$length(property));
  throw $.wrapException(new $.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + $.S(expectedType)));
},

"+propertyTypeCastError:2:0": 0,

propertyTypeCast: function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
},

"+propertyTypeCast:2:0": 0,

interceptedTypeCast: function(value, property) {
  var t1;
  if (value != null)
    t1 = typeof value === "object" && $.getInterceptor(value)[property];
  else
    t1 = true;
  if (t1)
    return value;
  $.propertyTypeCastError(value, property);
},

"+interceptedTypeCast:2:0": 0,

throwCyclicInit: function(staticName) {
  throw $.wrapException(new $.CyclicInitializationError("Cyclic initialization for static " + $.S(staticName)));
},

"+throwCyclicInit:1:0": 0,

createRuntimeType: function($name) {
  return new $.TypeImpl($name);
},

"+createRuntimeType:1:0": 0,

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

"+setRuntimeTypeInfo:2:0": 0,

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

"+getRuntimeTypeInfo:1:0": 0,

getRuntimeTypeArgument: function(target, substitution, index) {
  var $arguments = $.substitute(substitution, $.getRuntimeTypeInfo(target));
  return $arguments == null ? null : $arguments[index];
},

"+getRuntimeTypeArgument:3:0": 0,

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (type != null && type.constructor === Array)
    return type[0].builtin$cls + $.joinArguments(type, 1);
  else
    return type.builtin$cls;
},

"+runtimeTypeToString:1:0": 0,

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, t1;
  if (types == null)
    return "";
  buffer = new $.StringBuffer("");
  buffer._contents = "";
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    t1 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t1;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

"+joinArguments:2:0": 0,

getRuntimeTypeString: function(object) {
  var className = object != null && object.constructor === Array ? "List" : $.getInterceptor(object).constructor.builtin$cls;
  return className + $.joinArguments(object.$builtinTypeInfo, 0);
},

"+getRuntimeTypeString:1:0": 0,

substitute: function(substitution, $arguments) {
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $arguments;
},

"+substitute:2:0": 0,

typeNameInChrome: function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
},

"+typeNameInChrome:1:0": 0,

typeNameInSafari: function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
},

"+typeNameInSafari:1:0": 0,

typeNameInWebKitCommon: function(tag) {
  var $name = tag;
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
},

"+typeNameInWebKitCommon:1:0": 0,

typeNameInOpera: function(obj) {
  return $.constructorNameFallback(obj);
},

"+typeNameInOpera:1:0": 0,

typeNameInFirefox: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

"+typeNameInFirefox:1:0": 0,

typeNameInIE: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

"+typeNameInIE:1:0": 0,

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

"+constructorNameFallback:1:0": 0,

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

"+alternateTag:2:0": 0,

getFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox$closure;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari$closure;
  else
    return $.constructorNameFallback$closure;
},

"+getFunctionForTypeNameOf:0:0": 0,

toStringForNativeObject: function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $._getTypeNameOf.call$1(obj);
},

"+toStringForNativeObject:1:0": 0,

hashCodeForNativeObject: function(object) {
  return $.Primitives_objectHashCode(object);
},

"+hashCodeForNativeObject:1:0": 0,

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

"+defineProperty:3:0": 0,

defineNativeMethods: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
},

"+defineNativeMethods:2:0": 0,

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
},

"+defineNativeMethodsNonleaf:2:0": 0,

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

"+defineNativeMethodsCommon:3:0": 0,

defineNativeMethodsFinish: function() {
},

"+defineNativeMethodsFinish:0:0": 0,

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

"+lookupInterceptor:2:0": 0,

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  tag = $._getTypeNameOf.call$1(obj);
  interceptor = $.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = $.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return $.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return $.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

"+lookupDispatchRecord:1:0": 0,

JSSyntaxRegExp_makeNative: function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  m = multiLine ? "m" : "";
  i = caseSensitive ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.wrapException(new $.FormatException("Illegal RegExp pattern: " + pattern + ", " + errorMessage));
},

"+makeNative:4:0": 0,

allMatchesInStringUnchecked: function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, endIndex;
  result = $.List_List($, $.Match);
  result.$builtinTypeInfo = [$.Match];
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.JSString_methods.indexOf$2(haystack, needle, startIndex);
    if (position === -1)
      break;
    result.push(new $.StringMatch(position, haystack, needle));
    endIndex = position + patternLength;
    if (endIndex === $length)
      break;
    else
      startIndex = position === endIndex ? startIndex + 1 : endIndex;
  }
  return result;
},

"+allMatchesInStringUnchecked:2:0": 0,

stringContainsUnchecked: function(receiver, other, startIndex) {
  var t1;
  if (typeof other === "string")
    return $.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  else if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isJSSyntaxRegExp) {
    t1 = $.JSString_methods.substring$1(receiver, startIndex);
    return other._nativeRegExp.test(t1);
  } else
    return $.get$isNotEmpty$asx($.allMatches$1$s(other, $.JSString_methods.substring$1(receiver, startIndex)));
},

"+stringContainsUnchecked:3:0": 0,

stringReplaceAllUnchecked: function(receiver, from, to) {
  var result, $length, i, t1;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = new $.StringBuffer("");
      result._contents = "";
      $length = receiver.length;
      result._contents = result._contents + to;
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result._contents;
    }
  else
    return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
},

"+stringReplaceAllUnchecked:3:0": 0,

_matchString: function(match) {
  return $.$index$asx(match, 0);
},

"+_matchString:1:0": 0,

_stringIdentity: function(string) {
  return string;
},

"+_stringIdentity:1:0": 0,

stringReplaceAllFuncUnchecked: function(receiver, pattern, onMatch, onNonMatch) {
  var buffer, t1, startIndex, match, t2, str, t3;
  onNonMatch = $._stringIdentity$closure;
  buffer = new $.StringBuffer("");
  buffer._contents = "";
  t1 = new $._AllMatchesIterable(pattern, receiver);
  t1 = new $._AllMatchesIterator(t1._re, t1._liblib18$_string, null);
  startIndex = 0;
  for (; t1.moveNext$0();) {
    match = t1._liblib18$_current;
    match.get$start;
    t2 = match._match;
    str = onNonMatch.call$1($.JSString_methods.substring$2(receiver, startIndex, t2.index));
    str = typeof str === "string" ? str : $.S(str);
    buffer._contents = buffer._contents + str;
    str = onMatch.call$1(match);
    str = typeof str === "string" ? str : $.S(str);
    buffer._contents = buffer._contents + str;
    match.get$end;
    t3 = t2.index;
    if (0 >= t2.length)
      throw $.ioore(0);
    t2 = $.get$length$asx(t2[0]);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    startIndex = t3 + t2;
  }
  str = onNonMatch.call$1($.JSString_methods.substring$1(receiver, startIndex));
  str = typeof str === "string" ? str : $.S(str);
  buffer._contents = buffer._contents + str;
  return buffer._contents;
},

"+stringReplaceAllFuncUnchecked:4:0": 0}],
["ace", "../lib/ace.dart", , {
AceEditor: {
  "": function AceEditor(_aceContainer, _otherContainer, _session, _aceEditor) {
    this._aceContainer = _aceContainer;
    this._otherContainer = _otherContainer;
    this._session = _session;
    this._aceEditor = _aceEditor;
  },
  "super": "Object",
  get$_aceContainer: function() {
    return this._aceContainer;
  },
  set$_aceContainer: function(v) {
    this._aceContainer = v;
  },
  get$_otherContainer: function() {
    return this._otherContainer;
  },
  set$_otherContainer: function(v) {
    this._otherContainer = v;
  },
  get$_session: function() {
    return this._session;
  },
  set$_session: function(v) {
    this._session = v;
  },
  get$_aceEditor: function() {
    return this._aceEditor;
  },
  set$_aceEditor: function(v) {
    this._aceEditor = v;
  },
  show$0: function(_) {
    $.set$display$x($.get$style$x(this._otherContainer), "none");
    $.set$display$x($.get$style$x(this._aceContainer), "block");
  },
  "+show:0:0": 0,
  focus$0: function(_) {
    return $.focus$0$x(this._aceEditor);
  },
  "+focus:0:0": 0,
  resize$0: function(_) {
    return $.resize$0$x(this._aceEditor);
  },
  "+resize:0:0": 0,
  setSession$1: function(session) {
    this._session = session;
    this._aceEditor.setSession$1(this._session.get$proxy());
  },
  "+setSession:1:0": 0,
  gotoLine$3: function(lineNumber, column, animate) {
    this._aceEditor.gotoLine$3(lineNumber, column, animate);
  },
  "+gotoLine:3:0": 0,
  getShowPrintMargin$0: function() {
    return this._aceEditor.getShowPrintMargin$0();
  },
  "+getShowPrintMargin:0:0": 0,
  getTheme$0: function() {
    return this._aceEditor.getTheme$0();
  },
  "+getTheme:0:0": 0,
  navigateFileStart$0: function() {
    this._aceEditor.navigateFileStart$0();
  },
  "+navigateFileStart:0:0": 0,
  setShowPrintMargin$1: function(showPrintMargin) {
    this._aceEditor.setShowPrintMargin$1(showPrintMargin);
  },
  "+setShowPrintMargin:1:0": 0,
  setTheme$1: function(theme) {
    this._aceEditor.setTheme$1(theme);
  },
  "+setTheme:1:0": 0,
  getThemes$0: function() {
    $.get$i18n();
    $._enterScopeIfNeeded();
    return $.map$1$ax($.split$1$s($._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$i18n().getMessage$1("ace_themes"), ","), new $.AceEditor_getThemes_closure());
  },
  "+getThemes:0:0": 0,
  getModes$0: function() {
    $.get$i18n();
    $._enterScopeIfNeeded();
    return $.map$1$ax($.split$1$s($._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$i18n().getMessage$1("ace_modes"), ","), new $.AceEditor_getModes_closure());
  },
  "+getModes:0:0": 0,
  dispose$0: function() {
    $.jsRelease(this._aceEditor);
  },
  "+dispose:0:0": 0,
  AceEditor$1: function(tabContainer) {
    this._otherContainer = tabContainer._content;
    this._aceContainer = tabContainer._editorContent;
    $.set$display$x($.get$style$x(this._aceContainer), "none");
    $.scoped0(new $.AceEditor_closure(this));
  }
},

"+AceEditor": 0,

AceEditor_closure: {
  "": function AceEditor_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    var t1 = this.this_0;
    $._enterScopeIfNeeded0();
    t1.set$_aceEditor($._deserialize0($._jsPortSync0.callSync$1([])).get$ace().edit$1(t1.get$_aceContainer()));
    t1.get$_aceEditor().setTheme$1("ace/theme/textmate");
    t1.get$_aceEditor().getSession$0().setMode$1("ace/mode/dart");
    t1 = t1.get$_aceEditor();
    $._jsGlobalize0.callSync$1($._serialize0(t1.toJs$0()));
  },
  $isFunction: true
},

"+AceEditor_closure": 0,

AceEditor_getThemes_closure: {
  "": function AceEditor_getThemes_closure() {
  },
  "super": "Closure",
  call$1: function(str) {
    return "ace/theme/" + $.S(str);
  },
  $isFunction: true
},

"+AceEditor_getThemes_closure": 0,

AceEditor_getModes_closure: {
  "": function AceEditor_getModes_closure() {
  },
  "super": "Closure",
  call$1: function(str) {
    return "ace/mode/" + $.S(str);
  },
  $isFunction: true
},

"+AceEditor_getModes_closure": 0,

AceEditSession: {
  "": function AceEditSession(streamController, proxy, changeListener, document, undoManager, selection) {
    this.streamController = streamController;
    this.proxy = proxy;
    this.changeListener = changeListener;
    this.document = document;
    this.undoManager = undoManager;
    this.selection = selection;
  },
  "super": "Object",
  get$streamController: function() {
    return this.streamController;
  },
  set$streamController: function(v) {
    this.streamController = v;
  },
  get$proxy: function() {
    return this.proxy;
  },
  set$proxy: function(v) {
    this.proxy = v;
  },
  get$changeListener: function() {
    return this.changeListener;
  },
  set$changeListener: function(v) {
    this.changeListener = v;
  },
  get$document: function(receiver) {
    return this.document;
  },
  set$document: function(receiver, v) {
    this.document = v;
  },
  get$undoManager: function() {
    return this.undoManager;
  },
  set$undoManager: function(v) {
    this.undoManager = v;
  },
  get$selection: function() {
    return this.selection;
  },
  set$selection: function(v) {
    this.selection = v;
  },
  getDocument$0: function() {
    return this.document;
  },
  "+getDocument:0:0": 0,
  getUndoManager$0: function() {
    return this.undoManager;
  },
  "+getUndoManager:0:0": 0,
  setMode$1: function(mode) {
    this.proxy.setMode$1(mode);
  },
  "+setMode:1:0": 0,
  getSelection$0: function(_) {
    return this.selection;
  },
  "+getSelection:0:0": 0,
  dispose$0: function() {
    var t1, t2, t3, t4;
    $.jsRelease(this.proxy);
    t1 = this.document;
    t1.dispose$0;
    $.jsRelease(t1.documentProxy);
    t1 = this.undoManager;
    t1.dispose$0;
    $.jsRelease(t1.proxy);
    t1 = this.selection;
    t1.dispose$0;
    $.jsRelease(t1.proxy);
    t1 = this.changeListener;
    t1.dispose$0;
    t2 = $.get$_proxiedObjectTable0();
    t1 = t1._liblib20$_id;
    t3 = t2._liblib20$_registry;
    t3.$index(t3, t1);
    t4 = t2._liblib20$_globalIds;
    t4.remove$1(t4, t1);
    t3.remove$1(t3, t1);
    t2._liblib20$_deletedCount = t2._liblib20$_deletedCount + 1;
    t2 = this.streamController;
    t2.close$0(t2);
  },
  _changeHandler$2: function($event, foo) {
    var t1, t2, t3;
    t1 = this.streamController;
    t2 = new $.SessionChangeEvent();
    t3 = t1._state;
    if ((t3 & 2) !== 0)
      $.throwExpression(new $.StateError("Adding event after close"));
    if (t1._subscription != null)
      t1._sendData$1(t2);
    else if ((t3 & 1) === 0) {
      t3 = $.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0);
      t2 = new $._DelayedData(t2, null);
      t2.$builtinTypeInfo = [t3];
      t1._addPendingEvent$1(t2);
    }
  },
  "+_changeHandler:2:0": 0,
  get$_changeHandler: function() {
    return new $.BoundClosure$2(this, "_changeHandler$2", null);
  },
  get$onChange: function(_) {
    return this.streamController._stream;
  },
  "+onChange": 0,
  AceEditSession$0: function() {
    $.scoped0(new $.AceEditSession_closure(this));
  }
},

"+AceEditSession": 0,

AceEditSession_closure: {
  "": function AceEditSession_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, t3;
    t1 = this.this_0;
    $._enterScopeIfNeeded0();
    t1.set$proxy($.Proxy_Proxy$withArgList0($._deserialize0($._jsPortSync0.callSync$1([])).get$ace().get$EditSession(), $._pruneUndefined0("", "ace/mode/dart", $.C__Undefined0, $.C__Undefined0, $.C__Undefined0, $.C__Undefined0)));
    t2 = t1.get$proxy();
    $._jsGlobalize0.callSync$1($._serialize0(t2.toJs$0()));
    t2 = new $.AceDocument(null);
    t2.documentProxy = t1.get$proxy().getDocument$0();
    t3 = t2.documentProxy;
    $._jsGlobalize0.callSync$1($._serialize0(t3.toJs$0()));
    $.set$document$x(t1, t2);
    t2 = new $.AceUndoManager(null);
    t2.proxy = t1.get$proxy().getUndoManager$0();
    t3 = t2.proxy;
    $._jsGlobalize0.callSync$1($._serialize0(t3.toJs$0()));
    t1.set$undoManager(t2);
    t2 = new $.AceSelection(null);
    t2.proxy = $.getSelection$0$x(t1.get$proxy());
    t3 = t2.proxy;
    $._jsGlobalize0.callSync$1($._serialize0(t3.toJs$0()));
    t1.set$selection(t2);
    t1.set$changeListener($.Callback$many(t1.get$_changeHandler(), false));
    $.on$2$x(t1.get$proxy(), "change", t1.get$changeListener());
  },
  $isFunction: true
},

"+AceEditSession_closure": 0,

AceSelection: {
  "": function AceSelection(proxy) {
    this.proxy = proxy;
  },
  "super": "Object",
  get$proxy: function() {
    return this.proxy;
  },
  set$proxy: function(v) {
    this.proxy = v;
  },
  setSelectionRange$3: function(_, start, end, reverse) {
    var t1, t2, range, t3;
    t1 = this.proxy;
    t2 = $.getInterceptor$ax(t1);
    range = t2.getRange$0(t1);
    t3 = $.getInterceptor$x(start);
    range.setStart$2(t3.get$y(start), t3.get$x(start));
    t3 = $.getInterceptor$x(end);
    range.setEnd$2(t3.get$y(end), t3.get$x(end));
    t2.setSelectionRange$2(t1, range, reverse);
  },
  "+setSelectionRange:2:1": 0,
  setSelectionRange$2: function($receiver, start, end) {
    return this.setSelectionRange$3($receiver, start, end, false);
  },
  "+setSelectionRange:2:0": 0,
  dispose$0: function() {
    $.jsRelease(this.proxy);
  }
},

"+AceSelection": 0,

AceDocument: {
  "": function AceDocument(documentProxy) {
    this.documentProxy = documentProxy;
  },
  "super": "Object",
  get$documentProxy: function() {
    return this.documentProxy;
  },
  set$documentProxy: function(v) {
    this.documentProxy = v;
  },
  getValue$0: function() {
    return $.propertyTypeCast(this.documentProxy, "$isProxy0").getValue$0();
  },
  "+getValue:0:0": 0,
  dispose$0: function() {
    $.jsRelease(this.documentProxy);
  }
},

"+AceDocument": 0,

AceUndoManager: {
  "": function AceUndoManager(proxy) {
    this.proxy = proxy;
  },
  "super": "Object",
  get$proxy: function() {
    return this.proxy;
  },
  set$proxy: function(v) {
    this.proxy = v;
  },
  dispose$0: function() {
    $.jsRelease(this.proxy);
  }
},

"+AceUndoManager": 0,

SessionChangeEvent: {
  "": function SessionChangeEvent() {
  },
  "super": "Object"
},

"+SessionChangeEvent": 0,

AceEditor$: function(tabContainer) {
  var t1 = new $.AceEditor(null, null, null, null);
  t1.AceEditor$1(tabContainer);
  return t1;
},

"+new AceEditor:1:0": 0,

AceEditSession$: function() {
  var t1, t2, t3;
  t1 = $.SessionChangeEvent;
  t1 = t1;
  t2 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
  t2.$builtinTypeInfo = [t1];
  t3 = new $._ControllerStream(t2, false);
  $.setRuntimeTypeInfo(t3, [t1]);
  t2._stream = t3;
  t1 = t2;
  t1 = new $.AceEditSession(t1, null, null, null, null, null);
  t1.AceEditSession$0();
  return t1;
},

"+new AceEditSession:0:0": 0}],
["ace_test", "../test/ace_test.dart", , {
main_closure6: {
  "": function main_closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.test("getModes", new $.main__closure21());
    $.test("getTheme", new $.main__closure22());
    $.test("getThemes", new $.main__closure23());
  },
  $isFunction: true
},

"+main_closure": 0,

main__closure21: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.workbench;
    t1.get$aceEditor;
    $.expect($.get$length$asx(t1._liblib8$_aceEditor.getModes$0()), new $._OrderingComparison(1, false, false, true, "a value greater than", true), null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure22: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.workbench;
    t1.get$aceEditor;
    t1 = t1._liblib8$_aceEditor;
    t1.getTheme$0;
    $.expect(t1._aceEditor.getTheme$0(), $.C__IsNotNull, null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure23: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.workbench;
    t1.get$aceEditor;
    $.expect($.get$length$asx(t1._liblib8$_aceEditor.getThemes$0()), new $._OrderingComparison(1, false, false, true, "a value greater than", true), null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main0: function() {
  $.group("ace", new $.main_closure6());
},

"+main:0:0": 0}],
["alltests", "../test/alltests.dart", , {
WorkbenchTestConfiguration: {
  "": function WorkbenchTestConfiguration(workbench, _liblib24$_receivePort, name, autoStart, throwOnTestFailures, stopTestOnExpectFailure, _testLogBuffer) {
    this.workbench = workbench;
    this._liblib24$_receivePort = _liblib24$_receivePort;
    this.name = name;
    this.autoStart = autoStart;
    this.throwOnTestFailures = throwOnTestFailures;
    this.stopTestOnExpectFailure = stopTestOnExpectFailure;
    this._testLogBuffer = _testLogBuffer;
  },
  "super": "Configuration",
  get$workbench: function() {
    return this.workbench;
  },
  set$workbench: function(v) {
    this.workbench = v;
  },
  onInit$0: function() {
  },
  "+onInit:0:0": 0,
  onDone$1: function(success) {
  },
  "+onDone:1:0": 0,
  onSummary$5: function(passed, failed, errors, results, uncaughtError) {
    var t1, test, t2, t3;
    for (t1 = results.get$iterator(results); t1.moveNext$0();) {
      test = t1._liblib$_current;
      t2 = $.getInterceptor$x(test);
      $.Primitives_printString($.S(t2.get$result(test)) + ": " + $.S(test.get$description()));
      $.append$1$x(this.workbench._consoleView, $.S(t2.get$result(test)) + ": " + $.S(test.get$description()));
      if (!$.$eq(t2.get$message(test), "")) {
        $.Primitives_printString($.toString$0(t2.get$message(test)));
        $.append$1$x(this.workbench._consoleView, t2.get$message(test));
      }
      if (test.get$stackTrace() != null && !$.$eq(test.get$stackTrace(), ""))
        $.append$1$x(this.workbench._consoleView, this.indent$1(test.get$stackTrace()));
    }
    t1 = this.workbench.messageArea;
    t1.clearAlerts$0;
    t1 = $.get$children$x(t1._messageElement);
    t1.clear$0(t1);
    if (passed === 0 && failed === 0 && errors === 0 && uncaughtError == null) {
      t1 = this.workbench.messageArea;
      t1.showWarningAlert$2;
      t1 = t1._messageElement;
      t2 = new $.BAlert(null, null, null);
      t2.element = $.document().createElement("div");
      $.add$1$ax($.get$classes$x(t2.element), "alert");
      if (t1 != null) {
        t1 = $.get$children$x(t1);
        t1.add$1(t1, t2.element);
      }
      t1 = new $.BElement(null);
      t1.element = $.Element_Element$tag("strong");
      t1.setParent$1(null);
      $.add$1$ax($.get$children$x(t2.element), t1.element);
      t2._titleSpan = t1.element;
      t1 = new $.BSpan(null);
      t1.element = $.Element_Element$tag("span");
      t1.setParent$1(null);
      t1.innerHtml$1(t1, "&nbsp;");
      $.add$1$ax($.get$children$x(t2.element), t1.element);
      t1 = new $.BSpan(null);
      t1.element = $.Element_Element$tag("span");
      t1.setParent$1(null);
      $.add$1$ax($.get$children$x(t2.element), t1.element);
      t2._messageSpan = t1.element;
      $.set$innerHtml$x(t2._titleSpan, "Tests");
      $.set$innerHtml$x(t2._messageSpan, "No tests found.");
      t1 = new $.BCloseButton(null);
      t1.element = $.ButtonElement_ButtonElement();
      t1.clazz$1("btn");
      t1.type$1(t1, "button");
      t1.setParent$1(null);
      $.remove$1$ax($.get$classes$x(t1.element), "btn");
      t1.close$0(t1);
      t1.innerHtml$1(t1, "&times;");
      $.get$onClick$x(t1.element).listen$1(t1.get$_liblib5$_close());
      $.add$1$ax($.get$children$x(t2.element), t1.element);
    } else if (failed === 0 && errors === 0 && uncaughtError == null) {
      t1 = this.workbench.messageArea;
      t2 = "All " + passed + " tests passed!";
      t1.showSuccessAlert$2;
      t1 = t1._messageElement;
      t3 = new $.BAlert(null, null, null);
      t3.element = $.document().createElement("div");
      $.add$1$ax($.get$classes$x(t3.element), "alert");
      if (t1 != null) {
        t1 = $.get$children$x(t1);
        t1.add$1(t1, t3.element);
      }
      t1 = new $.BElement(null);
      t1.element = $.Element_Element$tag("strong");
      t1.setParent$1(null);
      $.add$1$ax($.get$children$x(t3.element), t1.element);
      t3._titleSpan = t1.element;
      t1 = new $.BSpan(null);
      t1.element = $.Element_Element$tag("span");
      t1.setParent$1(null);
      t1.innerHtml$1(t1, "&nbsp;");
      $.add$1$ax($.get$children$x(t3.element), t1.element);
      t1 = new $.BSpan(null);
      t1.element = $.Element_Element$tag("span");
      t1.setParent$1(null);
      $.add$1$ax($.get$children$x(t3.element), t1.element);
      t3._messageSpan = t1.element;
      $.set$innerHtml$x(t3._titleSpan, "Tests");
      $.set$innerHtml$x(t3._messageSpan, t2);
      $.add$1$ax($.get$classes$x(t3.element), "alert-success");
      t3.closeButton$0();
    } else {
      if (uncaughtError != null) {
        t1 = this.workbench.messageArea;
        t2 = "Top-level uncaught error: " + uncaughtError;
        t1.showErrorAlert$2;
        t1 = t1._messageElement;
        t3 = new $.BAlert(null, null, null);
        t3.element = $.document().createElement("div");
        $.add$1$ax($.get$classes$x(t3.element), "alert");
        if (t1 != null) {
          t1 = $.get$children$x(t1);
          t1.add$1(t1, t3.element);
        }
        t1 = new $.BElement(null);
        t1.element = $.Element_Element$tag("strong");
        t1.setParent$1(null);
        $.add$1$ax($.get$children$x(t3.element), t1.element);
        t3._titleSpan = t1.element;
        t1 = new $.BSpan(null);
        t1.element = $.Element_Element$tag("span");
        t1.setParent$1(null);
        t1.innerHtml$1(t1, "&nbsp;");
        $.add$1$ax($.get$children$x(t3.element), t1.element);
        t1 = new $.BSpan(null);
        t1.element = $.Element_Element$tag("span");
        t1.setParent$1(null);
        $.add$1$ax($.get$children$x(t3.element), t1.element);
        t3._messageSpan = t1.element;
        $.set$innerHtml$x(t3._titleSpan, "Tests");
        $.set$innerHtml$x(t3._messageSpan, t2);
        $.add$1$ax($.get$classes$x(t3.element), "alert-error");
        t3.closeButton$0();
      }
      t1 = this.workbench.messageArea;
      t2 = "" + passed + " PASSED, " + failed + " FAILED, " + errors + " ERRORS";
      t1.showErrorAlert$2;
      t1 = t1._messageElement;
      t3 = new $.BAlert(null, null, null);
      t3.element = $.document().createElement("div");
      $.add$1$ax($.get$classes$x(t3.element), "alert");
      if (t1 != null) {
        t1 = $.get$children$x(t1);
        t1.add$1(t1, t3.element);
      }
      t1 = new $.BElement(null);
      t1.element = $.Element_Element$tag("strong");
      t1.setParent$1(null);
      $.add$1$ax($.get$children$x(t3.element), t1.element);
      t3._titleSpan = t1.element;
      t1 = new $.BSpan(null);
      t1.element = $.Element_Element$tag("span");
      t1.setParent$1(null);
      t1.innerHtml$1(t1, "&nbsp;");
      $.add$1$ax($.get$children$x(t3.element), t1.element);
      t1 = new $.BSpan(null);
      t1.element = $.Element_Element$tag("span");
      t1.setParent$1(null);
      $.add$1$ax($.get$children$x(t3.element), t1.element);
      t3._messageSpan = t1.element;
      $.set$innerHtml$x(t3._titleSpan, "Tests");
      $.set$innerHtml$x(t3._messageSpan, t2);
      $.add$1$ax($.get$classes$x(t3.element), "alert-error");
      t3.closeButton$0();
    }
  },
  "+onSummary:5:0": 0,
  indent$1: function(str) {
    return $.join$1$ax($.map$1$ax($.split$1$s(str, "\n"), new $.WorkbenchTestConfiguration_indent_closure()), "\n");
  },
  "+indent:1:0": 0
},

"+WorkbenchTestConfiguration": 0,

WorkbenchTestConfiguration_indent_closure: {
  "": function WorkbenchTestConfiguration_indent_closure() {
  },
  "super": "Closure",
  call$1: function(line) {
    return "  " + $.S(line);
  },
  $isFunction: true
},

"+WorkbenchTestConfiguration_indent_closure": 0,

main: function() {
  $.main0();
  $.main1();
  $.main2();
  $.main3();
  $.basicTests();
  $.main4();
  $.jsInterop();
  $.main5();
  $.main6();
  $.main7();
}}],
["analysis", "../lib/analysis.dart", , {
AnalysisResult: {
  "": function AnalysisResult(errors, ast) {
    this.errors = errors;
    this.ast = ast;
  },
  "super": "Object",
  get$errors: function() {
    return this.errors;
  },
  set$errors: function(v) {
    this.errors = v;
  },
  get$ast: function() {
    return this.ast;
  },
  set$ast: function(v) {
    this.ast = v;
  }
},

"+AnalysisResult": 0,

AnalysisStringSource: {
  "": function AnalysisStringSource(_context, file, contents) {
    this._context = _context;
    this.file = file;
    this.contents = contents;
  },
  "super": "Source",
  get$_context: function() {
    return this._context;
  },
  set$_context: function(v) {
    this._context = v;
  },
  get$file: function(receiver) {
    return this.file;
  },
  set$file: function(receiver, v) {
    this.file = v;
  },
  get$contents: function() {
    return this.contents;
  },
  set$contents: function(v) {
    this.contents = v;
  },
  file$1: function($receiver, arg0) {
    return this.file.call$1(arg0);
  },
  $eq: function(_, object) {
    var t1, t2, t3;
    if (object == null)
      return false;
    if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isAnalysisStringSource) {
      t1 = this.file;
      t2 = object.file;
      t3 = $.getInterceptor(t1);
      return t3.$eq(t1, t2) || $.$eq(t3.get$id(t1), $.get$id$x(t2));
    } else
      return false;
  },
  get$fullName: function() {
    var t1 = this.file;
    return t1 == null ? null : $.get$name$x(t1);
  },
  "+fullName": 0,
  get$hashCode: function(_) {
    var t1, str;
    t1 = this.file;
    str = t1 == null ? null : $.get$name$x(t1);
    return str == null ? $.Object.prototype.get$hashCode.call(this, this) : $.get$hashCode$(str);
  },
  isInSystemLibrary$0: function() {
    return false;
  },
  "+isInSystemLibrary:0:0": 0,
  $isAnalysisStringSource: true
},

"+AnalysisStringSource": 0,

analysisLiteralToString: function(literal) {
  if (typeof literal === "object" && literal !== null && !!$.getInterceptor(literal).$isSimpleStringLiteral)
    return $.stripQuotes(literal._liblib4$_value);
  else
    return $.toString$0(literal);
},

"+analysisLiteralToString:1:0": 0,

analysisParseString: function(contents, file) {
  var context, unit, t1, t2, completer, futureImpl, exception, t3, t4, unit0, result;
  t1 = null;
  t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
  t2.$builtinTypeInfo = [t1];
  completer = new $._AsyncCompleter(t2, false);
  completer.$builtinTypeInfo = [t1];
  futureImpl = completer.future;
  t1 = futureImpl._zone;
  t1._openCallbacks = t1._openCallbacks + 1;
  context = $.get$AnalysisEngine__UniqueInstance().createAnalysisContext$0();
  unit = null;
  try {
    unit = context.parseCompilationUnit$1(new $.AnalysisStringSource(context, file, contents));
  } catch (exception) {
    $.unwrapException(exception);
    $.get$AnalysisError_NO_ERRORS();
    $.get$AnalysisError_NO_ERRORS();
    t2 = $.get$AnalysisError_NO_ERRORS();
    t3 = $.get$AnalysisError_NO_ERRORS();
    t4 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t4;
    unit0 = new $.CompilationUnit(null, null, null, null, null, null, null, t2, t3, null, null, t4);
    unit0.CompilationUnit$full$5(null, null, null, null, null);
    unit = unit0;
  }

  result = new $.AnalysisResult([], null);
  result.ast = unit;
  result.errors = unit.get$errors();
  if (completer._isComplete)
    $.throwExpression(new $.StateError("Future already completed"));
  completer._isComplete = true;
  t1._openCallbacks = t1._openCallbacks - 1;
  if (!t1._isExecutingCallback && t1._openCallbacks === 0 && t1._children.length === 0)
    ;
  completer._setFutureValue$1(result);
  return futureImpl;
},

"+analysisParseString:1:1": 0}],
["analysis_test", "../test/analysis_test.dart", , {
main_closure5: {
  "": function main_closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.test("createAST", new $.main__closure20());
  },
  $isFunction: true
},

"+main_closure": 0,

main__closure20: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.expect($.analysisParseString("void main() { print('foo'); }", null).then$1(new $.main___closure3()), $._Completes_PGb, null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main___closure3: {
  "": function main___closure() {
  },
  "super": "Closure",
  call$1: function(result) {
    $.expect(result.get$ast(), $.C__IsNotNull, null, null, false);
    $.expect(result.get$errors(), $.C__Empty, null, null, false);
  },
  $isFunction: true
},

"+main___closure": 0,

main1: function() {
  $.group("analysis", new $.main_closure5());
}}],
["bootstrap", "../lib/bootstrap.dart", , {
BootstrapManager: {
  "": function BootstrapManager() {
  },
  "super": "Object",
  getThemes$0: function() {
    $.get$i18n();
    $._enterScopeIfNeeded();
    return $.map$1$ax($.split$1$s($._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$i18n().getMessage$1("bootstrap_themes"), ","), new $.BootstrapManager_getThemes_closure());
  },
  getTheme$0: function() {
    return $.interceptedTypeCast(document.querySelector("#bootstrapTheme"), "$isLinkElement").href;
  },
  setTheme$1: function(theme) {
    $.interceptedTypeCast(document.querySelector("#bootstrapTheme"), "$isLinkElement").href = theme;
  }
},

"+BootstrapManager": 0,

BootstrapManager_getThemes_closure: {
  "": function BootstrapManager_getThemes_closure() {
  },
  "super": "Closure",
  call$1: function(str) {
    return "bootstrap/css/" + $.S(str) + ".css";
  },
  $isFunction: true
},

"+BootstrapManager_getThemes_closure": 0,

BElement: {
  "": function BElement(element) {
    this.element = element;
  },
  "super": "Object",
  get$element: function() {
    return this.element;
  },
  set$element: function(v) {
    this.element = v;
  },
  clazz$1: function(value) {
    $.add$1$ax($.get$classes$x(this.element), value);
    return this;
  },
  "+clazz:1:0": 0,
  toggle$1: function(value) {
    $.get$classes$x(this.element).toggle$1(value);
    return this;
  },
  "+toggle:1:0": 0,
  innerHtml$1: function(_, value) {
    $.set$innerHtml$x(this.element, value);
    return this;
  },
  "+innerHtml:1:0": 0,
  get$innerHtml: function(_receiver) {
    return new $.BoundClosure$i1(this, "innerHtml$1", _receiver);
  },
  nav$0: function() {
    $.add$1$ax($.get$classes$x(this.element), "nav");
    return this;
  },
  "+nav:0:0": 0,
  text$1: function(_, value) {
    $.set$text$x(this.element, value);
    return this;
  },
  "+text:1:0": 0,
  get$text: function(_receiver) {
    return new $.BoundClosure$i1(this, "text$1", _receiver);
  },
  type$1: function(_, value) {
    $.$indexSet$ax($.get$attributes$x(this.element), "type", value);
    return this;
  },
  "+type:1:0": 0,
  get$type: function(_receiver) {
    return new $.BoundClosure$i1(this, "type$1", _receiver);
  },
  width$1: function(_, val) {
    $.setProperty$2$x($.get$style$x(this.element), "width", val);
    return this;
  },
  "+width:1:0": 0,
  get$width: function(_receiver) {
    return new $.BoundClosure$i1(this, "width$1", _receiver);
  },
  style$2: function(_, $name, val) {
    $.setProperty$2$x($.get$style$x(this.element), $name, val);
    return this;
  },
  "+style:2:0": 0,
  get$style: function(_receiver) {
    return new $.BoundClosure$i2(this, "style$2", _receiver);
  },
  visibility$1: function(_, val) {
    var t1 = $.get$style$x(this.element);
    $.set$visibility$x(t1, val === true ? "visible" : "hidden");
    return this;
  },
  "+visibility:1:0": 0,
  get$visibility: function(_receiver) {
    return new $.BoundClosure$i1(this, "visibility$1", _receiver);
  },
  add$1: function(_, child) {
    $.add$1$ax($.get$children$x(this.element), child.get$element());
    return child;
  },
  remove$1: function(_, child) {
    $.remove$1$ax($.get$children$x(this.element), child.get$element());
    return child;
  },
  get$parent: function(_) {
    return $.get$parent$x(this.element);
  },
  "+parent": 0,
  setParent$1: function(p) {
    if (p != null)
      $.add$1$ax($.get$children$x(p), this.element);
  },
  "+setParent:1:0": 0
},

"+BElement": 0,

BButton: {
  "": function BButton(element) {
    this.element = element;
  },
  "super": "BElement",
  buttonPrimary$0: function() {
    $.add$1$ax($.get$classes$x(this.element), "btn-primary");
    return this;
  },
  "+buttonPrimary:0:0": 0,
  close$0: function(_) {
    $.add$1$ax($.get$classes$x(this.element), "close");
    return this;
  }
},

"+BButton": 0,

BImage: {
  "": function BImage(element) {
    this.element = element;
  },
  "super": "BElement"
},

"+BImage": 0,

BSpan: {
  "": function BSpan(element) {
    this.element = element;
  },
  "super": "BElement"
},

"+BSpan": 0,

BDiv: {
  "": function BDiv(element) {
    this.element = element;
  },
  "super": "BElement",
  wellSmall$0: function() {
    $.add$1$ax($.get$classes$x(this.element), "well-small");
    return this;
  },
  "+wellSmall:0:0": 0
},

"+BDiv": 0,

BInputElement: {
  "": function BInputElement(element) {
    this.element = element;
  },
  "super": "BElement",
  get$checked: function(_) {
    return $.interceptedTypeCast(this.element, "$isInputElement").checked;
  },
  "+checked": 0,
  get$value: function(_) {
    return $.interceptedTypeCast(this.element, "$isInputElement").value;
  },
  "+value": 0,
  set$checked: function(_, value) {
    $.interceptedTypeCast(this.element, "$isInputElement").checked = value;
  },
  "+checked=": 0
},

"+BInputElement": 0,

BSelect: {
  "": function BSelect(element) {
    this.element = element;
  },
  "super": "BElement",
  createOption$2: function(text, selected) {
    var option, t1;
    option = new $.BElement(null);
    option.element = $.OptionElement_OptionElement(null, null, null, null);
    $.set$text$x(option.element, text);
    $.add$1$ax($.get$children$x(this.element), option.element);
    if (selected) {
      $.$indexSet$ax($.get$attributes$x(option.element), "selected", "");
      t1 = $.interceptedTypeCast(this.element, "$isSelectElement");
      t1.selectedIndex = $.$sub$n($.get$length$asx($.get$children$x(t1)), 1);
    }
    return option;
  },
  "+createOption:1:1": 0,
  getSelectedItem$0: function() {
    var select = $.interceptedTypeCast(this.element, "$isSelectElement");
    return select.item(select.selectedIndex).textContent;
  },
  "+getSelectedItem:0:0": 0
},

"+BSelect": 0,

BTable: {
  "": function BTable(tbody, element) {
    this.tbody = tbody;
    this.element = element;
  },
  "super": "BElement",
  get$tbody: function() {
    return this.tbody;
  },
  set$tbody: function(v) {
    this.tbody = v;
  },
  tableCondensed$0: function() {
    $.add$1$ax($.get$classes$x(this.element), "table-condensed");
    return this;
  },
  "+tableCondensed:0:0": 0,
  createRow$0: function() {
    var t1, t2;
    t1 = this.tbody;
    t2 = new $.BElement(null);
    t2.element = document.createElement("tr");
    return $.add$1$ax(t1, t2);
  },
  "+createRow:0:0": 0,
  createCell$1: function(row) {
    var t1 = new $.BElement(null);
    t1.element = document.createElement("td");
    return $.add$1$ax(row, t1);
  },
  "+createCell:1:0": 0
},

"+BTable": 0,

BUnorderedList: {
  "": function BUnorderedList(element) {
    this.element = element;
  },
  "super": "BElement"
},

"+BUnorderedList": 0,

BListItem: {
  "": function BListItem(element) {
    this.element = element;
  },
  "super": "BElement",
  toggleActive$0: function() {
    $.get$classes$x(this.element).toggle$1("active");
    return this;
  },
  "+toggleActive:0:0": 0,
  BListItem$1: function($parent) {
    this.element = document.createElement("li");
    if ($parent != null)
      $.add$1$ax($.get$children$x($parent), this.element);
  }
},

"+BListItem": 0,

BCloseButton: {
  "": function BCloseButton(element) {
    this.element = element;
  },
  "super": "BButton",
  _liblib5$_close$1: function($event) {
    $.remove$1$ax($.get$children$x($.get$parent$x($.get$parent$x(this.element))), $.get$parent$x(this.element));
  },
  "+_close:1:0": 0,
  get$_liblib5$_close: function() {
    return new $.BoundClosure$1(this, "_liblib5$_close$1", null);
  }
},

"+BCloseButton": 0,

BMenubar: {
  "": function BMenubar(_liblib5$_element, menus) {
    this._liblib5$_element = _liblib5$_element;
    this.menus = menus;
  },
  "super": "Object",
  get$_liblib5$_element: function() {
    return this._liblib5$_element;
  },
  set$_liblib5$_element: function(v) {
    this._liblib5$_element = v;
  },
  get$menus: function() {
    return this.menus;
  },
  set$menus: function(v) {
    this.menus = v;
  },
  get$element: function() {
    return this._liblib5$_element;
  },
  "+element": 0,
  add$1: function(_, menu) {
    this.menus.push(menu);
    $.set$menubar$x(menu, this);
    $.add$1$ax($.get$children$x(this._liblib5$_element), menu.get$element());
  },
  closeAll$0: function() {
    var t1, t2;
    t1 = this.menus;
    t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();)
      t1._liblib$_current.set$_liblib5$_open(false);
  },
  "+closeAll:0:0": 0
},

"+BMenubar": 0,

BMenu: {
  "": function BMenu(menubar, outerElement, ulElement, _items) {
    this.menubar = menubar;
    this.outerElement = outerElement;
    this.ulElement = ulElement;
    this._items = _items;
  },
  "super": "Object",
  get$menubar: function(receiver) {
    return this.menubar;
  },
  set$menubar: function(receiver, v) {
    this.menubar = v;
  },
  get$outerElement: function() {
    return this.outerElement;
  },
  set$outerElement: function(v) {
    this.outerElement = v;
  },
  get$ulElement: function() {
    return this.ulElement;
  },
  set$ulElement: function(v) {
    this.ulElement = v;
  },
  get$_items: function() {
    return this._items;
  },
  set$_items: function(v) {
    this._items = v;
  },
  add$1: function(_, menuItem) {
    $.add$1$ax($.get$children$x(this.ulElement), menuItem.get$element());
    this._items.push(menuItem);
  },
  set$_liblib5$_open: function(value) {
    var t1;
    if (!value)
      $.remove$1$ax($.get$classes$x(this.outerElement), "open");
    else if ($.contains$1$asx($.get$classes$x(this.outerElement), "open") !== true) {
      t1 = this.menubar;
      if (t1 != null)
        t1.closeAll$0();
      $.add$1$ax($.get$classes$x(this.outerElement), "open");
      $.focus$0$x(this.ulElement);
    }
  },
  "+_open=": 0,
  _toggleOpen$1: function($event) {
    this.set$_liblib5$_open($.contains$1$asx($.get$classes$x(this.outerElement), "open") !== true);
  },
  "+_toggleOpen:1:0": 0,
  get$_toggleOpen: function() {
    return new $.BoundClosure$1(this, "_toggleOpen$1", null);
  },
  get$element: function() {
    return this.outerElement;
  },
  BMenu$1: function($name) {
    var t1, t2, aElement;
    t1 = new $.BListItem(null);
    t1.element = document.createElement("li");
    $.add$1$ax($.get$classes$x(t1.element), "dropdown");
    this.outerElement = t1.element;
    t1 = this.outerElement;
    t2 = new $.BElement(null);
    t2.element = document.createElement("a");
    if (t1 != null)
      $.add$1$ax($.get$children$x(t1), t2.element);
    $.$indexSet$ax($.get$attributes$x(t2.element), "role", "button");
    $.add$1$ax($.get$classes$x(t2.element), "dropdown-toggle");
    aElement = t2.element;
    t1 = $.getInterceptor$x(aElement);
    t1.set$innerHtml(aElement, $name + " <b class='caret'></b>");
    t1.get$onClick(aElement).listen$1(this.get$_toggleOpen());
    t1 = this.outerElement;
    t2 = new $.BUnorderedList(null);
    t2.element = document.createElement("ul");
    if (t1 != null)
      $.add$1$ax($.get$children$x(t1), t2.element);
    $.$indexSet$ax($.get$attributes$x(t2.element), "role", "menu");
    $.add$1$ax($.get$classes$x(t2.element), "dropdown-menu");
    this.ulElement = t2.element;
    $.get$onClick$x(this.ulElement).listen$1(new $.BMenu_closure(this));
  }
},

"+BMenu": 0,

BMenu_closure: {
  "": function BMenu_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function($event) {
    this.this_0.set$_liblib5$_open(false);
  },
  $isFunction: true
},

"+BMenu_closure": 0,

BMenuItem: {
  "": function BMenuItem(_handler, _a, element) {
    this._handler = _handler;
    this._a = _a;
    this.element = element;
  },
  "super": "BElement",
  get$_handler: function() {
    return this._handler;
  },
  set$_handler: function(v) {
    this._handler = v;
  },
  get$_a: function() {
    return this._a;
  },
  set$_a: function(v) {
    this._a = v;
  },
  get$enabled: function() {
    return $.contains$1$asx($.get$classes$x(this.element), "disabled") !== true;
  },
  "+enabled": 0,
  BMenuItem$2: function($name, _handler) {
    var li, a, t1;
    li = new $.BListItem(null);
    li.element = document.createElement("li");
    $.$indexSet$ax($.get$attributes$x(li.element), "role", "presentation");
    a = new $.BElement(null);
    a.element = document.createElement("a");
    $.$indexSet$ax($.get$attributes$x(a.element), "role", "menuitem");
    $.set$text$x(a.element, $name);
    $.add$1$ax($.get$children$x(li.element), a.element);
    this.element = li.element;
    this._a = a.element;
    t1 = this._handler;
    if (t1 != null)
      $.get$onClick$x(this.element).listen$1(t1);
  }
},

"+BMenuItem": 0,

BPopover: {
  "": function BPopover(relativeToElement, dockLeft, _mainElement, _arrowElement, _titleElement, _contentElement) {
    this.relativeToElement = relativeToElement;
    this.dockLeft = dockLeft;
    this._mainElement = _mainElement;
    this._arrowElement = _arrowElement;
    this._titleElement = _titleElement;
    this._contentElement = _contentElement;
  },
  "super": "Object",
  get$relativeToElement: function() {
    return this.relativeToElement;
  },
  set$relativeToElement: function(v) {
    this.relativeToElement = v;
  },
  get$dockLeft: function() {
    return this.dockLeft;
  },
  set$dockLeft: function(v) {
    this.dockLeft = v;
  },
  get$_mainElement: function() {
    return this._mainElement;
  },
  set$_mainElement: function(v) {
    this._mainElement = v;
  },
  get$_arrowElement: function() {
    return this._arrowElement;
  },
  set$_arrowElement: function(v) {
    this._arrowElement = v;
  },
  get$_titleElement: function() {
    return this._titleElement;
  },
  set$_titleElement: function(v) {
    this._titleElement = v;
  },
  get$_contentElement: function() {
    return this._contentElement;
  },
  set$_contentElement: function(v) {
    this._contentElement = v;
  },
  show$0: function(_) {
    $.add$1$ax($.get$classes$x(this._mainElement), "show");
    window;
    if ($._pendingMicrotasks == null) {
      $._pendingMicrotasks = [];
      if ($._microtaskScheduler == null)
        $._microtaskScheduler = $._MicrotaskScheduler__MicrotaskScheduler$best($._completeMicrotasks$closure);
      $._microtaskScheduler.maybeSchedule$0();
    }
    $._pendingMicrotasks.push(new $.BPopover_show_closure(this));
  },
  set$width: function(_, cssWidth) {
    $.set$width$x($.get$style$x(this._mainElement), cssWidth);
  },
  "+width=": 0,
  dispose$0: function() {
    $.remove$1$ax($.get$children$x($.get$parent$x(this._mainElement)), this._mainElement);
  },
  BPopover$3$dockLeft$location: function(relativeToElement, dockLeft, $location) {
    var t1, t2;
    t1 = document.body;
    t2 = new $.BDiv(null);
    t2.element = document.createElement("div");
    if (t1 != null) {
      t1 = $.get$children$x(t1);
      t1.add$1(t1, t2.element);
    }
    $.add$1$ax($.get$classes$x(t2.element), "popover");
    $.add$1$ax($.get$classes$x(t2.element), $location);
    this._mainElement = t2.element;
    t1 = this._mainElement;
    t2 = new $.BDiv(null);
    t2.element = document.createElement("div");
    if (t1 != null)
      $.add$1$ax($.get$children$x(t1), t2.element);
    $.add$1$ax($.get$classes$x(t2.element), "arrow");
    this._arrowElement = t2.element;
    t1 = this._mainElement;
    t2 = new $.BElement(null);
    t2.element = document.createElement("h3");
    if (t1 != null)
      $.add$1$ax($.get$children$x(t1), t2.element);
    $.add$1$ax($.get$classes$x(t2.element), "popover-title");
    this._titleElement = t2.element;
    t1 = this._mainElement;
    t2 = new $.BDiv(null);
    t2.element = document.createElement("div");
    if (t1 != null)
      $.add$1$ax($.get$children$x(t1), t2.element);
    $.add$1$ax($.get$classes$x(t2.element), "popover-content");
    this._contentElement = t2.element;
  }
},

"+BPopover": 0,

BPopover_show_closure: {
  "": function BPopover_show_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    var t1, offset, mainElementWidth, t2, t3, t4;
    t1 = this.this_0;
    offset = $.absoluteOffset(t1.get$relativeToElement());
    mainElementWidth = $.get$width$x($.get$client$x(t1.get$_mainElement()));
    $.set$top$x($.get$style$x(t1.get$_mainElement()), $.S($.$add$ns(offset.y, $.get$offsetHeight$x(t1.get$relativeToElement()))) + "px");
    t2 = t1.get$dockLeft();
    t3 = t1.get$_mainElement();
    t4 = offset.x;
    if (t2 === true)
      $.set$left$x($.get$style$x(t3), $.S(t4) + "px");
    else {
      t2 = $.get$style$x(t3);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      if (typeof mainElementWidth !== "number")
        throw $.iae(mainElementWidth);
      t3 = $.get$width$x($.get$client$x(t1.get$relativeToElement()));
      if (typeof t3 !== "number")
        throw $.iae(t3);
      $.set$left$x(t2, $.S(-278 + t4 - mainElementWidth + t3) + "px");
    }
    t2 = t1.get$dockLeft();
    t1 = t1.get$_arrowElement();
    if (t2 === true)
      $.set$left$x($.get$style$x(t1), "20px");
    else
      $.set$left$x($.get$style$x(t1), $.S($.$sub$n(mainElementWidth, 20)) + "px");
  },
  $isFunction: true
},

"+BPopover_show_closure": 0,

BAlert: {
  "": function BAlert(_titleSpan, _messageSpan, element) {
    this._titleSpan = _titleSpan;
    this._messageSpan = _messageSpan;
    this.element = element;
  },
  "super": "BElement",
  get$_titleSpan: function() {
    return this._titleSpan;
  },
  set$_titleSpan: function(v) {
    this._titleSpan = v;
  },
  get$_messageSpan: function() {
    return this._messageSpan;
  },
  set$_messageSpan: function(v) {
    this._messageSpan = v;
  },
  closeButton$0: function() {
    var t1 = new $.BCloseButton(null);
    t1.element = document.createElement("button");
    $.add$1$ax($.get$classes$x(t1.element), "btn");
    $.$indexSet$ax($.get$attributes$x(t1.element), "type", "button");
    $.remove$1$ax($.get$classes$x(t1.element), "btn");
    $.add$1$ax($.get$classes$x(t1.element), "close");
    $.set$innerHtml$x(t1.element, "&times;");
    $.get$onClick$x(t1.element).listen$1(t1.get$_liblib5$_close());
    $.add$1$ax($.get$children$x(this.element), t1.element);
    return this;
  },
  "+closeButton:0:0": 0,
  get$closeButton: function() {
    return new $.BoundClosure$0(this, "closeButton$0", null);
  },
  message$1: function(_, message) {
    $.set$innerHtml$x(this._messageSpan, message);
    return this;
  },
  "+message:1:0": 0,
  get$message: function(_receiver) {
    return new $.BoundClosure$i1(this, "message$1", _receiver);
  },
  close$0: function(_) {
    $.remove$1$ax($.get$children$x($.get$parent$x(this.element)), this.element);
  },
  flash$0: function() {
    var clazz, t1, t2;
    $.beep();
    clazz = this.getAlertKind$0();
    $.get$classes$x(this.element).toggle$1(clazz);
    $.get$classes$x(this.element).toggle$1("alert-error");
    t1 = $.Duration$(0, 0, 0, 350, 0, 0);
    t2 = new $._ZoneTimer($.get$_Zone__current(), new $.BAlert_flash_closure(this, clazz), null, false);
    t2._zone.expectCallback$0();
    t2._timer = $._createTimer(t1, t2.get$_run());
  },
  "+flash:0:0": 0,
  getAlertKind$0: function() {
    var t1, clazz;
    for (t1 = $.get$iterator$ax($.get$classes$x(this.element)); t1.moveNext$0() === true;) {
      clazz = t1.get$current();
      if ($.startsWith$1$s(clazz, "alert-") === true)
        return clazz;
    }
    return;
  },
  "+getAlertKind:0:0": 0
},

"+BAlert": 0,

BAlert_flash_closure: {
  "": function BAlert_flash_closure(this_0, clazz_1) {
    this.this_0 = this_0;
    this.clazz_1 = clazz_1;
  },
  "super": "Closure",
  call$0: function() {
    var t1 = this.this_0;
    $.get$classes$x(t1.get$element()).toggle$1("alert-error");
    $.get$classes$x(t1.get$element()).toggle$1(this.clazz_1);
  },
  $isFunction: true
},

"+BAlert_flash_closure": 0,

BProgress: {
  "": function BProgress(_bar, element) {
    this._bar = _bar;
    this.element = element;
  },
  "super": "BElement",
  get$_bar: function() {
    return this._bar;
  },
  set$_bar: function(v) {
    this._bar = v;
  },
  setIndeterminate$1: function(inValue) {
    if (inValue) {
      if ($.contains$1$asx($.get$classes$x(this.element), "progress-striped") !== true) {
        $.addAll$1$ax($.get$classes$x(this.element), ["progress-striped", "active"]);
        $.set$width$x($.get$style$x(this._bar), "100%");
      }
    } else
      $.get$classes$x(this.element).removeAll$1(["progress-striped", "active"]);
  },
  "+setIndeterminate:1:0": 0,
  get$indeterminate: function(_) {
    return $.contains$1$asx($.get$classes$x(this.element), "progress-striped");
  },
  "+indeterminate": 0,
  set$value: function(_, val) {
    if ($.$gt$n(val, 100) === true)
      val = 100;
    $.set$width$x($.get$style$x(this._bar), $.S(val) + "%");
  },
  "+value=": 0
},

"+BProgress": 0,

BForm: {
  "": function BForm(element) {
    this.element = element;
  },
  "super": "BElement",
  compact$0: function() {
    $.add$1$ax($.get$classes$x(this.element), "form-compact");
    return this;
  },
  "+compact:0:0": 0
},

"+BForm": 0,

BFieldset: {
  "": function BFieldset(element) {
    this.element = element;
  },
  "super": "BElement"
},

"+BFieldset": 0,

BTabContainer: {
  "": function BTabContainer(tabs, _liblib5$_element, _content, _editorContent, _activeTab, listeners) {
    this.tabs = tabs;
    this._liblib5$_element = _liblib5$_element;
    this._content = _content;
    this._editorContent = _editorContent;
    this._activeTab = _activeTab;
    this.listeners = listeners;
  },
  "super": "Object",
  get$tabs: function() {
    return this.tabs;
  },
  set$tabs: function(v) {
    this.tabs = v;
  },
  get$_liblib5$_element: function() {
    return this._liblib5$_element;
  },
  set$_liblib5$_element: function(v) {
    this._liblib5$_element = v;
  },
  get$_content: function() {
    return this._content;
  },
  set$_content: function(v) {
    this._content = v;
  },
  get$_editorContent: function() {
    return this._editorContent;
  },
  set$_editorContent: function(v) {
    this._editorContent = v;
  },
  get$_activeTab: function() {
    return this._activeTab;
  },
  set$_activeTab: function(v) {
    this._activeTab = v;
  },
  get$listeners: function() {
    return this.listeners;
  },
  set$listeners: function(v) {
    this.listeners = v;
  },
  add$1: function(_, tab) {
    $.add$1$ax($.get$children$x(this._liblib5$_element), tab.get$headerElement());
    this.tabs.push(tab);
    $.get$onClick$x(tab.get$headerElement()).listen$1(this.get$_handleActivatedEvent());
    $.get$onClick$x(tab.get$closeButton()).listen$1(this.get$_handleCloseEvent());
    return tab;
  },
  setActive$1: function(tab) {
    var t1;
    if ($.$eq(this._activeTab, tab))
      return;
    t1 = this._activeTab;
    if (t1 != null) {
      t1._setActive$1(false);
      this._activeTab = null;
    }
    this._activeTab = tab;
    t1 = this._activeTab;
    if (t1 != null)
      t1._setActive$1(true);
  },
  "+setActive:1:0": 0,
  _handleActivatedEvent$1: function($event) {
    var tab, t1, t2;
    $.stopPropagation$0$x($event);
    tab = this._tabFor$1($event);
    if (tab != null) {
      t1 = this.listeners;
      t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
      t1 = new $.ListIterator(t1, t1.length, 0, null);
      t1.$builtinTypeInfo = [t2];
      for (; t1.moveNext$0();)
        t1._liblib$_current.focusRequest$1(tab);
    }
  },
  "+_handleActivatedEvent:1:0": 0,
  get$_handleActivatedEvent: function() {
    return new $.BoundClosure$1(this, "_handleActivatedEvent$1", null);
  },
  _handleCloseEvent$1: function($event) {
    var tab, t1, t2;
    $.stopPropagation$0$x($event);
    tab = this._tabFor$1($event);
    if (tab != null) {
      t1 = this.listeners;
      t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
      t1 = new $.ListIterator(t1, t1.length, 0, null);
      t1.$builtinTypeInfo = [t2];
      for (; t1.moveNext$0();)
        t1._liblib$_current.closeRequest$1(tab);
    }
  },
  "+_handleCloseEvent:1:0": 0,
  get$_handleCloseEvent: function() {
    return new $.BoundClosure$1(this, "_handleCloseEvent$1", null);
  },
  _tabFor$1: function($event) {
    var target, t1, t2, tab;
    target = $.get$currentTarget$x($event);
    t1 = this.tabs;
    t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();) {
      tab = t1._liblib$_current;
      if ($.$eq(tab.get$headerElement(), target) || $.$eq(tab.get$closeButton(), target))
        return tab;
    }
    return;
  },
  "+_tabFor:1:0": 0,
  get$element: function() {
    return this._liblib5$_element;
  },
  BTabContainer$1: function($parent) {
    var t1, t2, t3;
    t1 = new $.BUnorderedList(null);
    t1.element = document.createElement("ul");
    t2 = $parent != null;
    if (t2) {
      t3 = $.get$children$x($parent);
      t3.add$1(t3, t1.element);
    }
    $.add$1$ax($.get$classes$x(t1.element), "nav");
    $.add$1$ax($.get$classes$x(t1.element), "nav-tabs");
    this._liblib5$_element = t1.element;
    t1 = new $.BDiv(null);
    t1.element = document.createElement("div");
    if (t2) {
      t3 = $.get$children$x($parent);
      t3.add$1(t3, t1.element);
    }
    $.add$1$ax($.get$classes$x(t1.element), "well");
    t1 = t1.wellSmall$0();
    $.add$1$ax($.get$classes$x(t1.element), "flex20");
    this._content = t1.element;
    t1 = new $.BDiv(null);
    t1.element = document.createElement("div");
    if (t2) {
      t2 = $.get$children$x($parent);
      t2.add$1(t2, t1.element);
    }
    $.add$1$ax($.get$classes$x(t1.element), "well");
    t1 = t1.wellSmall$0();
    $.add$1$ax($.get$classes$x(t1.element), "flex20");
    this._editorContent = t1.element;
  }
},

"+BTabContainer": 0,

BTabContainerListener: {
  "": function BTabContainerListener() {
  },
  "super": "Object"
},

"+BTabContainerListener": 0,

BTab: {
  "": function BTab(name, _headerElement, _dirtyFlag, _nameElement, _closeButton) {
    this.name = name;
    this._headerElement = _headerElement;
    this._dirtyFlag = _dirtyFlag;
    this._nameElement = _nameElement;
    this._closeButton = _closeButton;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  set$name: function(receiver, v) {
    this.name = v;
  },
  get$_headerElement: function() {
    return this._headerElement;
  },
  set$_headerElement: function(v) {
    this._headerElement = v;
  },
  get$_dirtyFlag: function() {
    return this._dirtyFlag;
  },
  set$_dirtyFlag: function(v) {
    this._dirtyFlag = v;
  },
  get$_nameElement: function() {
    return this._nameElement;
  },
  set$_nameElement: function(v) {
    this._nameElement = v;
  },
  get$_closeButton: function() {
    return this._closeButton;
  },
  set$_closeButton: function(v) {
    this._closeButton = v;
  },
  setName$1: function($name) {
    $.set$innerHtml$x(this._nameElement, $name);
  },
  "+setName:1:0": 0,
  _setActive$1: function(value) {
    var t1 = this._headerElement;
    if (value)
      $.add$1$ax($.get$classes$x(t1), "active");
    else
      $.remove$1$ax($.get$classes$x(t1), "active");
  },
  "+_setActive:1:0": 0,
  setDirty$1: function(value) {
    var t1 = $.get$style$x(this._dirtyFlag);
    $.set$visibility$x(t1, value === true ? "visible" : "hidden");
  },
  "+setDirty:1:0": 0,
  get$dirty: function() {
    return $.$eq($.get$visibility$x($.get$style$x(this._dirtyFlag)), "visible");
  },
  "+dirty": 0,
  get$headerElement: function() {
    return this._headerElement;
  },
  "+headerElement": 0,
  get$closeButton: function() {
    return this._closeButton;
  },
  "+closeButton": 0,
  BTab$1: function($name) {
    var t1, t2, a, t3;
    t1 = new $.BListItem(null);
    t1.element = document.createElement("li");
    this._headerElement = t1.element;
    t1 = this._headerElement;
    t2 = new $.BElement(null);
    t2.element = document.createElement("a");
    if (t1 != null)
      $.add$1$ax($.get$children$x(t1), t2.element);
    a = t2.element;
    t1 = new $.BSpan(null);
    t1.element = document.createElement("span");
    t2 = a != null;
    if (t2)
      $.add$1$ax($.get$children$x(a), t1.element);
    $.set$innerHtml$x(t1.element, "&bullet;&nbsp;");
    this._dirtyFlag = t1.element;
    t1 = this.name;
    t3 = new $.BSpan(null);
    t3.element = document.createElement("span");
    if (t2)
      $.add$1$ax($.get$children$x(a), t3.element);
    $.set$innerHtml$x(t3.element, t1);
    this._nameElement = t3.element;
    t1 = new $.BButton(null);
    t1.element = document.createElement("button");
    $.add$1$ax($.get$classes$x(t1.element), "btn");
    $.$indexSet$ax($.get$attributes$x(t1.element), "type", "button");
    if (t2)
      $.add$1$ax($.get$children$x(a), t1.element);
    $.add$1$ax($.get$classes$x(t1.element), "close");
    this._closeButton = t1.element;
    t1 = $.get$children$x(this._closeButton);
    t2 = document.createElement("i");
    $.add$1$ax($.get$classes$x(t2), "icon-remove");
    $.add$1$ax(t1, t2);
    t2 = $.get$style$x(this._dirtyFlag);
    $.set$visibility$x(t2, "hidden");
  }
},

"+BTab": 0,

absoluteOffset: function(element) {
  var left, $top, t1, offset, t2, t3;
  left = 0;
  $top = 0;
  while (true) {
    if (!(element != null && (typeof element !== "object" || element === null || !$.getInterceptor(element).$isBodyElement)))
      break;
    t1 = $.getInterceptor$x(element);
    offset = t1.get$offset(element);
    t2 = $.getInterceptor$x(offset);
    t3 = t2.get$left(offset);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    left += t3;
    t2 = t2.get$top(offset);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    $top += t2;
    element = t1.get$parent(element);
  }
  return new $.Point(left, $top);
},

"+absoluteOffset:1:0": 0,

BUnorderedList$: function($parent) {
  var t1 = new $.BUnorderedList(null);
  t1.element = document.createElement("ul");
  if ($parent != null)
    $.add$1$ax($.get$children$x($parent), t1.element);
  return t1;
},

"+new BUnorderedList:0:1": 0,

BMenu$: function($name) {
  var t1 = $.List_List($, $.BMenuItem);
  t1.$builtinTypeInfo = [$.BMenuItem];
  t1 = new $.BMenu(null, null, null, t1);
  t1.BMenu$1($name);
  return t1;
},

"+new BMenu:1:0": 0,

BMenuItem$: function($name, _handler) {
  var t1 = new $.BMenuItem(_handler, null, null);
  t1.BMenuItem$2($name, _handler);
  return t1;
},

"+new BMenuItem:1:1": 0,

BPopover$: function(relativeToElement, dockLeft, $location) {
  var t1 = new $.BPopover(relativeToElement, dockLeft, null, null, null, null);
  t1.BPopover$3$dockLeft$location(relativeToElement, dockLeft, $location);
  return t1;
},

"+new BPopover:1:2": 0,

BTabContainer$: function($parent) {
  var t1, t2;
  t1 = $.List_List($, $.BTab);
  t1.$builtinTypeInfo = [$.BTab];
  t2 = $.List_List($, $.BTabContainerListener);
  t2.$builtinTypeInfo = [$.BTabContainerListener];
  t1 = new $.BTabContainer(t1, null, null, null, null, t2);
  t1.BTabContainer$1($parent);
  return t1;
},

"+new BTabContainer:1:0": 0,

BTab$: function($name) {
  var t1 = new $.BTab($name, null, null, null, null);
  t1.BTab$1($name);
  return t1;
},

"+new BTab:1:0": 0}],
["chrome_app", "../packages/chrome/src/app.dart", , {
ChromeApp: {
  "": function ChromeApp(window) {
    this.window = window;
  },
  "super": "Object",
  get$window: function(receiver) {
    return this.window;
  }
},

"+ChromeApp": 0,

ChromeWindow: {
  "": function ChromeWindow(_liblib22$_current) {
    this._liblib22$_current = _liblib22$_current;
  },
  "super": "Object",
  get$_liblib22$_current: function() {
    return this._liblib22$_current;
  },
  set$_liblib22$_current: function(v) {
    this._liblib22$_current = v;
  },
  current$0: function() {
    if (this._liblib22$_current == null)
      this._liblib22$_current = $.scoped(new $.ChromeWindow_current_closure());
    return this._liblib22$_current;
  },
  "+current:0:0": 0,
  get$current: function() {
    return new $.BoundClosure$0(this, "current$0", null);
  },
  create$3$bounds$id: function(url, bounds, id) {
    return $.scoped(new $.ChromeWindow_create_closure(url, id));
  },
  "+create:1:2": 0,
  onClosed$1: function(callback) {
    return $.scoped(new $.ChromeWindow_onClosed_closure(callback));
  },
  "+onClosed:1:0": 0,
  get$onClosed: function() {
    return new $.BoundClosure$1(this, "onClosed$1", null);
  }
},

"+ChromeWindow": 0,

ChromeWindow_current_closure: {
  "": function ChromeWindow_current_closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2;
    $._enterScopeIfNeeded();
    t1 = new $.AppWindow($.get$window$x($._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$app()).current$0());
    t2 = t1.proxy;
    $._jsGlobalize.callSync$1($._serialize(t2.toJs$0()));
    return t1;
  },
  $isFunction: true
},

"+ChromeWindow_current_closure": 0,

ChromeWindow_create_closure: {
  "": function ChromeWindow_create_closure(url_0, id_1) {
    this.url_0 = url_0;
    this.id_1 = id_1;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, completer, futureImpl, options;
    t1 = null;
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [t1];
    completer = new $._AsyncCompleter(t2, false);
    completer.$builtinTypeInfo = [t1];
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    options = $.makeLiteralMap([]);
    options.$indexSet(options, "id", this.id_1);
    $._enterScopeIfNeeded();
    t1 = $.get$window$x($._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$app());
    $._enterScopeIfNeeded();
    t1.create$3(this.url_0, $._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(options))), $.Callback$once(new $.ChromeWindow_create__closure(completer), false));
    return futureImpl;
  },
  $isFunction: true
},

"+ChromeWindow_create_closure": 0,

ChromeWindow_create__closure: {
  "": function ChromeWindow_create__closure(completer_2) {
    this.completer_2 = completer_2;
  },
  "super": "Closure",
  call$1: function(proxy) {
    var t1, t2, t3;
    t1 = this.completer_2;
    t2 = new $.AppWindow(proxy);
    t3 = t2.proxy;
    $._jsGlobalize.callSync$1($._serialize(t3.toJs$0()));
    if (t1._isComplete)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._isComplete = true;
    t3 = t1.future._zone;
    t3._openCallbacks = t3._openCallbacks - 1;
    if (!t3._isExecutingCallback && t3._openCallbacks === 0 && t3._children.length === 0)
      ;
    t1._setFutureValue$1(t2);
    return;
  },
  $isFunction: true
},

"+ChromeWindow_create__closure": 0,

ChromeWindow_onClosed_closure: {
  "": function ChromeWindow_onClosed_closure(callback_0) {
    this.callback_0 = callback_0;
  },
  "super": "Closure",
  call$0: function() {
    $._enterScopeIfNeeded();
    return $.get$window$x($._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$app()).get$onClosed().addListener$1($.Callback$once(new $.ChromeWindow_onClosed__closure(this.callback_0), false));
  },
  $isFunction: true
},

"+ChromeWindow_onClosed_closure": 0,

ChromeWindow_onClosed__closure: {
  "": function ChromeWindow_onClosed__closure(callback_1) {
    this.callback_1 = callback_1;
  },
  "super": "Closure",
  call$0: function() {
    this.callback_1.call$0();
  },
  $isFunction: true
},

"+ChromeWindow_onClosed__closure": 0,

AppWindow: {
  "": function AppWindow(proxy) {
    this.proxy = proxy;
  },
  "super": "Object",
  get$proxy: function() {
    return this.proxy;
  },
  set$proxy: function(v) {
    this.proxy = v;
  },
  close$0: function(_) {
    $.scoped(new $.AppWindow_close_closure(this));
  },
  focus$0: function(_) {
    $.scoped(new $.AppWindow_focus_closure(this));
  },
  dispose$0: function() {
    var t1 = this.proxy;
    $._jsInvalidate.callSync$1($._serialize(t1.toJs$0()));
  }
},

"+AppWindow": 0,

AppWindow_close_closure: {
  "": function AppWindow_close_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    $.close$0$x(this.this_0.get$proxy());
  },
  $isFunction: true
},

"+AppWindow_close_closure": 0,

AppWindow_focus_closure: {
  "": function AppWindow_focus_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    $.focus$0$x(this.this_0.get$proxy());
  },
  $isFunction: true
},

"+AppWindow_focus_closure": 0,

Bounds: {
  "": function Bounds(left, top, width, height) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
  },
  "super": "Object",
  get$left: function(receiver) {
    return this.left;
  },
  set$left: function(receiver, v) {
    this.left = v;
  },
  get$top: function(receiver) {
    return this.top;
  },
  set$top: function(receiver, v) {
    this.top = v;
  },
  get$width: function(receiver) {
    return this.width;
  },
  set$width: function(receiver, v) {
    this.width = v;
  },
  get$height: function(receiver) {
    return this.height;
  },
  set$height: function(receiver, v) {
    this.height = v;
  }
},

"+Bounds": 0}],
["chrome_file_system", "../packages/chrome/src/file_system.dart", , {
ChromeFileSystem: {
  "": function ChromeFileSystem() {
  },
  "super": "Object",
  chooseOpenFile$0: function() {
    var t1, t2, completer, futureImpl;
    t1 = null;
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [t1];
    completer = new $._AsyncCompleter(t2, false);
    completer.$builtinTypeInfo = [t1];
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    $.scoped(new $.ChromeFileSystem_chooseOpenFile_closure(completer));
    return futureImpl;
  },
  "+chooseOpenFile:0:0": 0,
  chooseSaveFile$0: function() {
    var t1, t2, completer, futureImpl;
    t1 = null;
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [t1];
    completer = new $._AsyncCompleter(t2, false);
    completer.$builtinTypeInfo = [t1];
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    $.scoped(new $.ChromeFileSystem_chooseSaveFile_closure(completer));
    return futureImpl;
  },
  "+chooseSaveFile:0:0": 0,
  getEntryId$1: function(fileEntry) {
    return $.scoped(new $.ChromeFileSystem_getEntryId_closure(fileEntry));
  },
  "+getEntryId:1:0": 0
},

"+ChromeFileSystem": 0,

ChromeFileSystem_chooseOpenFile_closure: {
  "": function ChromeFileSystem_chooseOpenFile_closure(completer_0) {
    this.completer_0 = completer_0;
  },
  "super": "Closure",
  call$0: function() {
    var callback, t1, t2;
    callback = $.Callback$once(new $.ChromeFileSystem_chooseOpenFile__closure(this.completer_0), false);
    $._enterScopeIfNeeded();
    t1 = $._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$fileSystem();
    t2 = $.makeLiteralMap(["type", "openFile"]);
    $._enterScopeIfNeeded();
    t1.chooseEntry$2($._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(t2))), callback);
  },
  $isFunction: true
},

"+ChromeFileSystem_chooseOpenFile_closure": 0,

ChromeFileSystem_chooseOpenFile__closure: {
  "": function ChromeFileSystem_chooseOpenFile__closure(completer_1) {
    this.completer_1 = completer_1;
  },
  "super": "Closure",
  call$1: function(fileEntry) {
    var t1, t2, t3;
    t1 = this.completer_1;
    if (fileEntry != null) {
      t2 = $.ChromeFileEntry$(fileEntry);
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t3 = t1.future._zone;
      t3._openCallbacks = t3._openCallbacks - 1;
      if (!t3._isExecutingCallback && t3._openCallbacks === 0 && t3._children.length === 0)
        ;
      t1._setFutureValue$1(t2);
    } else {
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t2 = t1.future._zone;
      t2._openCallbacks = t2._openCallbacks - 1;
      if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      t1._setFutureValue$1(null);
    }
  },
  $isFunction: true
},

"+ChromeFileSystem_chooseOpenFile__closure": 0,

ChromeFileSystem_chooseSaveFile_closure: {
  "": function ChromeFileSystem_chooseSaveFile_closure(completer_0) {
    this.completer_0 = completer_0;
  },
  "super": "Closure",
  call$0: function() {
    var callback, t1, t2;
    callback = $.Callback$once(new $.ChromeFileSystem_chooseSaveFile__closure(this.completer_0), false);
    $._enterScopeIfNeeded();
    t1 = $._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$fileSystem();
    t2 = $.makeLiteralMap(["type", "saveFile"]);
    $._enterScopeIfNeeded();
    t1.chooseEntry$2($._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(t2))), callback);
  },
  $isFunction: true
},

"+ChromeFileSystem_chooseSaveFile_closure": 0,

ChromeFileSystem_chooseSaveFile__closure: {
  "": function ChromeFileSystem_chooseSaveFile__closure(completer_1) {
    this.completer_1 = completer_1;
  },
  "super": "Closure",
  call$1: function(fileEntry) {
    var t1, t2, t3;
    t1 = this.completer_1;
    if (fileEntry != null) {
      t2 = $.ChromeFileEntry$(fileEntry);
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t3 = t1.future._zone;
      t3._openCallbacks = t3._openCallbacks - 1;
      if (!t3._isExecutingCallback && t3._openCallbacks === 0 && t3._children.length === 0)
        ;
      t1._setFutureValue$1(t2);
    } else {
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t2 = t1.future._zone;
      t2._openCallbacks = t2._openCallbacks - 1;
      if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      t1._setFutureValue$1(null);
    }
  },
  $isFunction: true
},

"+ChromeFileSystem_chooseSaveFile__closure": 0,

ChromeFileSystem_getEntryId_closure: {
  "": function ChromeFileSystem_getEntryId_closure(fileEntry_0) {
    this.fileEntry_0 = fileEntry_0;
  },
  "super": "Closure",
  call$0: function() {
    $._enterScopeIfNeeded();
    return $._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$fileSystem().getEntryId$1(this.fileEntry_0.get$_proxy());
  },
  $isFunction: true
},

"+ChromeFileSystem_getEntryId_closure": 0,

ChromeFileEntry: {
  "": function ChromeFileEntry(_proxy, _liblib19$_name, _fullPath, _isFile, _isDirectory) {
    this._proxy = _proxy;
    this._liblib19$_name = _liblib19$_name;
    this._fullPath = _fullPath;
    this._isFile = _isFile;
    this._isDirectory = _isDirectory;
  },
  "super": "Object",
  get$_proxy: function() {
    return this._proxy;
  },
  set$_proxy: function(v) {
    this._proxy = v;
  },
  get$_liblib19$_name: function() {
    return this._liblib19$_name;
  },
  set$_liblib19$_name: function(v) {
    this._liblib19$_name = v;
  },
  get$_fullPath: function() {
    return this._fullPath;
  },
  set$_fullPath: function(v) {
    this._fullPath = v;
  },
  get$_isFile: function() {
    return this._isFile;
  },
  set$_isFile: function(v) {
    this._isFile = v;
  },
  get$_isDirectory: function() {
    return this._isDirectory;
  },
  set$_isDirectory: function(v) {
    this._isDirectory = v;
  },
  get$name: function(_) {
    return this._liblib19$_name;
  },
  "+name": 0,
  toString$0: function(_) {
    return this._liblib19$_name;
  },
  get$fullPath: function(_) {
    return this._fullPath;
  },
  "+fullPath": 0,
  get$id: function(_) {
    return $.get$fileSystem().getEntryId$1(this);
  },
  "+id": 0,
  readContents$0: function() {
    var t1, t2, completer, futureImpl;
    t1 = null;
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [t1];
    completer = new $._AsyncCompleter(t2, false);
    completer.$builtinTypeInfo = [t1];
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    $.scoped(new $.ChromeFileEntry_readContents_closure(this, completer));
    return futureImpl;
  },
  "+readContents:0:0": 0,
  writeContents$1: function(contents) {
    var t1, t2, completer, futureImpl;
    t1 = null;
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [t1];
    completer = new $._AsyncCompleter(t2, false);
    completer.$builtinTypeInfo = [t1];
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    $.scoped(new $.ChromeFileEntry_writeContents_closure(this, contents, completer));
    return futureImpl;
  },
  "+writeContents:1:0": 0,
  dispose$0: function() {
    var t1 = this._proxy;
    $._jsInvalidate.callSync$1($._serialize(t1.toJs$0()));
  },
  ChromeFileEntry$1: function(proxy) {
    var t1;
    this._proxy = proxy;
    t1 = this._proxy;
    $._jsGlobalize.callSync$1($._serialize(t1.toJs$0()));
    this._liblib19$_name = $.get$name$x(this._proxy);
    this._fullPath = $.get$fullPath$x(this._proxy);
    this._isFile = $.get$isFile$x(this._proxy);
    this._isDirectory = $.get$isDirectory$x(this._proxy);
  }
},

"+ChromeFileEntry": 0,

ChromeFileEntry_readContents_closure: {
  "": function ChromeFileEntry_readContents_closure(this_0, completer_1) {
    this.this_0 = this_0;
    this.completer_1 = completer_1;
  },
  "super": "Closure",
  call$0: function() {
    var callback = $.Callback$once(new $.ChromeFileEntry_readContents__closure($.Callback$once(new $.ChromeFileEntry_readContents__closure0(this.completer_1), false)), false);
    $.file$1$x(this.this_0.get$_proxy(), callback);
  },
  $isFunction: true
},

"+ChromeFileEntry_readContents_closure": 0,

ChromeFileEntry_readContents__closure0: {
  "": function ChromeFileEntry_readContents__closure(completer_2) {
    this.completer_2 = completer_2;
  },
  "super": "Closure",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.completer_2;
    t2 = $.get$result$x($.get$target$x(e));
    if (t1._isComplete)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._isComplete = true;
    t3 = t1.future._zone;
    t3._openCallbacks = t3._openCallbacks - 1;
    if (!t3._isExecutingCallback && t3._openCallbacks === 0 && t3._children.length === 0)
      ;
    t1._setFutureValue$1(t2);
  },
  $isFunction: true
},

"+ChromeFileEntry_readContents__closure": 0,

ChromeFileEntry_readContents__closure: {
  "": function ChromeFileEntry_readContents__closure(contentsCallback_3) {
    this.contentsCallback_3 = contentsCallback_3;
  },
  "super": "Closure",
  call$1: function(file) {
    var reader;
    $._enterScopeIfNeeded();
    reader = $.Proxy_Proxy$withArgList($._deserialize($._jsPortSync.callSync$1([])).get$FileReader(), $._pruneUndefined($.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined));
    reader.set$onloadend(this.contentsCallback_3);
    reader.readAsText$1(file);
  },
  $isFunction: true
},

"+ChromeFileEntry_readContents__closure": 0,

ChromeFileEntry_writeContents_closure: {
  "": function ChromeFileEntry_writeContents_closure(this_0, contents_1, completer_2) {
    this.this_0 = this_0;
    this.contents_1 = contents_1;
    this.completer_2 = completer_2;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, writeEndCallback, errorCallback, writeableCallback;
    t1 = this.this_0;
    t2 = this.completer_2;
    writeEndCallback = $.Callback$once(new $.ChromeFileEntry_writeContents__closure(t1, t2), false);
    errorCallback = $.Callback$once(new $.ChromeFileEntry_writeContents__closure0(t2), false);
    writeableCallback = $.Callback$once(new $.ChromeFileEntry_writeContents__closure1(errorCallback, $.Callback$once(new $.ChromeFileEntry_writeContents__closure2(this.contents_1, writeEndCallback, errorCallback), false)), false);
    $._enterScopeIfNeeded();
    $._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$fileSystem().getWritableEntry$2(t1.get$_proxy(), writeableCallback);
  },
  $isFunction: true
},

"+ChromeFileEntry_writeContents_closure": 0,

ChromeFileEntry_writeContents__closure: {
  "": function ChromeFileEntry_writeContents__closure(this_3, completer_4) {
    this.this_3 = this_3;
    this.completer_4 = completer_4;
  },
  "super": "Closure",
  call$1: function($event) {
    var t1, t2;
    t1 = this.completer_4;
    t2 = t1._isComplete;
    if (!t2) {
      if (t2)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t2 = t1.future._zone;
      t2._openCallbacks = t2._openCallbacks - 1;
      if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      t1._setFutureValue$1(this.this_3);
    }
  },
  $isFunction: true
},

"+ChromeFileEntry_writeContents__closure": 0,

ChromeFileEntry_writeContents__closure0: {
  "": function ChromeFileEntry_writeContents__closure(completer_5) {
    this.completer_5 = completer_5;
  },
  "super": "Closure",
  call$1: function($event) {
    this.completer_5.completeError$1($event);
  },
  $isFunction: true
},

"+ChromeFileEntry_writeContents__closure": 0,

ChromeFileEntry_writeContents__closure2: {
  "": function ChromeFileEntry_writeContents__closure(contents_6, writeEndCallback_7, errorCallback_8) {
    this.contents_6 = contents_6;
    this.writeEndCallback_7 = writeEndCallback_7;
    this.errorCallback_8 = errorCallback_8;
  },
  "super": "Closure",
  call$1: function(writer) {
    var t1, blob;
    $._enterScopeIfNeeded();
    t1 = $.get$Blob$x($._deserialize($._jsPortSync.callSync$1([])));
    $._enterScopeIfNeeded();
    blob = $.Proxy_Proxy$withArgList(t1, $._pruneUndefined($._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree([this.contents_6]))), $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined));
    writer.set$onwriteend(this.writeEndCallback_7);
    writer.set$onerror(this.errorCallback_8);
    t1 = $.makeLiteralMap(["type", "text/plain"]);
    $._enterScopeIfNeeded();
    writer.write$2(blob, $._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(t1))));
  },
  $isFunction: true
},

"+ChromeFileEntry_writeContents__closure": 0,

ChromeFileEntry_writeContents__closure1: {
  "": function ChromeFileEntry_writeContents__closure(errorCallback_9, writerCallback_10) {
    this.errorCallback_9 = errorCallback_9;
    this.writerCallback_10 = writerCallback_10;
  },
  "super": "Closure",
  call$1: function(writeableEntry) {
    $.createWriter$2$x(writeableEntry, this.writerCallback_10, this.errorCallback_9);
  },
  $isFunction: true
},

"+ChromeFileEntry_writeContents__closure": 0,

ChromeFileEntry$: function(proxy) {
  var t1 = new $.ChromeFileEntry(null, null, null, null, null);
  t1.ChromeFileEntry$1(proxy);
  return t1;
},

"+new ChromeFileEntry:1:0": 0}],
["chrome_i18n", "../packages/chrome/src/i18n.dart", , {
ChromeI18n: {
  "": function ChromeI18n() {
  },
  "super": "Object",
  getMessage$2: function(key, substitutions) {
    $._enterScopeIfNeeded();
    return $._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$i18n().getMessage$1(key);
  },
  "+getMessage:1:1": 0,
  getMessage$1: function(key) {
    return this.getMessage$2(key, null);
  },
  "+getMessage:1:0": 0
},

"+ChromeI18n": 0}],
["chrome_runtime", "../packages/chrome/src/runtime.dart", , {
Runtime_getManifest_closure: {
  "": function Runtime_getManifest_closure() {
  },
  "super": "Closure",
  call$0: function() {
    $._enterScopeIfNeeded();
    var chrome = $._deserialize($._jsPortSync.callSync$1([])).get$chrome();
    $._enterScopeIfNeeded();
    return $.parse($._deserialize($._jsPortSync.callSync$1([])).get$JSON().stringify$1(chrome.get$runtime().getManifest$0()), null);
  },
  $isFunction: true
},

"+Runtime_getManifest_closure": 0,

Runtime_getURL_closure: {
  "": function Runtime_getURL_closure(path_0) {
    this.path_0 = path_0;
  },
  "super": "Closure",
  call$0: function() {
    $._enterScopeIfNeeded();
    return $._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$runtime().getURL$1(this.path_0);
  },
  $isFunction: true
},

"+Runtime_getURL_closure": 0,

Runtime_getManifest: function() {
  return $.scoped(new $.Runtime_getManifest_closure());
},

Runtime_getURL: function(path) {
  return $.scoped(new $.Runtime_getURL_closure(path));
}}],
["chrome_socket", "../lib/chrome_socket.dart", , {
ChromeSocketType: {
  "": function ChromeSocketType(value) {
    this.value = value;
  },
  "super": "Object",
  get$value: function(receiver) {
    return this.value;
  }
},

"+ChromeSocketType": 0,

ChromeSocket: {
  "": function ChromeSocket(socketId, disconnected, destroyed, _readController) {
    this.socketId = socketId;
    this.disconnected = disconnected;
    this.destroyed = destroyed;
    this._readController = _readController;
  },
  "super": "Object",
  get$socketId: function() {
    return this.socketId;
  },
  set$socketId: function(v) {
    this.socketId = v;
  },
  get$disconnected: function() {
    return this.disconnected;
  },
  set$disconnected: function(v) {
    this.disconnected = v;
  },
  get$destroyed: function() {
    return this.destroyed;
  },
  set$destroyed: function(v) {
    this.destroyed = v;
  },
  get$_readController: function() {
    return this._readController;
  },
  set$_readController: function(v) {
    this._readController = v;
  },
  destroy$0: function() {
    if (this.destroyed !== true) {
      this.destroyed = true;
      $._enterScopeIfNeeded0();
      $._deserialize0($._jsPortSync0.callSync$1([])).get$chrome().get$socket().destroy$1(this.socketId);
      $.JSNull_methods.close$0(this._readController);
    }
  },
  "+destroy:0:0": 0,
  toString$0: function(_) {
    return "socket[" + $.S(this.socketId) + "]";
  }
},

"+ChromeSocket": 0,

ChromeSocket_create_closure: {
  "": function ChromeSocket_create_closure(type_0) {
    this.type_0 = type_0;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, completer, futureImpl, callback;
    t1 = null;
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [t1];
    completer = new $._AsyncCompleter(t2, false);
    completer.$builtinTypeInfo = [t1];
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    callback = $.Callback$once0(new $.ChromeSocket_create__closure(completer), false);
    $._enterScopeIfNeeded0();
    $._deserialize0($._jsPortSync0.callSync$1([])).get$chrome().get$socket().create$2(this.type_0.value, callback);
    return futureImpl;
  },
  $isFunction: true
},

"+ChromeSocket_create_closure": 0,

ChromeSocket_create__closure: {
  "": function ChromeSocket_create__closure(completer_1) {
    this.completer_1 = completer_1;
  },
  "super": "Closure",
  call$1: function(result) {
    var t1, t2, t3;
    t1 = this.completer_1;
    if ($._lastError() != null)
      t1.completeError$1($._lastError());
    else {
      t2 = result.get$socketId();
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t3 = t1.future._zone;
      t3._openCallbacks = t3._openCallbacks - 1;
      if (!t3._isExecutingCallback && t3._openCallbacks === 0 && t3._children.length === 0)
        ;
      t1._setFutureValue$1(new $.ChromeSocket(t2, null, null, null));
    }
  },
  $isFunction: true
},

"+ChromeSocket_create__closure": 0,

_lastError: function() {
  $._enterScopeIfNeeded0();
  var error = $.$index$asx($._deserialize0($._jsPortSync0.callSync$1([])).get$chrome().get$runtime(), "lastError");
  if (error != null)
    return $.$index$asx(error, "message");
  else
    return;
},

"+_lastError": 0,

ChromeSocket_create: function(type) {
  return $.scoped0(new $.ChromeSocket_create_closure(type));
},

"+create:1:0": 0}],
["chrome_socket_test", "../test/chrome_socket_test.dart", , {
main_closure4: {
  "": function main_closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.test("create/destroy", new $.main__closure19());
  },
  $isFunction: true
},

"+main_closure": 0,

main__closure19: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.expect($.ChromeSocket_create($.get$ChromeSocketType_TCP()).then$1(new $.main___closure2()), $._Completes_PGb, null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main___closure2: {
  "": function main___closure() {
  },
  "super": "Closure",
  call$1: function(socket) {
    $.Primitives_printString($.toString$0(socket));
    $.expect(socket.get$socketId(), new $._OrderingComparison(0, false, false, true, "a value greater than", true), null, null, false);
    socket.destroy$0();
  },
  $isFunction: true
},

"+main___closure": 0,

main2: function() {
  $.group("chrome_socket", new $.main_closure4());
}}],
["chrome_storage", "../packages/chrome/src/storage.dart", , {
ChromeStorage: {
  "": function ChromeStorage(local, sync) {
    this.local = local;
    this.sync = sync;
  },
  "super": "Object",
  get$local: function() {
    return this.local;
  },
  get$sync: function() {
    return this.sync;
  }
},

"+ChromeStorage": 0,

StorageArea: {
  "": function StorageArea(_type) {
    this._type = _type;
  },
  "super": "Object",
  get$_type: function() {
    return this._type;
  },
  set$_type: function(v) {
    this._type = v;
  },
  get$1: function(keys) {
    var t1, t2, completer, futureImpl;
    t1 = null;
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [t1];
    completer = new $._AsyncCompleter(t2, false);
    completer.$builtinTypeInfo = [t1];
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    $.scoped(new $.StorageArea_get_closure(this, keys, completer));
    return futureImpl;
  },
  "+get:1:0": 0,
  set$1: function(items) {
    var t1, t2, completer, futureImpl;
    t1 = null;
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [t1];
    completer = new $._AsyncCompleter(t2, false);
    completer.$builtinTypeInfo = [t1];
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    $.scoped(new $.StorageArea_set_closure(this, items, completer));
    return futureImpl;
  },
  "+set:1:0": 0,
  remove$1: function(_, keys) {
    var t1, t2, completer, futureImpl;
    t1 = null;
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [t1];
    completer = new $._AsyncCompleter(t2, false);
    completer.$builtinTypeInfo = [t1];
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    $.scoped(new $.StorageArea_remove_closure(this, keys, completer));
    return futureImpl;
  },
  toString$0: function(_) {
    return "StorageArea " + this._type;
  }
},

"+StorageArea": 0,

StorageArea_get_closure: {
  "": function StorageArea_get_closure(this_0, keys_1, completer_2) {
    this.this_0 = this_0;
    this.keys_1 = keys_1;
    this.completer_2 = completer_2;
  },
  "super": "Closure",
  call$0: function() {
    var t1, callback, t2;
    t1 = this.keys_1;
    callback = $.Callback$once(new $.StorageArea_get__closure(t1, this.completer_2), false);
    t2 = this.this_0;
    $._enterScopeIfNeeded();
    t2 = $.$index$asx($._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$storage(), t2.get$_type());
    $._enterScopeIfNeeded();
    t2.get$2($._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(t1))), callback);
  },
  $isFunction: true
},

"+StorageArea_get_closure": 0,

StorageArea_get__closure: {
  "": function StorageArea_get__closure(keys_3, completer_4) {
    this.keys_3 = keys_3;
    this.completer_4 = completer_4;
  },
  "super": "Closure",
  call$1: function(items) {
    var error, map, t1, t2, key;
    error = $.lastError();
    if ($.lastError() == null) {
      map = new $.HashMap(0, null, null, null, null);
      map.$builtinTypeInfo = [$.JSString, $.JSString];
      t1 = this.keys_3;
      t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
      t1 = new $.ListIterator(t1, t1.length, 0, null);
      t1.$builtinTypeInfo = [t2];
      t2 = $.getInterceptor$asx(items);
      for (; t1.moveNext$0();) {
        key = t1._liblib$_current;
        map.$indexSet(map, key, t2.$index(items, key));
      }
      t1 = this.completer_4;
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t2 = t1.future._zone;
      t2._openCallbacks = t2._openCallbacks - 1;
      if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      t1._setFutureValue$1(map);
    } else
      this.completer_4.completeError$1(error);
  },
  $isFunction: true
},

"+StorageArea_get__closure": 0,

StorageArea_set_closure: {
  "": function StorageArea_set_closure(this_0, items_1, completer_2) {
    this.this_0 = this_0;
    this.items_1 = items_1;
    this.completer_2 = completer_2;
  },
  "super": "Closure",
  call$0: function() {
    var t1, callback;
    t1 = this.this_0;
    callback = $.Callback$once(new $.StorageArea_set__closure(t1, this.completer_2), false);
    $._enterScopeIfNeeded();
    t1 = $.$index$asx($._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$storage(), t1.get$_type());
    $._enterScopeIfNeeded();
    t1.set$2($._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(this.items_1))), callback);
  },
  $isFunction: true
},

"+StorageArea_set_closure": 0,

StorageArea_set__closure: {
  "": function StorageArea_set__closure(this_3, completer_4) {
    this.this_3 = this_3;
    this.completer_4 = completer_4;
  },
  "super": "Closure",
  call$0: function() {
    var error, t1, t2;
    error = $.lastError();
    t1 = this.completer_4;
    if ($.lastError() == null) {
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t2 = t1.future._zone;
      t2._openCallbacks = t2._openCallbacks - 1;
      if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      t1._setFutureValue$1(this.this_3);
    } else
      t1.completeError$1(error);
  },
  $isFunction: true
},

"+StorageArea_set__closure": 0,

StorageArea_remove_closure: {
  "": function StorageArea_remove_closure(this_0, keys_1, completer_2) {
    this.this_0 = this_0;
    this.keys_1 = keys_1;
    this.completer_2 = completer_2;
  },
  "super": "Closure",
  call$0: function() {
    var t1, callback;
    t1 = this.this_0;
    callback = $.Callback$once(new $.StorageArea_remove__closure(t1, this.completer_2), false);
    $._enterScopeIfNeeded();
    t1 = $.$index$asx($._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$storage(), t1.get$_type());
    $._enterScopeIfNeeded();
    $.remove$2$ax(t1, $._deserialize($._jsPortConvert.callSync$1($.Proxy__serializeDataTree(this.keys_1))), callback);
  },
  $isFunction: true
},

"+StorageArea_remove_closure": 0,

StorageArea_remove__closure: {
  "": function StorageArea_remove__closure(this_3, completer_4) {
    this.this_3 = this_3;
    this.completer_4 = completer_4;
  },
  "super": "Closure",
  call$0: function() {
    var error, t1, t2;
    error = $.lastError();
    t1 = this.completer_4;
    if ($.lastError() == null) {
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t2 = t1.future._zone;
      t2._openCallbacks = t2._openCallbacks - 1;
      if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      t1._setFutureValue$1(this.this_3);
    } else
      t1.completeError$1(error);
  },
  $isFunction: true
},

"+StorageArea_remove__closure": 0,

SyncStorageArea: {
  "": function SyncStorageArea(_type) {
    this._type = _type;
  },
  "super": "StorageArea"
},

"+SyncStorageArea": 0}],
["common", "../packages/chrome/src/common.dart", , {
lastError: function() {
  $._enterScopeIfNeeded();
  var error = $.$index$asx($._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$runtime(), "lastError");
  if (error != null)
    return $.$index$asx(error, "message");
  else
    return;
},

"+lastError": 0}],
["common_test", "../test/common_test.dart", , {
main_closure3: {
  "": function main_closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.test("i18n_found", new $.main__closure7());
    $.test("i18n_not_found", new $.main__closure8());
    $.test("toTitleCase1", new $.main__closure9());
    $.test("toTitleCase2", new $.main__closure10());
    $.test("toTitleCase3", new $.main__closure11());
    $.test("stripQuotes1", new $.main__closure12());
    $.test("stripQuotes2", new $.main__closure13());
    $.test("stripQuotes3", new $.main__closure14());
    $.test("stripQuotes4", new $.main__closure15());
    $.test("platform", new $.main__closure16());
    $.test("platform_one_set", new $.main__closure17());
    $.test("beep", new $.main__closure18());
  },
  $isFunction: true
},

"+main_closure": 0,

main__closure7: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.get$i18n();
    $._enterScopeIfNeeded();
    var t1 = $._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$i18n().getMessage$1("file_new");
    $.expect(t1, new $._StringEqualsMatcher("New"), null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure8: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.get$i18n();
    $._enterScopeIfNeeded();
    var t1 = $._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$i18n().getMessage$1("not_found");
    $.expect(t1, new $._StringEqualsMatcher(""), null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure9: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.toTitleCase("aa");
    $.expect(t1, new $._StringEqualsMatcher("Aa"), null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure10: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.toTitleCase("");
    $.expect(t1, new $._StringEqualsMatcher(""), null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure11: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.toTitleCase("a");
    $.expect(t1, new $._StringEqualsMatcher("A"), null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure12: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.stripQuotes("\"a\"");
    $.expect(t1, new $._StringEqualsMatcher("a"), null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure13: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.stripQuotes("\"\"");
    $.expect(t1, new $._StringEqualsMatcher(""), null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure14: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.stripQuotes("");
    $.expect(t1, new $._StringEqualsMatcher(""), null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure15: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.stripQuotes("\"abc");
    $.expect(t1, new $._StringEqualsMatcher("\"abc"), null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure16: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var str, t1;
    str = window.navigator.platform;
    if ($.JSString_methods.indexOf$1(str != null ? $.toLowerCase$0$s(str) : "", "linux") === -1) {
      str = window.navigator.platform;
      if ($.JSString_methods.indexOf$1(str != null ? $.toLowerCase$0$s(str) : "", "mac") === -1) {
        str = window.navigator.platform;
        t1 = $.JSString_methods.indexOf$1(str != null ? $.toLowerCase$0$s(str) : "", "win") !== -1;
      } else
        t1 = true;
    } else
      t1 = true;
    $.expect(t1, $.C__IsTrue, null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure17: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var str, platformCount;
    str = window.navigator.platform;
    platformCount = $.JSString_methods.indexOf$1(str != null ? $.toLowerCase$0$s(str) : "", "linux") !== -1 ? 1 : 0;
    str = window.navigator.platform;
    if ($.JSString_methods.indexOf$1(str != null ? $.toLowerCase$0$s(str) : "", "mac") !== -1)
      ++platformCount;
    str = window.navigator.platform;
    if ($.JSString_methods.indexOf$1(str != null ? $.toLowerCase$0$s(str) : "", "win") !== -1)
      ++platformCount;
    $.expect(platformCount, new $._DeepMatcher(1, 100, null), null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure18: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
  },
  $isFunction: true
},

"+main__closure": 0,

main3: function() {
  $.group("common", new $.main_closure3());
}}],
["dart._collection.dev", "dart:_collection-dev", , {
ListIterable: {
  "": function ListIterable() {
  },
  "super": "IterableBase",
  get$iterator: function(_) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, this.$asListIterable, 0);
    t2 = new $.ListIterator(this, this.get$length(this), 0, null);
    t2.$builtinTypeInfo = [t1];
    return t2;
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw $.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  get$isEmpty: function(_) {
    var t1 = this.get$length(this);
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout1(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout1: function(state0, t1) {
    return $.$eq(t1, 0);
  },
  get$first: function(_) {
    if ($.$eq(this.get$length(this), 0))
      throw $.wrapException(new $.StateError("No elements"));
    return this.elementAt$1(this, 0);
  },
  get$single: function(_) {
    if ($.$eq(this.get$length(this), 0))
      throw $.wrapException(new $.StateError("No elements"));
    if ($.$gt$n(this.get$length(this), 1) === true)
      throw $.wrapException(new $.StateError("Too many elements"));
    return this.elementAt$1(this, 0);
  },
  contains$1: function(_, element) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw $.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      if ($.$eq(this.elementAt$1(this, i), element))
        return true;
      if ($length !== this.get$length(this))
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
    return false;
  },
  join$1: function(_, separator) {
    var $length, t1, first, buffer, i, str;
    $length = this.get$length(this);
    if (separator.length !== 0) {
      t1 = $.getInterceptor($length);
      if (t1.$eq($length, 0))
        return "";
      first = $.S(this.elementAt$1(this, 0));
      if (!t1.$eq($length, this.get$length(this)))
        throw $.wrapException(new $.ConcurrentModificationError(this));
      buffer = new $.StringBuffer("");
      buffer._contents = first;
      if (typeof $length !== "number")
        throw $.iae($length);
      i = 1;
      for (; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw $.wrapException(new $.ConcurrentModificationError(this));
      }
      return buffer._contents;
    } else {
      buffer = new $.StringBuffer("");
      buffer._contents = "";
      if (typeof $length !== "number")
        throw $.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        str = this.elementAt$1(this, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(this))
          throw $.wrapException(new $.ConcurrentModificationError(this));
      }
      return buffer._contents;
    }
  },
  where$1: function(_, test) {
    return $.IterableBase.prototype.where$1.call(this, this, test);
  },
  map$1: function(_, f) {
    var t1 = new $.MappedListIterable(this, f);
    t1.$builtinTypeInfo = [null, null];
    return t1;
  },
  fold$2: function(_, initialValue, combine) {
    var $length, value, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw $.iae($length);
    value = initialValue;
    i = 0;
    for (; i < $length; ++i) {
      value = combine.call$2(value, this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
    return value;
  },
  skip$1: function(_, count) {
    return $.SubListIterable$(this, count, null, null);
  },
  toList$1$growable: function(_, growable) {
    var result, t1, i;
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
      t1 = $.getRuntimeTypeArgument(this, this.$asListIterable, 0);
      result.$builtinTypeInfo = [t1];
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
      t1 = $.getRuntimeTypeArgument(this, this.$asListIterable, 0);
      result.$builtinTypeInfo = [t1];
    }
    i = 0;
    while (true) {
      t1 = this.get$length(this);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterableBase: null,
  $asIterable: null
},

"+ListIterable": 0,

SubListIterable: {
  "": function SubListIterable(_iterable, _start, _endOrLength) {
    this._iterable = _iterable;
    this._start = _start;
    this._endOrLength = _endOrLength;
  },
  "super": "ListIterable",
  get$_iterable: function() {
    return this._iterable;
  },
  get$_start: function() {
    return this._start;
  },
  get$_endOrLength: function() {
    return this._endOrLength;
  },
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.$gt$n(t1, $length) === true)
      return $length;
    return t1;
  },
  "+_endIndex": 0,
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if ($.$gt$n(t1, $length) === true)
      return $length;
    return t1;
  },
  "+_startIndex": 0,
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (typeof t1 !== "number")
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (typeof t2 !== "number")
      return this.get$length$bailout2(3, $length, t1, t2);
    if (t2 >= $length)
      return $length - t1;
    return t2 - t1;
  },
  get$length$bailout2: function(state0, $length, t1, t2) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        state0 = 0;
        if ($.$ge$n(t1, $length) === true)
          return 0;
        t2 = this._endOrLength;
      case 3:
        state0 = 0;
        if (t2 == null || $.$ge$n(t2, $length) === true)
          return $.$sub$n($length, t1);
        return $.$sub$n(t2, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1) {
      t1 = this.get$length(this);
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
    }
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        var realIndex;
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
        if ($.$lt$n(index, 0) !== true) {
          t1 = this.get$_endIndex();
          if (typeof t1 !== "number")
            throw $.iae(t1);
          t1 = $.$ge$n(realIndex, t1) === true;
        } else
          t1 = true;
        if (t1) {
          t1 = this.get$length(this);
          throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
        }
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  skip$1: function(_, count) {
    if (count < 0)
      throw $.wrapException(new $.RangeError("value " + count));
    return $.SubListIterable$(this._iterable, $.$add$ns(this._start, count), this._endOrLength, null);
  },
  SubListIterable$3: function(_iterable, _start, _endOrLength, E) {
    var t1, t2, t3;
    t1 = this._start;
    t2 = $.getInterceptor$n(t1);
    if (t2.$lt(t1, 0) === true)
      throw $.wrapException(new $.RangeError("value " + $.S(t1)));
    t3 = this._endOrLength;
    if (t3 != null) {
      if ($.$lt$n(t3, 0) === true)
        throw $.wrapException(new $.RangeError("value " + $.S(t3)));
      if (t2.$gt(t1, t3) === true)
        throw $.wrapException(new $.RangeError("value " + $.S(t1) + " not in range 0.." + $.S(t3)));
    }
  },
  $asListIterable: null,
  $asIterable: null
},

"+SubListIterable": 0,

ListIterator: {
  "": function ListIterator(_iterable, _liblib$_length, _index, _liblib$_current) {
    this._iterable = _iterable;
    this._liblib$_length = _liblib$_length;
    this._index = _index;
    this._liblib$_current = _liblib$_current;
  },
  "super": "Object",
  get$_iterable: function() {
    return this._iterable;
  },
  get$_liblib$_length: function() {
    return this._liblib$_length;
  },
  get$_index: function() {
    return this._index;
  },
  set$_index: function(v) {
    this._index = v;
  },
  get$_liblib$_current: function() {
    return this._liblib$_current;
  },
  set$_liblib$_current: function(v) {
    this._liblib$_current = v;
  },
  get$current: function() {
    return this._liblib$_current;
  },
  current$0: function() {
    return this.get$current().call$0();
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = $.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (!$.$eq(this._liblib$_length, $length))
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    t3 = this._index;
    if (typeof $length !== "number")
      throw $.iae($length);
    if (t3 >= $length) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

"+ListIterator": 0,

MappedIterable: {
  "": function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  },
  "super": "IterableBase",
  get$_iterable: function() {
    return this._iterable;
  },
  get$_f: function() {
    return this._f;
  },
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1, t2, t3;
    t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t2 = $.getRuntimeTypeArgument(this, this.$asMappedIterable, 0);
    t3 = $.getRuntimeTypeArgument(this, this.$asMappedIterable, 1);
    t1 = new $.MappedIterator(null, t1, this._f);
    t1.$builtinTypeInfo = [t2, t3];
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  get$first: function(_) {
    var t1 = this._iterable;
    return this._f$1(t1.get$first(t1));
  },
  get$single: function(_) {
    var t1 = this._iterable;
    return this._f$1(t1.get$single(t1));
  },
  $asIterableBase: function (S, T) { return [T]; },
  $asIterable: function (S, T) { return [T]; }
},

"+MappedIterable": 0,

MappedIterator: {
  "": function MappedIterator(_liblib$_current, _iterator, _f) {
    this._liblib$_current = _liblib$_current;
    this._iterator = _iterator;
    this._f = _f;
  },
  "super": "Iterator",
  get$_liblib$_current: function() {
    return this._liblib$_current;
  },
  set$_liblib$_current: function(v) {
    this._liblib$_current = v;
  },
  get$_iterator: function() {
    return this._iterator;
  },
  get$_f: function() {
    return this._f;
  },
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  },
  current$0: function() {
    return this.get$current().call$0();
  },
  $asIterator: function (S, T) { return [T]; }
},

"+MappedIterator": 0,

MappedListIterable: {
  "": function MappedListIterable(_liblib$_source, _f) {
    this._liblib$_source = _liblib$_source;
    this._f = _f;
  },
  "super": "ListIterable",
  get$_liblib$_source: function() {
    return this._liblib$_source;
  },
  get$_f: function() {
    return this._f;
  },
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._liblib$_source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$ax(this._liblib$_source, index));
  },
  $asListIterable: function (S, T) { return [T]; },
  $asIterable: function (S, T) { return [T]; }
},

"+MappedListIterable": 0,

WhereIterable: {
  "": function WhereIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  },
  "super": "IterableBase",
  get$_iterable: function() {
    return this._iterable;
  },
  get$_f: function() {
    return this._f;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = $.get$iterator$ax(this._iterable);
    t2 = $.getRuntimeTypeArgument(this, this.$asWhereIterable, 0);
    t1 = new $.WhereIterator(t1, this._f);
    t1.$builtinTypeInfo = [t2];
    return t1;
  },
  $asIterableBase: null,
  $asIterable: null
},

"+WhereIterable": 0,

WhereIterator: {
  "": function WhereIterator(_iterator, _f) {
    this._iterator = _iterator;
    this._f = _f;
  },
  "super": "Iterator",
  get$_iterator: function() {
    return this._iterator;
  },
  get$_f: function() {
    return this._f;
  },
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  current$0: function() {
    return this.get$current().call$0();
  },
  $asIterator: null
},

"+WhereIterator": 0,

TakeIterable: {
  "": function TakeIterable(_iterable, _takeCount) {
    this._iterable = _iterable;
    this._takeCount = _takeCount;
  },
  "super": "IterableBase",
  get$_iterable: function() {
    return this._iterable;
  },
  get$_takeCount: function() {
    return this._takeCount;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t2 = $.getRuntimeTypeArgument(this, this.$asTakeIterable, 0);
    t1 = new $.TakeIterator(t1, this._takeCount);
    t1.$builtinTypeInfo = [t2];
    return t1;
  },
  $asIterableBase: null,
  $asIterable: null
},

"+TakeIterable": 0,

TakeIterator: {
  "": function TakeIterator(_iterator, _liblib$_remaining) {
    this._iterator = _iterator;
    this._liblib$_remaining = _liblib$_remaining;
  },
  "super": "Iterator",
  get$_iterator: function() {
    return this._iterator;
  },
  get$_liblib$_remaining: function() {
    return this._liblib$_remaining;
  },
  set$_liblib$_remaining: function(v) {
    this._liblib$_remaining = v;
  },
  moveNext$0: function() {
    var t1 = this._liblib$_remaining;
    if (typeof t1 !== "number")
      throw t1.$sub();
    this._liblib$_remaining = t1 - 1;
    t1 = this._liblib$_remaining;
    if (typeof t1 !== "number")
      throw t1.$ge();
    if (t1 >= 0)
      return this._iterator.moveNext$0();
    this._liblib$_remaining = -1;
    return false;
  },
  get$current: function() {
    var t1 = this._liblib$_remaining;
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (t1 < 0)
      return;
    return this._iterator.get$current();
  },
  current$0: function() {
    return this.get$current().call$0();
  },
  $asIterator: null
},

"+TakeIterator": 0,

SkipIterable: {
  "": function SkipIterable(_iterable, _skipCount) {
    this._iterable = _iterable;
    this._skipCount = _skipCount;
  },
  "super": "IterableBase",
  get$_iterable: function() {
    return this._iterable;
  },
  get$_skipCount: function() {
    return this._skipCount;
  },
  skip$1: function(_, n) {
    var t1, t2;
    if (n < 0)
      throw $.wrapException(new $.RangeError("value " + n));
    t1 = $.$add$ns(this._skipCount, n);
    t2 = $.getRuntimeTypeArgument(this, this.$asSkipIterable, 0);
    t1 = new $.SkipIterable(this._iterable, t1);
    t1.$builtinTypeInfo = [t2];
    t2 = t1._skipCount;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0) === true)
      $.throwExpression(new $.RangeError(t2));
    return t1;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t2 = $.getRuntimeTypeArgument(this, this.$asSkipIterable, 0);
    t1 = new $.SkipIterator(t1, this._skipCount);
    t1.$builtinTypeInfo = [t2];
    return t1;
  },
  $asIterableBase: null,
  $asIterable: null
},

"+SkipIterable": 0,

SkipIterator: {
  "": function SkipIterator(_iterator, _skipCount) {
    this._iterator = _iterator;
    this._skipCount = _skipCount;
  },
  "super": "Iterator",
  get$_iterator: function() {
    return this._iterator;
  },
  get$_skipCount: function() {
    return this._skipCount;
  },
  set$_skipCount: function(v) {
    this._skipCount = v;
  },
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  current$0: function() {
    return this.get$current().call$0();
  },
  $asIterator: null
},

"+SkipIterator": 0,

UnmodifiableListMixin: {
  "": function UnmodifiableListMixin() {
  },
  "super": "Object",
  $indexSet: function(_, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify an unmodifiable list"));
  },
  add$1: function(_, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to an unmodifiable list"));
  },
  insert$2: function(_, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to an unmodifiable list"));
  },
  addAll$1: function(_, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to an unmodifiable list"));
  },
  remove$1: function(_, element) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from an unmodifiable list"));
  },
  removeAll$1: function(elements) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from an unmodifiable list"));
  },
  "+removeAll:1:0": 0,
  removeAt$1: function(_, index) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from an unmodifiable list"));
  },
  removeLast$0: function(_) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from an unmodifiable list"));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify an unmodifiable list"));
  },
  replaceRange$3: function(_, start, end, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from an unmodifiable list"));
  }
},

"+UnmodifiableListMixin": 0,

UnmodifiableListBase: {
  "": function UnmodifiableListBase() {
  },
  "super": "ListBase+UnmodifiableListMixin",
  $asListBase: null,
  $asList: null,
  $asIterable: null
},

"+UnmodifiableListBase": 0,

Symbol0: {
  "": function Symbol(_liblib$_name) {
    this._liblib$_name = _liblib$_name;
  },
  "super": "Object",
  get$_liblib$_name: function() {
    return this._liblib$_name;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isSymbol0 && $.$eq(this._liblib$_name, other._liblib$_name);
  },
  get$hashCode: function(_) {
    var t1 = $.get$hashCode$(this._liblib$_name);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return 536870911 & 664597 * t1;
  },
  toString$0: function(_) {
    return "Symbol(\"" + $.S(this._liblib$_name) + "\")";
  },
  $isSymbol0: true,
  $isSymbol: true
},

"+Symbol": 0,

ToString__emitPair_closure: {
  "": function ToString__emitPair_closure(box_0, result_1, visiting_2) {
    this.box_0 = box_0;
    this.result_1 = result_1;
    this.visiting_2 = visiting_2;
  },
  "super": "Closure",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    t1.write$1(": ");
    $.ToString__emitObject(v, t1, t2);
  },
  $isFunction: true
},

"+ToString__emitPair_closure": 0,

Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3, t4;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.isJsIndexable(src, src[$.dispatchPropertyName])))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof srcStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.isJsIndexable(dst, dst[$.dispatchPropertyName]))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof count !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = srcStart + count, t2 = src.length, t3 = dst.length, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i >>> 0 !== i || i >= t2)
        throw $.ioore(i);
      t4 = src[i];
      if (j >>> 0 !== j || j >= t3)
        throw $.ioore(j);
      dst[j] = t4;
    }
},

"+copy:5:0": 0,

Arrays_copy$bailout: function(state0, src, srcStart, dst, dstStart, count) {
  var t1, i, j, t2, t3, t4;
  t1 = $.getInterceptor$n(srcStart);
  if (t1.$lt(srcStart, dstStart) === true)
    for (i = $.$sub$n(t1.$add(srcStart, count), 1), j = $.$sub$n($.$add$ns(dstStart, count), 1), t1 = $.getInterceptor$asx(src), t2 = $.getInterceptor$ax(dst); t3 = $.getInterceptor$n(i), t3.$ge(i, srcStart) === true; i = t3.$sub(i, 1), j = $.$sub$n(j, 1))
      t2.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t2 = $.getInterceptor$asx(src), t3 = $.getInterceptor$ax(dst), j = dstStart, i = srcStart; t4 = $.getInterceptor$n(i), t4.$lt(i, t1.$add(srcStart, count)) === true; i = t4.$add(i, 1), j = $.$add$ns(j, 1))
      t3.$indexSet(dst, j, t2.$index(src, i));
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (typeof startIndex !== "number")
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  if (startIndex !== (startIndex | 0))
    return $.Arrays_indexOf$bailout(2, a, element, startIndex, endIndex);
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element))
      return i;
  }
  return -1;
},

"+indexOf:4:0": 0,

Arrays_indexOf$bailout: function(state0, a, element, startIndex, endIndex) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor$n(startIndex);
      if (t1.$ge(startIndex, a.length) === true)
        return -1;
      if (t1.$lt(startIndex, 0) === true)
        startIndex = 0;
    case 2:
      var t1, i;
      state0 = 0;
      for (i = startIndex; $.$lt$n(i, endIndex) === true; ++i) {
        if (i >>> 0 !== i || i >= a.length)
          throw $.ioore(i);
        if ($.$eq(a[i], element))
          return i;
      }
      return -1;
  }
},

Arrays_lastIndexOf: function(a, element, startIndex) {
  var t1, i;
  if (startIndex == null)
    throw startIndex.$lt();
  if (startIndex < 0)
    return -1;
  t1 = a.length;
  if (startIndex >= t1)
    startIndex = t1 - 1;
  for (i = startIndex; i >= 0; --i) {
    if (i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element))
      return i;
  }
  return -1;
},

"+lastIndexOf:3:0": 0,

SubListIterable$: function(_iterable, _start, _endOrLength, E) {
  var t1 = new $.SubListIterable(_iterable, _start, _endOrLength);
  t1.$builtinTypeInfo = [E];
  t1.SubListIterable$3(_iterable, _start, _endOrLength, E);
  return t1;
},

"+new SubListIterable:3:0": 0,

IterableMixinWorkaround_contains: function(iterable, element) {
  var t1, t2;
  for (t1 = $.get$iterator$ax(iterable), t2 = $.getInterceptor(element); t1.moveNext$0();)
    if (t2.$eq(element, t1._liblib$_current))
      return true;
  return false;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0();)
    f.call$1(t1._liblib$_current);
},

"+forEach:2:0": 0,

IterableMixinWorkaround_any: function(iterable, f) {
  var t1;
  for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0();)
    if (f.call$1(t1._liblib$_current) === true)
      return true;
  return false;
},

"+any:2:0": 0,

IterableMixinWorkaround_fold: function(iterable, initialValue, combine) {
  var t1;
  for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0();)
    initialValue = combine.call$2(initialValue, t1._liblib$_current);
  return initialValue;
},

"+fold:3:0": 0,

IterableMixinWorkaround_joinList: function(list, separator) {
  var t1, buffer, i, str;
  t1 = $.getInterceptor$asx(list);
  if (t1.get$isEmpty(list))
    return "";
  if (t1.get$length(list) === 1)
    return $.S(t1.$index(list, 0));
  buffer = new $.StringBuffer("");
  buffer._contents = "";
  if (separator.length === 0)
    for (i = 0; i < t1.get$length(list); ++i) {
      str = t1.$index(list, i);
      str = typeof str === "string" ? str : $.S(str);
      buffer._contents = buffer._contents + str;
    }
  else {
    str = t1.$index(list, 0);
    str = typeof str === "string" ? str : $.S(str);
    buffer._contents = buffer._contents + str;
    for (i = 1; i < t1.get$length(list); ++i) {
      buffer._contents = buffer._contents + separator;
      str = t1.$index(list, i);
      str = typeof str === "string" ? str : $.S(str);
      buffer._contents = buffer._contents + str;
    }
  }
  return buffer._contents;
},

"+joinList:1:1": 0,

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  var t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) === true || t1.$gt(start, $.get$length$asx(list)) === true) {
    t1 = $.get$length$asx(list);
    throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + t1));
  }
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) === true || t1.$gt(end, $.get$length$asx(list)) === true) {
    t1 = $.get$length$asx(list);
    throw $.wrapException(new $.RangeError("value " + $.S(end) + " not in range " + $.S(start) + ".." + t1));
  }
},

"+_rangeCheck:3:0": 0,

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = $.$sub$n(end, start);
  if ($.$eq($length, 0))
    return;
  if ($.$lt$n(skipCount, 0) === true)
    throw $.wrapException(new $.ArgumentError(skipCount));
  otherStart = skipCount;
  otherList = from;
  if ($.$gt$n($.$add$ns(otherStart, $length), $.get$length$asx(otherList)) === true)
    throw $.wrapException(new $.StateError("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
},

"+setRangeList:5:0": 0,

IterableMixinWorkaround_insertAllList: function(list, index, iterable) {
  var t1, insertionLength, t2, element, index0;
  if (typeof list !== "object" || list === null || (list.constructor !== Array || !!list.immutable$list) && !$.isJsIndexable(list, list[$.dispatchPropertyName]))
    return $.IterableMixinWorkaround_insertAllList$bailout(1, list, index, iterable);
  if (index < 0 || index > list.length) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + index + " not in range 0.." + t1));
  }
  if (false)
    iterable = $.List_List$from(iterable, false, $.getRuntimeTypeArgument(iterable, iterable.$asJSArray, 0));
  t1 = $.getInterceptor$asx(iterable);
  insertionLength = t1.get$length(iterable);
  t2 = list.length;
  if (typeof insertionLength !== "number")
    throw $.iae(insertionLength);
  $.JSArray_methods.set$length(list, t2 + insertionLength);
  t2 = list.length;
  $.IterableMixinWorkaround_setRangeList(list, index + insertionLength, t2, list, index);
  t2 = $.getRuntimeTypeArgument(iterable, iterable.$asJSArray, 0);
  t1 = new $.ListIterator(iterable, t1.get$length(iterable), 0, null);
  t1.$builtinTypeInfo = [t2];
  for (; t1.moveNext$0(); index = index0) {
    element = t1._liblib$_current;
    index0 = index + 1;
    if (index < 0 || index >= list.length)
      throw $.ioore(index);
    list[index] = element;
  }
},

"+insertAllList:3:0": 0,

IterableMixinWorkaround_insertAllList$bailout: function(state0, list, index, iterable) {
  var t1, insertionLength, t2, index0;
  if (index < 0 || index > list.length) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + index + " not in range 0.." + t1));
  }
  if (false)
    iterable = $.List_List$from(iterable, false, $.getRuntimeTypeArgument(iterable, iterable.$asJSArray, 0));
  t1 = $.getInterceptor$asx(iterable);
  insertionLength = t1.get$length(iterable);
  t2 = list.length;
  if (typeof insertionLength !== "number")
    throw $.iae(insertionLength);
  $.JSArray_methods.set$length(list, t2 + insertionLength);
  t2 = list.length;
  if (!!list.immutable$list)
    $.throwExpression(new $.UnsupportedError("set range"));
  $.IterableMixinWorkaround_setRangeList(list, index + insertionLength, t2, list, index);
  t2 = $.getRuntimeTypeArgument(iterable, iterable.$asJSArray, 0);
  t1 = new $.ListIterator(iterable, t1.get$length(iterable), 0, null);
  t1.$builtinTypeInfo = [t2];
  for (; t1.moveNext$0(); index = index0) {
    index0 = index + 1;
    $.JSArray_methods.$indexSet(list, index, t1._liblib$_current);
  }
},

IterableMixinWorkaround_setAllList: function(list, index, iterable) {
  var t1, t2, element, index0;
  if (typeof list !== "object" || list === null || (list.constructor !== Array || !!list.immutable$list) && !$.isJsIndexable(list, list[$.dispatchPropertyName]))
    return $.IterableMixinWorkaround_setAllList$bailout(1, list, index, iterable);
  if (index < 0 || index > list.length) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + index + " not in range 0.." + t1));
  }
  t1 = $.getRuntimeTypeArgument(iterable, iterable.$asJSArray, 0);
  t2 = new $.ListIterator(iterable, iterable.length, 0, null);
  t2.$builtinTypeInfo = [t1];
  for (; t2.moveNext$0(); index = index0) {
    element = t2._liblib$_current;
    index0 = index + 1;
    if (index < 0 || index >= list.length)
      throw $.ioore(index);
    list[index] = element;
  }
},

"+setAllList:3:0": 0,

IterableMixinWorkaround_setAllList$bailout: function(state0, list, index, iterable) {
  var t1, t2, index0;
  if (index < 0 || index > list.length) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + index + " not in range 0.." + t1));
  }
  t1 = $.getRuntimeTypeArgument(iterable, iterable.$asJSArray, 0);
  t2 = new $.ListIterator(iterable, iterable.length, 0, null);
  t2.$builtinTypeInfo = [t1];
  for (; t2.moveNext$0(); index = index0) {
    index0 = index + 1;
    $.JSArray_methods.$indexSet(list, index, t2._liblib$_current);
  }
},

Sort_insertionSort_: function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.isJsIndexable(a, a[$.dispatchPropertyName]))
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  if (typeof left !== "number")
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  if (typeof right !== "number")
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i >>> 0 !== i || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t1 = $.$gt$n(compare.call$2(a[t1], el), 0) === true;
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
},

"+insertionSort_:4:0": 0,

Sort_insertionSort_$bailout: function(state0, a, left, right, compare) {
  var i, t1, t2, el, j, t3;
  for (i = $.$add$ns(left, 1), t1 = $.getInterceptor$asx(a); t2 = $.getInterceptor$n(i), t2.$le(i, right) === true; i = t2.$add(i, 1)) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      t3 = $.getInterceptor$n(j);
      if (!(t3.$gt(j, left) === true && $.$gt$n(compare.call$2(t1.$index(a, t3.$sub(j, 1)), el), 0) === true))
        break;
      t1.$indexSet(a, j, t1.$index(a, t3.$sub(j, 1)));
      j = t3.$sub(j, 1);
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var t1, sixth, t2, index1, index5, index3, index2, index4, el1, el2, el3, el4, el5, t0, less, great, pivots_are_equal, k, ak, comp, great0, less0, t3;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.isJsIndexable(a, a[$.dispatchPropertyName]))
    return $.Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  t1 = $.getInterceptor$n(right);
  sixth = $.$tdiv$n($.$add$ns(t1.$sub(right, left), 1), 6);
  t2 = $.getInterceptor$ns(left);
  index1 = t2.$add(left, sixth);
  index5 = t1.$sub(right, sixth);
  index3 = $.$tdiv$n(t2.$add(left, right), 2);
  t2 = $.getInterceptor$n(index3);
  index2 = t2.$sub(index3, sixth);
  index4 = t2.$add(index3, sixth);
  t2 = a.length;
  if (index1 >>> 0 !== index1 || index1 >= t2)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 >>> 0 !== index2 || index2 >= t2)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 >>> 0 !== index3 || index3 >= t2)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 >>> 0 !== index4 || index4 >= t2)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 >>> 0 !== index5 || index5 >= t2)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$gt$n(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left >>> 0 !== left || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right >>> 0 !== right || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.$eq(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      if (k >>> 0 !== k || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t1 = $.getInterceptor(comp);
      if (t1.$eq(comp, 0))
        continue;
      if (t1.$lt(comp, 0) === true) {
        if (k !== less) {
          t1 = a.length;
          if (less >>> 0 !== less || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great >>> 0 !== great || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t1 = $.getInterceptor$n(comp);
          if (t1.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            t1 = t1.$lt(comp, 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1 === true) {
              if (less >>> 0 !== less || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >>> 0 !== k || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$lt$n(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t1 = a.length;
          if (less >>> 0 !== less || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great >>> 0 !== great || great >= a.length)
            throw $.ioore(great);
          if ($.$gt$n(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1 === true) {
              if (less >>> 0 !== less || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
  t1 = less - 1;
  t2 = a.length;
  if (t1 >>> 0 !== t1 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (left >= t2)
    throw $.ioore(left);
  a[left] = t3;
  a[t1] = el2;
  t1 = great + 1;
  if (t1 >>> 0 !== t1 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (right >= t2)
    throw $.ioore(right);
  a[right] = t3;
  a[t1] = el4;
  t1 = less - 2;
  if (t1 - left <= 32)
    $.Sort_insertionSort_(a, left, t1, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, t1, compare);
  t1 = great + 2;
  if (right - t1 <= 32)
    $.Sort_insertionSort_(a, t1, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, t1, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >>> 0 !== less || less >= a.length)
        throw $.ioore(less);
      if (!$.$eq(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great >>> 0 !== great || great >= a.length)
        throw $.ioore(great);
      if (!$.$eq(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$eq(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1 === true) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
    if (great - less <= 32)
      $.Sort_insertionSort_(a, less, great, compare);
    else
      $.Sort__dualPivotQuicksort(a, less, great, compare);
  } else if (great - less <= 32)
    $.Sort_insertionSort_(a, less, great, compare);
  else
    $.Sort__dualPivotQuicksort(a, less, great, compare);
},

"+_dualPivotQuicksort:4:0": 0,

Sort__dualPivotQuicksort$bailout: function(state0, a, left, right, compare, index5, less, t1, el2, t3, el4, index1, great) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor$n(right);
      sixth = $.$tdiv$n($.$add$ns(t1.$sub(right, left), 1), 6);
      t2 = $.getInterceptor$ns(left);
      index1 = t2.$add(left, sixth);
      index5 = t1.$sub(right, sixth);
      index3 = $.$tdiv$n(t2.$add(left, right), 2);
      t3 = $.getInterceptor$n(index3);
      index2 = t3.$sub(index3, sixth);
      index4 = t3.$add(index3, sixth);
      t3 = $.getInterceptor$asx(a);
      el1 = t3.$index(a, index1);
      el2 = t3.$index(a, index2);
      el3 = t3.$index(a, index3);
      el4 = t3.$index(a, index4);
      el5 = t3.$index(a, index5);
      if ($.$gt$n(compare.call$2(el1, el2), 0) === true) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if ($.$gt$n(compare.call$2(el1, el3), 0) === true) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if ($.$gt$n(compare.call$2(el1, el4), 0) === true) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if ($.$gt$n(compare.call$2(el3, el4), 0) === true) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if ($.$gt$n(compare.call$2(el2, el5), 0) === true) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t3.$indexSet(a, index1, el1);
      t3.$indexSet(a, index3, el3);
      t3.$indexSet(a, index5, el5);
      t3.$indexSet(a, index2, t3.$index(a, left));
      t3.$indexSet(a, index4, t3.$index(a, right));
      less = t2.$add(left, 1);
    case 2:
      state0 = 0;
      great = t1.$sub(right, 1);
    case 3:
      var sixth, t2, index3, index2, index4, el1, el3, el5, t0, pivots_are_equal, k, ak, comp, t4, t5, less0, great0;
      state0 = 0;
      pivots_are_equal = $.$eq(compare.call$2(el2, el4), 0);
      if (pivots_are_equal)
        for (k = less; t2 = $.getInterceptor$n(k), t2.$le(k, great) === true; k = t2.$add(k, 1)) {
          ak = t3.$index(a, k);
          comp = compare.call$2(ak, el2);
          t4 = $.getInterceptor(comp);
          if (t4.$eq(comp, 0))
            continue;
          if (t4.$lt(comp, 0) === true) {
            if (!t2.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = $.$add$ns(less, 1);
          } else
            for (; true;) {
              comp = compare.call$2(t3.$index(a, great), el2);
              t4 = $.getInterceptor$n(comp);
              if (t4.$gt(comp, 0) === true) {
                great = $.$sub$n(great, 1);
                continue;
              } else {
                t5 = $.getInterceptor$n(great);
                if (t4.$lt(comp, 0) === true) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = $.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t5.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t5.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
      else
        for (k = less; t2 = $.getInterceptor$n(k), t2.$le(k, great) === true; k = t2.$add(k, 1)) {
          ak = t3.$index(a, k);
          if ($.$lt$n(compare.call$2(ak, el2), 0) === true) {
            if (!t2.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = $.$add$ns(less, 1);
          } else if ($.$gt$n(compare.call$2(ak, el4), 0) === true)
            for (; true;)
              if ($.$gt$n(compare.call$2(t3.$index(a, great), el4), 0) === true) {
                great = $.$sub$n(great, 1);
                if ($.$lt$n(great, k) === true)
                  break;
                continue;
              } else {
                t4 = $.getInterceptor$n(great);
                if ($.$lt$n(compare.call$2(t3.$index(a, great), el2), 0) === true) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = $.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t4.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t4.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
      t2 = $.getInterceptor$n(less);
      t3.$indexSet(a, left, t3.$index(a, t2.$sub(less, 1)));
      t3.$indexSet(a, t2.$sub(less, 1), el2);
      t4 = $.getInterceptor$ns(great);
      t3.$indexSet(a, right, t3.$index(a, t4.$add(great, 1)));
      t3.$indexSet(a, t4.$add(great, 1), el4);
      t5 = t2.$sub(less, 2);
      if ($.$le$n($.$sub$n(t5, left), 32) === true)
        $.Sort_insertionSort_(a, left, t5, compare);
      else
        $.Sort__dualPivotQuicksort(a, left, t5, compare);
      t5 = t4.$add(great, 2);
      if ($.$le$n(t1.$sub(right, t5), 32) === true)
        $.Sort_insertionSort_(a, t5, right, compare);
      else
        $.Sort__dualPivotQuicksort(a, t5, right, compare);
      if (pivots_are_equal)
        return;
      if (t2.$lt(less, index1) === true && t4.$gt(great, index5) === true) {
        for (; $.$eq(compare.call$2(t3.$index(a, less), el2), 0);)
          less = $.$add$ns(less, 1);
        for (; $.$eq(compare.call$2(t3.$index(a, great), el4), 0);)
          great = $.$sub$n(great, 1);
        for (k = less; t1 = $.getInterceptor$n(k), t1.$le(k, great) === true; k = t1.$add(k, 1)) {
          ak = t3.$index(a, k);
          if ($.$eq(compare.call$2(ak, el2), 0)) {
            if (!t1.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = $.$add$ns(less, 1);
          } else if ($.$eq(compare.call$2(ak, el4), 0))
            for (; true;)
              if ($.$eq(compare.call$2(t3.$index(a, great), el4), 0)) {
                great = $.$sub$n(great, 1);
                if ($.$lt$n(great, k) === true)
                  break;
                continue;
              } else {
                t2 = $.getInterceptor$n(great);
                if ($.$lt$n(compare.call$2(t3.$index(a, great), el2), 0) === true) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = $.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
        if ($.$le$n($.$sub$n(great, less), 32) === true)
          $.Sort_insertionSort_(a, less, great, compare);
        else
          $.Sort__dualPivotQuicksort(a, less, great, compare);
      } else if ($.$le$n(t4.$sub(great, less), 32) === true)
        $.Sort_insertionSort_(a, less, great, compare);
      else
        $.Sort__dualPivotQuicksort(a, less, great, compare);
  }
},

ToString__emitValue: function(i, result, visiting) {
  var t1, isList, t2, first, e;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  result.write$1(isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(i), first = true; t2.moveNext$0() === true; first = false) {
    e = t2.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(e, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
},

"+_emitValue:3:0": 0,

ToString__emitObject: function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable))
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      result.write$1("{...}");
    else
      $.ToString__emitPair(o, result, visiting);
  else
    result.write$1(o);
},

"+_emitObject:3:0": 0,

ToString__containsRef: function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
},

"+_containsRef:2:0": 0,

ToString__emitPair: function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1("{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitPair_closure(t1, result, visiting));
  result.write$1("}");
  t2.removeLast$0(visiting);
},

"+_emitPair:3:0": 0}],
["dart._js_names", "dart:_js_names", , {
computeMangledNames: function(jsMangledNames) {
  var keys, result, t1, key;
  keys = (function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(jsMangledNames, Object.prototype.hasOwnProperty);
  result = $.makeLiteralMap([]);
  for (t1 = $.get$iterator$ax(keys); t1.moveNext$0() === true;) {
    key = t1.get$current();
    result.$indexSet(result, key, jsMangledNames[key]);
  }
  return result;
},

"+computeMangledNames:1:0": 0}],
["dart.async", "dart:async", , {
Future_Future_closure: {
  "": function Future_Future_closure(computation_0) {
    this.computation_0 = computation_0;
  },
  "super": "Closure",
  call$1: function(_) {
    return this.computation_0.call$0();
  },
  $isFunction: true
},

"+Future_Future_closure": 0,

Future_Future_closure0: {
  "": function Future_Future_closure(future_1) {
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$0: function() {
    return this.future_1._sendValue$1(null);
  },
  $isFunction: true
},

"+Future_Future_closure": 0,

_Completer: {
  "": function _Completer(future, _isComplete) {
    this.future = future;
    this._isComplete = _isComplete;
  },
  "super": "Object",
  get$future: function() {
    return this.future;
  },
  get$_isComplete: function() {
    return this._isComplete;
  },
  set$_isComplete: function(v) {
    this._isComplete = v;
  },
  completeError$2: function(error, stackTrace) {
    var t1, t2;
    if (this._isComplete)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._isComplete = true;
    t1 = $.get$_Zone__current();
    t2 = this.future._zone;
    if (t2.get$_errorZone() === t1.get$_errorZone()) {
      t2._openCallbacks = t2._openCallbacks - 1;
      if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      this._setFutureError$1(error);
    } else
      $.get$_Zone__current().handleUncaughtError$1(error);
  },
  "+completeError:1:1": 0,
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  "+completeError:1:0": 0
},

"+_Completer": 0,

_AsyncCompleter: {
  "": function _AsyncCompleter(future, _isComplete) {
    this.future = future;
    this._isComplete = _isComplete;
  },
  "super": "_Completer",
  _setFutureValue$1: function(value) {
    $.get$_Zone__current().runAsync$1(new $._AsyncCompleter__setFutureValue_closure(value, this.future));
  },
  "+_setFutureValue:1:0": 0,
  _setFutureError$1: function(error) {
    $.get$_Zone__current().runAsync$1(new $._AsyncCompleter__setFutureError_closure(error, this.future));
  },
  "+_setFutureError:1:0": 0,
  $as_Completer: null
},

"+_AsyncCompleter": 0,

_AsyncCompleter__setFutureValue_closure: {
  "": function _AsyncCompleter__setFutureValue_closure(value_0, future_1) {
    this.value_0 = value_0;
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$0: function() {
    this.future_1._setValue$1(this.value_0);
  },
  $isFunction: true
},

"+_AsyncCompleter__setFutureValue_closure": 0,

_AsyncCompleter__setFutureError_closure: {
  "": function _AsyncCompleter__setFutureError_closure(error_0, future_1) {
    this.error_0 = error_0;
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$0: function() {
    this.future_1._setError$1(this.error_0);
  },
  $isFunction: true
},

"+_AsyncCompleter__setFutureError_closure": 0,

_FutureListenerWrapper: {
  "": function _FutureListenerWrapper(future, _nextListener) {
    this.future = future;
    this._nextListener = _nextListener;
  },
  "super": "Object",
  get$future: function() {
    return this.future;
  },
  set$future: function(v) {
    this.future = v;
  },
  get$_nextListener: function() {
    return this._nextListener;
  },
  set$_nextListener: function(v) {
    this._nextListener = v;
  },
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  "+_sendValue:1:0": 0,
  _sendError$1: function(error) {
    this.future._setError$1(error);
  },
  "+_sendError:1:0": 0,
  _inSameErrorZone$1: function(otherZone) {
    return this.future._zone.get$_errorZone() === otherZone.get$_errorZone();
  },
  "+_inSameErrorZone:1:0": 0
},

"+_FutureListenerWrapper": 0,

_ErrorZoneBoundaryListener: {
  "": function _ErrorZoneBoundaryListener(_nextListener, _listener) {
    this._nextListener = _nextListener;
    this._listener = _listener;
  },
  "super": "Object",
  get$_nextListener: function() {
    return this._nextListener;
  },
  set$_nextListener: function(v) {
    this._nextListener = v;
  },
  get$_listener: function() {
    return this._listener;
  },
  _inSameErrorZone$1: function(otherZone) {
    throw $.wrapException(new $.UnsupportedError("A Zone boundary doesn't support the inSameErrorZone test."));
  },
  _sendValue$1: function(value) {
    this._listener._sendValue$1(value);
  },
  _sendError$1: function(error) {
    $.get$_Zone__current().handleUncaughtError$1(error);
  }
},

"+_ErrorZoneBoundaryListener": 0,

_FutureImpl: {
  "": function _FutureImpl(_state, _zone, _resultOrListeners) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
  },
  "super": "Object",
  get$_state: function() {
    return this._state;
  },
  set$_state: function(v) {
    this._state = v;
  },
  get$_zone: function() {
    return this._zone;
  },
  get$_resultOrListeners: function() {
    return this._resultOrListeners;
  },
  set$_resultOrListeners: function(v) {
    this._resultOrListeners = v;
  },
  get$_isChained: function() {
    return (this._state & 1) !== 0;
  },
  "+_isChained": 0,
  get$_isComplete: function() {
    return this._state >= 4;
  },
  "+_isComplete": 0,
  then$2$onError: function(f, onError) {
    var t1, t2;
    if (onError == null) {
      t1 = new $._ThenFuture(f, null, 0, $.get$_Zone__current(), null);
      t1.$builtinTypeInfo = [null, null];
      t2 = t1._zone;
      t2._openCallbacks = t2._openCallbacks + 1;
      t1._subscribeTo$1(this);
      return t1;
    }
    t1 = new $._SubscribeFuture(onError, f, null, 0, $.get$_Zone__current(), null);
    t1.$builtinTypeInfo = [null, null];
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t1._subscribeTo$1(this);
    return t1;
  },
  "+then:1:1": 0,
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  "+then:1:0": 0,
  catchError$2$test: function(f, test) {
    var t1, t2;
    t1 = new $._CatchErrorFuture(test, f, null, 0, $.get$_Zone__current(), null);
    t1.$builtinTypeInfo = [null];
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t1._subscribeTo$1(this);
    return t1;
  },
  "+catchError:1:1": 0,
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  "+catchError:1:0": 0,
  whenComplete$1: function(action) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, this.$as_FutureImpl, 0);
    t2 = new $._WhenFuture(action, null, 0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [t1];
    t1 = t2._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    t2._subscribeTo$1(this);
    return t2;
  },
  "+whenComplete:1:0": 0,
  _inSameErrorZone$1: function(otherZone) {
    return this._zone.get$_errorZone() === otherZone.get$_errorZone();
  },
  _setValue$1: function(value) {
    var t1, listeners, listeners0;
    t1 = this._state;
    if (t1 >= 4)
      throw $.wrapException(new $.StateError("Future already completed"));
    listeners = (t1 & 1) !== 0 ? null : this._removeListeners$0();
    this._state = 4;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  "+_setValue:1:0": 0,
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1", null);
  },
  _setError$1: function(error) {
    var t1, hasListeners, listeners, listeners0;
    t1 = this._state;
    if (t1 >= 4)
      throw $.wrapException(new $.StateError("Future already completed"));
    if ((t1 & 1) !== 0) {
      hasListeners = t1 === 1;
      listeners = null;
    } else {
      listeners = this._removeListeners$0();
      hasListeners = listeners != null;
    }
    this._state = 6;
    this._resultOrListeners = error;
    if (!hasListeners) {
      this._scheduleUnhandledError$0();
      return;
    }
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
    }
  },
  "+_setError:1:0": 0,
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1", null);
  },
  _scheduleUnhandledError$0: function() {
    this._state = 14;
    $.get$_Zone__current().runAsync$1(new $._FutureImpl__scheduleUnhandledError_closure(this));
  },
  "+_scheduleUnhandledError:0:0": 0,
  _addListener$1: function(listener) {
    var t1, t2, future;
    t1 = {};
    t1.listener_0 = listener;
    if (t1.listener_0._inSameErrorZone$1(this._zone) !== true)
      t1.listener_0 = new $._ErrorZoneBoundaryListener(null, t1.listener_0);
    t2 = this._state;
    if ((t2 & 1) !== 0) {
      this._state = 1;
      future = this._resultOrListeners;
      if (future.get$_isChained() === true) {
        future = future.get$_chainSource();
        this._resultOrListeners = future;
      }
      future._addListener$1(t1.listener_0);
      return;
    }
    if (t2 >= 4) {
      this._state = (t2 & 4294967287) >>> 0;
      $.get$_Zone__current().runAsync$1(new $._FutureImpl__addListener_closure(t1, this));
    } else {
      t1.listener_0.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = t1.listener_0;
    }
  },
  "+_addListener:1:0": 0,
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  "+_removeListeners:0:0": 0,
  _chain$1: function(future) {
    var t1 = this._state;
    if (t1 < 4)
      future._chainFromFuture$1(this);
    else if (t1 === 4)
      future._setValue$1(this._resultOrListeners);
    else {
      this._state = (t1 & 4294967287) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  "+_chain:1:0": 0,
  get$_chainSource: function() {
    var future = this._resultOrListeners;
    if (future.get$_isChained() === true) {
      future = future.get$_chainSource();
      this._resultOrListeners = future;
    }
    return future;
  },
  "+_chainSource": 0,
  _chainFromFuture$1: function(resultSource) {
    var future, cursor, cursor0, cursor1, t1;
    if ((resultSource._state & 1) !== 0) {
      future = resultSource._resultOrListeners;
      if (future.get$_isChained() === true) {
        future = future.get$_chainSource();
        resultSource._resultOrListeners = future;
      }
      resultSource = future;
    }
    if (this === resultSource) {
      this._setError$1(new $.StateError("Cyclic future dependency."));
      return;
    }
    cursor = this._removeListeners$0();
    for (cursor0 = cursor; cursor0 != null; cursor0 = cursor1) {
      cursor1 = cursor0.get$_nextListener();
      cursor0.set$_nextListener(null);
      resultSource._addListener$1(cursor0);
    }
    t1 = new $._FutureListenerWrapper(this, null);
    t1.$builtinTypeInfo = [null];
    resultSource._addListener$1(t1);
    this._resultOrListeners = resultSource;
    this._state = cursor != null ? 1 : 3;
  },
  "+_chainFromFuture:1:0": 0,
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture)
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  },
  "+_setOrChainValue:1:0": 0,
  $is_FutureImpl: true,
  $isFuture: true
},

"+_FutureImpl": 0,

_FutureImpl__FutureImpl$wait_handleError: {
  "": function _FutureImpl__FutureImpl$wait_handleError(box_0) {
    this.box_0 = box_0;
  },
  "super": "Closure",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
  },
  $isFunction: true
},

"+_FutureImpl__FutureImpl$wait_handleError": 0,

_FutureImpl__FutureImpl$wait_closure: {
  "": function _FutureImpl__FutureImpl$wait_closure(box_0, pos_1) {
    this.box_0 = box_0;
    this.pos_1 = pos_1;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0)) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2.complete$1;
      if (t2._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t2._isComplete = true;
      t3 = t2.future._zone;
      t3._openCallbacks = t3._openCallbacks - 1;
      if (!t3._isExecutingCallback && t3._openCallbacks === 0 && t3._children.length === 0)
        ;
      t2._setFutureValue$1(t1);
    }
  },
  $isFunction: true
},

"+_FutureImpl__FutureImpl$wait_closure": 0,

_FutureImpl__scheduleUnhandledError_closure: {
  "": function _FutureImpl__scheduleUnhandledError_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, error;
    t1 = this.this_0;
    t2 = t1.get$_state();
    if (typeof t2 !== "number")
      throw t2.$ge();
    if (t2 >= 8) {
      t1.set$_state((t2 & 4294967287) >>> 0);
      error = t1.get$_resultOrListeners();
      t1.get$_zone().handleUncaughtError$1(error);
    }
  },
  $isFunction: true
},

"+_FutureImpl__scheduleUnhandledError_closure": 0,

_FutureImpl__addListener_closure: {
  "": function _FutureImpl__addListener_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, value;
    t1 = this.this_1;
    t2 = $.$eq(t1.get$_state(), 4);
    value = t1.get$_resultOrListeners();
    t1 = this.box_0;
    if (t2)
      t1.listener_0._sendValue$1(value);
    else
      t1.listener_0._sendError$1(value);
  },
  $isFunction: true
},

"+_FutureImpl__addListener_closure": 0,

_TransformFuture: {
  "": function _TransformFuture(_nextListener) {
    this._nextListener = _nextListener;
  },
  "super": "_FutureImpl",
  get$_nextListener: function() {
    return this._nextListener;
  },
  set$_nextListener: function(v) {
    this._nextListener = v;
  },
  _sendValue$1: function(value) {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(new $._TransformFuture__sendValue_closure(this, value), false);
  },
  _sendError$1: function(error) {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(new $._TransformFuture__sendError_closure(this, error), false);
  },
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  "+_subscribeTo:1:0": 0,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

"+_TransformFuture": 0,

_TransformFuture__sendValue_closure: {
  "": function _TransformFuture__sendValue_closure(this_0, value_1) {
    this.this_0 = this_0;
    this.value_1 = value_1;
  },
  "super": "Closure",
  call$0: function() {
    return this.this_0._zonedSendValue$1(this.value_1);
  },
  $isFunction: true
},

"+_TransformFuture__sendValue_closure": 0,

_TransformFuture__sendError_closure: {
  "": function _TransformFuture__sendError_closure(this_0, error_1) {
    this.this_0 = this_0;
    this.error_1 = error_1;
  },
  "super": "Closure",
  call$0: function() {
    return this.this_0._zonedSendError$1(this.error_1);
  },
  $isFunction: true
},

"+_TransformFuture__sendError_closure": 0,

_ThenFuture: {
  "": function _ThenFuture(_onValue, _nextListener, _state, _zone, _resultOrListeners) {
    this._onValue = _onValue;
    this._nextListener = _nextListener;
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
  },
  "super": "_TransformFuture",
  get$_onValue: function() {
    return this._onValue;
  },
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  "+_zonedSendValue:1:0": 0,
  _zonedSendError$1: function(error) {
    this._setError$1(error);
  },
  "+_zonedSendError:1:0": 0,
  $as_TransformFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

"+_ThenFuture": 0,

_CatchErrorFuture: {
  "": function _CatchErrorFuture(_test, _onError, _nextListener, _state, _zone, _resultOrListeners) {
    this._test = _test;
    this._onError = _onError;
    this._nextListener = _nextListener;
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
  },
  "super": "_TransformFuture",
  get$_test: function() {
    return this._test;
  },
  get$_onError: function() {
    return this._onError;
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    this._setValue$1(value);
  },
  _zonedSendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
},

"+_CatchErrorFuture": 0,

_SubscribeFuture: {
  "": function _SubscribeFuture(_onError, _onValue, _nextListener, _state, _zone, _resultOrListeners) {
    this._onError = _onError;
    this._onValue = _onValue;
    this._nextListener = _nextListener;
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
  },
  "super": "_ThenFuture",
  get$_onError: function() {
    return this._onError;
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_ThenFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
},

"+_SubscribeFuture": 0,

_WhenFuture: {
  "": function _WhenFuture(_action, _nextListener, _state, _zone, _resultOrListeners) {
    this._action = _action;
    this._nextListener = _nextListener;
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
  },
  "super": "_TransformFuture",
  get$_action: function() {
    return this._action;
  },
  _action$0: function() {
    return this._action.call$0();
  },
  _zonedSendValue$1: function(value) {
    var result, resultFuture, e, s, t1, exception;
    try {
      result = this._action$0();
      t1 = result;
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__zonedSendValue_closure(this, value), this.get$_setError());
        return;
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setValue$1(value);
  },
  _zonedSendError$1: function(error) {
    var t1, result, resultFuture, e, s, t2, exception;
    t1 = {};
    t1.error_0 = error;
    try {
      result = this._action$0();
      t2 = result;
      if (typeof t2 === "object" && t2 !== null && !!$.getInterceptor(t2).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__zonedSendError_closure(t1, this), this.get$_setError());
        return;
      }
    } catch (exception) {
      t2 = $.unwrapException(exception);
      e = t2;
      s = $.getTraceFromException(exception);
      t1.error_0 = $._asyncError(e, s);
    }

    this._setError$1(t1.error_0);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
},

"+_WhenFuture": 0,

_WhenFuture__zonedSendValue_closure: {
  "": function _WhenFuture__zonedSendValue_closure(this_0, value_1) {
    this.this_0 = this_0;
    this.value_1 = value_1;
  },
  "super": "Closure",
  call$1: function(_) {
    this.this_0._setValue$1(this.value_1);
  },
  $isFunction: true
},

"+_WhenFuture__zonedSendValue_closure": 0,

_WhenFuture__zonedSendError_closure: {
  "": function _WhenFuture__zonedSendError_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  },
  "super": "Closure",
  call$1: function(_) {
    this.this_1._setError$1(this.box_0.error_0);
  },
  $isFunction: true
},

"+_WhenFuture__zonedSendError_closure": 0,

Stream: {
  "": function Stream() {
  },
  "super": "Object",
  get$isBroadcast: function() {
    return false;
  },
  "+isBroadcast": 0,
  asBroadcastStream$0: function() {
    var t1, t2, t3;
    if (this.get$isBroadcast() === true)
      return this;
    t1 = $.getRuntimeTypeArgument(this, this.$asStream, 0);
    t2 = new $._AsBroadcastStream(this, null, null);
    t2.$builtinTypeInfo = [t1];
    t3 = new $._AsBroadcastStreamController(null, null, t2.get$_onCancel(), 0, null, null);
    t3.$builtinTypeInfo = [t1];
    t3._liblib2$_previous = t3;
    t3._liblib2$_next = t3;
    t2._controller = t3;
    return t2;
  },
  "+asBroadcastStream:0:0": 0,
  where$1: function(_, test) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, this.$asStream, 0);
    t2 = new $._WhereStream(test, this);
    t2.$builtinTypeInfo = [t1];
    return t2;
  },
  map$1: function(_, convert) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, this.$asStream, 0);
    t2 = new $._MapStream(convert, this);
    t2.$builtinTypeInfo = [t1, null];
    return t2;
  },
  fold$2: function(_, initialValue, combine) {
    var t1, result;
    t1 = {};
    result = new $._FutureImpl(0, $.get$_Zone__current(), null);
    result.$builtinTypeInfo = [null];
    t1.value_0 = initialValue;
    t1.subscription_1 = null;
    t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_fold_closure(t1, combine, result), true, new $.Stream_fold_closure0(t1, result), new $.Stream_fold_closure1(result));
    return result;
  },
  contains$1: function(_, match) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $.get$_Zone__current(), null);
    future.$builtinTypeInfo = [$.JSBool];
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_contains_closure(t1, match, future), true, new $.Stream_contains_closure0(future), future.get$_setError());
    return future;
  },
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $.get$_Zone__current(), null);
    future.$builtinTypeInfo = [null];
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_forEach_closure(t1, action, future), true, new $.Stream_forEach_closure0(future), future.get$_setError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $.get$_Zone__current(), null);
    future.$builtinTypeInfo = [$.JSInt];
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_closure(t1), true, new $.Stream_length_closure0(t1, future), future.get$_setError());
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $.get$_Zone__current(), null);
    future.$builtinTypeInfo = [$.JSBool];
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_isEmpty_closure(t1, future), true, new $.Stream_isEmpty_closure0(future), future.get$_setError());
    return future;
  },
  toList$0: function(_) {
    var result, t1, future;
    result = [];
    t1 = $.getRuntimeTypeArgument(this, this.$asStream, 0);
    future = new $._FutureImpl(0, $.get$_Zone__current(), null);
    future.$builtinTypeInfo = [[$.JSArray, t1]];
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_toList_closure(result), true, new $.Stream_toList_closure0(result, future), future.get$_setError());
    return future;
  },
  skip$1: function(_, count) {
    var t1 = new $._SkipStream(count, this);
    t1.$builtinTypeInfo = [null];
    if (count < 0)
      $.throwExpression(new $.ArgumentError(count));
    return t1;
  },
  get$first: function(_) {
    var t1, t2, future;
    t1 = {};
    t2 = $.getRuntimeTypeArgument(this, this.$asStream, 0);
    future = new $._FutureImpl(0, $.get$_Zone__current(), null);
    future.$builtinTypeInfo = [t2];
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_first_closure(t1, future), true, new $.Stream_first_closure0(future), future.get$_setError());
    return future;
  },
  get$single: function(_) {
    var t1, t2, future;
    t1 = {};
    t2 = $.getRuntimeTypeArgument(this, this.$asStream, 0);
    future = new $._FutureImpl(0, $.get$_Zone__current(), null);
    future.$builtinTypeInfo = [t2];
    t1.result_0 = null;
    t1.foundResult_1 = false;
    t1.subscription_2 = null;
    t1.subscription_2 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_single_closure(t1, this, future), true, new $.Stream_single_closure0(t1, future), future.get$_setError());
    return future;
  }
},

"+Stream": 0,

Stream_fold_closure: {
  "": function Stream_fold_closure(box_0, combine_1, result_2) {
    this.box_0 = box_0;
    this.combine_1 = combine_1;
    this.result_2 = result_2;
  },
  "super": "Closure",
  call$1: function(element) {
    var t1 = this.box_0;
    $._runUserCode(new $.Stream_fold__closure(t1, this.combine_1, element), new $.Stream_fold__closure0(t1), $._cancelAndError(t1.subscription_1, this.result_2));
  },
  $isFunction: true
},

"+Stream_fold_closure": 0,

Stream_fold__closure: {
  "": function Stream_fold__closure(box_0, combine_3, element_4) {
    this.box_0 = box_0;
    this.combine_3 = combine_3;
    this.element_4 = element_4;
  },
  "super": "Closure",
  call$0: function() {
    return this.combine_3.call$2(this.box_0.value_0, this.element_4);
  },
  $isFunction: true
},

"+Stream_fold__closure": 0,

Stream_fold__closure0: {
  "": function Stream_fold__closure(box_0) {
    this.box_0 = box_0;
  },
  "super": "Closure",
  call$1: function(newValue) {
    this.box_0.value_0 = newValue;
  },
  $isFunction: true
},

"+Stream_fold__closure": 0,

Stream_fold_closure1: {
  "": function Stream_fold_closure(result_5) {
    this.result_5 = result_5;
  },
  "super": "Closure",
  call$1: function(e) {
    this.result_5._setError$1(e);
  },
  $isFunction: true
},

"+Stream_fold_closure": 0,

Stream_fold_closure0: {
  "": function Stream_fold_closure(box_0, result_6) {
    this.box_0 = box_0;
    this.result_6 = result_6;
  },
  "super": "Closure",
  call$0: function() {
    this.result_6._setValue$1(this.box_0.value_0);
  },
  $isFunction: true
},

"+Stream_fold_closure": 0,

Stream_contains_closure: {
  "": function Stream_contains_closure(box_0, match_1, future_2) {
    this.box_0 = box_0;
    this.match_1 = match_1;
    this.future_2 = future_2;
  },
  "super": "Closure",
  call$1: function(element) {
    var t1, t2;
    t1 = this.box_0;
    t2 = this.future_2;
    $._runUserCode(new $.Stream_contains__closure(this.match_1, element), new $.Stream_contains__closure0(t1, t2), $._cancelAndError(t1.subscription_0, t2));
  },
  $isFunction: true
},

"+Stream_contains_closure": 0,

Stream_contains__closure: {
  "": function Stream_contains__closure(match_3, element_4) {
    this.match_3 = match_3;
    this.element_4 = element_4;
  },
  "super": "Closure",
  call$0: function() {
    return $.$eq(this.element_4, this.match_3);
  },
  $isFunction: true
},

"+Stream_contains__closure": 0,

Stream_contains__closure0: {
  "": function Stream_contains__closure(box_0, future_5) {
    this.box_0 = box_0;
    this.future_5 = future_5;
  },
  "super": "Closure",
  call$1: function(isMatch) {
    if (isMatch === true) {
      this.box_0.subscription_0.cancel$0();
      this.future_5._setValue$1(true);
    }
  },
  $isFunction: true
},

"+Stream_contains__closure": 0,

Stream_contains_closure0: {
  "": function Stream_contains_closure(future_6) {
    this.future_6 = future_6;
  },
  "super": "Closure",
  call$0: function() {
    this.future_6._setValue$1(false);
  },
  $isFunction: true
},

"+Stream_contains_closure": 0,

Stream_forEach_closure: {
  "": function Stream_forEach_closure(box_0, action_1, future_2) {
    this.box_0 = box_0;
    this.action_1 = action_1;
    this.future_2 = future_2;
  },
  "super": "Closure",
  call$1: function(element) {
    $._runUserCode(new $.Stream_forEach__closure(this.action_1, element), new $.Stream_forEach__closure0(), $._cancelAndError(this.box_0.subscription_0, this.future_2));
  },
  $isFunction: true
},

"+Stream_forEach_closure": 0,

Stream_forEach__closure: {
  "": function Stream_forEach__closure(action_3, element_4) {
    this.action_3 = action_3;
    this.element_4 = element_4;
  },
  "super": "Closure",
  call$0: function() {
    return this.action_3.call$1(this.element_4);
  },
  $isFunction: true
},

"+Stream_forEach__closure": 0,

Stream_forEach__closure0: {
  "": function Stream_forEach__closure() {
  },
  "super": "Closure",
  call$1: function(_) {
  },
  $isFunction: true
},

"+Stream_forEach__closure": 0,

Stream_forEach_closure0: {
  "": function Stream_forEach_closure(future_5) {
    this.future_5 = future_5;
  },
  "super": "Closure",
  call$0: function() {
    this.future_5._setValue$1(null);
  },
  $isFunction: true
},

"+Stream_forEach_closure": 0,

Stream_length_closure: {
  "": function Stream_length_closure(box_0) {
    this.box_0 = box_0;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  },
  $isFunction: true
},

"+Stream_length_closure": 0,

Stream_length_closure0: {
  "": function Stream_length_closure(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  },
  $isFunction: true
},

"+Stream_length_closure": 0,

Stream_isEmpty_closure: {
  "": function Stream_isEmpty_closure(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._setValue$1(false);
  },
  $isFunction: true
},

"+Stream_isEmpty_closure": 0,

Stream_isEmpty_closure0: {
  "": function Stream_isEmpty_closure(future_2) {
    this.future_2 = future_2;
  },
  "super": "Closure",
  call$0: function() {
    this.future_2._setValue$1(true);
  },
  $isFunction: true
},

"+Stream_isEmpty_closure": 0,

Stream_toList_closure: {
  "": function Stream_toList_closure(result_0) {
    this.result_0 = result_0;
  },
  "super": "Closure",
  call$1: function(data) {
    this.result_0.push(data);
  },
  $isFunction: true
},

"+Stream_toList_closure": 0,

Stream_toList_closure0: {
  "": function Stream_toList_closure(result_1, future_2) {
    this.result_1 = result_1;
    this.future_2 = future_2;
  },
  "super": "Closure",
  call$0: function() {
    this.future_2._setValue$1(this.result_1);
  },
  $isFunction: true
},

"+Stream_toList_closure": 0,

Stream_first_closure: {
  "": function Stream_first_closure(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$1: function(value) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._setValue$1(value);
    return;
  },
  $isFunction: true
},

"+Stream_first_closure": 0,

Stream_first_closure0: {
  "": function Stream_first_closure(future_2) {
    this.future_2 = future_2;
  },
  "super": "Closure",
  call$0: function() {
    this.future_2._setError$1(new $.StateError("No elements"));
  },
  $isFunction: true
},

"+Stream_first_closure": 0,

Stream_single_closure: {
  "": function Stream_single_closure(box_0, this_1, future_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.future_2 = future_2;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1 = this.box_0;
    if (t1.foundResult_1) {
      t1.subscription_2.cancel$0();
      this.future_2._setError$1(new $.StateError("More than one element"));
      return;
    }
    t1.foundResult_1 = true;
    t1.result_0 = value;
  },
  $isFunction: true
},

"+Stream_single_closure": 0,

Stream_single_closure0: {
  "": function Stream_single_closure(box_0, future_3) {
    this.box_0 = box_0;
    this.future_3 = future_3;
  },
  "super": "Closure",
  call$0: function() {
    var t1 = this.box_0;
    if (t1.foundResult_1) {
      this.future_3._setValue$1(t1.result_0);
      return;
    }
    this.future_3._setError$1(new $.StateError("No elements"));
  },
  $isFunction: true
},

"+Stream_single_closure": 0,

StreamSubscription: {
  "": function StreamSubscription() {
  },
  "super": "Object"
},

"+StreamSubscription": 0,

EventSink: {
  "": function EventSink() {
  },
  "super": "Object"
},

"+EventSink": 0,

_StreamController: {
  "": function _StreamController(_onListen, _onPause, _onResume, _onCancel, _stream, _subscription, _state, _pendingEvents) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._stream = _stream;
    this._subscription = _subscription;
    this._state = _state;
    this._pendingEvents = _pendingEvents;
  },
  "super": "Object",
  get$_onListen: function() {
    return this._onListen;
  },
  get$_onPause: function() {
    return this._onPause;
  },
  get$_onResume: function() {
    return this._onResume;
  },
  get$_onCancel: function() {
    return this._onCancel;
  },
  get$_stream: function() {
    return this._stream;
  },
  set$_stream: function(v) {
    this._stream = v;
  },
  get$_subscription: function() {
    return this._subscription;
  },
  set$_subscription: function(v) {
    this._subscription = v;
  },
  get$_state: function() {
    return this._state;
  },
  set$_state: function(v) {
    this._state = v;
  },
  get$_pendingEvents: function() {
    return this._pendingEvents;
  },
  set$_pendingEvents: function(v) {
    this._pendingEvents = v;
  },
  get$_isCancelled: function() {
    return (this._state & 1) !== 0;
  },
  "+_isCancelled": 0,
  get$isClosed: function() {
    return (this._state & 2) !== 0;
  },
  "+isClosed": 0,
  add$1: function(_, value) {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 2) !== 0)
      throw $.wrapException(new $.StateError("Adding event after close"));
    if (this._subscription != null)
      this._sendData$1(value);
    else if ((t1 & 1) === 0) {
      t1 = $.getRuntimeTypeArgument(this, this.$as_StreamController, 0);
      t2 = new $._DelayedData(value, null);
      t2.$builtinTypeInfo = [t1];
      this._addPendingEvent$1(t2);
    }
  },
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 2) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._subscription != null)
      this._sendDone$0();
    else if ((this._state & 1) === 0)
      this._addPendingEvent$1($.C__DelayedDone);
  },
  _addPendingEvent$1: function($event) {
    var events, t1;
    if ((this._state & 1) !== 0)
      return;
    events = this._pendingEvents;
    if (events == null) {
      events = new $._StreamImplEvents(null, null, 0);
      this._pendingEvents = events;
    }
    events.add$1;
    t1 = events.lastPendingEvent;
    if (t1 == null) {
      events.lastPendingEvent = $event;
      events.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      events.lastPendingEvent = $event;
    }
  },
  "+_addPendingEvent:1:0": 0,
  _recordListen$1: function(subscription) {
    this._subscription = subscription;
    subscription._setPendingEvents$1(this._pendingEvents);
    this._pendingEvents = null;
    subscription._guardCallback$1(new $._StreamController__recordListen_closure(this));
  },
  "+_recordListen:1:0": 0,
  _recordCancel$1: function(subscription) {
    this._subscription = null;
    this._state = (this._state | 1) >>> 0;
    $._runGuarded(this._onCancel);
  },
  "+_recordCancel:1:0": 0,
  _recordPause$1: function(subscription) {
    $._runGuarded(this._onPause);
  },
  "+_recordPause:1:0": 0,
  _recordResume$1: function(subscription) {
    $._runGuarded(this._onResume);
  },
  "+_recordResume:1:0": 0
},

"+_StreamController": 0,

_StreamController__recordListen_closure: {
  "": function _StreamController__recordListen_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    $._runGuarded(this.this_0.get$_onListen());
  },
  $isFunction: true
},

"+_StreamController__recordListen_closure": 0,

_SyncStreamController: {
  "": function _SyncStreamController(_onListen, _onPause, _onResume, _onCancel, _stream, _subscription, _state, _pendingEvents) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._stream = _stream;
    this._subscription = _subscription;
    this._state = _state;
    this._pendingEvents = _pendingEvents;
  },
  "super": "_StreamController",
  _sendData$1: function(data) {
    var t1 = this._subscription;
    t1._liblib2$_add$1(t1, data);
  },
  "+_sendData:1:0": 0,
  _sendError$1: function(error) {
    this._subscription._addError$1(error);
  },
  _sendDone$0: function() {
    this._subscription._close$0();
  },
  "+_sendDone:0:0": 0,
  $as_StreamController: null
},

"+_SyncStreamController": 0,

_AsyncStreamController: {
  "": function _AsyncStreamController(_onListen, _onPause, _onResume, _onCancel, _stream, _subscription, _state, _pendingEvents) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._stream = _stream;
    this._subscription = _subscription;
    this._state = _state;
    this._pendingEvents = _pendingEvents;
  },
  "super": "_StreamController",
  _sendData$1: function(data) {
    var t1, t2;
    t1 = this._subscription;
    t2 = new $._DelayedData(data, null);
    t2.$builtinTypeInfo = [null];
    t1._addPending$1(t2);
  },
  _sendError$1: function(error) {
    this._subscription._addPending$1(new $._DelayedError(error, null));
  },
  _sendDone$0: function() {
    this._subscription._addPending$1($.C__DelayedDone);
  },
  $as_StreamController: null
},

"+_AsyncStreamController": 0,

_ControllerStream: {
  "": function _ControllerStream(_controller, _hasListener) {
    this._controller = _controller;
    this._hasListener = _hasListener;
  },
  "super": "_StreamImpl",
  get$_controller: function() {
    return this._controller;
  },
  set$_controller: function(v) {
    this._controller = v;
  },
  get$_hasListener: function() {
    return this._hasListener;
  },
  set$_hasListener: function(v) {
    this._hasListener = v;
  },
  _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
    var t1, t2, t3, t4;
    if (this._hasListener)
      throw $.wrapException(new $.StateError("The stream has already been listened to."));
    this._hasListener = true;
    t1 = this._controller;
    t2 = $.getRuntimeTypeArgument(this, this.$as_ControllerStream, 0);
    t3 = $.get$_Zone__current();
    t4 = cancelOnError ? 1 : 0;
    t4 = new $._ControllerSubscription(t1, onData, onError, onDone, t3, t4, null);
    t4.$builtinTypeInfo = [t2];
    t4._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t2);
    return t4;
  },
  "+_createSubscription:4:0": 0,
  _onListen$1: function(subscription) {
    this._controller._recordListen$1(subscription);
  },
  "+_onListen:1:0": 0,
  get$_onListen: function() {
    return new $.BoundClosure$1(this, "_onListen$1", null);
  },
  $as_StreamImpl: null
},

"+_ControllerStream": 0,

_ControllerSubscription: {
  "": function _ControllerSubscription(_controller, _liblib2$_onData, _onError, _onDone, _zone, _state, _pending) {
    this._controller = _controller;
    this._liblib2$_onData = _liblib2$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._pending = _pending;
  },
  "super": "_BufferingStreamSubscription",
  get$_controller: function() {
    return this._controller;
  },
  _onCancel$0: function() {
    this.get$_controller()._recordCancel$1(this);
  },
  "+_onCancel:0:0": 0,
  _onPause$0: function() {
    this.get$_controller()._recordPause$1(this);
  },
  "+_onPause:0:0": 0,
  get$_onPause: function() {
    return new $.BoundClosure$0(this, "_onPause$0", null);
  },
  _onResume$0: function() {
    this.get$_controller()._recordResume$1(this);
  },
  "+_onResume:0:0": 0,
  get$_onResume: function() {
    return new $.BoundClosure$0(this, "_onResume$0", null);
  },
  $as_BufferingStreamSubscription: null
},

"+_ControllerSubscription": 0,

_BroadcastStream: {
  "": function _BroadcastStream(_controller) {
    this._controller = _controller;
  },
  "super": "_StreamImpl",
  get$_controller: function() {
    return this._controller;
  },
  set$_controller: function(v) {
    this._controller = v;
  },
  get$isBroadcast: function() {
    return true;
  },
  _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
    var t1, t2, t3, t4;
    t1 = this._controller;
    t2 = $.getRuntimeTypeArgument(this, this.$as_BroadcastStream, 0);
    t3 = $.get$_Zone__current();
    t4 = cancelOnError ? 1 : 0;
    t4 = new $._BroadcastSubscription(null, null, null, t1, onData, onError, onDone, t3, t4, null);
    t4.$builtinTypeInfo = [t2];
    t4._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t2);
    t4._liblib2$_previous = t4;
    t4._liblib2$_next = t4;
    return t4;
  },
  _onListen$1: function(subscription) {
    var t1, t2, t3;
    t1 = this._controller;
    t1._addListener$1(subscription);
    t2 = t1._liblib2$_next;
    t3 = t1._liblib2$_previous;
    if (t2 == null ? t3 == null : t2 === t3)
      $._runGuarded(t1._onListen);
  },
  get$_onListen: function() {
    return new $.BoundClosure$1(this, "_onListen$1", null);
  },
  $as_StreamImpl: null
},

"+_BroadcastStream": 0,

_BroadcastSubscription: {
  "": function _BroadcastSubscription(_eventState, _liblib2$_next, _liblib2$_previous, _controller, _liblib2$_onData, _onError, _onDone, _zone, _state, _pending) {
    this._eventState = _eventState;
    this._liblib2$_next = _liblib2$_next;
    this._liblib2$_previous = _liblib2$_previous;
    this._controller = _controller;
    this._liblib2$_onData = _liblib2$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._pending = _pending;
  },
  "super": "_ControllerSubscription",
  get$_eventState: function() {
    return this._eventState;
  },
  set$_eventState: function(v) {
    this._eventState = v;
  },
  get$_liblib2$_next: function() {
    return this._liblib2$_next;
  },
  set$_liblib2$_next: function(v) {
    this._liblib2$_next = v;
  },
  get$_liblib2$_previous: function() {
    return this._liblib2$_previous;
  },
  set$_liblib2$_previous: function(v) {
    this._liblib2$_previous = v;
  },
  get$_controller: function() {
    return this._controller;
  },
  "+_controller": 0,
  _expectsEvent$1: function(eventId) {
    var t1 = this._eventState;
    if (t1 == null)
      return this._expectsEvent$1$bailout(1, eventId, t1);
    return (t1 & 1) === eventId;
  },
  "+_expectsEvent:1:0": 0,
  _expectsEvent$1$bailout: function(state0, eventId, t1) {
    if (t1 == null)
      throw t1.$and();
    return (t1 & 1) === eventId;
  },
  _toggleEventId$0: function() {
    var t1 = this._eventState;
    if (t1 == null)
      return this._toggleEventId$0$bailout(1, t1);
    this._eventState = (t1 ^ 1) >>> 0;
  },
  "+_toggleEventId:0:0": 0,
  _toggleEventId$0$bailout: function(state0, t1) {
    if (t1 == null)
      throw t1.$xor();
    this._eventState = (t1 ^ 1) >>> 0;
  },
  get$_isFiring: function() {
    var t1 = this._eventState;
    if (t1 == null)
      throw t1.$and();
    return (t1 & 2) !== 0;
  },
  "+_isFiring": 0,
  _setRemoveAfterFiring$0: function() {
    var t1 = this._eventState;
    if (t1 == null)
      throw t1.$or();
    this._eventState = (t1 | 4) >>> 0;
  },
  "+_setRemoveAfterFiring:0:0": 0,
  get$_removeAfterFiring: function() {
    var t1 = this._eventState;
    if (t1 == null)
      return this.get$_removeAfterFiring$bailout(1, t1);
    return (t1 & 4) !== 0;
  },
  "+_removeAfterFiring": 0,
  get$_removeAfterFiring$bailout: function(state0, t1) {
    if (t1 == null)
      throw t1.$and();
    return (t1 & 4) !== 0;
  },
  $as_ControllerSubscription: null
},

"+_BroadcastSubscription": 0,

_BroadcastStreamController: {
  "": function _BroadcastStreamController(_onListen, _onCancel, _state, _liblib2$_next, _liblib2$_previous) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._liblib2$_next = _liblib2$_next;
    this._liblib2$_previous = _liblib2$_previous;
  },
  "super": "Object",
  get$_onListen: function() {
    return this._onListen;
  },
  get$_onCancel: function() {
    return this._onCancel;
  },
  get$_state: function() {
    return this._state;
  },
  set$_state: function(v) {
    this._state = v;
  },
  get$_liblib2$_next: function() {
    return this._liblib2$_next;
  },
  set$_liblib2$_next: function(v) {
    this._liblib2$_next = v;
  },
  get$_liblib2$_previous: function() {
    return this._liblib2$_previous;
  },
  set$_liblib2$_previous: function(v) {
    this._liblib2$_previous = v;
  },
  _addListener$1: function(subscription) {
    var previous = this._liblib2$_previous;
    previous.set$_liblib2$_next(subscription);
    this._liblib2$_previous = subscription.get$_liblib2$_previous();
    subscription.get$_liblib2$_previous().set$_liblib2$_next(this);
    subscription.set$_liblib2$_previous(previous);
    subscription.set$_eventState(this._state & 1);
  },
  _removeListener$1: function(subscription) {
    subscription.get$_liblib2$_previous().set$_liblib2$_next(subscription.get$_liblib2$_next());
    subscription.get$_liblib2$_next().set$_liblib2$_previous(subscription.get$_liblib2$_previous());
    subscription.set$_liblib2$_previous(subscription);
    subscription.set$_liblib2$_next(subscription);
  },
  "+_removeListener:1:0": 0,
  _recordCancel$1: function(subscription) {
    if (subscription.get$_isFiring())
      subscription._setRemoveAfterFiring$0();
    else {
      this._removeListener$1(subscription);
      if ((this._state & 2) === 0 && this._liblib2$_next === this)
        this._callOnCancel$0();
    }
  },
  _recordPause$1: function(subscription) {
  },
  _recordResume$1: function(subscription) {
  },
  add$1: function(_, data) {
    if ((this._state & 4) !== 0)
      throw $.wrapException(new $.StateError("Cannot add new events after calling close()"));
    this._sendData$1(data);
  },
  addError$2: function(error, stackTrace) {
    if ((this._state & 4) !== 0)
      throw $.wrapException(new $.StateError("Cannot add new events after calling close()"));
    if (stackTrace != null)
      $._attachStackTrace(error, stackTrace);
    this._sendError$1(error);
  },
  "+addError:1:1": 0,
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 4) !== 0)
      throw $.wrapException(new $.StateError("Cannot add new events after calling close()"));
    this._state = (t1 | 4) >>> 0;
    this._sendDone$0();
  },
  _forEachListener$1: function(action) {
    var t1, id, link, link0;
    t1 = this._state;
    if ((t1 & 2) !== 0)
      throw $.wrapException(new $.StateError("Cannot fire new event. Controller is already firing an event"));
    if (this._liblib2$_next === this)
      return;
    id = t1 & 1;
    this._state = (t1 ^ 3) >>> 0;
    link = this._liblib2$_next;
    for (; link !== this;)
      if (link._expectsEvent$1(id) === true) {
        link.set$_eventState($.$or$n(link.get$_eventState(), 2));
        action.call$1(link);
        link._toggleEventId$0();
        link0 = link.get$_liblib2$_next();
        if (link.get$_removeAfterFiring() === true)
          this._removeListener$1(link);
        link.set$_eventState($.$and$n(link.get$_eventState(), 4294967293));
        link = link0;
      } else
        link = link.get$_liblib2$_next();
    this._state = (this._state & 4294967293) >>> 0;
    if (this._liblib2$_next === this)
      this._callOnCancel$0();
  },
  "+_forEachListener:1:0": 0,
  _callOnCancel$0: function() {
    $._runGuarded(this._onCancel);
  },
  "+_callOnCancel:0:0": 0
},

"+_BroadcastStreamController": 0,

_SyncBroadcastStreamController: {
  "": function _SyncBroadcastStreamController(_onListen, _onCancel, _state, _liblib2$_next, _liblib2$_previous) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._liblib2$_next = _liblib2$_next;
    this._liblib2$_previous = _liblib2$_previous;
  },
  "super": "_BroadcastStreamController",
  _sendData$1: function(data) {
    if (this._liblib2$_next === this)
      return;
    this._forEachListener$1(new $._SyncBroadcastStreamController__sendData_closure(this, data));
  },
  _sendError$1: function(error) {
    if (this._liblib2$_next === this)
      return;
    this._forEachListener$1(new $._SyncBroadcastStreamController__sendError_closure(this, error));
  },
  _sendDone$0: function() {
    if (this._liblib2$_next === this)
      return;
    this._forEachListener$1(new $._SyncBroadcastStreamController__sendDone_closure(this));
  },
  $as_BroadcastStreamController: null
},

"+_SyncBroadcastStreamController": 0,

_SyncBroadcastStreamController__sendData_closure: {
  "": function _SyncBroadcastStreamController__sendData_closure(this_0, data_1) {
    this.this_0 = this_0;
    this.data_1 = data_1;
  },
  "super": "Closure",
  call$1: function(subscription) {
    $._liblib2$_add$1$x(subscription, this.data_1);
  },
  $isFunction: true
},

"+_SyncBroadcastStreamController__sendData_closure": 0,

_SyncBroadcastStreamController__sendError_closure: {
  "": function _SyncBroadcastStreamController__sendError_closure(this_0, error_1) {
    this.this_0 = this_0;
    this.error_1 = error_1;
  },
  "super": "Closure",
  call$1: function(subscription) {
    subscription._addError$1(this.error_1);
  },
  $isFunction: true
},

"+_SyncBroadcastStreamController__sendError_closure": 0,

_SyncBroadcastStreamController__sendDone_closure: {
  "": function _SyncBroadcastStreamController__sendDone_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(subscription) {
    subscription._close$0();
    subscription.set$_eventState($.$or$n(subscription.get$_eventState(), 4));
  },
  $isFunction: true
},

"+_SyncBroadcastStreamController__sendDone_closure": 0,

_AsBroadcastStreamController: {
  "": function _AsBroadcastStreamController(_pending, _onListen, _onCancel, _state, _liblib2$_next, _liblib2$_previous) {
    this._pending = _pending;
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._liblib2$_next = _liblib2$_next;
    this._liblib2$_previous = _liblib2$_previous;
  },
  "super": "_SyncBroadcastStreamController",
  get$_pending: function() {
    return this._pending;
  },
  set$_pending: function(v) {
    this._pending = v;
  },
  _addPendingEvent$1: function($event) {
    var t1, t2;
    if (this._pending == null)
      this._pending = new $._StreamImplEvents(null, null, 0);
    t1 = this._pending;
    t1.add$1;
    t2 = t1.lastPendingEvent;
    if (t2 == null) {
      t1.lastPendingEvent = $event;
      t1.firstPendingEvent = $event;
    } else {
      t2.set$next($event);
      t1.lastPendingEvent = $event;
    }
  },
  add$1: function(_, data) {
    var t1, t2, t3;
    if ((this._state & 2) !== 0) {
      t1 = $.getRuntimeTypeArgument(this, this.$as_AsBroadcastStreamController, 0);
      t2 = new $._DelayedData(data, null);
      t2.$builtinTypeInfo = [t1];
      if (this._pending == null)
        this._pending = new $._StreamImplEvents(null, null, 0);
      t1 = this._pending;
      t1.add$1;
      t3 = t1.lastPendingEvent;
      if (t3 == null) {
        t1.lastPendingEvent = t2;
        t1.firstPendingEvent = t2;
      } else {
        t3.set$next(t2);
        t1.lastPendingEvent = t2;
      }
      return;
    }
    $._BroadcastStreamController.prototype.add$1.call(this, this, data);
    while (true) {
      t1 = this._pending;
      if (t1 != null) {
        t1.get$isEmpty;
        t2 = t1.lastPendingEvent != null;
      } else
        t2 = false;
      if (!t2)
        break;
      t1.handleNext$1(this);
    }
  },
  get$add: function(_receiver) {
    return new $.BoundClosure$i1(this, "add$1", _receiver);
  },
  addError$2: function(error, stackTrace) {
    var t1, t2, t3;
    if ((this._state & 2) !== 0) {
      t1 = new $._DelayedError(error, null);
      if (this._pending == null)
        this._pending = new $._StreamImplEvents(null, null, 0);
      t2 = this._pending;
      t2.add$1;
      t3 = t2.lastPendingEvent;
      if (t3 == null) {
        t2.lastPendingEvent = t1;
        t2.firstPendingEvent = t1;
      } else {
        t3.set$next(t1);
        t2.lastPendingEvent = t1;
      }
      return;
    }
    $._BroadcastStreamController.prototype.addError$2.call(this, error, stackTrace);
    while (true) {
      t1 = this._pending;
      if (t1 != null) {
        t1.get$isEmpty;
        t2 = t1.lastPendingEvent != null;
      } else
        t2 = false;
      if (!t2)
        break;
      t1.handleNext$1(this);
    }
  },
  get$addError: function() {
    return new $.Bound_addError__AsBroadcastStreamController(this, "addError$2", null);
  },
  close$0: function(_) {
    var t1, t2;
    if ((this._state & 2) !== 0) {
      if (this._pending == null)
        this._pending = new $._StreamImplEvents(null, null, 0);
      t1 = this._pending;
      t1.add$1;
      t2 = t1.lastPendingEvent;
      if (t2 == null) {
        t1.lastPendingEvent = $.C__DelayedDone;
        t1.firstPendingEvent = $.C__DelayedDone;
      } else {
        t2.set$next($.C__DelayedDone);
        t1.lastPendingEvent = $.C__DelayedDone;
      }
      t1 = this._state;
      t2 = this.get$_STATE_CLOSED();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      this._state = $.JSInt_methods.$or(t1, t2);
      return;
    }
    $._BroadcastStreamController.prototype.close$0.call(this, this);
  },
  get$close: function(_receiver) {
    return new $.BoundClosure$i0(this, "close$0", _receiver);
  },
  _callOnCancel$0: function() {
    var t1, t2;
    t1 = this._pending;
    if (t1 != null) {
      t1.get$isEmpty;
      t2 = t1.lastPendingEvent != null;
    } else
      t2 = false;
    if (t2) {
      t1.clear$0;
      t2 = t1._state === 1;
      if (t2)
        if (t2)
          t1._state = 3;
      t1.lastPendingEvent = null;
      t1.firstPendingEvent = null;
      this._pending = null;
    }
    $._BroadcastStreamController.prototype._callOnCancel$0.call(this);
  },
  $as_SyncBroadcastStreamController: null
},

"+_AsBroadcastStreamController": 0,

_BufferingStreamSubscription: {
  "": function _BufferingStreamSubscription(_liblib2$_onData, _onError, _onDone, _zone, _state, _pending) {
    this._liblib2$_onData = _liblib2$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._pending = _pending;
  },
  "super": "Object",
  get$_liblib2$_onData: function() {
    return this._liblib2$_onData;
  },
  set$_liblib2$_onData: function(v) {
    this._liblib2$_onData = v;
  },
  get$_onError: function() {
    return this._onError;
  },
  set$_onError: function(v) {
    this._onError = v;
  },
  get$_onDone: function() {
    return this._onDone;
  },
  set$_onDone: function(v) {
    this._onDone = v;
  },
  get$_zone: function() {
    return this._zone;
  },
  get$_state: function() {
    return this._state;
  },
  set$_state: function(v) {
    this._state = v;
  },
  get$_pending: function() {
    return this._pending;
  },
  set$_pending: function(v) {
    this._pending = v;
  },
  _liblib2$_onData$1: function(arg0) {
    return this._liblib2$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _setPendingEvents$1: function(pendingEvents) {
    if (pendingEvents == null)
      return;
    this._pending = pendingEvents;
    pendingEvents.get$isEmpty;
    if (pendingEvents.lastPendingEvent != null) {
      this._state = $.$or$n(this._state, 32);
      this._pending.schedule$1(this);
    }
  },
  "+_setPendingEvents:1:0": 0,
  pause$1: function(_, resumeSignal) {
    var wasPaused, t1, t2;
    if (!$.$eq($.$and$n(this._state, 8), 0))
      return;
    wasPaused = $.$ge$n(this._state, 64);
    t1 = $.$eq($.$and$n(this._state, 4), 0);
    this._state = $.$or$n($.$add$ns(this._state, 64), 4);
    if (wasPaused !== true && this._pending != null) {
      t2 = this._pending;
      t2.cancelSchedule$0;
      if (t2._state === 1)
        t2._state = 3;
    }
    if (t1 && $.$eq($.$and$n(this._state, 16), 0))
      this._guardCallback$1(this.get$_onPause());
  },
  "+pause:0:1": 0,
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  "+pause:0:0": 0,
  resume$0: function() {
    if (!$.$eq($.$and$n(this._state, 8), 0))
      return;
    if ($.$ge$n(this._state, 64) === true) {
      this._state = $.$sub$n(this._state, 64);
      if ($.$ge$n(this._state, 64) !== true) {
        if (!$.$eq($.$and$n(this._state, 32), 0)) {
          var t1 = this._pending;
          t1.get$isEmpty;
          t1 = t1.lastPendingEvent != null;
        } else
          t1 = false;
        if (t1)
          this._pending.schedule$1(this);
        else {
          this._state = $.$and$n(this._state, 4294967291);
          if ($.$eq($.$and$n(this._state, 16), 0))
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  "+resume:0:0": 0,
  cancel$0: function() {
    if (!$.$eq($.$and$n(this._state, 8), 0))
      return;
    this._state = $.$or$n(this._state, 8);
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    if (!t1._isExecutingCallback && t1._openCallbacks === 0 && t1._children.length === 0)
      ;
    if (!$.$eq($.$and$n(this._state, 32), 0)) {
      t1 = this._pending;
      t1.cancelSchedule$0;
      if (t1._state === 1)
        t1._state = 3;
    }
    if ($.$eq($.$and$n(this._state, 16), 0)) {
      this._state = $.$or$n(this._state, 16);
      this._onCancel$0();
      this._pending = null;
      this._state = $.$and$n(this._state, 4294967279);
    }
  },
  _liblib2$_add$1: function(_, data) {
    var t1;
    if (!$.$eq($.$and$n(this._state, 8), 0))
      return;
    if ($.$lt$n(this._state, 16) === true)
      this._sendData$1(data);
    else {
      t1 = new $._DelayedData(data, null);
      t1.$builtinTypeInfo = [null];
      this._addPending$1(t1);
    }
  },
  "+_add:1:0": 0,
  _addError$1: function(error) {
    if (!$.$eq($.$and$n(this._state, 8), 0))
      return;
    if ($.$lt$n(this._state, 16) === true)
      this._sendError$1(error);
    else
      this._addPending$1(new $._DelayedError(error, null));
  },
  "+_addError:1:0": 0,
  _close$0: function() {
    if (!$.$eq($.$and$n(this._state, 8), 0))
      return;
    this._state = $.$or$n(this._state, 2);
    if ($.$lt$n(this._state, 16) === true)
      this._sendDone$0();
    else
      this._addPending$1($.C__DelayedDone);
  },
  "+_close:0:0": 0,
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new $.BoundClosure$0(this, "_onPause$0", null);
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new $.BoundClosure$0(this, "_onResume$0", null);
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new $._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1;
    t1 = pending.lastPendingEvent;
    if (t1 == null) {
      pending.lastPendingEvent = $event;
      pending.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      pending.lastPendingEvent = $event;
    }
    if ($.$eq($.$and$n(this._state, 32), 0)) {
      this._state = $.$or$n(this._state, 32);
      if ($.$ge$n(this._state, 64) !== true)
        this._pending.schedule$1(this);
    }
  },
  "+_addPending:1:0": 0,
  _sendData$1: function(data) {
    var t1 = $.$eq($.$and$n(this._state, 4), 0);
    this._state = $.$or$n(this._state, 16);
    this._zone._runInZone$2(new $._BufferingStreamSubscription__sendData_closure(this, data), true);
    this._state = $.$and$n(this._state, 4294967279);
    this._checkState$1(!t1);
  },
  _sendError$1: function(error) {
    var t1, t2, t3;
    t1 = $.$eq($.$and$n(this._state, 4), 0);
    this._state = $.$or$n(this._state, 16);
    t2 = this._zone;
    t3 = $.get$_Zone__current();
    if (t2.get$_errorZone() !== t3.get$_errorZone())
      $.get$_Zone__current().handleUncaughtError$1(error);
    else
      t2._runInZone$2(new $._BufferingStreamSubscription__sendError_closure(this, error), true);
    this._state = $.$and$n(this._state, 4294967279);
    if (!$.$eq($.$and$n(this._state, 1), 0)) {
      this._state = $.$or$n(this._state, 8);
      t2._openCallbacks = t2._openCallbacks - 1;
      if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      if (!$.$eq($.$and$n(this._state, 32), 0)) {
        t2 = this._pending;
        t2.cancelSchedule$0;
        if (t2._state === 1)
          t2._state = 3;
      }
    }
    this._checkState$1(!t1);
  },
  _sendDone$0: function() {
    var t1, t2;
    this._state = $.$or$n(this._state, 26);
    t1 = this._zone;
    t2 = this._onDone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(t2, true);
    this._onCancel$0();
    this._state = $.$and$n(this._state, 4294967279);
  },
  _guardCallback$1: function(callback) {
    var t1 = $.$eq($.$and$n(this._state, 4), 0);
    this._state = $.$or$n(this._state, 16);
    callback.call$0();
    this._state = $.$and$n(this._state, 4294967279);
    this._checkState$1(!t1);
  },
  "+_guardCallback:1:0": 0,
  _checkState$1: function(wasInputPaused) {
    var t1, isInputPaused;
    if (!$.$eq($.$and$n(this._state, 32), 0)) {
      t1 = this._pending;
      t1.get$isEmpty;
      t1 = t1.lastPendingEvent == null;
    } else
      t1 = false;
    if (t1) {
      this._state = $.$and$n(this._state, 4294967263);
      if (!$.$eq($.$and$n(this._state, 4), 0))
        if ($.$ge$n(this._state, 64) !== true) {
          t1 = this._pending;
          if (t1 != null) {
            t1.get$isEmpty;
            t1 = t1.lastPendingEvent == null;
          } else
            t1 = true;
        } else
          t1 = false;
      else
        t1 = false;
      if (t1)
        this._state = $.$and$n(this._state, 4294967291);
    }
    for (; true; wasInputPaused = isInputPaused) {
      if (!$.$eq($.$and$n(this._state, 8), 0)) {
        this._onCancel$0();
        this._pending = null;
        return;
      }
      isInputPaused = !$.$eq($.$and$n(this._state, 4), 0);
      if (wasInputPaused === isInputPaused)
        break;
      this._state = $.$xor$n(this._state, 16);
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = $.$and$n(this._state, 4294967279);
    }
    if (!$.$eq($.$and$n(this._state, 32), 0) && $.$ge$n(this._state, 64) !== true)
      this._pending.schedule$1(this);
  },
  "+_checkState:1:0": 0,
  _BufferingStreamSubscription$4: function(_onData, _onError, _onDone, cancelOnError, T) {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
  }
},

"+_BufferingStreamSubscription": 0,

_BufferingStreamSubscription__sendData_closure: {
  "": function _BufferingStreamSubscription__sendData_closure(this_0, data_1) {
    this.this_0 = this_0;
    this.data_1 = data_1;
  },
  "super": "Closure",
  call$0: function() {
    return this.this_0._liblib2$_onData$1(this.data_1);
  },
  $isFunction: true
},

"+_BufferingStreamSubscription__sendData_closure": 0,

_BufferingStreamSubscription__sendError_closure: {
  "": function _BufferingStreamSubscription__sendError_closure(this_0, error_1) {
    this.this_0 = this_0;
    this.error_1 = error_1;
  },
  "super": "Closure",
  call$0: function() {
    return this.this_0._onError$1(this.error_1);
  },
  $isFunction: true
},

"+_BufferingStreamSubscription__sendError_closure": 0,

_StreamImpl: {
  "": function _StreamImpl() {
  },
  "super": "Stream",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription;
    if (onData == null)
      onData = $._nullDataHandler$closure;
    if (onError == null)
      onError = $._nullErrorHandler$closure;
    if (onDone == null)
      onDone = $._nullDoneHandler$closure;
    subscription = this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
    this._onListen$1(subscription);
    return subscription;
  },
  "+listen:1:3": 0,
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  "+listen:3:0": 0,
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  "+listen:1:0": 0,
  _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
    return $._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, $.getRuntimeTypeArgument(this, this.$as_StreamImpl, 0));
  },
  _onListen$1: function(subscription) {
  },
  get$_onListen: function() {
    return new $.BoundClosure$1(this, "_onListen$1", null);
  },
  $asStream: null
},

"+_StreamImpl": 0,

_DelayedEvent: {
  "": function _DelayedEvent(next) {
    this.next = next;
  },
  "super": "Object",
  get$next: function() {
    return this.next;
  },
  set$next: function(v) {
    this.next = v;
  },
  next$1: function(arg0) {
    return this.next.call$1(arg0);
  }
},

"+_DelayedEvent": 0,

_DelayedData: {
  "": function _DelayedData(value, next) {
    this.value = value;
    this.next = next;
  },
  "super": "_DelayedEvent",
  get$value: function(receiver) {
    return this.value;
  },
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  },
  "+perform:1:0": 0,
  $as_DelayedEvent: null
},

"+_DelayedData": 0,

_DelayedError: {
  "": function _DelayedError(error, next) {
    this.error = error;
    this.next = next;
  },
  "super": "_DelayedEvent",
  get$error: function(receiver) {
    return this.error;
  },
  error$2: function($receiver, arg0, arg1) {
    return this.error.call$2(arg0, arg1);
  },
  perform$1: function(dispatch) {
    dispatch._sendError$1(this.error);
  }
},

"+_DelayedError": 0,

_DelayedDone: {
  "": function _DelayedDone() {
  },
  "super": "Object",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  "+next": 0,
  next$1: function(arg0) {
    return this.get$next().call$1(arg0);
  },
  set$next: function(_) {
    throw $.wrapException(new $.StateError("No events after a done."));
  },
  "+next=": 0
},

"+_DelayedDone": 0,

_PendingEvents: {
  "": function _PendingEvents(_state) {
    this._state = _state;
  },
  "super": "Object",
  get$_state: function() {
    return this._state;
  },
  set$_state: function(v) {
    this._state = v;
  },
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    $.get$_Zone__current().runAsync$1(new $._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  "+schedule:1:0": 0
},

"+_PendingEvents": 0,

_PendingEvents_schedule_closure: {
  "": function _PendingEvents_schedule_closure(this_0, dispatch_1) {
    this.this_0 = this_0;
    this.dispatch_1 = dispatch_1;
  },
  "super": "Closure",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1.get$_state();
    t1.set$_state(0);
    if ($.$eq(oldState, 3))
      return;
    t1.handleNext$1(this.dispatch_1);
  },
  $isFunction: true
},

"+_PendingEvents_schedule_closure": 0,

_StreamImplEvents: {
  "": function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state) {
    this.firstPendingEvent = firstPendingEvent;
    this.lastPendingEvent = lastPendingEvent;
    this._state = _state;
  },
  "super": "_PendingEvents",
  get$firstPendingEvent: function() {
    return this.firstPendingEvent;
  },
  set$firstPendingEvent: function(v) {
    this.firstPendingEvent = v;
  },
  get$lastPendingEvent: function() {
    return this.lastPendingEvent;
  },
  set$lastPendingEvent: function(v) {
    this.lastPendingEvent = v;
  },
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  },
  "+handleNext:1:0": 0
},

"+_StreamImplEvents": 0,

_AsBroadcastStream: {
  "": function _AsBroadcastStream(_source, _controller, _subscription) {
    this._source = _source;
    this._controller = _controller;
    this._subscription = _subscription;
  },
  "super": "Stream",
  get$_source: function() {
    return this._source;
  },
  get$_controller: function() {
    return this._controller;
  },
  set$_controller: function(v) {
    this._controller = v;
  },
  get$_subscription: function() {
    return this._subscription;
  },
  set$_subscription: function(v) {
    this._subscription = v;
  },
  get$isBroadcast: function() {
    return true;
  },
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1, t2, t3;
    t1 = this._controller;
    if (t1 == null)
      throw $.wrapException(new $.StateError("Source stream has been closed."));
    if (this._subscription == null) {
      t2 = t1.get$add(t1);
      t3 = t1.get$addError();
      this._subscription = this._source.listen$3$onDone$onError(t2, t1.get$close(t1), t3);
    }
    t1 = this._controller;
    t1.get$stream;
    t2 = $.getRuntimeTypeArgument(t1, t1.$as_BroadcastStreamController, 0);
    t1 = new $._BroadcastStream(t1);
    t1.$builtinTypeInfo = [t2];
    return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  _onCancel$0: function() {
    var subscription = this._subscription;
    this._subscription = null;
    this._controller = null;
    subscription.cancel$0();
  },
  get$_onCancel: function() {
    return new $.BoundClosure$0(this, "_onCancel$0", null);
  },
  $asStream: null
},

"+_AsBroadcastStream": 0,

_cancelAndError_closure: {
  "": function _cancelAndError_closure(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$1: function(error) {
    this.subscription_0.cancel$0();
    this.future_1._setError$1(error);
  },
  $isFunction: true
},

"+_cancelAndError_closure": 0,

_ForwardingStream: {
  "": function _ForwardingStream(_source) {
    this._source = _source;
  },
  "super": "Stream",
  get$_source: function() {
    return this._source;
  },
  get$isBroadcast: function() {
    return this._source.get$isBroadcast();
  },
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1, t2, t3, t4;
    if (onData == null)
      onData = $._nullDataHandler$closure;
    if (onError == null)
      onError = $._nullErrorHandler$closure;
    if (onDone == null)
      onDone = $._nullDoneHandler$closure;
    cancelOnError = true === cancelOnError;
    t1 = $.getRuntimeTypeArgument(this, this.$as_ForwardingStream, 0);
    t2 = $.getRuntimeTypeArgument(this, this.$as_ForwardingStream, 1);
    t3 = $.get$_Zone__current();
    t4 = cancelOnError ? 1 : 0;
    t4 = new $._ForwardingStreamSubscription(this, null, onData, onError, onDone, t3, t4, null);
    t4.$builtinTypeInfo = [t1, t2];
    t4._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t2);
    t1 = t4.get$_handleData();
    t2 = t4.get$_handleError();
    t4._subscription = t4._stream._source.listen$3$onDone$onError(t1, t4.get$_handleDone(), t2);
    return t4;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  _handleData$2: function(data, sink) {
    sink._liblib2$_add$1(sink, data);
  },
  "+_handleData:2:0": 0,
  $asStream: function (S, T) { return [T]; }
},

"+_ForwardingStream": 0,

_ForwardingStreamSubscription: {
  "": function _ForwardingStreamSubscription(_stream, _subscription, _liblib2$_onData, _onError, _onDone, _zone, _state, _pending) {
    this._stream = _stream;
    this._subscription = _subscription;
    this._liblib2$_onData = _liblib2$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._pending = _pending;
  },
  "super": "_BufferingStreamSubscription",
  get$_stream: function() {
    return this._stream;
  },
  get$_subscription: function() {
    return this._subscription;
  },
  set$_subscription: function(v) {
    this._subscription = v;
  },
  _liblib2$_add$1: function(_, data) {
    if (!$.$eq($.$and$n(this._state, 2), 0))
      return;
    $._BufferingStreamSubscription.prototype._liblib2$_add$1.call(this, this, data);
  },
  _addError$1: function(error) {
    if (!$.$eq($.$and$n(this._state, 2), 0))
      return;
    $._BufferingStreamSubscription.prototype._addError$1.call(this, error);
  },
  _onPause$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.pause$0(t1);
  },
  get$_onPause: function() {
    return new $.BoundClosure$0(this, "_onPause$0", null);
  },
  _onResume$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.resume$0();
  },
  get$_onResume: function() {
    return new $.BoundClosure$0(this, "_onResume$0", null);
  },
  _onCancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      this._subscription = null;
      t1.cancel$0();
    }
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  "+_handleData:1:0": 0,
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1", null);
  },
  _handleError$1: function(error) {
    this._addError$1(error);
  },
  "+_handleError:1:0": 0,
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1", null);
  },
  _handleDone$0: function() {
    this._subscription = null;
    this._close$0();
  },
  "+_handleDone:0:0": 0,
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0", null);
  },
  $as_BufferingStreamSubscription: function (S, T) { return [T]; }
},

"+_ForwardingStreamSubscription": 0,

_WhereStream: {
  "": function _WhereStream(_test, _source) {
    this._test = _test;
    this._source = _source;
  },
  "super": "_ForwardingStream",
  get$_test: function() {
    return this._test;
  },
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._addError$1($._asyncError(e, s));
      return;
    }

    if (satisfies === true)
      $._liblib2$_add$1$x(sink, inputEvent);
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
},

"+_WhereStream": 0,

_MapStream: {
  "": function _MapStream(_transform, _source) {
    this._transform = _transform;
    this._source = _source;
  },
  "super": "_ForwardingStream",
  get$_transform: function() {
    return this._transform;
  },
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._addError$1($._asyncError(e, s));
      return;
    }

    $._liblib2$_add$1$x(sink, outputEvent);
  },
  $as_ForwardingStream: null
},

"+_MapStream": 0,

_TakeStream: {
  "": function _TakeStream(_remaining, _source) {
    this._remaining = _remaining;
    this._source = _source;
  },
  "super": "_ForwardingStream",
  get$_remaining: function() {
    return this._remaining;
  },
  set$_remaining: function(v) {
    this._remaining = v;
  },
  _handleData$2: function(inputEvent, sink) {
    if (this._remaining > 0) {
      sink._liblib2$_add$1(sink, inputEvent);
      this._remaining = this._remaining - 1;
      if (this._remaining === 0)
        sink._close$0();
    }
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
},

"+_TakeStream": 0,

_SkipStream: {
  "": function _SkipStream(_remaining, _source) {
    this._remaining = _remaining;
    this._source = _source;
  },
  "super": "_ForwardingStream",
  get$_remaining: function() {
    return this._remaining;
  },
  set$_remaining: function(v) {
    this._remaining = v;
  },
  _handleData$2: function(inputEvent, sink) {
    var t1 = this._remaining;
    if (t1 > 0) {
      this._remaining = t1 - 1;
      return;
    }
    return sink._liblib2$_add$1(sink, inputEvent);
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
},

"+_SkipStream": 0,

_ZoneBase: {
  "": function _ZoneBase(_parentZone, _children, _openCallbacks, _isExecutingCallback) {
    this._parentZone = _parentZone;
    this._children = _children;
    this._openCallbacks = _openCallbacks;
    this._isExecutingCallback = _isExecutingCallback;
  },
  "super": "Object",
  get$_parentZone: function() {
    return this._parentZone;
  },
  get$_children: function(receiver) {
    return this._children;
  },
  get$_openCallbacks: function() {
    return this._openCallbacks;
  },
  set$_openCallbacks: function(v) {
    this._openCallbacks = v;
  },
  get$_isExecutingCallback: function() {
    return this._isExecutingCallback;
  },
  set$_isExecutingCallback: function(v) {
    this._isExecutingCallback = v;
  },
  get$_errorZone: function() {
    return this._parentZone.get$_errorZone();
  },
  "+_errorZone": 0,
  handleUncaughtError$1: function(error) {
    this._parentZone.handleUncaughtError$1(error);
  },
  "+handleUncaughtError:1:0": 0,
  expectCallback$0: function() {
    var t1 = this._openCallbacks;
    this._openCallbacks = t1 + 1;
    return t1;
  },
  "+expectCallback:0:0": 0,
  _dispose$0: function() {
  },
  "+_dispose:0:0": 0,
  _checkIfDone$0: function() {
    if (!this._isExecutingCallback && this._openCallbacks === 0 && this._children.length === 0)
      ;
  },
  "+_checkIfDone:0:0": 0,
  _runInZone$2: function(fun, handleUncaught) {
    var oldZone, oldIsExecuting, e, s, t1, exception;
    if ($.get$_Zone__current() === this && handleUncaught !== true && this._isExecutingCallback)
      return fun.call$0();
    oldZone = $.get$_Zone__current();
    $._Zone__current = this;
    oldIsExecuting = this._isExecutingCallback;
    this._isExecutingCallback = true;
    try {
      try {
        t1 = fun.call$0();
        return t1;
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        if (handleUncaught === true)
          this.handleUncaughtError$1($._asyncError(e, s));
        else
          throw exception;
      }

    } finally {
      this._isExecutingCallback = oldIsExecuting;
      $._Zone__current = oldZone;
      if (!this._isExecutingCallback)
        if (this._openCallbacks === 0)
          t1 = this._children.length === 0;
        else
          t1 = false;
      else
        t1 = false;
      if (t1)
        ;
    }
  },
  "+_runInZone:2:0": 0,
  runAsync$1: function(fun) {
    var t1, milliseconds;
    this._openCallbacks = this._openCallbacks + 1;
    t1 = $.get$_asyncCallbacks();
    t1._add$1(t1, new $._ZoneBase_runAsync_closure(this, fun));
    if (!$._callbacksAreEnqueued) {
      milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  "+runAsync:1:0": 0,
  _removeChild$1: function(child) {
    var t1, t2, i, t3;
    t1 = this._children;
    t2 = $.JSArray_methods.get$last(t1);
    if (t2 == null ? child == null : t2 === child) {
      $.JSArray_methods.set$length(t1, t1.length - 1);
      if (!this._isExecutingCallback && this._openCallbacks === 0 && t1.length === 0)
        ;
      return;
    }
    for (t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      if (t3 == null ? child == null : t3 === child) {
        t3 = t2 - 1;
        if (t3 < 0)
          throw $.ioore(t3);
        t1[i] = t1[t3];
        $.JSArray_methods.set$length(t1, t3);
        return;
      }
    }
    throw $.wrapException(new $.ArgumentError(child));
  },
  "+_removeChild:1:0": 0
},

"+_ZoneBase": 0,

_ZoneBase_runAsync_closure: {
  "": function _ZoneBase_runAsync_closure(this_0, fun_1) {
    this.this_0 = this_0;
    this.fun_1 = fun_1;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.get$_openCallbacks();
    if (typeof t2 !== "number")
      throw t2.$sub();
    t1.set$_openCallbacks(t2 - 1);
    t1._runInZone$2(this.fun_1, true);
  },
  $isFunction: true
},

"+_ZoneBase_runAsync_closure": 0,

_DefaultZone: {
  "": function _DefaultZone(_parentZone, _children, _openCallbacks, _isExecutingCallback) {
    this._parentZone = _parentZone;
    this._children = _children;
    this._openCallbacks = _openCallbacks;
    this._isExecutingCallback = _isExecutingCallback;
  },
  "super": "_ZoneBase",
  get$_errorZone: function() {
    return this;
  },
  handleUncaughtError$1: function(error) {
    var t1, milliseconds;
    t1 = $.get$_asyncCallbacks();
    t1._add$1(t1, new $._DefaultZone_handleUncaughtError_closure(error));
    if (!$._callbacksAreEnqueued) {
      milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  }
},

"+_DefaultZone": 0,

_DefaultZone_handleUncaughtError_closure: {
  "": function _DefaultZone_handleUncaughtError_closure(error_0) {
    this.error_0 = error_0;
  },
  "super": "Closure",
  call$0: function() {
    var t1, trace;
    t1 = this.error_0;
    $.Primitives_printString("Uncaught Error: " + $.S(t1));
    trace = $.getAttachedStackTrace(t1);
    $._attachStackTrace(t1, null);
    if (trace != null)
      $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
    throw $.wrapException(t1);
  },
  $isFunction: true
},

"+_DefaultZone_handleUncaughtError_closure": 0,

_ZoneTimer: {
  "": function _ZoneTimer(_zone, _liblib2$_callback, _timer, _isDone) {
    this._zone = _zone;
    this._liblib2$_callback = _liblib2$_callback;
    this._timer = _timer;
    this._isDone = _isDone;
  },
  "super": "Object",
  get$_zone: function() {
    return this._zone;
  },
  get$_liblib2$_callback: function() {
    return this._liblib2$_callback;
  },
  get$_timer: function() {
    return this._timer;
  },
  set$_timer: function(v) {
    this._timer = v;
  },
  get$_isDone: function() {
    return this._isDone;
  },
  set$_isDone: function(v) {
    this._isDone = v;
  },
  _liblib2$_callback$1: function(arg0) {
    return this._liblib2$_callback.call$1(arg0);
  },
  _run$0: function() {
    this._isDone = true;
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(this._liblib2$_callback, true);
  },
  "+_run:0:0": 0,
  get$_run: function() {
    return new $.BoundClosure$0(this, "_run$0", null);
  },
  cancel$0: function() {
    if (!this._isDone) {
      var t1 = this._zone;
      t1._openCallbacks = t1._openCallbacks - 1;
      if (!t1._isExecutingCallback && t1._openCallbacks === 0 && t1._children.length === 0)
        ;
    }
    this._isDone = true;
    this._timer.cancel$0();
  },
  _ZoneTimer$3: function(_zone, duration, _callback) {
    var t1, milliseconds;
    t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    t1 = this.get$_run();
    milliseconds = $.JSNumber_methods.$tdiv(duration._duration, 1000);
    this._timer = $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, t1);
  }
},

"+_ZoneTimer": 0,

_PeriodicZoneTimer: {
  "": function _PeriodicZoneTimer(_zone, _liblib2$_callback, _timer, _isDone) {
    this._zone = _zone;
    this._liblib2$_callback = _liblib2$_callback;
    this._timer = _timer;
    this._isDone = _isDone;
  },
  "super": "Object",
  get$_zone: function() {
    return this._zone;
  },
  get$_liblib2$_callback: function() {
    return this._liblib2$_callback;
  },
  get$_timer: function() {
    return this._timer;
  },
  set$_timer: function(v) {
    this._timer = v;
  },
  get$_isDone: function() {
    return this._isDone;
  },
  set$_isDone: function(v) {
    this._isDone = v;
  },
  _liblib2$_callback$1: function(arg0) {
    return this._liblib2$_callback.call$1(arg0);
  },
  _run$1: function(timer) {
    this._zone._runInZone$2(new $._PeriodicZoneTimer__run_closure(this), true);
  },
  "+_run:1:0": 0,
  get$_run: function() {
    return new $.BoundClosure$1(this, "_run$1", null);
  },
  cancel$0: function() {
    if (!this._isDone) {
      var t1 = this._zone;
      t1._openCallbacks = t1._openCallbacks - 1;
      if (!t1._isExecutingCallback && t1._openCallbacks === 0 && t1._children.length === 0)
        ;
    }
    this._isDone = true;
    this._timer.cancel$0();
  }
},

"+_PeriodicZoneTimer": 0,

_PeriodicZoneTimer__run_closure: {
  "": function _PeriodicZoneTimer__run_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    var t1 = this.this_0;
    t1._liblib2$_callback$1(t1);
  },
  $isFunction: true
},

"+_PeriodicZoneTimer__run_closure": 0,

_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

"+_attachStackTrace:2:0": 0,

getAttachedStackTrace: function(o) {
  var t1, values;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  values = $.Primitives_getProperty(o, "expando$values");
  return values == null ? null : $.Primitives_getProperty(values, t1._getKey$0());
},

"+getAttachedStackTrace:1:0": 0,

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), !$.$eq(t1._head, t1._tail);) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      $.unwrapException(exception);
      milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

"+_asyncRunCallback:0:0": 0,

Future_Future: function(computation, T) {
  var future, t1;
  future = new $._ThenFuture(new $.Future_Future_closure(computation), null, 0, $.get$_Zone__current(), null);
  future.$builtinTypeInfo = [null, T];
  t1 = future._zone;
  t1._openCallbacks = t1._openCallbacks + 1;
  $.get$_Zone__current().runAsync$1(new $.Future_Future_closure0(future));
  return future;
},

"+new Future:1:0": 0,

_FutureImpl__FutureImpl$wait: function(futures, T) {
  var t1, t2, t3, t4, future, pos, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  t3 = $.getRuntimeTypeArgument(futures, futures.$asJSArray, 0);
  t4 = new $.ListIterator(futures, futures.length, 0, null);
  t4.$builtinTypeInfo = [t3];
  for (; t4.moveNext$0();) {
    future = t4._liblib$_current;
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0)) {
    t1 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t1.$builtinTypeInfo = [null];
    t1._state = 4;
    t1._resultOrListeners = $.List_empty;
    return t1;
  }
  t1.values_1 = $.List_List(t1.remaining_2, null);
  t2 = $.JSArray;
  t3 = new $._FutureImpl(0, $.get$_Zone__current(), null);
  t3.$builtinTypeInfo = [t2];
  completer = new $._AsyncCompleter(t3, false);
  completer.$builtinTypeInfo = [t2];
  t2 = completer.future._zone;
  t2._openCallbacks = t2._openCallbacks + 1;
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

"+new _FutureImpl$wait:1:0": 0,

_runGuarded: function(notificationHandler) {
  var e, s, exception, t1;
  if (notificationHandler == null)
    return;
  try {
    notificationHandler.call$0();
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = $.getTraceFromException(exception);
    $.get$_Zone__current().handleUncaughtError$1($._asyncError(e, s));
  }

},

"+_runGuarded:1:0": 0,

_ControllerStream$: function(_controller, T) {
  var t1 = new $._ControllerStream(_controller, false);
  t1.$builtinTypeInfo = [T];
  return t1;
},

"+new _ControllerStream:1:0": 0,

_BufferingStreamSubscription$: function(_onData, _onError, _onDone, cancelOnError, T) {
  var t1, t2;
  t1 = $.get$_Zone__current();
  t2 = cancelOnError ? 1 : 0;
  t2 = new $._BufferingStreamSubscription(_onData, _onError, _onDone, t1, t2, null);
  t2.$builtinTypeInfo = [T];
  t2._BufferingStreamSubscription$4(_onData, _onError, _onDone, cancelOnError, T);
  return t2;
},

"+new _BufferingStreamSubscription:4:0": 0,

_nullDataHandler: function(value) {
},

"+_nullDataHandler:1:0": 0,

_nullErrorHandler: function(error) {
  $.get$_Zone__current().handleUncaughtError$1(error);
},

"+_nullErrorHandler:1:0": 0,

_nullDoneHandler: function() {
},

"+_nullDoneHandler:0:0": 0,

_DelayedData$: function(value, T) {
  var t1 = new $._DelayedData(value, null);
  t1.$builtinTypeInfo = [T];
  return t1;
},

"+new _DelayedData:1:0": 0,

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
},

"+_asyncError:2:0": 0,

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = $.getTraceFromException(exception);
    onError.call$1($._asyncError(e, s));
  }

},

"+_runUserCode:3:0": 0,

_cancelAndError: function(subscription, future) {
  return new $._cancelAndError_closure(subscription, future);
},

"+_cancelAndError:2:0": 0,

_createTimer: function(duration, callback) {
  var milliseconds = $.JSNumber_methods.$tdiv(duration._duration, 1000);
  return $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

"+_createTimer:2:0": 0,

_createPeriodicTimer: function(duration, callback) {
  var milliseconds = $.JSNumber_methods.$tdiv(duration._duration, 1000);
  return $.TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
},

"+_createPeriodicTimer:2:0": 0,

_ZoneTimer$: function(_zone, duration, _callback) {
  var t1, t2, milliseconds;
  t1 = new $._ZoneTimer(_zone, _callback, null, false);
  t2 = t1._zone;
  t2._openCallbacks = t2._openCallbacks + 1;
  t2 = t1.get$_run();
  milliseconds = $.JSNumber_methods.$tdiv(duration._duration, 1000);
  t1._timer = $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, t2);
  return t1;
},

"+new _ZoneTimer:3:0": 0}],
["dart.collection", "dart:collection", , {
HashMap_values_closure: {
  "": function HashMap_values_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true
},

"+HashMap_values_closure": 0,

HashMap_addAll_closure: {
  "": function HashMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  },
  $isFunction: true
},

"+HashMap_addAll_closure": 0,

HashMapKeyIterable: {
  "": function HashMapKeyIterable(_map) {
    this._map = _map;
  },
  "super": "IterableBase",
  get$_map: function() {
    return this._map;
  },
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib0$_length === 0;
  },
  get$iterator: function(_) {
    var t1, t2, t3;
    t1 = this._map;
    t2 = t1._computeKeys$0();
    t3 = $.getRuntimeTypeArgument(this, this.$asHashMapKeyIterable, 0);
    t2 = new $.HashMapKeyIterator(t1, t2, 0, null);
    t2.$builtinTypeInfo = [t3];
    return t2;
  },
  contains$1: function(_, element) {
    return this._map.containsKey$1(element);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.wrapException(new $.ConcurrentModificationError(t1));
    }
  },
  $asIterableBase: null,
  $asIterable: null
},

"+HashMapKeyIterable": 0,

HashMapKeyIterator: {
  "": function HashMapKeyIterator(_map, _keys, _offset, _liblib0$_current) {
    this._map = _map;
    this._keys = _keys;
    this._offset = _offset;
    this._liblib0$_current = _liblib0$_current;
  },
  "super": "Object",
  get$_map: function() {
    return this._map;
  },
  get$_keys: function() {
    return this._keys;
  },
  get$_offset: function() {
    return this._offset;
  },
  set$_offset: function(v) {
    this._offset = v;
  },
  get$_liblib0$_current: function() {
    return this._liblib0$_current;
  },
  set$_liblib0$_current: function(v) {
    this._liblib0$_current = v;
  },
  get$current: function() {
    return this._liblib0$_current;
  },
  current$0: function() {
    return this.get$current().call$0();
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else if (offset >= keys.length) {
      this._liblib0$_current = null;
      return false;
    } else {
      this._liblib0$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

"+HashMapKeyIterator": 0,

LinkedHashMap_values_closure: {
  "": function LinkedHashMap_values_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true
},

"+LinkedHashMap_values_closure": 0,

LinkedHashMap_addAll_closure: {
  "": function LinkedHashMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  },
  $isFunction: true
},

"+LinkedHashMap_addAll_closure": 0,

LinkedHashMapCell: {
  "": function LinkedHashMapCell(_key, _value, _next, _previous) {
    this._key = _key;
    this._value = _value;
    this._next = _next;
    this._previous = _previous;
  },
  "super": "Object",
  get$_key: function() {
    return this._key;
  },
  get$_value: function() {
    return this._value;
  },
  set$_value: function(v) {
    this._value = v;
  },
  get$_next: function() {
    return this._next;
  },
  set$_next: function(v) {
    this._next = v;
  },
  get$_previous: function() {
    return this._previous;
  },
  set$_previous: function(v) {
    this._previous = v;
  }
},

"+LinkedHashMapCell": 0,

LinkedHashMapKeyIterable: {
  "": function LinkedHashMapKeyIterable(_map) {
    this._map = _map;
  },
  "super": "IterableBase",
  get$_map: function() {
    return this._map;
  },
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib0$_length === 0;
  },
  get$iterator: function(_) {
    var t1, t2, t3;
    t1 = this._map;
    t2 = t1._modifications;
    t3 = $.getRuntimeTypeArgument(this, this.$asLinkedHashMapKeyIterable, 0);
    t2 = new $.LinkedHashMapKeyIterator(t1, t2, null, null);
    t2.$builtinTypeInfo = [t3];
    t2._cell = t2._map._first;
    return t2;
  },
  contains$1: function(_, element) {
    return this._map.containsKey$1(element);
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications, t2;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (t2 = $.getInterceptor(modifications); cell != null;) {
      f.call$1(cell.get$_key());
      if (!t2.$eq(modifications, t1._modifications))
        throw $.wrapException(new $.ConcurrentModificationError(t1));
      cell = cell.get$_next();
    }
  },
  $asIterableBase: null,
  $asIterable: null
},

"+LinkedHashMapKeyIterable": 0,

LinkedHashMapKeyIterator: {
  "": function LinkedHashMapKeyIterator(_map, _modifications, _cell, _liblib0$_current) {
    this._map = _map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._liblib0$_current = _liblib0$_current;
  },
  "super": "Object",
  get$_map: function() {
    return this._map;
  },
  get$_modifications: function() {
    return this._modifications;
  },
  get$_cell: function() {
    return this._cell;
  },
  set$_cell: function(v) {
    this._cell = v;
  },
  get$_liblib0$_current: function() {
    return this._liblib0$_current;
  },
  set$_liblib0$_current: function(v) {
    this._liblib0$_current = v;
  },
  get$current: function() {
    return this._liblib0$_current;
  },
  current$0: function() {
    return this.get$current().call$0();
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (!$.$eq(this._modifications, t1._modifications))
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib0$_current = null;
        return false;
      } else {
        this._liblib0$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

"+LinkedHashMapKeyIterator": 0,

HashSetIterator: {
  "": function HashSetIterator(_set, _elements, _offset, _liblib0$_current) {
    this._set = _set;
    this._elements = _elements;
    this._offset = _offset;
    this._liblib0$_current = _liblib0$_current;
  },
  "super": "Object",
  get$_set: function() {
    return this._set;
  },
  get$_elements: function() {
    return this._elements;
  },
  get$_offset: function() {
    return this._offset;
  },
  set$_offset: function(v) {
    this._offset = v;
  },
  get$_liblib0$_current: function() {
    return this._liblib0$_current;
  },
  set$_liblib0$_current: function(v) {
    this._liblib0$_current = v;
  },
  get$current: function() {
    return this._liblib0$_current;
  },
  current$0: function() {
    return this.get$current().call$0();
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else if (offset >= elements.length) {
      this._liblib0$_current = null;
      return false;
    } else {
      this._liblib0$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

"+HashSetIterator": 0,

LinkedHashSetCell: {
  "": function LinkedHashSetCell(_liblib0$_element, _next, _previous) {
    this._liblib0$_element = _liblib0$_element;
    this._next = _next;
    this._previous = _previous;
  },
  "super": "Object",
  get$_liblib0$_element: function() {
    return this._liblib0$_element;
  },
  get$_next: function() {
    return this._next;
  },
  set$_next: function(v) {
    this._next = v;
  },
  get$_previous: function() {
    return this._previous;
  },
  set$_previous: function(v) {
    this._previous = v;
  }
},

"+LinkedHashSetCell": 0,

LinkedHashSetIterator: {
  "": function LinkedHashSetIterator(_set, _modifications, _cell, _liblib0$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._liblib0$_current = _liblib0$_current;
  },
  "super": "Object",
  get$_set: function() {
    return this._set;
  },
  get$_modifications: function() {
    return this._modifications;
  },
  get$_cell: function() {
    return this._cell;
  },
  set$_cell: function(v) {
    this._cell = v;
  },
  get$_liblib0$_current: function() {
    return this._liblib0$_current;
  },
  set$_liblib0$_current: function(v) {
    this._liblib0$_current = v;
  },
  get$current: function() {
    return this._liblib0$_current;
  },
  current$0: function() {
    return this.get$current().call$0();
  },
  moveNext$0: function() {
    var t1 = this._set;
    if (!$.$eq(this._modifications, t1._modifications))
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib0$_current = null;
        return false;
      } else {
        this._liblib0$_current = t1.get$_liblib0$_element();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

"+LinkedHashSetIterator": 0,

UnmodifiableListView: {
  "": function UnmodifiableListView(_liblib0$_source) {
    this._liblib0$_source = _liblib0$_source;
  },
  "super": "UnmodifiableListBase",
  get$_liblib0$_source: function() {
    return this._liblib0$_source;
  },
  get$length: function(_) {
    return this._liblib0$_source.length;
  },
  $index: function(_, index) {
    var t1 = this._liblib0$_source;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $asUnmodifiableListBase: null,
  $asList: null,
  $asIterable: null
},

"+UnmodifiableListView": 0,

HashMap: {
  "": function HashMap(_liblib0$_length, _strings, _nums, _rest, _keys) {
    this._liblib0$_length = _liblib0$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  },
  "super": "Object",
  get$_liblib0$_length: function() {
    return this._liblib0$_length;
  },
  set$_liblib0$_length: function(v) {
    this._liblib0$_length = v;
  },
  get$_strings: function() {
    return this._strings;
  },
  set$_strings: function(v) {
    this._strings = v;
  },
  get$_nums: function() {
    return this._nums;
  },
  set$_nums: function(v) {
    this._nums = v;
  },
  get$_rest: function() {
    return this._rest;
  },
  set$_rest: function(v) {
    this._rest = v;
  },
  get$_keys: function() {
    return this._keys;
  },
  set$_keys: function(v) {
    this._keys = v;
  },
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return this._liblib0$_length !== 0;
  },
  get$keys: function() {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, this.$asHashMap, 0);
    t2 = new $.HashMapKeyIterable(this);
    t2.$builtinTypeInfo = [t1];
    return t2;
  },
  get$values: function(_) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, this.$asHashMap, 0);
    t2 = new $.HashMapKeyIterable(this);
    t2.$builtinTypeInfo = [t1];
    t1 = $.getRuntimeTypeArgument(t2, t2.$asIterableBase, 0);
    t2 = new $.MappedIterable(t2, new $.HashMap_values_closure(this));
    t2.$builtinTypeInfo = [t1, null];
    return t2;
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.HashMap_addAll_closure(this));
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib0$_length = this._liblib0$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib0$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  "+_computeKeys:0:0": 0,
  _removeHashTableEntry$2: function(table, key) {
    var entry, value;
    if (table != null && table[key] != null) {
      entry = table[key];
      value = entry === table ? null : entry;
      delete table[key];
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  "+_removeHashTableEntry:2:0": 0,
  $isMap: true
},

"+HashMap": 0,

_HashSetBase: {
  "": function _HashSetBase() {
  },
  "super": "IterableBase",
  union$1: function(_, other) {
    var t1 = this._newSet$0();
    t1.addAll$1(t1, this);
    t1.addAll$1(t1, other);
    return t1;
  },
  "+union:1:0": 0,
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(this, result, $.List_List($, null));
    return result._contents;
  },
  $asIterableBase: null,
  $asIterable: null,
  $isIterable: true
},

"+_HashSetBase": 0,

HashSet: {
  "": function HashSet(_liblib0$_length, _strings, _nums, _rest, _elements) {
    this._liblib0$_length = _liblib0$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  },
  "super": "_HashSetBase",
  get$_liblib0$_length: function() {
    return this._liblib0$_length;
  },
  set$_liblib0$_length: function(v) {
    this._liblib0$_length = v;
  },
  get$_strings: function() {
    return this._strings;
  },
  set$_strings: function(v) {
    this._strings = v;
  },
  get$_nums: function() {
    return this._nums;
  },
  set$_nums: function(v) {
    this._nums = v;
  },
  get$_rest: function() {
    return this._rest;
  },
  set$_rest: function(v) {
    this._rest = v;
  },
  get$_elements: function() {
    return this._elements;
  },
  set$_elements: function(v) {
    this._elements = v;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._computeElements$0();
    t2 = $.getRuntimeTypeArgument(this, this.$asHashSet, 0);
    t1 = new $.HashSetIterator(this, t1, 0, null);
    t1.$builtinTypeInfo = [t2];
    return t1;
  },
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return this._liblib0$_length !== 0;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashSet__findBucketIndex(rest[$.get$hashCode$(object) & 0x3ffffff], object) >= 0;
    }
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(element) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if ($.HashSet__findBucketIndex(bucket, element) >= 0)
          return;
        bucket.push(element);
      }
      this._liblib0$_length = this._liblib0$_length + 1;
      this._elements = null;
    }
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = $.get$iterator$ax(objects); t1.moveNext$0() === true;)
      this.add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[$.get$hashCode$(object) & 0x3ffffff];
      index = $.HashSet__findBucketIndex(bucket, object);
      if (index < 0)
        return false;
      this._liblib0$_length = this._liblib0$_length - 1;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    }
  },
  removeAll$1: function(objectsToRemove) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(objectsToRemove, objectsToRemove.$asJSArray, 0);
    t2 = new $.ListIterator(objectsToRemove, objectsToRemove.length, 0, null);
    t2.$builtinTypeInfo = [t1];
    for (; t2.moveNext$0();)
      this.remove$1(this, t2._liblib$_current);
  },
  _newSet$0: function() {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, this.$asHashSet, 0);
    t2 = new $.HashSet(0, null, null, null, null);
    t2.$builtinTypeInfo = [t1];
    return t2;
  },
  "+_newSet:0:0": 0,
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib0$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  "+_computeElements:0:0": 0,
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return;
    table[element] = 0;
    this._liblib0$_length = this._liblib0$_length + 1;
    this._elements = null;
  },
  "+_addHashTableEntry:2:0": 0,
  _removeHashTableEntry$2: function(table, element) {
    if (table != null && table[element] != null) {
      delete table[element];
      this._liblib0$_length = this._liblib0$_length - 1;
      this._elements = null;
      return true;
    } else
      return false;
  },
  $as_HashSetBase: null,
  $asIterable: null
},

"+HashSet": 0,

IterableBase: {
  "": function IterableBase() {
  },
  "super": "Object",
  map$1: function(_, f) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, this.$asIterableBase, 0);
    t2 = new $.MappedIterable(this, f);
    t2.$builtinTypeInfo = [t1, null];
    return t2;
  },
  where$1: function(_, f) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, this.$asIterableBase, 0);
    t2 = new $.WhereIterable(this, f);
    t2.$builtinTypeInfo = [t1];
    return t2;
  },
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      if ($.$eq(t1.get$current(), element))
        return true;
    return false;
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  fold$2: function(_, initialValue, combine) {
    var t1, value;
    for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0() === true;)
      value = combine.call$2(value, t1.get$current());
    return value;
  },
  join$1: function(_, separator) {
    var iterator, buffer, t1;
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = new $.StringBuffer("");
    buffer._contents = "";
    if (separator === "")
      do {
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      buffer._contents = buffer._contents + t1;
      for (; iterator.moveNext$0() === true;) {
        buffer._contents = buffer._contents + separator;
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      }
    }
    return buffer._contents;
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  get$isNotEmpty: function(_) {
    return this.get$isEmpty(this) !== true;
  },
  skip$1: function(_, n) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, this.$asIterableBase, 0);
    t2 = new $.SkipIterable(this, n);
    t2.$builtinTypeInfo = [t1];
    t1 = t2._skipCount;
    if (typeof t1 !== "number" || Math.floor(t1) !== t1 || $.$lt$n(t1, 0) === true)
      $.throwExpression(new $.RangeError(t1));
    return t2;
  },
  get$first: function(_) {
    var it = this.get$iterator(this);
    if (it.moveNext$0() !== true)
      throw $.wrapException(new $.StateError("No elements"));
    return it.get$current();
  },
  get$single: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (it.moveNext$0() !== true)
      throw $.wrapException(new $.StateError("No elements"));
    result = it.get$current();
    if (it.moveNext$0() === true)
      throw $.wrapException(new $.StateError("More than one element"));
    return result;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = $.getInterceptor(remaining);
      if (t2.$eq(remaining, 0))
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  $isIterable: true,
  $asIterable: null
},

"+IterableBase": 0,

LinkedHashMap: {
  "": function LinkedHashMap(_liblib0$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._liblib0$_length = _liblib0$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  },
  "super": "Object",
  get$_liblib0$_length: function() {
    return this._liblib0$_length;
  },
  set$_liblib0$_length: function(v) {
    this._liblib0$_length = v;
  },
  get$_strings: function() {
    return this._strings;
  },
  set$_strings: function(v) {
    this._strings = v;
  },
  get$_nums: function() {
    return this._nums;
  },
  set$_nums: function(v) {
    this._nums = v;
  },
  get$_rest: function() {
    return this._rest;
  },
  set$_rest: function(v) {
    this._rest = v;
  },
  get$_first: function() {
    return this._first;
  },
  set$_first: function(v) {
    this._first = v;
  },
  get$_last: function() {
    return this._last;
  },
  set$_last: function(v) {
    this._last = v;
  },
  get$_modifications: function() {
    return this._modifications;
  },
  set$_modifications: function(v) {
    this._modifications = v;
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.LinkedHashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.LinkedHashMap_addAll_closure(this));
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications, t1;
    cell = this._first;
    modifications = this._modifications;
    for (t1 = $.getInterceptor(modifications); cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (!t1.$eq(modifications, this._modifications))
        throw $.wrapException(new $.ConcurrentModificationError(this));
      cell = cell.get$_next();
    }
  },
  get$keys: function() {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, this.$asLinkedHashMap, 0);
    t2 = new $.LinkedHashMapKeyIterable(this);
    t2.$builtinTypeInfo = [t1];
    return t2;
  },
  get$values: function(_) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, this.$asLinkedHashMap, 0);
    t2 = new $.LinkedHashMapKeyIterable(this);
    t2.$builtinTypeInfo = [t1];
    t1 = $.getRuntimeTypeArgument(t2, t2.$asIterableBase, 0);
    t2 = new $.MappedIterable(t2, new $.LinkedHashMap_values_closure(this));
    t2.$builtinTypeInfo = [t1, null];
    return t2;
  },
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return this._liblib0$_length !== 0;
  },
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  "+_addHashTableEntry:3:0": 0,
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new $.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._liblib0$_length = this._liblib0$_length + 1;
    this._modifications = $.$and$n($.$add$ns(this._modifications, 1), 67108863);
    return cell;
  },
  "+_newLinkedCell:2:0": 0,
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._liblib0$_length = this._liblib0$_length - 1;
    this._modifications = $.$and$n($.$add$ns(this._modifications, 1), 67108863);
  },
  "+_unlinkCell:1:0": 0,
  $isMap: true
},

"+LinkedHashMap": 0,

LinkedHashSet: {
  "": function LinkedHashSet(_liblib0$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._liblib0$_length = _liblib0$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  },
  "super": "_HashSetBase",
  get$_liblib0$_length: function() {
    return this._liblib0$_length;
  },
  set$_liblib0$_length: function(v) {
    this._liblib0$_length = v;
  },
  get$_strings: function() {
    return this._strings;
  },
  set$_strings: function(v) {
    this._strings = v;
  },
  get$_nums: function() {
    return this._nums;
  },
  set$_nums: function(v) {
    this._nums = v;
  },
  get$_rest: function() {
    return this._rest;
  },
  set$_rest: function(v) {
    this._rest = v;
  },
  get$_first: function() {
    return this._first;
  },
  set$_first: function(v) {
    this._first = v;
  },
  get$_last: function() {
    return this._last;
  },
  set$_last: function(v) {
    this._last = v;
  },
  get$_modifications: function() {
    return this._modifications;
  },
  set$_modifications: function(v) {
    this._modifications = v;
  },
  get$iterator: function(_) {
    var t1 = new $.LinkedHashSetIterator(this, this._modifications, null, null);
    t1.$builtinTypeInfo = [null];
    t1._cell = t1._set._first;
    return t1;
  },
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return this._liblib0$_length !== 0;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.LinkedHashSet__findBucketIndex(rest[$.get$hashCode$(object) & 0x3ffffff], object) >= 0;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications, t1;
    cell = this._first;
    modifications = this._modifications;
    for (t1 = $.getInterceptor(modifications); cell != null;) {
      action.call$1(cell.get$_liblib0$_element());
      if (!t1.$eq(modifications, this._modifications))
        throw $.wrapException(new $.ConcurrentModificationError(this));
      cell = cell.get$_next();
    }
  },
  get$first: function(_) {
    var t1 = this._first;
    if (t1 == null)
      throw $.wrapException(new $.StateError("No elements"));
    return t1.get$_liblib0$_element();
  },
  get$single: function(_) {
    var t1, message;
    t1 = this._liblib0$_length;
    if (t1 === 1) {
      t1 = this._first;
      if (t1 == null)
        $.throwExpression(new $.StateError("No elements"));
      return t1.get$_liblib0$_element();
    }
    message = t1 === 0 ? "No Elements" : "Too many elements";
    throw $.wrapException(new $.StateError(message));
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(element) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if ($.LinkedHashSet__findBucketIndex(bucket, element) >= 0)
          return;
        bucket.push(this._newLinkedCell$1(element));
      }
    }
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = $.get$iterator$ax(objects); t1.moveNext$0() === true;)
      this.add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[$.get$hashCode$(object) & 0x3ffffff];
      index = $.LinkedHashSet__findBucketIndex(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    }
  },
  removeAll$1: function(objectsToRemove) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(objectsToRemove, objectsToRemove.$asJSArray, 0);
    t2 = new $.ListIterator(objectsToRemove, objectsToRemove.length, 0, null);
    t2.$builtinTypeInfo = [t1];
    for (; t2.moveNext$0();)
      this.remove$1(this, t2._liblib$_current);
  },
  _newSet$0: function() {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, this.$asLinkedHashSet, 0);
    t2 = new $.LinkedHashSet(0, null, null, null, null, null, 0);
    t2.$builtinTypeInfo = [t1];
    return t2;
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return;
    table[element] = this._newLinkedCell$1(element);
  },
  _removeHashTableEntry$2: function(table, element) {
    var cell;
    if (table == null)
      return false;
    cell = table[element];
    if (cell == null)
      return false;
    this._unlinkCell$1(cell);
    delete table[element];
    return true;
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = new $.LinkedHashSetCell(element, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._liblib0$_length = this._liblib0$_length + 1;
    this._modifications = $.$and$n($.$add$ns(this._modifications, 1), 67108863);
    return cell;
  },
  "+_newLinkedCell:1:0": 0,
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._liblib0$_length = this._liblib0$_length - 1;
    this._modifications = $.$and$n($.$add$ns(this._modifications, 1), 67108863);
  },
  $as_HashSetBase: null,
  $asIterable: null
},

"+LinkedHashSet": 0,

ListBase: {
  "": function ListBase() {
  },
  "super": "Object+ListMixin",
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

"+ListBase": 0,

ListMixin: {
  "": function ListMixin() {
  },
  "super": "Object",
  get$iterator: function(receiver) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0);
    t2 = new $.ListIterator(receiver, this.get$length(receiver), 0, null);
    t2.$builtinTypeInfo = [t1];
    return t2;
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.forEach$1$bailout(1, action, receiver);
    $length = receiver.length;
    for (i = 0; i < $length; ++i) {
      if (i >= receiver.length)
        throw $.ioore(i);
      action.call$1(receiver[i]);
      if ($length !== receiver.length)
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw $.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  get$isEmpty: function(receiver) {
    var t1 = this.get$length(receiver);
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$eq(t1, 0);
  },
  get$isNotEmpty: function(receiver) {
    return !this.get$isEmpty(receiver);
  },
  get$first: function(receiver) {
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException(new $.StateError("No elements"));
    return this.$index(receiver, 0);
  },
  get$last: function(receiver) {
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException(new $.StateError("No elements"));
    return this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
  },
  get$single: function(receiver) {
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException(new $.StateError("No elements"));
    if ($.$gt$n(this.get$length(receiver), 1) === true)
      throw $.wrapException(new $.StateError("Too many elements"));
    return this.$index(receiver, 0);
  },
  contains$1: function(receiver, element) {
    var $length, t1, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.contains$1$bailout(1, element, receiver);
    $length = receiver.length;
    for (t1 = $length !== $length, i = 0; i < $length; ++i) {
      if (receiver[i] === element)
        return true;
      if (t1)
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
    return false;
  },
  contains$1$bailout: function(state0, element, receiver) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw $.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      if ($.$eq(this.$index(receiver, i), element))
        return true;
      if ($length !== this.get$length(receiver))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
    return false;
  },
  join$1: function(receiver, separator) {
    var $length, first, buffer, i, str;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.join$1$bailout(1, separator, receiver);
    $length = receiver.length;
    if (separator.length !== 0) {
      if ($length === 0)
        return "";
      if (0 >= $length)
        throw $.ioore(0);
      first = $.S(receiver[0]);
      if ($length !== receiver.length)
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
      buffer = new $.StringBuffer("");
      buffer._contents = first;
      for (i = 1; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        if (i >= receiver.length)
          throw $.ioore(i);
        str = receiver[i];
        str = $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== receiver.length)
          throw $.wrapException(new $.ConcurrentModificationError(receiver));
      }
      return buffer._contents;
    } else {
      buffer = new $.StringBuffer("");
      buffer._contents = "";
      for (i = 0; i < $length; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        str = receiver[i];
        str = $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== receiver.length)
          throw $.wrapException(new $.ConcurrentModificationError(receiver));
      }
      return buffer._contents;
    }
  },
  join$1$bailout: function(state0, separator, receiver) {
    var $length, t1, first, buffer, i, str;
    $length = this.get$length(receiver);
    if (separator.length !== 0) {
      t1 = $.getInterceptor($length);
      if (t1.$eq($length, 0))
        return "";
      first = $.S(this.$index(receiver, 0));
      if (!t1.$eq($length, this.get$length(receiver)))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
      buffer = new $.StringBuffer("");
      buffer._contents = first;
      if (typeof $length !== "number")
        throw $.iae($length);
      i = 1;
      for (; i < $length; ++i) {
        buffer._contents = buffer._contents + separator;
        str = this.$index(receiver, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(receiver))
          throw $.wrapException(new $.ConcurrentModificationError(receiver));
      }
      return buffer._contents;
    } else {
      buffer = new $.StringBuffer("");
      buffer._contents = "";
      if (typeof $length !== "number")
        throw $.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        str = this.$index(receiver, i);
        str = typeof str === "string" ? str : $.S(str);
        buffer._contents = buffer._contents + str;
        if ($length !== this.get$length(receiver))
          throw $.wrapException(new $.ConcurrentModificationError(receiver));
      }
      return buffer._contents;
    }
  },
  where$1: function(receiver, test) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0);
    t2 = new $.WhereIterable(receiver, test);
    t2.$builtinTypeInfo = [t1];
    return t2;
  },
  map$1: function(receiver, f) {
    var t1 = new $.MappedListIterable(receiver, f);
    t1.$builtinTypeInfo = [null, null];
    return t1;
  },
  fold$2: function(receiver, initialValue, combine) {
    var $length, value, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.fold$2$bailout(1, initialValue, combine, receiver);
    $length = receiver.length;
    for (value = initialValue, i = 0; i < $length; ++i) {
      if (i >= receiver.length)
        throw $.ioore(i);
      value = combine.call$2(value, receiver[i]);
      if ($length !== receiver.length)
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
    return value;
  },
  fold$2$bailout: function(state0, initialValue, combine, receiver) {
    var $length, value, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw $.iae($length);
    value = initialValue;
    i = 0;
    for (; i < $length; ++i) {
      value = combine.call$2(value, this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
    return value;
  },
  skip$1: function(receiver, count) {
    return $.SubListIterable$(receiver, count, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    var result, t1, t2, i, t3;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.toList$1$growable$bailout(1, growable, receiver);
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0));
      t1 = $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0);
      result.$builtinTypeInfo = [t1];
      $.JSArray_methods.set$length(result, receiver.length);
    } else {
      result = $.List_List(receiver.length, $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0));
      t1 = $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0);
      result.$builtinTypeInfo = [t1];
    }
    for (t1 = receiver.length, t2 = result.length, i = 0; i < t1; ++i) {
      t3 = receiver[i];
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  },
  toList$1$growable$bailout: function(state0, growable, receiver) {
    var result, t1, i;
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0));
      t1 = $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0);
      result.$builtinTypeInfo = [t1];
      $.JSArray_methods.set$length(result, this.get$length(receiver));
    } else {
      result = $.List_List(this.get$length(receiver), $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0));
      t1 = $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0);
      result.$builtinTypeInfo = [t1];
    }
    i = 0;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, element, receiver, t1);
    this.set$length(receiver, t1 + 1);
    this.$indexSet(receiver, t1, element);
  },
  add$1$bailout: function(state0, element, receiver, t1) {
    this.set$length(receiver, $.$add$ns(t1, 1));
    this.$indexSet(receiver, t1, element);
  },
  addAll$1: function(receiver, iterable) {
    var t1, element, t2;
    for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = this.get$length(receiver);
      this.set$length(receiver, $.$add$ns(t2, 1));
      this.$indexSet(receiver, t2, element);
    }
  },
  remove$1: function(receiver, element) {
    var t1, i, t2;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.remove$1$bailout(1, element, receiver);
    for (t1 = receiver.length, i = 0; i < t1; ++i)
      if (receiver[i] === element) {
        t2 = t1 - 1;
        this.setRange$4(receiver, i, t2, receiver, i + 1);
        this.set$length(receiver, t2);
        return true;
      }
    return false;
  },
  remove$1$bailout: function(state0, element, receiver) {
    var i, t1;
    i = 0;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i < t1))
        break;
      if ($.$eq(this.$index(receiver, i), element)) {
        this.setRange$4(receiver, i, $.$sub$n(this.get$length(receiver), 1), receiver, i + 1);
        this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
        return true;
      }
      ++i;
    }
    return false;
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  removeLast$0: function(receiver) {
    var result;
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException(new $.StateError("No elements"));
    result = this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
    this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
    return result;
  },
  _rangeCheck$2: function(receiver, start, end) {
    var t1 = $.getInterceptor$n(start);
    if (t1.$lt(start, 0) === true || t1.$gt(start, this.get$length(receiver)) === true) {
      t1 = this.get$length(receiver);
      throw $.wrapException(new $.RangeError("value " + $.S(start) + " not in range 0.." + $.S(t1)));
    }
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) === true || t1.$gt(end, this.get$length(receiver)) === true) {
      t1 = this.get$length(receiver);
      throw $.wrapException(new $.RangeError("value " + $.S(end) + " not in range " + $.S(start) + ".." + $.S(t1)));
    }
  },
  "+_rangeCheck:2:0": 0,
  removeRange$2: function(receiver, start, end) {
    var $length;
    this._rangeCheck$2(receiver, start, end);
    $length = $.$sub$n(end, start);
    this.setRange$4(receiver, start, $.$sub$n(this.get$length(receiver), $length), receiver, end);
    this.set$length(receiver, $.$sub$n(this.get$length(receiver), $length));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var $length, otherStart, otherList, i, t1;
    if (typeof start !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (typeof end !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (typeof iterable !== "string" && (typeof iterable !== "object" || iterable === null || iterable.constructor !== Array && !$.isJsIndexable(iterable, iterable[$.dispatchPropertyName])))
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (typeof skipCount !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw $.wrapException(new $.ArgumentError(skipCount));
    otherStart = skipCount;
    otherList = iterable;
    if (otherStart + $length > otherList.length)
      throw $.wrapException(new $.StateError("Not enough elements"));
    if (otherStart < start)
      for (i = $length - 1; i >= 0; --i) {
        t1 = otherStart + i;
        if (t1 >>> 0 !== t1 || t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(receiver, start + i, otherList[t1]);
      }
    else
      for (i = 0; i < $length; ++i) {
        t1 = otherStart + i;
        if (t1 >>> 0 !== t1 || t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(receiver, start + i, otherList[t1]);
      }
  },
  setRange$4$bailout: function(state0, start, end, iterable, skipCount, receiver, $length, t1, otherList) {
    switch (state0) {
      case 0:
      case 1:
        var otherStart, t2, t3, i, t4;
        state0 = 0;
        this._rangeCheck$2(receiver, start, end);
        $length = $.$sub$n(end, start);
        t1 = $.getInterceptor($length);
        if (t1.$eq($length, 0))
          return;
        if ($.$lt$n(skipCount, 0) === true)
          throw $.wrapException(new $.ArgumentError(skipCount));
        otherStart = skipCount;
        otherList = iterable;
        t2 = $.getInterceptor$ns(otherStart);
        t3 = $.getInterceptor$asx(otherList);
        if ($.$gt$n(t2.$add(otherStart, $length), t3.get$length(otherList)) === true)
          throw $.wrapException(new $.StateError("Not enough elements"));
        if (t2.$lt(otherStart, start) === true)
          for (i = t1.$sub($length, 1), t1 = $.getInterceptor$ns(start); t4 = $.getInterceptor$n(i), t4.$ge(i, 0) === true; i = t4.$sub(i, 1))
            this.$indexSet(receiver, t1.$add(start, i), t3.$index(otherList, t2.$add(otherStart, i)));
        else {
          if (typeof $length !== "number")
            throw $.iae($length);
          t1 = $.getInterceptor$ns(start);
          i = 0;
          for (; i < $length; ++i)
            this.$indexSet(receiver, t1.$add(start, i), t3.$index(otherList, t2.$add(otherStart, i)));
        }
    }
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  "+setRange:3:0": 0,
  replaceRange$3: function(receiver, start, end, newContents) {
    this.removeRange$2(receiver, start, end);
    this.insertAll$2(receiver, start, newContents);
  },
  indexOf$2: function(receiver, element, startIndex) {
    var t1, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.indexOf$2$bailout(1, element, startIndex, receiver);
    if (typeof startIndex !== "number")
      return this.indexOf$2$bailout(1, element, startIndex, receiver);
    t1 = receiver.length;
    if (startIndex >= t1)
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; i < t1; ++i) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      if (receiver[i] === element)
        return i;
    }
    return -1;
  },
  indexOf$2$bailout: function(state0, element, startIndex, receiver) {
    var t1, i;
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$ge(startIndex, this.get$length(receiver)) === true)
      return -1;
    if (t1.$lt(startIndex, 0) === true)
      startIndex = 0;
    for (i = startIndex; t1 = $.getInterceptor$n(i), t1.$lt(i, this.get$length(receiver)) === true; i = t1.$add(i, 1))
      if ($.$eq(this.$index(receiver, i), element))
        return i;
    return -1;
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  lastIndexOf$2: function(receiver, element, startIndex) {
    var t1, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.lastIndexOf$2$bailout(1, element, startIndex, receiver);
    startIndex = receiver.length - 1;
    if (startIndex == null)
      return this.lastIndexOf$2$bailout(2, element, startIndex, receiver);
    for (t1 = receiver.length, i = startIndex; i >= 0; --i)
      if (i >= t1)
        throw $.ioore(i);
    return -1;
  },
  lastIndexOf$2$bailout: function(state0, element, startIndex, receiver) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        startIndex = $.$sub$n(this.get$length(receiver), 1);
      case 2:
        var i, t1;
        state0 = 0;
        i = startIndex;
        while (true) {
          t1 = $.getInterceptor$n(i);
          if (i == null)
            throw i.$ge();
          if (!(t1.$ge(i, 0) === true))
            break;
          if ($.$eq(this.$index(receiver, i), element))
            return i;
          i = t1.$sub(i, 1);
        }
        return -1;
    }
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  insert$2: function(receiver, index, element) {
    var t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) === true || t1.$gt(index, this.get$length(receiver)) === true) {
      t1 = this.get$length(receiver);
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
    }
    if (t1.$eq(index, this.get$length(receiver))) {
      this.add$1(receiver, element);
      return;
    }
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    this.set$length(receiver, $.$add$ns(this.get$length(receiver), 1));
    this.setRange$4(receiver, index + 1, this.get$length(receiver), receiver, index);
    this.$indexSet(receiver, index, element);
  },
  removeAt$1: function(receiver, index) {
    var t1, result;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.removeAt$1$bailout(1, index, receiver);
    if (typeof index !== "number")
      return this.removeAt$1$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.ioore(index);
    result = receiver[index];
    --t1;
    this.setRange$4(receiver, index, t1, receiver, index + 1);
    this.set$length(receiver, t1);
    return result;
  },
  removeAt$1$bailout: function(state0, index, receiver) {
    var result = this.$index(receiver, index);
    this.setRange$4(receiver, index, $.$sub$n(this.get$length(receiver), 1), receiver, $.$add$ns(index, 1));
    this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
    return result;
  },
  insertAll$2: function(receiver, index, iterable) {
    var t1, insertionLength;
    if (index >= 0) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t1 = index > t1;
    } else
      t1 = true;
    if (t1) {
      t1 = this.get$length(receiver);
      throw $.wrapException(new $.RangeError("value " + index + " not in range 0.." + $.S(t1)));
    }
    if (false)
      iterable = $.List_List$from(iterable, true, $.getRuntimeTypeArgument(iterable, iterable.$asJSArray, 0));
    insertionLength = $.get$length$asx(iterable);
    this.set$length(receiver, $.$add$ns(this.get$length(receiver), insertionLength));
    if (typeof insertionLength !== "number")
      throw $.iae(insertionLength);
    this.setRange$4(receiver, index + insertionLength, this.get$length(receiver), receiver, index);
    this.setAll$2(receiver, index, iterable);
  },
  "+insertAll:2:0": 0,
  setAll$2: function(receiver, index, iterable) {
    this.setRange$3(receiver, index, index + iterable.length, iterable);
  },
  "+setAll:2:0": 0,
  toString$0: function(receiver) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(receiver, result, $.List_List($, null));
    return result._contents;
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

"+ListMixin": 0,

ListQueue: {
  "": function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  },
  "super": "IterableBase",
  get$_table: function() {
    return this._table;
  },
  set$_table: function(v) {
    this._table = v;
  },
  get$_head: function() {
    return this._head;
  },
  set$_head: function(v) {
    this._head = v;
  },
  get$_tail: function() {
    return this._tail;
  },
  set$_tail: function(v) {
    this._tail = v;
  },
  get$_modificationCount: function() {
    return this._modificationCount;
  },
  set$_modificationCount: function(v) {
    this._modificationCount = v;
  },
  get$iterator: function(_) {
    var t1 = new $._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    t1.$builtinTypeInfo = [null];
    return t1;
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    i = this._head;
    if (i !== (i | 0))
      return this.forEach$1$bailout1(1, action, modificationCount, i);
    for (; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        $.throwExpression(new $.ConcurrentModificationError(this));
    }
  },
  forEach$1$bailout1: function(state0, action, modificationCount, i) {
    switch (state0) {
      case 0:
        modificationCount = this._modificationCount;
        i = this._head;
      case 1:
        var t1;
        state0 = 0;
        for (; !$.$eq(i, this._tail); i = (i + 1 & this._table.length - 1) >>> 0) {
          t1 = this._table;
          if (i >>> 0 !== i || i >= t1.length)
            throw $.ioore(i);
          action.call$1(t1[i]);
          if (modificationCount !== this._modificationCount)
            $.throwExpression(new $.ConcurrentModificationError(this));
        }
    }
  },
  get$isEmpty: function(_) {
    return $.$eq(this._head, this._tail);
  },
  get$length: function(_) {
    var t1, t2;
    t1 = this._tail;
    if (typeof t1 !== "number")
      return this.get$length$bailout1(1, t1);
    t2 = this._head;
    if (typeof t2 !== "number")
      return this.get$length$bailout1(2, t1, t2);
    return (t1 - t2 & this._table.length - 1) >>> 0;
  },
  get$length$bailout1: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = this._tail;
      case 1:
        state0 = 0;
        t2 = this._head;
      case 2:
        state0 = 0;
        return $.$and$n($.$sub$n(t1, t2), this._table.length - 1);
    }
  },
  get$first: function(_) {
    var t1, t2;
    if ($.$eq(this._head, this._tail))
      throw $.wrapException(new $.StateError("No elements"));
    t1 = this._table;
    t2 = this._head;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  get$single: function(_) {
    var t1, t2;
    if ($.$eq(this._head, this._tail))
      throw $.wrapException(new $.StateError("No elements"));
    if ($.$gt$n($.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1), 1) === true)
      throw $.wrapException(new $.StateError("Too many elements"));
    t1 = this._table;
    t2 = this._head;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  toList$1$growable: function(_, growable) {
    var list, t1;
    if (growable) {
      list = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
      t1 = $.getRuntimeTypeArgument(this, this.$asListQueue, 0);
      list.$builtinTypeInfo = [t1];
      $.JSArray_methods.set$length(list, $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1));
    } else {
      list = $.List_List($.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1), $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
      t1 = $.getRuntimeTypeArgument(this, this.$asListQueue, 0);
      list.$builtinTypeInfo = [t1];
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(this, element);
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, endSpace, t3, preSpace;
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || !!$.getInterceptor(elements).$isList)) {
      addCount = $.get$length$asx(elements);
      $length = $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1);
      t1 = $.getInterceptor$ns($length);
      if ($.$ge$n(t1.$add($length, addCount), this._table.length) === true) {
        this._preGrow$1(t1.$add($length, addCount));
        t2 = this._table;
        t1 = t1.$add($length, addCount);
        $.IterableMixinWorkaround_setRangeList(t2, $length, t1, elements, 0);
        this._tail = $.$add$ns(this._tail, addCount);
      } else {
        t1 = this._table;
        t2 = this._tail;
        if (typeof t2 !== "number")
          throw $.iae(t2);
        endSpace = t1.length - t2;
        t1 = $.getInterceptor$n(addCount);
        if (t1.$lt(addCount, endSpace) === true) {
          t1 = this._table;
          t2 = this._tail;
          t3 = $.$add$ns(t2, addCount);
          $.IterableMixinWorkaround_setRangeList(t1, t2, t3, elements, 0);
          this._tail = $.$add$ns(this._tail, addCount);
        } else {
          preSpace = t1.$sub(addCount, endSpace);
          t1 = this._table;
          t2 = this._tail;
          t3 = $.$add$ns(t2, endSpace);
          $.IterableMixinWorkaround_setRangeList(t1, t2, t3, elements, 0);
          t1 = this._table;
          $.IterableMixinWorkaround_setRangeList(t1, 0, preSpace, elements, endSpace);
          this._tail = preSpace;
        }
      }
      this._modificationCount = this._modificationCount + 1;
    } else
      for (t1 = $.get$iterator$ax(elements); t1.moveNext$0() === true;)
        this._add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var i, t1;
    i = this._head;
    if (i !== (i | 0))
      return this.remove$1$bailout(1, object, i);
    for (; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.$eq(t1[i], object)) {
        this._liblib0$_remove$1(this, i);
        this._modificationCount = this._modificationCount + 1;
        return true;
      }
    }
    return false;
  },
  remove$1$bailout: function(state0, object, i) {
    switch (state0) {
      case 0:
        i = this._head;
      case 1:
        var t1;
        state0 = 0;
        for (; !$.$eq(i, this._tail); i = (i + 1 & this._table.length - 1) >>> 0) {
          t1 = this._table;
          if (i >>> 0 !== i || i >= t1.length)
            throw $.ioore(i);
          if ($.$eq(t1[i], object)) {
            this._liblib0$_remove$1(this, i);
            this._modificationCount = this._modificationCount + 1;
            return true;
          }
        }
        return false;
    }
  },
  toString$0: function(_) {
    var result = new $.StringBuffer("");
    result._contents = "";
    $.ToString__emitValue(this, result, $.List_List($, null));
    return result._contents;
  },
  removeFirst$0: function() {
    var t1, t2, result;
    if ($.$eq(this._head, this._tail))
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = $.$and$n(t2 + 1, this._table.length - 1);
    return result;
  },
  "+removeFirst:0:0": 0,
  removeLast$0: function(_) {
    var t1, t2;
    if ($.$eq(this._head, this._tail))
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._tail = $.$and$n($.$sub$n(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _add$1: function(_, element) {
    var t1, t2;
    t1 = this._table;
    t2 = this._tail;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = $.$and$n(t2 + 1, this._table.length - 1);
    if ($.$eq(this._head, this._tail))
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _liblib0$_remove$1: function(_, offset) {
    var t1, t2, mask, t3, startDistance, t4, i, prevOffset, nextOffset;
    if (offset !== (offset | 0))
      return this._liblib0$_remove$1$bailout(1, offset);
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._head;
    if (typeof t3 !== "number")
      return this._liblib0$_remove$1$bailout(2, offset, mask, t3);
    startDistance = (offset - t3 & mask) >>> 0;
    t4 = this._tail;
    if (typeof t4 !== "number")
      return this._liblib0$_remove$1$bailout(3, offset, mask, t4, $.JSInt_methods, startDistance);
    if (startDistance < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw $.ioore(prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t4;
      }
      if (t3 >>> 0 !== t3 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._tail, t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t3)
          throw $.ioore(nextOffset);
        t4 = t2[nextOffset];
        if (i < 0 || i >= t3)
          throw $.ioore(i);
        t2[i] = t4;
      }
      if (t1 >>> 0 !== t1 || t1 >= t3)
        throw $.ioore(t1);
      t2[t1] = null;
      return offset;
    }
  },
  "+_remove:1:0": 0,
  _liblib0$_remove$1$bailout: function(state0, offset, mask, t1, t2, startDistance) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        mask = this._table.length - 1;
        t1 = this._head;
      case 2:
        state0 = 0;
        t2 = $.getInterceptor$n(offset);
        startDistance = $.$and$n(t2.$sub(offset, t1), mask);
        t1 = this._tail;
      case 3:
        state0 = 0;
      case 4:
        var i, prevOffset, t3, t4, nextOffset;
        if (state0 === 0 && $.$lt$n(startDistance, $.$and$n($.$sub$n(t1, offset), mask)) === true) {
          for (i = offset; t1 = $.getInterceptor(i), !t1.$eq(i, this._head); i = prevOffset) {
            prevOffset = $.$and$n(t1.$sub(i, 1), mask);
            t1 = this._table;
            t3 = t1.length;
            if (prevOffset >>> 0 !== prevOffset || prevOffset >= t3)
              throw $.ioore(prevOffset);
            t4 = t1[prevOffset];
            if (i >>> 0 !== i || i >= t3)
              throw $.ioore(i);
            t1[i] = t4;
          }
          t1 = this._table;
          t3 = this._head;
          if (t3 >>> 0 !== t3 || t3 >= t1.length)
            throw $.ioore(t3);
          t1[t3] = null;
          this._head = $.$and$n(t3 + 1, mask);
          return $.$and$n(t2.$add(offset, 1), mask);
        } else
          switch (state0) {
            case 0:
              t1 = this._tail;
            case 4:
              state0 = 0;
              this._tail = $.$and$n($.$sub$n(t1, 1), mask);
              for (i = offset; t1 = $.getInterceptor(i), !t1.$eq(i, this._tail); i = nextOffset) {
                nextOffset = $.$and$n(t1.$add(i, 1), mask);
                t1 = this._table;
                t2 = t1.length;
                if (nextOffset >>> 0 !== nextOffset || nextOffset >= t2)
                  throw $.ioore(nextOffset);
                t3 = t1[nextOffset];
                if (i >>> 0 !== i || i >= t2)
                  throw $.ioore(i);
                t1[i] = t3;
              }
              t1 = this._table;
              t2 = this._tail;
              if (t2 >>> 0 !== t2 || t2 >= t1.length)
                throw $.ioore(t2);
              t1[t2] = null;
              return offset;
          }
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
    t1 = $.getRuntimeTypeArgument(this, this.$asListQueue, 0);
    newTable.$builtinTypeInfo = [t1];
    t1 = this._table;
    t2 = this._head;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    split = t1.length - t2;
    $.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t2 = this._table;
    $.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  "+_grow:0:0": 0,
  _writeToList$1: function(target) {
    var t1, t2, t3, $length, firstPartSize;
    t1 = $.$le$n(this._head, this._tail);
    t2 = $.getInterceptor$ax(target);
    t3 = this._head;
    if (t1 === true) {
      $length = $.$sub$n(this._tail, t3);
      t2.setRange$4(target, 0, $length, this._table, this._head);
      return $length;
    } else {
      t1 = this._table;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      firstPartSize = t1.length - t3;
      t2.setRange$4(target, 0, firstPartSize, t1, t3);
      t3 = this._tail;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t2.setRange$4(target, firstPartSize, firstPartSize + t3, this._table, 0);
      return $.$add$ns(this._tail, firstPartSize);
    }
  },
  "+_writeToList:1:0": 0,
  _preGrow$1: function(newElementCount) {
    var newTable, t1;
    newTable = $.List_List($.ListQueue__nextPowerOf2(newElementCount), $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
    t1 = $.getRuntimeTypeArgument(this, this.$asListQueue, 0);
    newTable.$builtinTypeInfo = [t1];
    this._tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._head = 0;
  },
  "+_preGrow:1:0": 0,
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (true)
      initialCapacity = 8;
    else if ($.JSNull_methods.$and(initialCapacity, $.JSNull_methods.$sub(initialCapacity, 1)) !== 0)
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    t1 = $.List_List(initialCapacity, E);
    t1.$builtinTypeInfo = [E];
    this._table = t1;
  },
  $asIterableBase: null,
  $asIterable: null,
  $isIterable: true
},

"+ListQueue": 0,

_ListQueueIterator: {
  "": function _ListQueueIterator(_queue, _end, _modificationCount, _liblib0$_position, _liblib0$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._liblib0$_position = _liblib0$_position;
    this._liblib0$_current = _liblib0$_current;
  },
  "super": "Object",
  get$_queue: function() {
    return this._queue;
  },
  get$_end: function() {
    return this._end;
  },
  get$_modificationCount: function() {
    return this._modificationCount;
  },
  get$_liblib0$_position: function() {
    return this._liblib0$_position;
  },
  set$_liblib0$_position: function(v) {
    this._liblib0$_position = v;
  },
  get$_liblib0$_current: function() {
    return this._liblib0$_current;
  },
  set$_liblib0$_current: function(v) {
    this._liblib0$_current = v;
  },
  get$current: function() {
    return this._liblib0$_current;
  },
  current$0: function() {
    return this.get$current().call$0();
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression(new $.ConcurrentModificationError(t1));
    if ($.$eq(this._liblib0$_position, this._end)) {
      this._liblib0$_current = null;
      return false;
    }
    t2 = t1._table;
    t3 = this._liblib0$_position;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    this._liblib0$_current = t2[t3];
    t3 = this._liblib0$_position;
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout(1, t1, t3);
    this._liblib0$_position = (t3 + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  moveNext$0$bailout: function(state0, t1, t3) {
    this._liblib0$_position = $.$and$n($.$add$ns(t3, 1), t1._table.length - 1);
    return true;
  }
},

"+_ListQueueIterator": 0,

HashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key))
      return i;
  return -1;
},

"+_findBucketIndex:2:0": 0,

LinkedHashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key))
      return i;
  return -1;
},

HashSet__findBucketIndex: function(bucket, element) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i], element))
      return i;
  return -1;
},

LinkedHashSet__findBucketIndex: function(bucket, element) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_liblib0$_element(), element))
      return i;
  return -1;
},

ListQueue$: function(initialCapacity, E) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  t1.$builtinTypeInfo = [E];
  t1.ListQueue$1(initialCapacity, E);
  return t1;
},

"+new ListQueue:0:1": 0,

ListQueue__nextPowerOf2: function(number) {
  var nextNumber;
  number = $.$sub$n($.$shl$n(number, 2), 1);
  if (number !== (number | 0))
    return $.ListQueue__nextPowerOf2$bailout(1, number);
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
},

"+_nextPowerOf2:1:0": 0,

ListQueue__nextPowerOf2$bailout: function(state0, number) {
  var t1, nextNumber;
  for (; true; number = nextNumber) {
    t1 = $.getInterceptor$n(number);
    nextNumber = t1.$and(number, t1.$sub(number, 1));
    if ($.$eq(nextNumber, 0))
      return number;
  }
}}],
["dart.core", "dart:core", , {
_symbolMapToStringMap_closure: {
  "": function _symbolMapToStringMap_closure(result_0) {
    this.result_0 = result_0;
  },
  "super": "Closure",
  call$2: function(key, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, key.get$_liblib$_name(), value);
  },
  $isFunction: true
},

"+_symbolMapToStringMap_closure": 0,

Function__toMangledNames_closure: {
  "": function Function__toMangledNames_closure(result_0) {
    this.result_0 = result_0;
  },
  "super": "Closure",
  call$2: function(symbol, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, symbol.get$_liblib$_name(), value);
  },
  $isFunction: true
},

"+Function__toMangledNames_closure": 0,

NoSuchMethodError_toString_closure: {
  "": function NoSuchMethodError_toString_closure(box_0) {
    this.box_0 = box_0;
  },
  "super": "Closure",
  call$2: function(key, value) {
    var t1, t2, str, t3;
    t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0) === true) {
      t2 = t1.sb_0;
      t2._contents = t2._contents + ", ";
    }
    t2 = t1.sb_0;
    str = typeof key === "string" ? key : $.S(key);
    t2._contents = t2._contents + str;
    t2 = t1.sb_0;
    t2._contents = t2._contents + ": ";
    t2 = t1.sb_0;
    t3 = $.Error_safeToString(value);
    t2._contents = t2._contents + t3;
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  },
  $isFunction: true
},

"+NoSuchMethodError_toString_closure": 0,

DateTime: {
  "": function DateTime(millisecondsSinceEpoch, isUtc) {
    this.millisecondsSinceEpoch = millisecondsSinceEpoch;
    this.isUtc = isUtc;
  },
  "super": "Object",
  get$millisecondsSinceEpoch: function() {
    return this.millisecondsSinceEpoch;
  },
  get$isUtc: function() {
    return this.isUtc;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDateTime)
      return false;
    return $.$eq(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch) && $.$eq(this.isUtc, other.isUtc);
  },
  compareTo$1: function(_, other) {
    return $.compareTo$1$ns(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, t2, t3, y, m, d, h, min, sec, ms;
    t1 = new $.DateTime_toString_twoDigits();
    t2 = this.isUtc === true;
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCFullYear() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getFullYear() + 0;
    }
    y = new $.DateTime_toString_fourDigits().call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCMonth() + 1;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getMonth() + 1;
    }
    m = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCDate() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getDate() + 0;
    }
    d = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCHours() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getHours() + 0;
    }
    h = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCMinutes() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getMinutes() + 0;
    }
    min = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCSeconds() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getSeconds() + 0;
    }
    sec = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t1 = this.date.getUTCMilliseconds() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t1 = this.date.getMilliseconds() + 0;
    }
    ms = new $.DateTime_toString_threeDigits().call$1(t1);
    if (t2)
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
    else
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
  },
  add$1: function(_, duration) {
    var ms, t1, t2;
    ms = this.millisecondsSinceEpoch;
    if (typeof ms !== "number")
      return this.add$1$bailout(1, duration, ms);
    t1 = duration.get$inMilliseconds();
    if (typeof t1 !== "number")
      return this.add$1$bailout(2, 0, ms, t1);
    t1 = ms + t1;
    t2 = this.isUtc;
    if ($.JSNumber_methods.abs$0(t1) > 8640000000000000)
      $.throwExpression(new $.ArgumentError(t1));
    if (t2 == null)
      $.throwExpression(new $.ArgumentError(t2));
    return new $.DateTime(t1, t2);
  },
  add$1$bailout: function(state0, duration, ms, t1) {
    switch (state0) {
      case 0:
        ms = this.millisecondsSinceEpoch;
      case 1:
        state0 = 0;
        t1 = duration.get$inMilliseconds();
      case 2:
        var t2;
        state0 = 0;
        t1 = $.$add$ns(ms, t1);
        t2 = this.isUtc;
        if ($.$gt$n($.abs$0$n(t1), 8640000000000000) === true)
          $.throwExpression(new $.ArgumentError(t1));
        if (t2 == null)
          $.throwExpression(new $.ArgumentError(t2));
        return new $.DateTime(t1, t2);
    }
  },
  $isDateTime: true
},

"+DateTime": 0,

DateTime_toString_fourDigits: {
  "": function DateTime_toString_fourDigits() {
  },
  "super": "Closure",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = $.getInterceptor$n(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) === true ? "-" : "";
    t1 = $.getInterceptor$n(absN);
    if (t1.$ge(absN, 1000) === true)
      return $.S(n);
    if (t1.$ge(absN, 100) === true)
      return sign + "0" + $.S(absN);
    if (t1.$ge(absN, 10) === true)
      return sign + "00" + $.S(absN);
    return sign + "000" + $.S(absN);
  },
  $isFunction: true
},

"+DateTime_toString_fourDigits": 0,

DateTime_toString_threeDigits: {
  "": function DateTime_toString_threeDigits() {
  },
  "super": "Closure",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100) === true)
      return $.S(n);
    if (t1.$ge(n, 10) === true)
      return "0" + $.S(n);
    return "00" + $.S(n);
  },
  $isFunction: true
},

"+DateTime_toString_threeDigits": 0,

DateTime_toString_twoDigits: {
  "": function DateTime_toString_twoDigits() {
  },
  "super": "Closure",
  call$1: function(n) {
    if ($.$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
},

"+DateTime_toString_twoDigits": 0,

Duration: {
  "": function Duration(_duration) {
    this._duration = _duration;
  },
  "super": "Object",
  get$_duration: function() {
    return this._duration;
  },
  $add: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $.Duration$(0, 0, this._duration + t1, 0, 0, 0);
  },
  $sub: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $.Duration$(0, 0, this._duration - t1, 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw $.iae(factor);
    return $.Duration$(0, 0, this._duration * factor, 0, 0, 0);
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw $.wrapException(new $.IntegerDivisionByZeroException());
    return $.Duration$(0, 0, $.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this._duration < t1;
  },
  $gt: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this._duration > t1;
  },
  $le: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this._duration <= t1;
  },
  $ge: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this._duration >= t1;
  },
  get$inMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  "+inMilliseconds": 0,
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return $.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, t3, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + $.S($.Duration$(0, 0, -t2, 0, 0, 0));
    t3 = $.JSNumber_methods.$tdiv(t2, 60000000);
    twoDigitMinutes = t1.call$1(t3 % 60);
    t3 = $.JSNumber_methods.$tdiv(t2, 1000000);
    twoDigitSeconds = t1.call$1(t3 % 60);
    sixDigitUs = new $.Duration_toString_sixDigits().call$1(t2 % 1000000);
    return $.S($.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
},

"+Duration": 0,

Duration_toString_sixDigits: {
  "": function Duration_toString_sixDigits() {
  },
  "super": "Closure",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000) === true)
      return $.S(n);
    if (t1.$ge(n, 10000) === true)
      return "0" + $.S(n);
    if (t1.$ge(n, 1000) === true)
      return "00" + $.S(n);
    if (t1.$ge(n, 100) === true)
      return "000" + $.S(n);
    if (t1.$gt(n, 10) === true)
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  },
  $isFunction: true
},

"+Duration_toString_sixDigits": 0,

Duration_toString_twoDigits: {
  "": function Duration_toString_twoDigits() {
  },
  "super": "Closure",
  call$1: function(n) {
    if ($.$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
},

"+Duration_toString_twoDigits": 0,

Error: {
  "": function Error() {
  },
  "super": "Object"
},

"+Error": 0,

AssertionError: {
  "": function AssertionError() {
  },
  "super": "Object"
},

"+AssertionError": 0,

TypeError: {
  "": function TypeError() {
  },
  "super": "Object"
},

"+TypeError": 0,

CastError: {
  "": function CastError() {
  },
  "super": "Object"
},

"+CastError": 0,

NullThrownError: {
  "": function NullThrownError() {
  },
  "super": "Object",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

"+NullThrownError": 0,

ArgumentError: {
  "": function ArgumentError(message) {
    this.message = message;
  },
  "super": "Object",
  get$message: function(receiver) {
    return this.message;
  },
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
},

"+ArgumentError": 0,

RangeError: {
  "": function RangeError(message) {
    this.message = message;
  },
  "super": "ArgumentError",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
},

"+RangeError": 0,

FallThroughError: {
  "": function FallThroughError() {
  },
  "super": "Object"
},

"+FallThroughError": 0,

AbstractClassInstantiationError: {
  "": function AbstractClassInstantiationError(_className) {
    this._className = _className;
  },
  "super": "Object",
  get$_className: function() {
    return this._className;
  },
  toString$0: function(_) {
    return "Cannot instantiate abstract class: '" + $.S(this._className) + "'";
  }
},

"+AbstractClassInstantiationError": 0,

NoSuchMethodError: {
  "": function NoSuchMethodError(_liblib1$_receiver, _memberName, _arguments, _namedArguments, _existingArgumentNames) {
    this._liblib1$_receiver = _liblib1$_receiver;
    this._memberName = _memberName;
    this._arguments = _arguments;
    this._namedArguments = _namedArguments;
    this._existingArgumentNames = _existingArgumentNames;
  },
  "super": "Object",
  get$_liblib1$_receiver: function() {
    return this._liblib1$_receiver;
  },
  get$_memberName: function() {
    return this._memberName;
  },
  get$_arguments: function() {
    return this._arguments;
  },
  get$_namedArguments: function() {
    return this._namedArguments;
  },
  get$_existingArgumentNames: function() {
    return this._existingArgumentNames;
  },
  toString$0: function(_) {
    var t1, sb, t2, t3, t4;
    t1 = {};
    sb = new $.StringBuffer("");
    sb._contents = "";
    t1.sb_0 = sb;
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
      return this.toString$0$bailout1(1, t1, t2);
    for (; $.$lt$n(t1.i_1, t2.length) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if ($.$gt$n(t1.i_1, 0) === true) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw $.ioore(t4);
      t4 = $.Error_safeToString(t2[t4]);
      t3._contents = t3._contents + t4;
    }
    t2 = this._namedArguments;
    if (t2 != null)
      t2.forEach$1(t2, new $.NoSuchMethodError_toString_closure(t1));
    return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.Error_safeToString(this._liblib1$_receiver) + "\nArguments: [" + $.S(t1.sb_0) + "]";
  },
  toString$0$bailout1: function(state0, t1, t2) {
    var t3, t4, t5;
    if (t2 != null)
      for (t3 = $.getInterceptor$asx(t2); $.$lt$n(t1.i_1, t3.get$length(t2)) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
        if ($.$gt$n(t1.i_1, 0) === true) {
          t4 = t1.sb_0;
          t4._contents = t4._contents + ", ";
        }
        t4 = t1.sb_0;
        t5 = $.Error_safeToString(t3.$index(t2, t1.i_1));
        t4._contents = t4._contents + t5;
      }
    t2 = this._namedArguments;
    if (t2 != null)
      t2.forEach$1(t2, new $.NoSuchMethodError_toString_closure(t1));
    return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.Error_safeToString(this._liblib1$_receiver) + "\nArguments: [" + $.S(t1.sb_0) + "]";
  }
},

"+NoSuchMethodError": 0,

UnsupportedError: {
  "": function UnsupportedError(message) {
    this.message = message;
  },
  "super": "Object",
  get$message: function(receiver) {
    return this.message;
  },
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

"+UnsupportedError": 0,

UnimplementedError: {
  "": function UnimplementedError(message) {
    this.message = message;
  },
  "super": "Object",
  get$message: function(receiver) {
    return this.message;
  },
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
  }
},

"+UnimplementedError": 0,

StateError: {
  "": function StateError(message) {
    this.message = message;
  },
  "super": "Object",
  get$message: function(receiver) {
    return this.message;
  },
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
},

"+StateError": 0,

ConcurrentModificationError: {
  "": function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  },
  "super": "Object",
  get$modifiedObject: function() {
    return this.modifiedObject;
  },
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.Error_safeToString(t1) + ".";
  }
},

"+ConcurrentModificationError": 0,

StackOverflowError: {
  "": function StackOverflowError() {
  },
  "super": "Object",
  toString$0: function(_) {
    return "Stack Overflow";
  }
},

"+StackOverflowError": 0,

CyclicInitializationError: {
  "": function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  },
  "super": "Object",
  get$variableName: function() {
    return this.variableName;
  },
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  }
},

"+CyclicInitializationError": 0,

_ExceptionImplementation: {
  "": function _ExceptionImplementation(message) {
    this.message = message;
  },
  "super": "Object",
  get$message: function(receiver) {
    return this.message;
  },
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
},

"+_ExceptionImplementation": 0,

FormatException: {
  "": function FormatException(message) {
    this.message = message;
  },
  "super": "Object",
  get$message: function(receiver) {
    return this.message;
  },
  toString$0: function(_) {
    return "FormatException: " + $.S(this.message);
  },
  $isFormatException: true,
  $isException: true
},

"+FormatException": 0,

IntegerDivisionByZeroException: {
  "": function IntegerDivisionByZeroException() {
  },
  "super": "Object",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
},

"+IntegerDivisionByZeroException": 0,

Expando: {
  "": function Expando(name) {
    this.name = name;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new $.Object();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  "+_getKey:0:0": 0
},

"+Expando": 0,

Iterator: {
  "": function Iterator() {
  },
  "super": "Object"
},

"+Iterator": 0,

Object: {
  "": function Object() {
  },
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + $.Primitives_objectTypeName(this) + "'";
  },
  noSuchMethod$1: function(_, invocation) {
    throw $.wrapException(new $.NoSuchMethodError(this, invocation.get$memberName().get$_liblib$_name(), invocation.get$positionalArguments(), $._symbolMapToStringMap(invocation.get$namedArguments()), null));
  },
  get$runtimeType: function(_) {
    return new $.TypeImpl($.getRuntimeTypeString(this));
  },
  $$dom_initCustomEvent$4: function($receiver, $0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_initCustomEvent", "$$dom_initCustomEvent$4", 0, [$0, $1, $2, $3], []));
  },
  $$dom_replaceChild$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_replaceChild", "$$dom_replaceChild$2", 0, [$0, $1], []));
  },
  $add: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("+", "$add", 0, [$0], []));
  },
  $and: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("&", "$and", 0, [$0], []));
  },
  $div: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("/", "$div", 0, [$0], []));
  },
  $ge: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">=", "$ge", 0, [$0], []));
  },
  $gt: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">", "$gt", 0, [$0], []));
  },
  $index: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("[]", "$index", 0, [$0], []));
  },
  $indexSet: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("[]=", "$indexSet", 0, [$0, $1], []));
  },
  $le: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<=", "$le", 0, [$0], []));
  },
  $lt: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<", "$lt", 0, [$0], []));
  },
  $mul: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("*", "$mul", 0, [$0], []));
  },
  $or: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("|", "$or", 0, [$0], []));
  },
  $shl: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<<", "$shl", 0, [$0], []));
  },
  $shr: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">>", "$shr", 0, [$0], []));
  },
  $sub: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("-", "$sub", 0, [$0], []));
  },
  $tdiv: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("~/", "$tdiv", 0, [$0], []));
  },
  $xor: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("^", "$xor", 0, [$0], []));
  },
  _activate$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_activate", "_activate$1", 0, [$0], []));
  },
  _addError$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_addError", "_addError$1", 0, [$0], []));
  },
  _addListener$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_addListener", "_addListener$1", 0, [$0], []));
  },
  _addPendingEvent$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_addPendingEvent", "_addPendingEvent$1", 0, [$0], []));
  },
  _callback$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_callback", "_callback$2", 0, [$0, $1], []));
  },
  _checkIfDone$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_checkIfDone", "_checkIfDone$0", 0, [], []));
  },
  _checkReplyTo$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_checkReplyTo", "_checkReplyTo$1", 0, [$0], []));
  },
  _close$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_close", "_close$0", 0, [], []));
  },
  _complete$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_complete", "_complete$1", 0, [$0], []));
  },
  _complete$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_complete", "_complete$3", 0, [$0, $1, $2], []));
  },
  _dispatch$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_dispatch", "_dispatch$1", 0, [$0], []));
  },
  _dispose$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_dispose", "_dispose$0", 0, [], []));
  },
  _doParse$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_doParse", "_doParse$0", 0, [], []));
  },
  _expectsEvent$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_expectsEvent", "_expectsEvent$1", 0, [$0], []));
  },
  _forEachListener$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_forEachListener", "_forEachListener$1", 0, [$0], []));
  },
  _inSameErrorZone$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_inSameErrorZone", "_inSameErrorZone$1", 0, [$0], []));
  },
  _liblib2$_add$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_add", "_liblib2$_add$1", 0, [$0], []));
  },
  _liblib2$_callback$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_callback", "_liblib2$_callback$1", 0, [$0], []));
  },
  _liblib2$_onData$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_onData", "_liblib2$_onData$1", 0, [$0], []));
  },
  _liblib3$_callback$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_callback", "_liblib3$_callback$1", 0, [$0], []));
  },
  _liblib3$_deserializeHelper$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_deserializeHelper", "_liblib3$_deserializeHelper$1", 0, [$0], []));
  },
  _liblib3$_deserializeList$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_deserializeList", "_liblib3$_deserializeList$1", 0, [$0], []));
  },
  _liblib3$_deserializeMap$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_deserializeMap", "_liblib3$_deserializeMap$1", 0, [$0], []));
  },
  _liblib3$_dispatch$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_dispatch", "_liblib3$_dispatch$1", 0, [$0], []));
  },
  _liblib3$_serializeList$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_serializeList", "_liblib3$_serializeList$1", 0, [$0], []));
  },
  _markCallbackComplete$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_markCallbackComplete", "_markCallbackComplete$0", 0, [], []));
  },
  _onCallback$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_onCallback", "_onCallback$0", 0, [], []));
  },
  _onError$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_onError", "_onError$1", 0, [$0], []));
  },
  _rangeCheck$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_rangeCheck", "_rangeCheck$2", 0, [$0, $1], []));
  },
  _recordListen$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_recordListen", "_recordListen$1", 0, [$0], []));
  },
  _removeChild$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_removeChild", "_removeChild$1", 0, [$0], []));
  },
  _removeListener$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_removeListener", "_removeListener$1", 0, [$0], []));
  },
  _runInZone$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_runInZone", "_runInZone$2", 0, [$0, $1], []));
  },
  _runNextJob$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_runNextJob", "_runNextJob$0", 0, [], []));
  },
  _runTest$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_runTest", "_runTest$0", 0, [], []));
  },
  _scheduleNextJob$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_scheduleNextJob", "_scheduleNextJob$0", 0, [], []));
  },
  _selected$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_selected", "_selected$1", 0, [$0], []));
  },
  _selected$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_selected", "_selected$2", 0, [$0, $1], []));
  },
  _sendData$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_sendData", "_sendData$1", 0, [$0], []));
  },
  _sendError$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_sendError", "_sendError$1", 0, [$0], []));
  },
  _sendValue$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_sendValue", "_sendValue$1", 0, [$0], []));
  },
  _setActive$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_setActive", "_setActive$1", 0, [$0], []));
  },
  _setError$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_setError", "_setError$1", 0, [$0], []));
  },
  _setFutureValue$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_setFutureValue", "_setFutureValue$1", 0, [$0], []));
  },
  _setRemoveAfterFiring$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_setRemoveAfterFiring", "_setRemoveAfterFiring$0", 0, [], []));
  },
  _setResult$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_setResult", "_setResult$3", 0, [$0, $1, $2], []));
  },
  _setValue$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_setValue", "_setValue$1", 0, [$0], []));
  },
  _subscribeTo$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_subscribeTo", "_subscribeTo$1", 0, [$0], []));
  },
  _toggleEventId$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_toggleEventId", "_toggleEventId$0", 0, [], []));
  },
  _unpickle$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_unpickle", "_unpickle$2", 0, [$0, $1], []));
  },
  _updateEditorState$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_updateEditorState", "_updateEditorState$1", 0, [$0], []));
  },
  _zonedSendError$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_zonedSendError", "_zonedSendError$1", 0, [$0], []));
  },
  _zonedSendValue$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_zonedSendValue", "_zonedSendValue$1", 0, [$0], []));
  },
  abs$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("abs", "abs$0", 0, [], []));
  },
  accept$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("accept", "accept$1", 0, [$0], []));
  },
  accept2$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("accept2", "accept2$2", 0, [$0, $1], []));
  },
  add$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("add", "add$1", 0, [$0], []));
  },
  addAll$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("addAll", "addAll$1", 0, [$0], []));
  },
  addListener$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("addListener", "addListener$1", 0, [$0], []));
  },
  allMatches$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("allMatches", "allMatches$1", 0, [$0], []));
  },
  append$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("append", "append$1", 0, [$0], []));
  },
  appendBeginToken$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("appendBeginToken", "appendBeginToken$1", 0, [$0], []));
  },
  appendCommentToken$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("appendCommentToken", "appendCommentToken$2", 0, [$0, $1], []));
  },
  appendEndToken$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("appendEndToken", "appendEndToken$2", 0, [$0, $1], []));
  },
  appendEofToken$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("appendEofToken", "appendEofToken$0", 0, [], []));
  },
  appendKeywordToken$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("appendKeywordToken", "appendKeywordToken$1", 0, [$0], []));
  },
  appendStringToken$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("appendStringToken", "appendStringToken$2", 0, [$0, $1], []));
  },
  appendStringToken2$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("appendStringToken2", "appendStringToken2$3", 0, [$0, $1, $2], []));
  },
  appendToken$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("appendToken", "appendToken$1", 0, [$0], []));
  },
  appendToken2$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("appendToken2", "appendToken2$2", 0, [$0, $1], []));
  },
  asBroadcastStream$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("asBroadcastStream", "asBroadcastStream$0", 0, [], []));
  },
  becomeParentOf$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("becomeParentOf", "becomeParentOf$1", 0, [$0], []));
  },
  bigSwitch$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("bigSwitch", "bigSwitch$1", 0, [$0], []));
  },
  call$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$0", 0, [], []));
  },
  call$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$1", 0, [$0], []));
  },
  call$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$2", 0, [$0, $1], []));
  },
  call$2$attributes: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$2$attributes", 0, [$0, $1], ["attributes"]));
  },
  call$2$onError: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$2$onError", 0, [$0, $1], ["onError"]));
  },
  call$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$3", 0, [$0, $1, $2], []));
  },
  call$3$async: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$3$async", 0, [$0, $1, $2], ["async"]));
  },
  call$3$onDone$onError: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$3$onDone$onError", 0, [$0, $1, $2], ["onDone", "onError"]));
  },
  call$4: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$4", 0, [$0, $1, $2, $3], []));
  },
  call$4$cancelOnError$onDone$onError: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$4$cancelOnError$onDone$onError", 0, [$0, $1, $2, $3], ["cancelOnError", "onDone", "onError"]));
  },
  call$5: function($0, $1, $2, $3, $4) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$5", 0, [$0, $1, $2, $3, $4], []));
  },
  callSync$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("callSync", "callSync$1", 0, [$0], []));
  },
  callback$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("callback", "callback$1", 0, [$0], []));
  },
  cancel$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("cancel", "cancel$0", 0, [], []));
  },
  catchError$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("catchError", "catchError$1", 0, [$0], []));
  },
  chooseEntry$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("chooseEntry", "chooseEntry$2", 0, [$0, $1], []));
  },
  close$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("close", "close$0", 0, [], []));
  },
  closeRequest$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("closeRequest", "closeRequest$1", 0, [$0], []));
  },
  codeUnitAt$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("codeUnitAt", "codeUnitAt$1", 0, [$0], []));
  },
  compareTo$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("compareTo", "compareTo$1", 0, [$0], []));
  },
  contains$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("contains", "contains$1", 0, [$0], []));
  },
  containsKey$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("containsKey", "containsKey$1", 0, [$0], []));
  },
  create$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("create", "create$2", 0, [$0, $1], []));
  },
  create$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("create", "create$3", 0, [$0, $1, $2], []));
  },
  createCell$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("createCell", "createCell$1", 0, [$0], []));
  },
  createContent$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("createContent", "createContent$1", 0, [$0], []));
  },
  createRow$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("createRow", "createRow$0", 0, [], []));
  },
  createWriter$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("createWriter", "createWriter$2", 0, [$0, $1], []));
  },
  current$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("current", "current$0", 0, [], []));
  },
  describeMismatch$4: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("describeMismatch", "describeMismatch$4", 0, [$0, $1, $2, $3], []));
  },
  deserialize$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("deserialize", "deserialize$1", 0, [$0], []));
  },
  deserializeCloseToken$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("deserializeCloseToken", "deserializeCloseToken$1", 0, [$0], []));
  },
  deserializeIsolateSink$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("deserializeIsolateSink", "deserializeIsolateSink$1", 0, [$0], []));
  },
  deserializeObject$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("deserializeObject", "deserializeObject$1", 0, [$0], []));
  },
  deserializeSendPort$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("deserializeSendPort", "deserializeSendPort$1", 0, [$0], []));
  },
  destroy$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("destroy", "destroy$0", 0, [], []));
  },
  destroy$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("destroy", "destroy$1", 0, [$0], []));
  },
  dispose$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("dispose", "dispose$0", 0, [], []));
  },
  edit$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("edit", "edit$1", 0, [$0], []));
  },
  elementAt$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("elementAt", "elementAt$1", 0, [$0], []));
  },
  endsWith$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("endsWith", "endsWith$1", 0, [$0], []));
  },
  error$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("error", "error$2", 0, [$0, $1], []));
  },
  eval$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("eval", "eval$1", 0, [$0], []));
  },
  fail$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("fail", "fail$2", 0, [$0, $1], []));
  },
  file$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("file", "file$1", 0, [$0], []));
  },
  findTokenMatchingClosingBraceInInterpolationExpression$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("findTokenMatchingClosingBraceInInterpolationExpression", "findTokenMatchingClosingBraceInInterpolationExpression$0", 0, [], []));
  },
  focus$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("focus", "focus$0", 0, [], []));
  },
  focusRequest$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("focusRequest", "focusRequest$1", 0, [$0], []));
  },
  fold$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("fold", "fold$2", 0, [$0, $1], []));
  },
  forEach$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("forEach", "forEach$1", 0, [$0], []));
  },
  get$$$dom_className: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_className", "get$$$dom_className", 1, [], []));
  },
  get$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("get", "get$2", 0, [$0, $1], []));
  },
  get$Array: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("Array", "get$Array", 1, [], []));
  },
  get$Blob: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("Blob", "get$Blob", 1, [], []));
  },
  get$EditSession: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("EditSession", "get$EditSession", 1, [], []));
  },
  get$FileReader: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("FileReader", "get$FileReader", 1, [], []));
  },
  get$JSON: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("JSON", "get$JSON", 1, [], []));
  },
  get$_STATE_CLOSED: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_STATE_CLOSED", "get$_STATE_CLOSED", 1, [], []));
  },
  get$_aceContainer: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_aceContainer", "get$_aceContainer", 1, [], []));
  },
  get$_aceEditor: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_aceEditor", "get$_aceEditor", 1, [], []));
  },
  get$_aceTheme: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_aceTheme", "get$_aceTheme", 1, [], []));
  },
  get$_activePart: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_activePart", "get$_activePart", 1, [], []));
  },
  get$_arrowElement: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_arrowElement", "get$_arrowElement", 1, [], []));
  },
  get$_bootstrapTheme: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_bootstrapTheme", "get$_bootstrapTheme", 1, [], []));
  },
  get$_callback: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_callback", "get$_callback", 1, [], []));
  },
  get$_callbackFunctionsOutstanding: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_callbackFunctionsOutstanding", "get$_callbackFunctionsOutstanding", 1, [], []));
  },
  get$_chainSource: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_chainSource", "get$_chainSource", 1, [], []));
  },
  get$_changeHandler: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_changeHandler", "get$_changeHandler", 1, [], []));
  },
  get$_children: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_children", "get$_children", 1, [], []));
  },
  get$_completer: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_completer", "get$_completer", 1, [], []));
  },
  get$_consoleView: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_consoleView", "get$_consoleView", 1, [], []));
  },
  get$_contentElement: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_contentElement", "get$_contentElement", 1, [], []));
  },
  get$_contents: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_contents", "get$_contents", 1, [], []));
  },
  get$_dirty: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_dirty", "get$_dirty", 1, [], []));
  },
  get$_duration: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_duration", "get$_duration", 1, [], []));
  },
  get$_errorZone: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_errorZone", "get$_errorZone", 1, [], []));
  },
  get$_eventState: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_eventState", "get$_eventState", 1, [], []));
  },
  get$_file: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_file", "get$_file", 1, [], []));
  },
  get$_fileEntry: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_fileEntry", "get$_fileEntry", 1, [], []));
  },
  get$_id: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_id", "get$_id", 1, [], []));
  },
  get$_isChained: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_isChained", "get$_isChained", 1, [], []));
  },
  get$_isComplete: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_isComplete", "get$_isComplete", 1, [], []));
  },
  get$_isDone: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_isDone", "get$_isDone", 1, [], []));
  },
  get$_isExecutingCallback: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_isExecutingCallback", "get$_isExecutingCallback", 1, [], []));
  },
  get$_isFiring: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_isFiring", "get$_isFiring", 1, [], []));
  },
  get$_isolateId: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_isolateId", "get$_isolateId", 1, [], []));
  },
  get$_key: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_key", "get$_key", 1, [], []));
  },
  get$_keyword: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_keyword", "get$_keyword", 1, [], []));
  },
  get$_kind: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_kind", "get$_kind", 1, [], []));
  },
  get$_liblib$_name: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_name", "get$_liblib$_name", 1, [], []));
  },
  get$_liblib0$_element: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_element", "get$_liblib0$_element", 1, [], []));
  },
  get$_liblib10$_id: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_id", "get$_liblib10$_id", 1, [], []));
  },
  get$_liblib14$_comment: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_comment", "get$_liblib14$_comment", 1, [], []));
  },
  get$_liblib14$_metadata: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_metadata", "get$_liblib14$_metadata", 1, [], []));
  },
  get$_liblib16$_librarySource: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_librarySource", "get$_liblib16$_librarySource", 1, [], []));
  },
  get$_liblib16$_resolutionErrors: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_resolutionErrors", "get$_liblib16$_resolutionErrors", 1, [], []));
  },
  get$_liblib2$_next: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_next", "get$_liblib2$_next", 1, [], []));
  },
  get$_liblib2$_previous: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_previous", "get$_liblib2$_previous", 1, [], []));
  },
  get$_liblib20$_id: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_id", "get$_liblib20$_id", 1, [], []));
  },
  get$_liblib20$_registry: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_registry", "get$_liblib20$_registry", 1, [], []));
  },
  get$_liblib21$_id: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_id", "get$_liblib21$_id", 1, [], []));
  },
  get$_liblib23$_streamController: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_streamController", "get$_liblib23$_streamController", 1, [], []));
  },
  get$_liblib4$_token: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_token", "get$_liblib4$_token", 1, [], []));
  },
  get$_liblib4$_type: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_type", "get$_liblib4$_type", 1, [], []));
  },
  get$_liblib8$_aceEditor: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_aceEditor", "get$_liblib8$_aceEditor", 1, [], []));
  },
  get$_liblib8$_name: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_name", "get$_liblib8$_name", 1, [], []));
  },
  get$_lineStarts: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_lineStarts", "get$_lineStarts", 1, [], []));
  },
  get$_mainElement: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_mainElement", "get$_mainElement", 1, [], []));
  },
  get$_matcher: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_matcher", "get$_matcher", 1, [], []));
  },
  get$_messageElement: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_messageElement", "get$_messageElement", 1, [], []));
  },
  get$_next: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_next", "get$_next", 1, [], []));
  },
  get$_nextListener: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_nextListener", "get$_nextListener", 1, [], []));
  },
  get$_nextState: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_nextState", "get$_nextState", 1, [], []));
  },
  get$_onListen: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_onListen", "get$_onListen", 1, [], []));
  },
  get$_openCallbacks: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_openCallbacks", "get$_openCallbacks", 1, [], []));
  },
  get$_parentZone: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_parentZone", "get$_parentZone", 1, [], []));
  },
  get$_previous: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_previous", "get$_previous", 1, [], []));
  },
  get$_printMargin: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_printMargin", "get$_printMargin", 1, [], []));
  },
  get$_proxy: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_proxy", "get$_proxy", 1, [], []));
  },
  get$_receivePort: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_receivePort", "get$_receivePort", 1, [], []));
  },
  get$_reconcileTimer: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_reconcileTimer", "get$_reconcileTimer", 1, [], []));
  },
  get$_registry: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_registry", "get$_registry", 1, [], []));
  },
  get$_removeAfterFiring: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_removeAfterFiring", "get$_removeAfterFiring", 1, [], []));
  },
  get$_resolutionErrorsState: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_resolutionErrorsState", "get$_resolutionErrorsState", 1, [], []));
  },
  get$_resolvedUnit: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_resolvedUnit", "get$_resolvedUnit", 1, [], []));
  },
  get$_resolvedUnitState: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_resolvedUnitState", "get$_resolvedUnitState", 1, [], []));
  },
  get$_result: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_result", "get$_result", 1, [], []));
  },
  get$_resultOrListeners: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_resultOrListeners", "get$_resultOrListeners", 1, [], []));
  },
  get$_runningJob: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_runningJob", "get$_runningJob", 1, [], []));
  },
  get$_state: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_state", "get$_state", 1, [], []));
  },
  get$_subscription: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_subscription", "get$_subscription", 1, [], []));
  },
  get$_syntax: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_syntax", "get$_syntax", 1, [], []));
  },
  get$_testComplete: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_testComplete", "get$_testComplete", 1, [], []));
  },
  get$_timer: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_timer", "get$_timer", 1, [], []));
  },
  get$_token: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_token", "get$_token", 1, [], []));
  },
  get$_type: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_type", "get$_type", 1, [], []));
  },
  get$_value: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_value", "get$_value", 1, [], []));
  },
  get$_variables: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_variables", "get$_variables", 1, [], []));
  },
  get$_workerId: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_workerId", "get$_workerId", 1, [], []));
  },
  get$_workspace: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_workspace", "get$_workspace", 1, [], []));
  },
  get$_zone: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_zone", "get$_zone", 1, [], []));
  },
  get$aboutPopover: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("aboutPopover", "get$aboutPopover", 1, [], []));
  },
  get$ace: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("ace", "get$ace", 1, [], []));
  },
  get$aceEditor: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("aceEditor", "get$aceEditor", 1, [], []));
  },
  get$aceMode: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("aceMode", "get$aceMode", 1, [], []));
  },
  get$altKey: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("altKey", "get$altKey", 1, [], []));
  },
  get$app: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("app", "get$app", 1, [], []));
  },
  get$ast: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("ast", "get$ast", 1, [], []));
  },
  get$attributes: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("attributes", "get$attributes", 1, [], []));
  },
  get$beginToken: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("beginToken", "get$beginToken", 1, [], []));
  },
  get$binding: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("binding", "get$binding", 1, [], []));
  },
  get$changeListener: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("changeListener", "get$changeListener", 1, [], []));
  },
  get$checked: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("checked", "get$checked", 1, [], []));
  },
  get$children: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("children", "get$children", 1, [], []));
  },
  get$chrome: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("chrome", "get$chrome", 1, [], []));
  },
  get$classes: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("classes", "get$classes", 1, [], []));
  },
  get$client: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("client", "get$client", 1, [], []));
  },
  get$closeButton: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("closeButton", "get$closeButton", 1, [], []));
  },
  get$column: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("column", "get$column", 1, [], []));
  },
  get$contentDiv: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("contentDiv", "get$contentDiv", 1, [], []));
  },
  get$contentManager: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("contentManager", "get$contentManager", 1, [], []));
  },
  get$contents: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("contents", "get$contents", 1, [], []));
  },
  get$ctrlKey: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("ctrlKey", "get$ctrlKey", 1, [], []));
  },
  get$current: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("current", "get$current", 1, [], []));
  },
  get$currentTarget: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("currentTarget", "get$currentTarget", 1, [], []));
  },
  get$declarations: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("declarations", "get$declarations", 1, [], []));
  },
  get$description: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("description", "get$description", 1, [], []));
  },
  get$detail: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("detail", "get$detail", 1, [], []));
  },
  get$directives: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("directives", "get$directives", 1, [], []));
  },
  get$dirty: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("dirty", "get$dirty", 1, [], []));
  },
  get$display: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("display", "get$display", 1, [], []));
  },
  get$dockLeft: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("dockLeft", "get$dockLeft", 1, [], []));
  },
  get$document: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("document", "get$document", 1, [], []));
  },
  get$documentProxy: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("documentProxy", "get$documentProxy", 1, [], []));
  },
  get$doubleClick: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("doubleClick", "get$doubleClick", 1, [], []));
  },
  get$element: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("element", "get$element", 1, [], []));
  },
  get$elements: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("elements", "get$elements", 1, [], []));
  },
  get$enabled: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("enabled", "get$enabled", 1, [], []));
  },
  get$endToken: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("endToken", "get$endToken", 1, [], []));
  },
  get$errors: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("errors", "get$errors", 1, [], []));
  },
  get$eventStream: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("eventStream", "get$eventStream", 1, [], []));
  },
  get$fileSystem: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("fileSystem", "get$fileSystem", 1, [], []));
  },
  get$finished: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("finished", "get$finished", 1, [], []));
  },
  get$fireReconcileEvent: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("fireReconcileEvent", "get$fireReconcileEvent", 1, [], []));
  },
  get$first: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("first", "get$first", 1, [], []));
  },
  get$fullName: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("fullName", "get$fullName", 1, [], []));
  },
  get$fullPath: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("fullPath", "get$fullPath", 1, [], []));
  },
  get$future: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("future", "get$future", 1, [], []));
  },
  get$headerElement: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("headerElement", "get$headerElement", 1, [], []));
  },
  get$height: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("height", "get$height", 1, [], []));
  },
  get$i18n: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("i18n", "get$i18n", 1, [], []));
  },
  get$id: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("id", "get$id", 1, [], []));
  },
  get$identifier: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("identifier", "get$identifier", 1, [], []));
  },
  get$inMilliseconds: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("inMilliseconds", "get$inMilliseconds", 1, [], []));
  },
  get$indeterminate: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("indeterminate", "get$indeterminate", 1, [], []));
  },
  get$initializer: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("initializer", "get$initializer", 1, [], []));
  },
  get$innerHtml: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("innerHtml", "get$innerHtml", 1, [], []));
  },
  get$isComplete: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isComplete", "get$isComplete", 1, [], []));
  },
  get$isDartMode: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isDartMode", "get$isDartMode", 1, [], []));
  },
  get$isDirectory: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isDirectory", "get$isDirectory", 1, [], []));
  },
  get$isEmpty: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isEmpty", "get$isEmpty", 1, [], []));
  },
  get$isFile: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isFile", "get$isFile", 1, [], []));
  },
  get$isGetter: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isGetter", "get$isGetter", 1, [], []));
  },
  get$isNotEmpty: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isNotEmpty", "get$isNotEmpty", 1, [], []));
  },
  get$isSetter: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isSetter", "get$isSetter", 1, [], []));
  },
  get$isolateStatics: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isolateStatics", "get$isolateStatics", 1, [], []));
  },
  get$iterator: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("iterator", "get$iterator", 1, [], []));
  },
  get$job: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("job", "get$job", 1, [], []));
  },
  get$keyCode: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("keyCode", "get$keyCode", 1, [], []));
  },
  get$keys: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("keys", "get$keys", 1, [], []));
  },
  get$keyword: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("keyword", "get$keyword", 1, [], []));
  },
  get$kind: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("kind", "get$kind", 1, [], []));
  },
  get$label: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("label", "get$label", 1, [], []));
  },
  get$left: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("left", "get$left", 1, [], []));
  },
  get$length: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("length", "get$length", 1, [], []));
  },
  get$lexeme: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("lexeme", "get$lexeme", 1, [], []));
  },
  get$listViewer: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("listViewer", "get$listViewer", 1, [], []));
  },
  get$memberName: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("memberName", "get$memberName", 1, [], []));
  },
  get$message: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("message", "get$message", 1, [], []));
  },
  get$messageArea: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("messageArea", "get$messageArea", 1, [], []));
  },
  get$metaKey: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("metaKey", "get$metaKey", 1, [], []));
  },
  get$millisecondsSinceEpoch: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("millisecondsSinceEpoch", "get$millisecondsSinceEpoch", 1, [], []));
  },
  get$modifyable: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("modifyable", "get$modifyable", 1, [], []));
  },
  get$name: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("name", "get$name", 1, [], []));
  },
  get$namedArguments: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("namedArguments", "get$namedArguments", 1, [], []));
  },
  get$next: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("next", "get$next", 1, [], []));
  },
  get$nodes: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("nodes", "get$nodes", 1, [], []));
  },
  get$offset: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("offset", "get$offset", 1, [], []));
  },
  get$offsetHeight: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("offsetHeight", "get$offsetHeight", 1, [], []));
  },
  get$onChange: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onChange", "get$onChange", 1, [], []));
  },
  get$onClick: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onClick", "get$onClick", 1, [], []));
  },
  get$onClosed: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onClosed", "get$onClosed", 1, [], []));
  },
  get$onKeyPress: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onKeyPress", "get$onKeyPress", 1, [], []));
  },
  get$ordinal: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("ordinal", "get$ordinal", 1, [], []));
  },
  get$parent: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("parent", "get$parent", 1, [], []));
  },
  get$parentNode: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("parentNode", "get$parentNode", 1, [], []));
  },
  get$partMap: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("partMap", "get$partMap", 1, [], []));
  },
  get$positionalArguments: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("positionalArguments", "get$positionalArguments", 1, [], []));
  },
  get$precedingComments: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("precedingComments", "get$precedingComments", 1, [], []));
  },
  get$preferences: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("preferences", "get$preferences", 1, [], []));
  },
  get$preferencesPopover: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("preferencesPopover", "get$preferencesPopover", 1, [], []));
  },
  get$previous: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("previous", "get$previous", 1, [], []));
  },
  get$progress: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("progress", "get$progress", 1, [], []));
  },
  get$proxy: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("proxy", "get$proxy", 1, [], []));
  },
  get$relativeToElement: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("relativeToElement", "get$relativeToElement", 1, [], []));
  },
  get$responseText: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("responseText", "get$responseText", 1, [], []));
  },
  get$result: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("result", "get$result", 1, [], []));
  },
  get$row: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("row", "get$row", 1, [], []));
  },
  get$runtime: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("runtime", "get$runtime", 1, [], []));
  },
  get$sb: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("sb", "get$sb", 1, [], []));
  },
  get$searchBox: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("searchBox", "get$searchBox", 1, [], []));
  },
  get$selection: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("selection", "get$selection", 1, [], []));
  },
  get$session: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("session", "get$session", 1, [], []));
  },
  get$shiftKey: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("shiftKey", "get$shiftKey", 1, [], []));
  },
  get$single: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("single", "get$single", 1, [], []));
  },
  get$socket: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("socket", "get$socket", 1, [], []));
  },
  get$socketId: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("socketId", "get$socketId", 1, [], []));
  },
  get$source: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("source", "get$source", 1, [], []));
  },
  get$stackTrace: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("stackTrace", "get$stackTrace", 1, [], []));
  },
  get$started: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("started", "get$started", 1, [], []));
  },
  get$statusLine: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("statusLine", "get$statusLine", 1, [], []));
  },
  get$statusText: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("statusText", "get$statusText", 1, [], []));
  },
  get$storage: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("storage", "get$storage", 1, [], []));
  },
  get$streamController: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("streamController", "get$streamController", 1, [], []));
  },
  get$style: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("style", "get$style", 1, [], []));
  },
  get$syntax: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("syntax", "get$syntax", 1, [], []));
  },
  get$target: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("target", "get$target", 1, [], []));
  },
  get$testSetup: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("testSetup", "get$testSetup", 1, [], []));
  },
  get$testTeardown: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("testTeardown", "get$testTeardown", 1, [], []));
  },
  get$text: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("text", "get$text", 1, [], []));
  },
  get$top: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("top", "get$top", 1, [], []));
  },
  get$topLeft: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("topLeft", "get$topLeft", 1, [], []));
  },
  get$type: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("type", "get$type", 1, [], []));
  },
  get$value: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("value", "get$value", 1, [], []));
  },
  get$variables: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("variables", "get$variables", 1, [], []));
  },
  get$visibility: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("visibility", "get$visibility", 1, [], []));
  },
  get$width: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("width", "get$width", 1, [], []));
  },
  get$window: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("window", "get$window", 1, [], []));
  },
  get$workbench: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("workbench", "get$workbench", 1, [], []));
  },
  get$x: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("x", "get$x", 1, [], []));
  },
  get$y: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("y", "get$y", 1, [], []));
  },
  getBoundingClientRect$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getBoundingClientRect", "getBoundingClientRect$0", 0, [], []));
  },
  getChildren$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getChildren", "getChildren$0", 0, [], []));
  },
  getDescription$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getDescription", "getDescription$0", 0, [], []));
  },
  getDocument$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getDocument", "getDocument$0", 0, [], []));
  },
  getEntryId$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getEntryId", "getEntryId$1", 0, [$0], []));
  },
  getErrors2$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getErrors2", "getErrors2$1", 0, [$0], []));
  },
  getHandlerForName$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getHandlerForName", "getHandlerForName$1", 0, [$0], []));
  },
  getKey$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getKey", "getKey$0", 0, [], []));
  },
  getLibrariesContaining$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getLibrariesContaining", "getLibrariesContaining$1", 0, [$0], []));
  },
  getManifest$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getManifest", "getManifest$0", 0, [], []));
  },
  getMessage$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getMessage", "getMessage$1", 0, [$0], []));
  },
  getRange$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getRange", "getRange$0", 0, [], []));
  },
  getSelectedItem$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getSelectedItem", "getSelectedItem$0", 0, [], []));
  },
  getSelection$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getSelection", "getSelection$0", 0, [], []));
  },
  getSession$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getSession", "getSession$0", 0, [], []));
  },
  getShowPrintMargin$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getShowPrintMargin", "getShowPrintMargin$0", 0, [], []));
  },
  getState$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getState", "getState$1", 0, [$0], []));
  },
  getTheme$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getTheme", "getTheme$0", 0, [], []));
  },
  getThemes$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getThemes", "getThemes$0", 0, [], []));
  },
  getURL$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getURL", "getURL$1", 0, [$0], []));
  },
  getUndoManager$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getUndoManager", "getUndoManager$0", 0, [], []));
  },
  getValue$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getValue", "getValue$0", 0, [], []));
  },
  getWritableEntry$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("getWritableEntry", "getWritableEntry$2", 0, [$0, $1], []));
  },
  gotoLine$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("gotoLine", "gotoLine$3", 0, [$0, $1, $2], []));
  },
  group$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("group", "group$1", 0, [$0], []));
  },
  handleActivated$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("handleActivated", "handleActivated$0", 0, [], []));
  },
  handleDeactivated$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("handleDeactivated", "handleDeactivated$0", 0, [], []));
  },
  handleNext$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("handleNext", "handleNext$1", 0, [$0], []));
  },
  handleUncaughtError$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("handleUncaughtError", "handleUncaughtError$1", 0, [$0], []));
  },
  indexOf$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("indexOf", "indexOf$1", 0, [$0], []));
  },
  indexOf$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("indexOf", "indexOf$2", 0, [$0, $1], []));
  },
  indexToPosition$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("indexToPosition", "indexToPosition$2", 0, [$0, $1], []));
  },
  innerHtml$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("innerHtml", "innerHtml$1", 0, [$0], []));
  },
  insert$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("insert", "insert$2", 0, [$0, $1], []));
  },
  invoke$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("invoke", "invoke$0", 0, [], []));
  },
  isAdditiveOperator$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isAdditiveOperator", "isAdditiveOperator$0", 0, [], []));
  },
  isAssignable$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isAssignable", "isAssignable$0", 0, [], []));
  },
  isAssignmentOperator$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isAssignmentOperator", "isAssignmentOperator$0", 0, [], []));
  },
  isEqualityOperator$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isEqualityOperator", "isEqualityOperator$0", 0, [], []));
  },
  isInSystemLibrary$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isInSystemLibrary", "isInSystemLibrary$0", 0, [], []));
  },
  isIncrementOperator$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isIncrementOperator", "isIncrementOperator$0", 0, [], []));
  },
  isMultiplicativeOperator$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isMultiplicativeOperator", "isMultiplicativeOperator$0", 0, [], []));
  },
  isOperator$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isOperator", "isOperator$0", 0, [], []));
  },
  isPseudoKeyword$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isPseudoKeyword", "isPseudoKeyword$0", 0, [], []));
  },
  isRelationalOperator$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isRelationalOperator", "isRelationalOperator$0", 0, [], []));
  },
  isShiftOperator$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isShiftOperator", "isShiftOperator$0", 0, [], []));
  },
  isUserDefinableOperator$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isUserDefinableOperator", "isUserDefinableOperator$0", 0, [], []));
  },
  join$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("join", "join$1", 0, [$0], []));
  },
  keyword$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("keyword", "keyword$0", 0, [], []));
  },
  lastIndexOf$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("lastIndexOf", "lastIndexOf$1", 0, [$0], []));
  },
  link$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("link", "link$1", 0, [$0], []));
  },
  listen$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("listen", "listen$1", 0, [$0], []));
  },
  listen$4$cancelOnError$onDone$onError: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("listen", "listen$4$cancelOnError$onDone$onError", 0, [$0, $1, $2, $3], ["cancelOnError", "onDone", "onError"]));
  },
  lookup$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("lookup", "lookup$1", 0, [$0], []));
  },
  map$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("map", "map$1", 0, [$0], []));
  },
  matchAsPrefix$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("matchAsPrefix", "matchAsPrefix$2", 0, [$0, $1], []));
  },
  matches$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("matches", "matches$1", 0, [$0], []));
  },
  matches$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("matches", "matches$2", 0, [$0, $1], []));
  },
  maybeSchedule$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("maybeSchedule", "maybeSchedule$0", 0, [], []));
  },
  modify$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("modify", "modify$1", 0, [$0], []));
  },
  moveNext$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("moveNext", "moveNext$0", 0, [], []));
  },
  navigateFileStart$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("navigateFileStart", "navigateFileStart$0", 0, [], []));
  },
  next$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("next", "next$1", 0, [$0], []));
  },
  on$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("on", "on$2", 0, [$0, $1], []));
  },
  parseCompilationUnit$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("parseCompilationUnit", "parseCompilationUnit$1", 0, [$0], []));
  },
  parseJson$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("parseJson", "parseJson$1", 0, [$0], []));
  },
  perform$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("perform", "perform$1", 0, [$0], []));
  },
  pickle$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("pickle", "pickle$1", 0, [$0], []));
  },
  preventDefault$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("preventDefault", "preventDefault$0", 0, [], []));
  },
  process$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("process", "process$0", 0, [], []));
  },
  readAsText$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("readAsText", "readAsText$1", 0, [$0], []));
  },
  readClasses$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("readClasses", "readClasses$0", 0, [], []));
  },
  readContents$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("readContents", "readContents$0", 0, [], []));
  },
  readContents$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("readContents", "readContents$1", 0, [$0], []));
  },
  recalc$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("recalc", "recalc$1", 0, [$0], []));
  },
  remove$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("remove", "remove$0", 0, [], []));
  },
  remove$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("remove", "remove$1", 0, [$0], []));
  },
  remove$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("remove", "remove$2", 0, [$0, $1], []));
  },
  removeAll$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("removeAll", "removeAll$1", 0, [$0], []));
  },
  removeAt$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("removeAt", "removeAt$1", 0, [$0], []));
  },
  removeLast$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("removeLast", "removeLast$0", 0, [], []));
  },
  replaceAll$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("replaceAll", "replaceAll$2", 0, [$0, $1], []));
  },
  replaceRange$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("replaceRange", "replaceRange$3", 0, [$0, $1, $2], []));
  },
  replaceWith$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("replaceWith", "replaceWith$1", 0, [$0], []));
  },
  resize$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("resize", "resize$0", 0, [], []));
  },
  run$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("run", "run$1", 0, [$0], []));
  },
  runIteration$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("runIteration", "runIteration$0", 0, [], []));
  },
  save$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("save", "save$0", 0, [], []));
  },
  schedule$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("schedule", "schedule$1", 0, [$0], []));
  },
  select$3: function($receiver, $0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("select", "select$3", 0, [$0, $1, $2], []));
  },
  select4$4: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("select4", "select4$4", 0, [$0, $1, $2, $3], []));
  },
  send$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("send", "send$2", 0, [$0, $1], []));
  },
  set$$$dom_className: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_className=", "set$$$dom_className", 2, [$0], []));
  },
  set$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("set", "set$2", 0, [$0, $1], []));
  },
  set$_aceEditor: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_aceEditor=", "set$_aceEditor", 2, [$0], []));
  },
  set$_activePart: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_activePart=", "set$_activePart", 2, [$0], []));
  },
  set$_callbackFunctionsOutstanding: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_callbackFunctionsOutstanding=", "set$_callbackFunctionsOutstanding", 2, [$0], []));
  },
  set$_contents: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_contents=", "set$_contents", 2, [$0], []));
  },
  set$_dirty: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_dirty=", "set$_dirty", 2, [$0], []));
  },
  set$_eventState: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_eventState=", "set$_eventState", 2, [$0], []));
  },
  set$_file: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_file=", "set$_file", 2, [$0], []));
  },
  set$_handle: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_handle=", "set$_handle", 2, [$0], []));
  },
  set$_isComplete: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_isComplete=", "set$_isComplete", 2, [$0], []));
  },
  set$_isDone: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_isDone=", "set$_isDone", 2, [$0], []));
  },
  set$_liblib2$_next: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_next=", "set$_liblib2$_next", 2, [$0], []));
  },
  set$_liblib2$_previous: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_previous=", "set$_liblib2$_previous", 2, [$0], []));
  },
  set$_liblib5$_open: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_open=", "set$_liblib5$_open", 2, [$0], []));
  },
  set$_liblib8$_name: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_name=", "set$_liblib8$_name", 2, [$0], []));
  },
  set$_lineInfo: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_lineInfo=", "set$_lineInfo", 2, [$0], []));
  },
  set$_next: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_next=", "set$_next", 2, [$0], []));
  },
  set$_nextListener: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_nextListener=", "set$_nextListener", 2, [$0], []));
  },
  set$_openCallbacks: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_openCallbacks=", "set$_openCallbacks", 2, [$0], []));
  },
  set$_parsingErrors: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_parsingErrors=", "set$_parsingErrors", 2, [$0], []));
  },
  set$_previous: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_previous=", "set$_previous", 2, [$0], []));
  },
  set$_reconcileTimer: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_reconcileTimer=", "set$_reconcileTimer", 2, [$0], []));
  },
  set$_runningJob: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_runningJob=", "set$_runningJob", 2, [$0], []));
  },
  set$_runningTime: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_runningTime=", "set$_runningTime", 2, [$0], []));
  },
  set$_startTime: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_startTime=", "set$_startTime", 2, [$0], []));
  },
  set$_state: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_state=", "set$_state", 2, [$0], []));
  },
  set$_testComplete: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_testComplete=", "set$_testComplete", 2, [$0], []));
  },
  set$_value: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("_value=", "set$_value", 2, [$0], []));
  },
  set$aceTheme: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("aceTheme=", "set$aceTheme", 2, [$0], []));
  },
  set$bootstrapTheme: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("bootstrapTheme=", "set$bootstrapTheme", 2, [$0], []));
  },
  set$changeListener: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("changeListener=", "set$changeListener", 2, [$0], []));
  },
  set$checked: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("checked=", "set$checked", 2, [$0], []));
  },
  set$children: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("children=", "set$children", 2, [$0], []));
  },
  set$contentDiv: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("contentDiv=", "set$contentDiv", 2, [$0], []));
  },
  set$display: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("display=", "set$display", 2, [$0], []));
  },
  set$document: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("document=", "set$document", 2, [$0], []));
  },
  set$flex: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("flex=", "set$flex", 2, [$0], []));
  },
  set$flexDirection: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("flexDirection=", "set$flexDirection", 2, [$0], []));
  },
  set$innerHtml: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("innerHtml=", "set$innerHtml", 2, [$0], []));
  },
  set$left: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("left=", "set$left", 2, [$0], []));
  },
  set$length: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("length=", "set$length", 2, [$0], []));
  },
  set$marginTop: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("marginTop=", "set$marginTop", 2, [$0], []));
  },
  set$menubar: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("menubar=", "set$menubar", 2, [$0], []));
  },
  set$next: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("next=", "set$next", 2, [$0], []));
  },
  set$onerror: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onerror=", "set$onerror", 2, [$0], []));
  },
  set$onloadend: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onloadend=", "set$onloadend", 2, [$0], []));
  },
  set$onwriteend: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onwriteend=", "set$onwriteend", 2, [$0], []));
  },
  set$parent: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("parent=", "set$parent", 2, [$0], []));
  },
  set$previous: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("previous=", "set$previous", 2, [$0], []));
  },
  set$proxy: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("proxy=", "set$proxy", 2, [$0], []));
  },
  set$selection: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("selection=", "set$selection", 2, [$0], []));
  },
  set$showPrintMargin: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("showPrintMargin=", "set$showPrintMargin", 2, [$0], []));
  },
  set$text: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("text=", "set$text", 2, [$0], []));
  },
  set$top: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("top=", "set$top", 2, [$0], []));
  },
  set$type: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("type=", "set$type", 2, [$0], []));
  },
  set$undoManager: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("undoManager=", "set$undoManager", 2, [$0], []));
  },
  set$value: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("value=", "set$value", 2, [$0], []));
  },
  set$viewPartContainer: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("viewPartContainer=", "set$viewPartContainer", 2, [$0], []));
  },
  set$visibility: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("visibility=", "set$visibility", 2, [$0], []));
  },
  set$width: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("width=", "set$width", 2, [$0], []));
  },
  setDirty$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setDirty", "setDirty$1", 0, [$0], []));
  },
  setEnd$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setEnd", "setEnd$2", 0, [$0, $1], []));
  },
  setIndeterminate$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setIndeterminate", "setIndeterminate$1", 0, [$0], []));
  },
  setInput$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setInput", "setInput$1", 0, [$0], []));
  },
  setMode$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setMode", "setMode$1", 0, [$0], []));
  },
  setName$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setName", "setName$1", 0, [$0], []));
  },
  setNext$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setNext", "setNext$1", 0, [$0], []));
  },
  setProperty$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setProperty", "setProperty$2", 0, [$0, $1], []));
  },
  setRange$4: function($receiver, $0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setRange", "setRange$4", 0, [$0, $1, $2, $3], []));
  },
  setSelectionRange$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setSelectionRange", "setSelectionRange$2", 0, [$0, $1], []));
  },
  setSession$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setSession", "setSession$1", 0, [$0], []));
  },
  setShowPrintMargin$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setShowPrintMargin", "setShowPrintMargin$1", 0, [$0], []));
  },
  setSourceStart$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setSourceStart", "setSourceStart$3", 0, [$0, $1, $2], []));
  },
  setStart$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setStart", "setStart$2", 0, [$0, $1], []));
  },
  setState$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setState", "setState$2", 0, [$0, $1], []));
  },
  setTheme$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setTheme", "setTheme$1", 0, [$0], []));
  },
  setValue$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setValue", "setValue$1", 0, [$0], []));
  },
  setValue$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("setValue", "setValue$2", 0, [$0, $1], []));
  },
  shouldCallBack$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("shouldCallBack", "shouldCallBack$0", 0, [], []));
  },
  show$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("show", "show$0", 0, [], []));
  },
  skip$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("skip", "skip$1", 0, [$0], []));
  },
  split$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("split", "split$1", 0, [$0], []));
  },
  startsWith$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("startsWith", "startsWith$1", 0, [$0], []));
  },
  stopImmediatePropagation$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("stopImmediatePropagation", "stopImmediatePropagation$0", 0, [], []));
  },
  stopPropagation$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("stopPropagation", "stopPropagation$0", 0, [], []));
  },
  stringify$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("stringify", "stringify$1", 0, [$0], []));
  },
  stringifyValue$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("stringifyValue", "stringifyValue$1", 0, [$0], []));
  },
  substring$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("substring", "substring$1", 0, [$0], []));
  },
  substring$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("substring", "substring$2", 0, [$0, $1], []));
  },
  text$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("text", "text$1", 0, [$0], []));
  },
  then$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("then", "then$1", 0, [$0], []));
  },
  then$2$onError: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("then", "then$2$onError", 0, [$0, $1], ["onError"]));
  },
  toInt$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toInt", "toInt$0", 0, [], []));
  },
  toJs$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toJs", "toJs$0", 0, [], []));
  },
  toJson$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toJson", "toJson$0", 0, [], []));
  },
  toList$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toList", "toList$0", 0, [], []));
  },
  toLowerCase$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toLowerCase", "toLowerCase$0", 0, [], []));
  },
  toSendPort$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toSendPort", "toSendPort$0", 0, [], []));
  },
  toStringAsFixed$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toStringAsFixed", "toStringAsFixed$1", 0, [$0], []));
  },
  toUpperCase$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toUpperCase", "toUpperCase$0", 0, [], []));
  },
  toggle$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toggle", "toggle$1", 0, [$0], []));
  },
  toggleActive$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toggleActive", "toggleActive$0", 0, [], []));
  },
  toggleOpen$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toggleOpen", "toggleOpen$1", 0, [$0], []));
  },
  tokenize$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenize", "tokenize$0", 0, [], []));
  },
  tokenizeAmpersand$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeAmpersand", "tokenizeAmpersand$1", 0, [$0], []));
  },
  tokenizeBar$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeBar", "tokenizeBar$1", 0, [$0], []));
  },
  tokenizeDotOrNumber$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeDotOrNumber", "tokenizeDotOrNumber$1", 0, [$0], []));
  },
  tokenizeEquals$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeEquals", "tokenizeEquals$1", 0, [$0], []));
  },
  tokenizeExclamation$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeExclamation", "tokenizeExclamation$1", 0, [$0], []));
  },
  tokenizeExponent$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeExponent", "tokenizeExponent$1", 0, [$0], []));
  },
  tokenizeFractionPart$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeFractionPart", "tokenizeFractionPart$2", 0, [$0, $1], []));
  },
  tokenizeGreaterThan$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeGreaterThan", "tokenizeGreaterThan$1", 0, [$0], []));
  },
  tokenizeHex$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeHex", "tokenizeHex$1", 0, [$0], []));
  },
  tokenizeHexOrNumber$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeHexOrNumber", "tokenizeHexOrNumber$1", 0, [$0], []));
  },
  tokenizeIdentifier$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeIdentifier", "tokenizeIdentifier$3", 0, [$0, $1, $2], []));
  },
  tokenizeInterpolatedExpression$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeInterpolatedExpression", "tokenizeInterpolatedExpression$2", 0, [$0, $1], []));
  },
  tokenizeInterpolatedIdentifier$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeInterpolatedIdentifier", "tokenizeInterpolatedIdentifier$2", 0, [$0, $1], []));
  },
  tokenizeKeywordOrIdentifier$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeKeywordOrIdentifier", "tokenizeKeywordOrIdentifier$2", 0, [$0, $1], []));
  },
  tokenizeLessThan$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeLessThan", "tokenizeLessThan$1", 0, [$0], []));
  },
  tokenizeMinus$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeMinus", "tokenizeMinus$1", 0, [$0], []));
  },
  tokenizeMultiLineComment$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeMultiLineComment", "tokenizeMultiLineComment$1", 0, [$0], []));
  },
  tokenizeMultiLineRawString$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeMultiLineRawString", "tokenizeMultiLineRawString$2", 0, [$0, $1], []));
  },
  tokenizeMultiLineString$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeMultiLineString", "tokenizeMultiLineString$3", 0, [$0, $1, $2], []));
  },
  tokenizeNumber$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeNumber", "tokenizeNumber$1", 0, [$0], []));
  },
  tokenizeOpenSquareBracket$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeOpenSquareBracket", "tokenizeOpenSquareBracket$1", 0, [$0], []));
  },
  tokenizePlus$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizePlus", "tokenizePlus$1", 0, [$0], []));
  },
  tokenizeSingleLineComment$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeSingleLineComment", "tokenizeSingleLineComment$1", 0, [$0], []));
  },
  tokenizeSingleLineRawString$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeSingleLineRawString", "tokenizeSingleLineRawString$3", 0, [$0, $1, $2], []));
  },
  tokenizeSingleLineString$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeSingleLineString", "tokenizeSingleLineString$3", 0, [$0, $1, $2], []));
  },
  tokenizeSlashOrComment$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeSlashOrComment", "tokenizeSlashOrComment$1", 0, [$0], []));
  },
  tokenizeString$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeString", "tokenizeString$3", 0, [$0, $1, $2], []));
  },
  tokenizeStringInterpolation$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeStringInterpolation", "tokenizeStringInterpolation$1", 0, [$0], []));
  },
  tokenizeTag$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeTag", "tokenizeTag$1", 0, [$0], []));
  },
  tokenizeTilde$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tokenizeTilde", "tokenizeTilde$1", 0, [$0], []));
  },
  traverse$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("traverse", "traverse$1", 0, [$0], []));
  },
  trim$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("trim", "trim$0", 0, [], []));
  },
  union$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("union", "union$1", 0, [$0], []));
  },
  updateEnabled$0: function() {
    return this.noSuchMethod$1(this, $.createInvocationMirror("updateEnabled", "updateEnabled$0", 0, [], []));
  },
  updatedValue$3: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("updatedValue", "updatedValue$3", 0, [$0, $1, $2], []));
  },
  visibility$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("visibility", "visibility$1", 0, [$0], []));
  },
  visitCloseToken$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("visitCloseToken", "visitCloseToken$1", 0, [$0], []));
  },
  visitIsolateSink$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("visitIsolateSink", "visitIsolateSink$1", 0, [$0], []));
  },
  visitList$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("visitList", "visitList$1", 0, [$0], []));
  },
  visitMap$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("visitMap", "visitMap$1", 0, [$0], []));
  },
  visitObject$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("visitObject", "visitObject$1", 0, [$0], []));
  },
  visitPrimitive$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("visitPrimitive", "visitPrimitive$1", 0, [$0], []));
  },
  visitSendPort$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("visitSendPort", "visitSendPort$1", 0, [$0], []));
  },
  visitSendPortSync$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("visitSendPortSync", "visitSendPortSync$1", 0, [$0], []));
  },
  whenComplete$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("whenComplete", "whenComplete$1", 0, [$0], []));
  },
  where$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("where", "where$1", 0, [$0], []));
  },
  write$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("write", "write$1", 0, [$0], []));
  },
  write$2: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("write", "write$2", 0, [$0, $1], []));
  },
  writeContents$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("writeContents", "writeContents$1", 0, [$0], []));
  }
},

"+Object": 0,

Match: {
  "": function Match() {
  },
  "super": "Object"
},

"+Match": 0,

StringBuffer: {
  "": function StringBuffer(_contents) {
    this._contents = _contents;
  },
  "super": "Object",
  get$_contents: function() {
    return this._contents;
  },
  set$_contents: function(v) {
    this._contents = v;
  },
  get$length: function(_) {
    return this._contents.length;
  },
  get$isEmpty: function(_) {
    return this._contents.length === 0;
  },
  get$isNotEmpty: function(_) {
    return this._contents.length !== 0;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (; iterator.moveNext$0() === true;) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  "+writeAll:1:1": 0,
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
},

"+StringBuffer": 0,

Symbol: {
  "": function Symbol() {
  },
  "super": "Object",
  $isSymbol: true
},

"+Symbol": 0,

_symbolMapToStringMap: function(map) {
  var result;
  if (map == null)
    return;
  result = new $.HashMap(0, null, null, null, null);
  result.$builtinTypeInfo = [$.JSString, null];
  $.forEach$1$ax(map, new $._symbolMapToStringMap_closure(result));
  return result;
},

Function__toMangledNames: function(namedArguments) {
  var result;
  return;
  result = $.makeLiteralMap([]);
  $.JSNull_methods.forEach$1(namedArguments, new $.Function__toMangledNames_closure(result));
  return result;
},

"+_toMangledNames:1:0": 0,

Comparable_compare: function(a, b) {
  return $.compareTo$1$ns(a, b);
},

"+compare:2:0": 0,

Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  var t1 = $.$mul$n(milliseconds, 1000);
  if (typeof t1 !== "number")
    throw $.iae(t1);
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + t1 + microseconds);
},

"+new Duration:0:6": 0,

Error_safeToString: function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string") {
    t1 = $.JSString_methods.replaceAll$2(object, "\\", "\\\\");
    t1 = $.stringReplaceAllUnchecked(t1, "\n", "\\n");
    t1 = $.stringReplaceAllUnchecked(t1, "\r", "\\r");
    return "\"" + $.stringReplaceAllUnchecked(t1, "\"", "\\\"") + "\"";
  }
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
},

"+safeToString:1:0": 0,

StateError$: function(message) {
  return new $.StateError(message);
},

"+new StateError:1:0": 0,

Exception_Exception: function(message) {
  return new $._ExceptionImplementation(message);
},

"+new Exception:0:1": 0,

_ExceptionImplementation$: function(message) {
  return new $._ExceptionImplementation(message);
},

"+new _ExceptionImplementation:0:1": 0,

List_List: function($length, E) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException(new $.ArgumentError("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
},

"+new List:0:1": 0,

List_List$filled: function($length, fill, E) {
  var result, t1, i;
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException(new $.ArgumentError("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !$.isJsIndexable(result, result[$.dispatchPropertyName]))
    return $.List_List$filled$bailout(1, $length, fill, result);
  result.fixed$length = true;
  if (!$.$eq($length, 0) && fill != null)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

"+new List$filled:2:0": 0,

List_List$filled$bailout: function(state0, $length, fill, result) {
  var i;
  result.fixed$length = true;
  if (!$.$eq($length, 0) && fill != null)
    for (i = 0; i < result.length; ++i)
      $.JSArray_methods.$indexSet(result, i, fill);
  return result;
},

List_List$from: function(other, growable, E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = $.List_List($, E);
  list.$builtinTypeInfo = [E];
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = $.List_List($length, E);
  fixedList.$builtinTypeInfo = [E];
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
},

"+new List$from:1:1": 0}],
["dart.dom.html", "dart:html", , {
Console: {
  "": function Console() {
  },
  "super": "Object",
  "@": function() {
    return [$.DomName_Console];
  },
  group$1: function(arg) {
    return typeof console != "undefined" ? console.group(arg) : null;
  },
  "@group$1": function() {
    return [$.DomName_Odg];
  }
},

"+Console": 0,

_ChildrenElementList: {
  "": function _ChildrenElementList(_element, _childElements) {
    this._element = _element;
    this._childElements = _childElements;
  },
  "super": "ListBase",
  get$_element: function() {
    return this._element;
  },
  get$_childElements: function() {
    return this._childElements;
  },
  contains$1: function(_, element) {
    return $.contains$1$asx(this._childElements, element);
  },
  get$isEmpty: function(_) {
    return this._element.firstElementChild == null;
  },
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    this._element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this.toList$0(this));
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy ? $.List_List$from(iterable, true, null) : iterable), t2 = this._element; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnimplementedError(null));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  replaceRange$3: function(_, start, end, iterable) {
    throw $.wrapException(new $.UnimplementedError(null));
  },
  remove$1: function(_, object) {
    var t1;
    if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isElement) {
      t1 = this._element;
      if (object.parentNode === t1) {
        t1.removeChild(object);
        return true;
      }
    }
    return false;
  },
  insert$2: function(_, index, element) {
    var t1, t2, t3;
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) === true || t1.$gt(index, this._childElements.length) === true) {
      t1 = this._childElements.length;
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    }
    t2 = this._childElements;
    t3 = this._element;
    if (t1.$eq(index, t2.length))
      t3.appendChild(element);
    else {
      if (index >>> 0 !== index || index >= t2.length)
        throw $.ioore(index);
      t3.insertBefore(element, t2[index]);
    }
  },
  setAll$2: function(_, index, iterable) {
    throw $.wrapException(new $.UnimplementedError(null));
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  removeAt$1: function(_, index) {
    var t1, result;
    t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    result = t1[index];
    this._element.removeChild(result);
    return result;
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._element;
    result = t1.lastElementChild;
    t2 = result == null;
    if (t2)
      $.throwExpression(new $.StateError("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  get$first: function(_) {
    var result = this._element.firstElementChild;
    if (result == null)
      throw $.wrapException(new $.StateError("No elements"));
    return result;
  },
  get$single: function(_) {
    var result;
    if (this._childElements.length > 1)
      throw $.wrapException(new $.StateError("More than one element"));
    result = this._element.firstElementChild;
    if (result == null)
      $.throwExpression(new $.StateError("No elements"));
    return result;
  },
  $asListBase: function() { return [$.Element]; },
  $asList: function() { return [$.Element]; },
  $asIterable: function() { return [$.Element]; }
},

"+_ChildrenElementList": 0,

_FrozenElementList: {
  "": function _FrozenElementList(_nodeList) {
    this._nodeList = _nodeList;
  },
  "super": "ListBase",
  get$_nodeList: function() {
    return this._nodeList;
  },
  get$length: function(_) {
    return this._nodeList.length;
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify list"));
  },
  set$length: function(_, newLength) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify list"));
  },
  get$first: function(_) {
    return $.NodeList_methods.get$first(this._nodeList);
  },
  get$single: function(_) {
    return $.NodeList_methods.get$single(this._nodeList);
  },
  get$classes: function(_) {
    return $._MultiElementCssClassSet$($.NodeList_methods.where$1(this._nodeList, new $._FrozenElementList_classes_closure()));
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
},

"+_FrozenElementList": 0,

_FrozenElementList_classes_closure: {
  "": function _FrozenElementList_classes_closure() {
  },
  "super": "Closure",
  call$1: function(e) {
    return typeof e === "object" && e !== null && !!$.getInterceptor(e).$isElement;
  },
  $isFunction: true
},

"+_FrozenElementList_classes_closure": 0,

Entry_remove_closure: {
  "": function Entry_remove_closure(completer_0) {
    this.completer_0 = completer_0;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2;
    t1 = this.completer_0;
    if (t1._isComplete)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._isComplete = true;
    t2 = t1.future._zone;
    t2._openCallbacks = t2._openCallbacks - 1;
    if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
      ;
    t1._setFutureValue$1(null);
  },
  $isFunction: true
},

"+Entry_remove_closure": 0,

Entry_remove_closure0: {
  "": function Entry_remove_closure(completer_1) {
    this.completer_1 = completer_1;
  },
  "super": "Closure",
  call$1: function(error) {
    this.completer_1.completeError$1(error);
  },
  $isFunction: true
},

"+Entry_remove_closure": 0,

Events: {
  "": function Events(_ptr) {
    this._ptr = _ptr;
  },
  "super": "Object",
  get$_ptr: function() {
    return this._ptr;
  },
  $index: function(_, type) {
    var t1 = new $._EventStream(this._ptr, type, false);
    t1.$builtinTypeInfo = [null];
    return t1;
  }
},

"+Events": 0,

Interceptor_ListMixin: {
  "": function Interceptor_ListMixin() {
  },
  "super": "Interceptor+ListMixin",
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; }
},

"+Interceptor_ListMixin": 0,

Interceptor_ListMixin_ImmutableListMixin: {
  "": function Interceptor_ListMixin_ImmutableListMixin() {
  },
  "super": "Interceptor_ListMixin+ImmutableListMixin",
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; }
},

"+Interceptor_ListMixin_ImmutableListMixin": 0,

HttpRequest_getString_closure: {
  "": function HttpRequest_getString_closure() {
  },
  "super": "Closure",
  call$1: function(xhr) {
    return $.get$responseText$x(xhr);
  },
  $isFunction: true
},

"+HttpRequest_getString_closure": 0,

HttpRequest_request_closure1: {
  "": function HttpRequest_request_closure(xhr_0) {
    this.xhr_0 = xhr_0;
  },
  "super": "Closure",
  call$2: function(header, value) {
    this.xhr_0.setRequestHeader(header, value);
  },
  $isFunction: true
},

"+HttpRequest_request_closure": 0,

HttpRequest_request_closure: {
  "": function HttpRequest_request_closure(completer_1, xhr_2) {
    this.completer_1 = completer_1;
    this.xhr_2 = xhr_2;
  },
  "super": "Closure",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.xhr_2;
    t2 = t1.status;
    if (t2 == null)
      throw t2.$ge();
    t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
    t3 = this.completer_1;
    if (t2) {
      if (t3._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t3._isComplete = true;
      t2 = t3.future._zone;
      t2._openCallbacks = t2._openCallbacks - 1;
      if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      t3._setFutureValue$1(t1);
    } else
      t3.completeError$1(e);
  },
  $isFunction: true
},

"+HttpRequest_request_closure": 0,

HttpRequest_request_closure0: {
  "": function HttpRequest_request_closure(completer_3) {
    this.completer_3 = completer_3;
  },
  "super": "Closure",
  call$1: function(e) {
    this.completer_3.completeError$1(e);
  },
  $isFunction: true
},

"+HttpRequest_request_closure": 0,

MutationObserver_observe_override: {
  "": function MutationObserver_observe_override(parsedOptions_0) {
    this.parsedOptions_0 = parsedOptions_0;
  },
  "super": "Closure",
  call$2: function(key, value) {
    if (value != null)
      this.parsedOptions_0[key] = value;
  },
  $isFunction: true
},

"+MutationObserver_observe_override": 0,

_ChildNodeListLazy: {
  "": function _ChildNodeListLazy(_this) {
    this._this = _this;
  },
  "super": "ListBase",
  get$_this: function() {
    return this._this;
  },
  get$first: function(_) {
    var result = this._this.firstChild;
    if (result == null)
      throw $.wrapException(new $.StateError("No elements"));
    return result;
  },
  get$single: function(_) {
    var t1, l;
    t1 = this._this;
    l = t1.childNodes.length;
    if (l === 0)
      throw $.wrapException(new $.StateError("No elements"));
    if (l > 1)
      throw $.wrapException(new $.StateError("More than one element"));
    return t1.firstChild;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2, len, i, t3;
    if (typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy) {
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i) {
          t3 = t1.childNodes;
          if (0 >= t3.length)
            throw $.ioore(0);
          t2.appendChild(t3[0]);
        }
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  insert$2: function(_, index, node) {
    var t1, t2;
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) === true || t1.$gt(index, this._this.childNodes.length) === true) {
      t1 = this._this.childNodes.length;
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    }
    t2 = this._this;
    if (t1.$eq(index, t2.childNodes.length))
      t2.appendChild(node);
    else {
      t1 = t2.childNodes;
      if (index >>> 0 !== index || index >= t1.length)
        throw $.ioore(index);
      t2.insertBefore(node, t1[index]);
    }
  },
  insertAll$2: function(_, index, iterable) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index < 0 || index >= t2.length)
      throw $.ioore(index);
    $.insertAllBefore$2$x(t1, iterable, t2[index]);
  },
  setAll$2: function(_, index, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot setAll on Node list"));
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._this;
    result = t1.lastChild;
    t2 = result == null;
    if (t2)
      $.throwExpression(new $.StateError("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  removeAt$1: function(_, index) {
    var t1, t2, result;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw $.ioore(index);
    result = t2[index];
    t1.removeChild(result);
    return result;
  },
  remove$1: function(_, object) {
    var t1;
    if (typeof object !== "object" || object === null || !$.getInterceptor(object).$isNode)
      return false;
    t1 = this._this;
    if (t1 !== object.parentNode)
      return false;
    t1.removeChild(object);
    return true;
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw $.ioore(index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return $.NodeList_methods.get$iterator(this._this.childNodes);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnsupportedError("Cannot setRange on Node list"));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $is_ChildNodeListLazy: true,
  $asListBase: function() { return [$.Node]; },
  $asList: function() { return [$.Node]; },
  $asIterable: function() { return [$.Node]; }
},

"+_ChildNodeListLazy": 0,

Interceptor_ListMixin0: {
  "": function Interceptor_ListMixin() {
  },
  "super": "Interceptor+ListMixin",
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; }
},

"+Interceptor_ListMixin": 0,

Interceptor_ListMixin_ImmutableListMixin0: {
  "": function Interceptor_ListMixin_ImmutableListMixin() {
  },
  "super": "Interceptor_ListMixin0+ImmutableListMixin",
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; }
},

"+Interceptor_ListMixin_ImmutableListMixin": 0,

Interceptor_ListMixin1: {
  "": function Interceptor_ListMixin() {
  },
  "super": "Interceptor+ListMixin",
  $isList: true,
  $asList: function() { return [$.Entry]; },
  $isIterable: true,
  $asIterable: function() { return [$.Entry]; }
},

"+Interceptor_ListMixin": 0,

Interceptor_ListMixin_ImmutableListMixin1: {
  "": function Interceptor_ListMixin_ImmutableListMixin() {
  },
  "super": "Interceptor_ListMixin1+ImmutableListMixin",
  $isList: true,
  $asList: function() { return [$.Entry]; },
  $isIterable: true,
  $asIterable: function() { return [$.Entry]; }
},

"+Interceptor_ListMixin_ImmutableListMixin": 0,

Interceptor_ListMixin2: {
  "": function Interceptor_ListMixin() {
  },
  "super": "Interceptor+ListMixin",
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; }
},

"+Interceptor_ListMixin": 0,

Interceptor_ListMixin_ImmutableListMixin2: {
  "": function Interceptor_ListMixin_ImmutableListMixin() {
  },
  "super": "Interceptor_ListMixin2+ImmutableListMixin",
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; }
},

"+Interceptor_ListMixin_ImmutableListMixin": 0,

_AttributeMap: {
  "": function _AttributeMap(_element) {
    this._element = _element;
  },
  "super": "Object",
  get$_element: function() {
    return this._element;
  },
  forEach$1: function(_, f) {
    var t1, t2, key;
    t1 = this.get$keys();
    t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();) {
      key = t1._liblib$_current;
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i, t1;
    attributes = this._element.attributes;
    keys = $.List_List($, $.JSString);
    keys.$builtinTypeInfo = [$.JSString];
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        keys.push($.get$name$x(t1));
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._element.attributes;
    values = $.List_List($, $.JSString);
    values.$builtinTypeInfo = [$.JSString];
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        values.push($.get$value$x(t1));
    }
    return values;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  get$isNotEmpty: function(_) {
    return this.get$length(this) !== 0;
  },
  $isMap: true,
  $asMap: function() { return [$.JSString, $.JSString]; }
},

"+_AttributeMap": 0,

_ElementAttributeMap: {
  "": function _ElementAttributeMap(_element) {
    this._element = _element;
  },
  "super": "_AttributeMap",
  containsKey$1: function(key) {
    return this._element.hasAttribute(key);
  },
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  },
  "+_matches:1:0": 0
},

"+_ElementAttributeMap": 0,

_MultiElementCssClassSet: {
  "": function _MultiElementCssClassSet(_elementIterable, _elementCssClassSetIterable) {
    this._elementIterable = _elementIterable;
    this._elementCssClassSetIterable = _elementCssClassSetIterable;
  },
  "super": "CssClassSetImpl",
  get$_elementIterable: function() {
    return this._elementIterable;
  },
  get$_elementCssClassSetIterable: function() {
    return this._elementCssClassSetIterable;
  },
  set$_elementCssClassSetIterable: function(v) {
    this._elementCssClassSetIterable = v;
  },
  readClasses$0: function() {
    var s, t1;
    s = new $.LinkedHashSet(0, null, null, null, null, null, 0);
    s.$builtinTypeInfo = [$.JSString];
    t1 = this._elementCssClassSetIterable;
    t1.forEach$1(t1, new $._MultiElementCssClassSet_readClasses_closure(s));
    return s;
  },
  writeClasses$1: function(s) {
    var classes, t1, t2, t3;
    classes = $.join$1$ax($.List_List$from(s, true, null), " ");
    t1 = this._elementIterable;
    t2 = $.get$iterator$ax(t1._iterable);
    t3 = $.getRuntimeTypeArgument(t1, t1.$asWhereIterable, 0);
    t1 = new $.WhereIterator(t2, t1._f);
    t1.$builtinTypeInfo = [t3];
    t2 = t1._iterator;
    for (; t1.moveNext$0();)
      $.set$$$dom_className$x(t2.get$current(), classes);
  },
  "+writeClasses:1:0": 0,
  modify$1: function(_, f) {
    var t1 = this._elementCssClassSetIterable;
    t1.forEach$1(t1, new $._MultiElementCssClassSet_modify_closure(f));
  },
  toggle$1: function(value) {
    return this._modifyWithReturnValue$1(new $._MultiElementCssClassSet_toggle_closure(value));
  },
  remove$1: function(_, value) {
    return this._modifyWithReturnValue$1(new $._MultiElementCssClassSet_remove_closure(value));
  },
  _modifyWithReturnValue$1: function(f) {
    var t1 = this._elementCssClassSetIterable;
    return t1.fold$2(t1, false, new $._MultiElementCssClassSet__modifyWithReturnValue_closure(f));
  },
  "+_modifyWithReturnValue:1:0": 0,
  _MultiElementCssClassSet$1: function(_elementIterable) {
    var t1 = new $.MappedListIterable($.List_List$from(this._elementIterable, true, null), new $._MultiElementCssClassSet_closure());
    t1.$builtinTypeInfo = [null, null];
    this._elementCssClassSetIterable = t1;
  }
},

"+_MultiElementCssClassSet": 0,

_MultiElementCssClassSet_closure: {
  "": function _MultiElementCssClassSet_closure() {
  },
  "super": "Closure",
  call$1: function(e) {
    return new $._ElementCssClassSet(e);
  },
  $isFunction: true
},

"+_MultiElementCssClassSet_closure": 0,

_MultiElementCssClassSet_readClasses_closure: {
  "": function _MultiElementCssClassSet_readClasses_closure(s_0) {
    this.s_0 = s_0;
  },
  "super": "Closure",
  call$1: function(e) {
    var t1 = this.s_0;
    return t1.addAll$1(t1, e.readClasses$0());
  },
  $isFunction: true
},

"+_MultiElementCssClassSet_readClasses_closure": 0,

_MultiElementCssClassSet_modify_closure: {
  "": function _MultiElementCssClassSet_modify_closure(f_0) {
    this.f_0 = f_0;
  },
  "super": "Closure",
  call$1: function(e) {
    return $.modify$1$x(e, this.f_0);
  },
  $isFunction: true
},

"+_MultiElementCssClassSet_modify_closure": 0,

_MultiElementCssClassSet_toggle_closure: {
  "": function _MultiElementCssClassSet_toggle_closure(value_0) {
    this.value_0 = value_0;
  },
  "super": "Closure",
  call$1: function(e) {
    return e.toggle$1(this.value_0);
  },
  $isFunction: true
},

"+_MultiElementCssClassSet_toggle_closure": 0,

_MultiElementCssClassSet_remove_closure: {
  "": function _MultiElementCssClassSet_remove_closure(value_0) {
    this.value_0 = value_0;
  },
  "super": "Closure",
  call$1: function(e) {
    return $.remove$1$ax(e, this.value_0);
  },
  $isFunction: true
},

"+_MultiElementCssClassSet_remove_closure": 0,

_MultiElementCssClassSet__modifyWithReturnValue_closure: {
  "": function _MultiElementCssClassSet__modifyWithReturnValue_closure(f_0) {
    this.f_0 = f_0;
  },
  "super": "Closure",
  call$2: function(prevValue, element) {
    return this.f_0.call$1(element) === true || prevValue === true;
  },
  $isFunction: true
},

"+_MultiElementCssClassSet__modifyWithReturnValue_closure": 0,

_ElementCssClassSet: {
  "": function _ElementCssClassSet(_element) {
    this._element = _element;
  },
  "super": "CssClassSetImpl",
  get$_element: function() {
    return this._element;
  },
  readClasses$0: function() {
    var s, t1, trimmed;
    s = new $.LinkedHashSet(0, null, null, null, null, null, 0);
    s.$builtinTypeInfo = [$.JSString];
    for (t1 = $.get$iterator$ax($.split$1$s($.get$$$dom_className$x(this._element), " ")); t1.moveNext$0() === true;) {
      trimmed = $.trim$0$s(t1.get$current());
      if ($.get$isEmpty$asx(trimmed) !== true)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    $.List_List$from(s, true, null);
    $.set$$$dom_className$x(this._element, s.join$1(s, " "));
  }
},

"+_ElementCssClassSet": 0,

_EventStream: {
  "": function _EventStream(_liblib3$_target, _eventType, _useCapture) {
    this._liblib3$_target = _liblib3$_target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  },
  "super": "Stream",
  get$_liblib3$_target: function() {
    return this._liblib3$_target;
  },
  get$_eventType: function() {
    return this._eventType;
  },
  get$_useCapture: function() {
    return this._useCapture;
  },
  get$isBroadcast: function() {
    return true;
  },
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(this, this.$as_EventStream, 0);
    t2 = new $._EventStreamSubscription(0, this._liblib3$_target, this._eventType, onData, this._useCapture);
    t2.$builtinTypeInfo = [t1];
    t1 = t2._onData;
    if (t1 != null && t2._pauseCount <= 0)
      $.$$dom_addEventListener$3$x(t2._liblib3$_target, t2._eventType, t1, t2._useCapture);
    return t2;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  $asStream: null
},

"+_EventStream": 0,

_EventStreamSubscription: {
  "": function _EventStreamSubscription(_pauseCount, _liblib3$_target, _eventType, _onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._liblib3$_target = _liblib3$_target;
    this._eventType = _eventType;
    this._onData = _onData;
    this._useCapture = _useCapture;
  },
  "super": "StreamSubscription",
  get$_pauseCount: function() {
    return this._pauseCount;
  },
  set$_pauseCount: function(v) {
    this._pauseCount = v;
  },
  get$_liblib3$_target: function() {
    return this._liblib3$_target;
  },
  set$_liblib3$_target: function(v) {
    this._liblib3$_target = v;
  },
  get$_eventType: function() {
    return this._eventType;
  },
  get$_onData: function() {
    return this._onData;
  },
  set$_onData: function(v) {
    this._onData = v;
  },
  get$_useCapture: function() {
    return this._useCapture;
  },
  cancel$0: function() {
    var t1, t2;
    t1 = this._liblib3$_target;
    if (t1 == null)
      return;
    t2 = this._onData;
    if (t2 != null)
      $.$$dom_removeEventListener$3$x(t1, this._eventType, t2, this._useCapture);
    this._liblib3$_target = null;
    this._onData = null;
  },
  pause$1: function(_, resumeSignal) {
    var t1;
    if (this._liblib3$_target == null)
      return;
    this._pauseCount = this._pauseCount + 1;
    t1 = this._onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._liblib3$_target, this._eventType, t1, this._useCapture);
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  get$isPaused: function() {
    return this._pauseCount > 0;
  },
  "+isPaused": 0,
  resume$0: function() {
    if (this._liblib3$_target == null || this._pauseCount <= 0)
      return;
    this._pauseCount = this._pauseCount - 1;
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      $.$$dom_addEventListener$3$x(this._liblib3$_target, this._eventType, t1, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture, T) {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      $.$$dom_addEventListener$3$x(this._liblib3$_target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

"+_EventStreamSubscription": 0,

EventStreamProvider: {
  "": function EventStreamProvider(_eventType) {
    this._eventType = _eventType;
  },
  "super": "Object",
  get$_eventType: function() {
    return this._eventType;
  }
},

"+EventStreamProvider": 0,

ImmutableListMixin: {
  "": function ImmutableListMixin() {
  },
  "super": "Object",
  get$iterator: function(receiver) {
    var t1, t2;
    t1 = $.getRuntimeTypeArgument(receiver, receiver.$asImmutableListMixin, 0);
    t2 = new $.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
    t2.$builtinTypeInfo = [t1];
    return t2;
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  insert$2: function(receiver, index, element) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeAt$1: function(receiver, pos) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException(new $.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnsupportedError("Cannot setRange on immutable List."));
  },
  replaceRange$3: function(receiver, start, end, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot modify an immutable List."));
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
},

"+ImmutableListMixin": 0,

Point: {
  "": function Point(x, y) {
    this.x = x;
    this.y = y;
  },
  "super": "Object",
  get$x: function(receiver) {
    return this.x;
  },
  get$y: function(receiver) {
    return this.y;
  },
  toString$0: function(_) {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ")";
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isPoint)
      return false;
    return $.$eq(this.x, other.x) && $.$eq(this.y, other.y);
  },
  $add: function(_, other) {
    var t1, t2, t3;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, other, t1);
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t3 !== "number")
      return this.$$add$bailout(2, other, t1, t2, t3);
    t3 = t1 + t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$add$bailout(3, other, t1, t2, t3);
    t2 = t2.get$y(other);
    if (typeof t2 !== "number")
      return this.$$add$bailout(4, 0, t1, t2, t3);
    return new $.Point(t3, t1 + t2);
  },
  $$add$bailout: function(state0, other, t1, t2, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$x(other);
        t3 = t2.get$x(other);
      case 2:
        state0 = 0;
        t3 = $.$add$ns(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t2 = t2.get$y(other);
      case 4:
        state0 = 0;
        return new $.Point(t3, $.$add$ns(t1, t2));
    }
  },
  $sub: function(_, other) {
    var t1, t2, t3;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(1, other, t1);
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t3 !== "number")
      return this.$$sub$bailout(2, other, t1, t2, t3);
    t3 = t1 - t3;
    t1 = this.y;
    if (typeof t1 !== "number")
      return this.$$sub$bailout(3, other, t1, t2, t3);
    t2 = t2.get$y(other);
    if (typeof t2 !== "number")
      return this.$$sub$bailout(4, 0, t1, t2, t3);
    return new $.Point(t3, t1 - t2);
  },
  $$sub$bailout: function(state0, other, t1, t2, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$x(other);
        t3 = t2.get$x(other);
      case 2:
        state0 = 0;
        t3 = $.$sub$n(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t2 = t2.get$y(other);
      case 4:
        state0 = 0;
        return new $.Point(t3, $.$sub$n(t1, t2));
    }
  },
  $mul: function(_, factor) {
    return new $.Point($.$mul$n(this.x, factor), $.$mul$n(this.y, factor));
  },
  toInt$0: function(_) {
    return new $.Point($.toInt$0$nx(this.x), $.toInt$0$nx(this.y));
  },
  $isPoint: true
},

"+Point": 0,

Rect: {
  "": function Rect(left, top, width, height) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
  },
  "super": "Object",
  get$left: function(receiver) {
    return this.left;
  },
  get$top: function(receiver) {
    return this.top;
  },
  get$width: function(receiver) {
    return this.width;
  },
  get$height: function(receiver) {
    return this.height;
  },
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = $.getInterceptor$x(other);
    return $.$eq(this.left, t1.get$left(other)) && $.$eq(this.top, t1.get$top(other)) && $.$eq(this.width, t1.get$width(other)) && $.$eq(this.height, t1.get$height(other));
  },
  union$1: function(_, rect) {
    var t1, t2, right, t3, bottom, left, $top;
    t1 = this.left;
    t2 = $.getInterceptor$x(rect);
    right = $.max($.$add$ns(t1, this.width), $.$add$ns(t2.get$left(rect), t2.get$width(rect)));
    t3 = this.top;
    bottom = $.max($.$add$ns(t3, this.height), $.$add$ns(t2.get$top(rect), t2.get$height(rect)));
    left = $.min(t1, t2.get$left(rect));
    $top = $.min(t3, t2.get$top(rect));
    return new $.Rect(left, $top, right - left, bottom - $top);
  },
  toInt$0: function(_) {
    return new $.Rect($.toInt$0$nx(this.left), $.toInt$0$nx(this.top), $.toInt$0$nx(this.width), $.toInt$0$nx(this.height));
  },
  get$topLeft: function(_) {
    return new $.Point(this.left, this.top);
  },
  $isRect: true,
  $asRect: null
},

"+Rect": 0,

_JsSerializer0: {
  "": function _JsSerializer(_liblib3$_nextFreeRefId, _liblib3$_visited) {
    this._liblib3$_nextFreeRefId = _liblib3$_nextFreeRefId;
    this._liblib3$_visited = _liblib3$_visited;
  },
  "super": "_Serializer0",
  visitSendPortSync$1: function(x) {
    if (!!$.getInterceptor(x).$is_JsSendPortSync)
      return ["sendport", "nativejs", x._liblib3$_id];
    if (!!$.getInterceptor(x).$is_LocalSendPortSync) {
      if ($.ReceivePortSync__cachedIsolateId == null) {
        if (!window.$dart$isolate$counter)
          window.$dart$isolate$counter = 1;
        $.ReceivePortSync__cachedIsolateId = window.$dart$isolate$counter++;
      }
      return ["sendport", "dart", $.ReceivePortSync__cachedIsolateId, x._liblib3$_receivePort._portId];
    }
    if (!!$.getInterceptor(x).$is_RemoteSendPortSync)
      return ["sendport", "dart", x._liblib3$_isolateId, x._portId];
    throw $.wrapException("Unknown port type " + $.S(x));
  },
  visitSendPort$1: function(x) {
    throw $.wrapException(new $.UnimplementedError("Asynchronous send port not yet implemented."));
  }
},

"+_JsSerializer": 0,

_JsDeserializer0: {
  "": function _JsDeserializer(_liblib3$_deserialized) {
    this._liblib3$_deserialized = _liblib3$_deserialized;
  },
  "super": "_Deserializer0",
  deserializeSendPort$1: function(x) {
    var t1, tag;
    t1 = $.getInterceptor$asx(x);
    tag = t1.$index(x, 1);
    switch (tag) {
      case "nativejs":
        return new $._JsSendPortSync(t1.$index(x, 2));
      case "dart":
        return $.ReceivePortSync__lookup(t1.$index(x, 2), t1.$index(x, 3));
      default:
        throw $.wrapException("Illegal SendPortSync type: " + $.S(tag));
    }
  }
},

"+_JsDeserializer": 0,

_JsSendPortSync: {
  "": function _JsSendPortSync(_liblib3$_id) {
    this._liblib3$_id = _liblib3$_id;
  },
  "super": "Object",
  get$_liblib3$_id: function() {
    return this._liblib3$_id;
  },
  callSync$1: function(message) {
    return new $._JsDeserializer0(null).deserialize$1(ReceivePortSync.dispatchCall(this._liblib3$_id, new $._JsSerializer0(0, new $._MessageTraverserVisitedMap0()).traverse$1(message)));
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_JsSendPortSync && $.$eq(this._liblib3$_id, other._liblib3$_id);
  },
  get$hashCode: function(_) {
    return this._liblib3$_id;
  },
  $is_JsSendPortSync: true,
  $isSendPortSync: true
},

"+_JsSendPortSync": 0,

_RemoteSendPortSync: {
  "": function _RemoteSendPortSync(_liblib3$_isolateId, _portId) {
    this._liblib3$_isolateId = _liblib3$_isolateId;
    this._portId = _portId;
  },
  "super": "Object",
  get$_liblib3$_isolateId: function() {
    return this._liblib3$_isolateId;
  },
  set$_liblib3$_isolateId: function(v) {
    this._liblib3$_isolateId = v;
  },
  get$_portId: function() {
    return this._portId;
  },
  set$_portId: function(v) {
    this._portId = v;
  },
  callSync$1: function(message) {
    var serialized = new $._JsSerializer0(0, new $._MessageTraverserVisitedMap0()).traverse$1(message);
    return new $._JsDeserializer0(null).deserialize$1($._RemoteSendPortSync__call(this._liblib3$_isolateId, this._portId, serialized));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_RemoteSendPortSync)
      t1 = $.$eq(this._liblib3$_isolateId, other._liblib3$_isolateId) && $.$eq(this._portId, other._portId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1 = this._portId;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $.$shr$n(this._liblib3$_isolateId, 16 + t1);
  },
  $is_RemoteSendPortSync: true,
  $isSendPortSync: true
},

"+_RemoteSendPortSync": 0,

_RemoteSendPortSync__call_closure: {
  "": function _RemoteSendPortSync__call_closure(box_0) {
    this.box_0 = box_0;
  },
  "super": "Closure",
  call$1: function(e) {
    this.box_0.result_0 = $.parse($.get$detail$x(e), null);
  },
  $isFunction: true
},

"+_RemoteSendPortSync__call_closure": 0,

_LocalSendPortSync: {
  "": function _LocalSendPortSync(_liblib3$_receivePort) {
    this._liblib3$_receivePort = _liblib3$_receivePort;
  },
  "super": "Object",
  get$_liblib3$_receivePort: function() {
    return this._liblib3$_receivePort;
  },
  set$_liblib3$_receivePort: function(v) {
    this._liblib3$_receivePort = v;
  },
  callSync$1: function(message) {
    return new $._JsDeserializer0(null).deserialize$1(new $._JsSerializer0(0, new $._MessageTraverserVisitedMap0()).traverse$1(this._liblib3$_receivePort._liblib3$_callback$1(new $._JsDeserializer0(null).deserialize$1(new $._JsSerializer0(0, new $._MessageTraverserVisitedMap0()).traverse$1(message)))));
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_LocalSendPortSync && this._liblib3$_receivePort === other._liblib3$_receivePort;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this._liblib3$_receivePort);
  },
  $is_LocalSendPortSync: true,
  $isSendPortSync: true
},

"+_LocalSendPortSync": 0,

ReceivePortSync: {
  "": function ReceivePortSync(_portId, _liblib3$_callback, _portSubscription) {
    this._portId = _portId;
    this._liblib3$_callback = _liblib3$_callback;
    this._portSubscription = _portSubscription;
  },
  "super": "Object",
  get$_portId: function() {
    return this._portId;
  },
  set$_portId: function(v) {
    this._portId = v;
  },
  get$_liblib3$_callback: function() {
    return this._liblib3$_callback;
  },
  set$_liblib3$_callback: function(v) {
    this._liblib3$_callback = v;
  },
  get$_portSubscription: function() {
    return this._portSubscription;
  },
  set$_portSubscription: function(v) {
    this._portSubscription = v;
  },
  _liblib3$_callback$1: function(arg0) {
    return this._liblib3$_callback.call$1(arg0);
  },
  receive$1: function(callback) {
    var t1, t2, t3;
    this._liblib3$_callback = callback;
    if (this._portSubscription == null) {
      t1 = window;
      if ($.ReceivePortSync__cachedIsolateId == null) {
        if (!window.$dart$isolate$counter)
          window.$dart$isolate$counter = 1;
        $.ReceivePortSync__cachedIsolateId = window.$dart$isolate$counter++;
      }
      t2 = $.ReceivePortSync__cachedIsolateId;
      t3 = this._portId;
      t3 = new $._EventStream(new $.Events(t1)._ptr, "dart-port-" + $.S(t2) + "-" + $.S(t3), false);
      t3.$builtinTypeInfo = [null];
      t1 = $.getRuntimeTypeArgument(t3, t3.$as_EventStream, 0);
      t3 = new $._EventStreamSubscription(0, t3._liblib3$_target, t3._eventType, new $.ReceivePortSync_receive_closure(this), t3._useCapture);
      t3.$builtinTypeInfo = [t1];
      t1 = t3._onData;
      if (t1 != null && !t3.get$isPaused())
        $.$$dom_addEventListener$3$x(t3._liblib3$_target, t3._eventType, t1, t3._useCapture);
      this._portSubscription = t3;
    }
  },
  "+receive:1:0": 0,
  close$0: function(_) {
    var t1 = $.ReceivePortSync__portMap;
    t1.remove$1(t1, this._portId);
    t1 = this._portSubscription;
    if (t1 != null)
      t1.cancel$0();
  },
  toSendPort$0: function() {
    return new $._LocalSendPortSync(this);
  },
  ReceivePortSync$0: function() {
    if ($.ReceivePortSync__portIdCount == null) {
      $.ReceivePortSync__portIdCount = 0;
      var t1 = new $.HashMap(0, null, null, null, null);
      t1.$builtinTypeInfo = [$.JSInt, $.ReceivePortSync];
      $.ReceivePortSync__portMap = t1;
    }
    t1 = $.ReceivePortSync__portIdCount;
    $.ReceivePortSync__portIdCount = $.$add$ns(t1, 1);
    this._portId = t1;
    t1 = $.ReceivePortSync__portMap;
    t1.$indexSet(t1, this._portId, this);
  }
},

"+ReceivePortSync": 0,

ReceivePortSync_receive_closure: {
  "": function ReceivePortSync_receive_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(e) {
    var data, t1, replyTo, output;
    data = $.parse($.get$detail$x(e), null);
    t1 = $.getInterceptor$asx(data);
    replyTo = t1.$index(data, 0);
    t1 = new $._JsSerializer0(0, new $._MessageTraverserVisitedMap0()).traverse$1(this.this_0._liblib3$_callback$1(new $._JsDeserializer0(null).deserialize$1(t1.$index(data, 1))));
    output = new $.StringBuffer("");
    output.StringBuffer$1("");
    new $._JsonStringifier(output, []).stringifyValue$1(t1);
    t1 = output._contents;
    e = document.createEvent("CustomEvent");
    $.$$dom_initCustomEvent$4$x(e, replyTo, false, false, t1);
    window.dispatchEvent(e);
  },
  $isFunction: true
},

"+ReceivePortSync_receive_closure": 0,

_MicrotaskScheduler: {
  "": function _MicrotaskScheduler(_nextMicrotaskFrameScheduled, _liblib3$_callback) {
    this._nextMicrotaskFrameScheduled = _nextMicrotaskFrameScheduled;
    this._liblib3$_callback = _liblib3$_callback;
  },
  "super": "Object",
  get$_nextMicrotaskFrameScheduled: function() {
    return this._nextMicrotaskFrameScheduled;
  },
  set$_nextMicrotaskFrameScheduled: function(v) {
    this._nextMicrotaskFrameScheduled = v;
  },
  get$_liblib3$_callback: function() {
    return this._liblib3$_callback;
  },
  _liblib3$_callback$1: function(arg0) {
    return this._liblib3$_callback.call$1(arg0);
  },
  _liblib3$_callback$0: function() {
    return this._liblib3$_callback.call$0();
  },
  maybeSchedule$0: function() {
    if (this._nextMicrotaskFrameScheduled)
      return;
    this._nextMicrotaskFrameScheduled = true;
    this._schedule$0();
  },
  _onCallback$0: function() {
    if (!this._nextMicrotaskFrameScheduled)
      return;
    this._nextMicrotaskFrameScheduled = false;
    this._liblib3$_callback$0();
  }
},

"+_MicrotaskScheduler": 0,

_PostMessageScheduler: {
  "": function _PostMessageScheduler(_MICROTASK_MESSAGE, _nextMicrotaskFrameScheduled, _liblib3$_callback) {
    this._MICROTASK_MESSAGE = _MICROTASK_MESSAGE;
    this._nextMicrotaskFrameScheduled = _nextMicrotaskFrameScheduled;
    this._liblib3$_callback = _liblib3$_callback;
  },
  "super": "_MicrotaskScheduler",
  get$_MICROTASK_MESSAGE: function() {
    return this._MICROTASK_MESSAGE;
  },
  _schedule$0: function() {
    $.Window_methods.postMessage$2(window, this._MICROTASK_MESSAGE, "*");
  },
  "+_schedule:0:0": 0,
  _handleMessage$1: function(e) {
    this._onCallback$0();
  },
  "+_handleMessage:1:0": 0,
  get$_handleMessage: function() {
    return new $.BoundClosure$1(this, "_handleMessage$1", null);
  }
},

"+_PostMessageScheduler": 0,

_MutationObserverScheduler: {
  "": function _MutationObserverScheduler(_observer, _dummy, _nextMicrotaskFrameScheduled, _liblib3$_callback) {
    this._observer = _observer;
    this._dummy = _dummy;
    this._nextMicrotaskFrameScheduled = _nextMicrotaskFrameScheduled;
    this._liblib3$_callback = _liblib3$_callback;
  },
  "super": "_MicrotaskScheduler",
  get$_observer: function() {
    return this._observer;
  },
  set$_observer: function(v) {
    this._observer = v;
  },
  get$_dummy: function() {
    return this._dummy;
  },
  set$_dummy: function(v) {
    this._dummy = v;
  },
  _schedule$0: function() {
    var t1 = this._dummy;
    t1.hidden = t1.hidden !== true;
  },
  _handleMutation$2: function(mutations, observer) {
    this._onCallback$0();
  },
  "+_handleMutation:2:0": 0,
  get$_handleMutation: function() {
    return new $.BoundClosure$2(this, "_handleMutation$2", null);
  }
},

"+_MutationObserverScheduler": 0,

_SetImmediateScheduler: {
  "": function _SetImmediateScheduler(_nextMicrotaskFrameScheduled, _liblib3$_callback) {
    this._nextMicrotaskFrameScheduled = _nextMicrotaskFrameScheduled;
    this._liblib3$_callback = _liblib3$_callback;
  },
  "super": "_MicrotaskScheduler",
  _schedule$0: function() {
    window.setImmediate($.convertDartClosureToJS(this.get$_handleImmediate(), 0));
  },
  _handleImmediate$0: function() {
    this._onCallback$0();
  },
  "+_handleImmediate:0:0": 0,
  get$_handleImmediate: function() {
    return new $.BoundClosure$0(this, "_handleImmediate$0", null);
  }
},

"+_SetImmediateScheduler": 0,

_MessageTraverserVisitedMap0: {
  "": function _MessageTraverserVisitedMap() {
  },
  "super": "Object",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  }
},

"+_MessageTraverserVisitedMap": 0,

_MessageTraverser0: {
  "": function _MessageTraverser(_liblib3$_visited) {
    this._liblib3$_visited = _liblib3$_visited;
  },
  "super": "Object",
  get$_liblib3$_visited: function() {
    return this._liblib3$_visited;
  },
  set$_liblib3$_visited: function(v) {
    this._liblib3$_visited = v;
  },
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    result = null;
    try {
      result = this._liblib3$_dispatch$1(x);
    } finally {
    }
    return result;
  },
  _liblib3$_dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.wrapException("Message serialization: Illegal value " + $.S(x) + " passed");
  }
},

"+_MessageTraverser": 0,

_Serializer0: {
  "": function _Serializer(_liblib3$_nextFreeRefId) {
    this._liblib3$_nextFreeRefId = _liblib3$_nextFreeRefId;
  },
  "super": "_MessageTraverser0",
  get$_liblib3$_nextFreeRefId: function() {
    return this._liblib3$_nextFreeRefId;
  },
  set$_liblib3$_nextFreeRefId: function(v) {
    this._liblib3$_nextFreeRefId = v;
  },
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var id = this._liblib3$_nextFreeRefId;
    this._liblib3$_nextFreeRefId = id + 1;
    return ["list", id, this._liblib3$_serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var id = this._liblib3$_nextFreeRefId;
    this._liblib3$_nextFreeRefId = id + 1;
    return ["map", id, this._liblib3$_serializeList$1($.toList$0$ax(map.get$keys())), this._liblib3$_serializeList$1($.toList$0$ax(map.get$values(map)))];
  },
  _liblib3$_serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this._liblib3$_serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._liblib3$_dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _liblib3$_serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len, null);
    if (typeof len !== "number")
      throw $.iae(len);
    t2 = result.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._liblib3$_dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
},

"+_Serializer": 0,

_Deserializer0: {
  "": function _Deserializer(_liblib3$_deserialized) {
    this._liblib3$_deserialized = _liblib3$_deserialized;
  },
  "super": "Object",
  get$_liblib3$_deserialized: function() {
    return this._liblib3$_deserialized;
  },
  set$_liblib3$_deserialized: function(v) {
    this._liblib3$_deserialized = v;
  },
  deserialize$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = new $.HashMap(0, null, null, null, null);
    t1.$builtinTypeInfo = [null, null];
    this._liblib3$_deserialized = t1;
    return this._liblib3$_deserializeHelper$1(x);
  },
  _liblib3$_deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = $.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._liblib3$_deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._liblib3$_deserializeList$1(x);
      case "map":
        return this._liblib3$_deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _liblib3$_deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.isJsIndexable(dartList, dartList[$.dispatchPropertyName]))
      return this._liblib3$_deserializeList$1$bailout(1, dartList, id);
    t1 = this._liblib3$_deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._liblib3$_deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _liblib3$_deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._liblib3$_deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw $.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._liblib3$_deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _liblib3$_deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = new $.HashMap(0, null, null, null, null);
    result.$builtinTypeInfo = [null, null];
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._liblib3$_deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.isJsIndexable(keys, keys[$.dispatchPropertyName])))
      return this._liblib3$_deserializeMap$1$bailout(1, x, keys, t1, result);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.isJsIndexable(values, values[$.dispatchPropertyName])))
      return this._liblib3$_deserializeMap$1$bailout(2, 0, keys, 0, result, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._liblib3$_deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._liblib3$_deserializeHelper$1(values[i]));
    }
    return result;
  },
  _liblib3$_deserializeMap$1$bailout: function(state0, x, keys, t1, result, values) {
    switch (state0) {
      case 0:
        result = new $.HashMap(0, null, null, null, null);
        result.$builtinTypeInfo = [null, null];
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._liblib3$_deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        if (typeof len !== "number")
          throw $.iae(len);
        t2 = $.getInterceptor$asx(values);
        i = 0;
        for (; i < len; ++i)
          result.$indexSet(result, this._liblib3$_deserializeHelper$1(t1.$index(keys, i)), this._liblib3$_deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.wrapException("Unexpected serialized object");
  }
},

"+_Deserializer": 0,

_DOMWindowCrossFrame: {
  "": function _DOMWindowCrossFrame(_window) {
    this._window = _window;
  },
  "super": "Object",
  get$_window: function() {
    return this._window;
  },
  get$parent: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  get$top: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.top);
  },
  close$0: function(_) {
    return this._window.close();
  }
},

"+_DOMWindowCrossFrame": 0,

FixedSizeListIterator: {
  "": function FixedSizeListIterator(_array, _length, _position, _current) {
    this._array = _array;
    this._length = _length;
    this._position = _position;
    this._current = _current;
  },
  "super": "Object",
  get$_array: function() {
    return this._array;
  },
  get$_length: function() {
    return this._length;
  },
  get$_position: function() {
    return this._position;
  },
  set$_position: function(v) {
    this._position = v;
  },
  get$_current: function() {
    return this._current;
  },
  set$_current: function(v) {
    this._current = v;
  },
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
        return this.moveNext$0$bailout(2, t1, nextPosition);
      if (nextPosition >>> 0 !== nextPosition || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$add$ns(t1, 1);
        t1 = this._length;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$lt$n(nextPosition, t1) === true)
          switch (state0) {
            case 0:
              t1 = this._array;
            case 2:
              state0 = 0;
              this._current = $.$index$asx(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  },
  current$0: function() {
    return this.get$current().call$0();
  }
},

"+FixedSizeListIterator": 0,

document: function() {
  return document;
},

query: function(selector) {
  return document.querySelector(selector);
},

"+query:1:0": 0,

ButtonElement_ButtonElement: function() {
  return document.createElement("button");
},

"@ButtonElement_ButtonElement": function() {
  return [$.DomName_whP, $.Type_cOY];
},

"+new ButtonElement:0:0": 0,

DivElement_DivElement: function() {
  return document.createElement("div");
},

"@DivElement_DivElement": function() {
  return [$.DomName_eZ8, $.Type_cOY];
},

"+new DivElement:0:0": 0,

Element_Element$tag: function(tag) {
  return document.createElement(tag);
},

"+new Element$tag:1:0": 0,

_ElementFactoryProvider_createElement_tag: function(tag) {
  return document.createElement(tag);
},

"@_ElementFactoryProvider_createElement_tag": function() {
  return [$.DomName_6FR];
},

"+createElement_tag:1:0": 0,

HttpRequest_getString: function(url, onProgress, withCredentials) {
  return $.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new $.HttpRequest_getString_closure());
},

"+getString:1:2": 0,

HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
  var t1, t2, completer, futureImpl, xhr;
  t1 = $.HttpRequest;
  t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
  t2.$builtinTypeInfo = [t1];
  completer = new $._AsyncCompleter(t2, false);
  completer.$builtinTypeInfo = [t1];
  futureImpl = completer.future;
  t1 = futureImpl._zone;
  t1._openCallbacks = t1._openCallbacks + 1;
  xhr = new XMLHttpRequest();
  $.open$3$async$x(xhr, "GET", url, true);
  t1 = new $._EventStream(xhr, $.EventStreamProvider_load._eventType, false);
  t1.$builtinTypeInfo = [null];
  t2 = $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0);
  t1 = new $._EventStreamSubscription(0, t1._liblib3$_target, t1._eventType, new $.HttpRequest_request_closure(completer, xhr), t1._useCapture);
  t1.$builtinTypeInfo = [t2];
  t2 = t1._onData;
  if (t2 != null && !t1.get$isPaused())
    $.$$dom_addEventListener$3$x(t1._liblib3$_target, t1._eventType, t2, t1._useCapture);
  t1 = new $._EventStream(xhr, $.EventStreamProvider_error._eventType, false);
  t1.$builtinTypeInfo = [null];
  t2 = $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0);
  t1 = new $._EventStreamSubscription(0, t1._liblib3$_target, t1._eventType, new $.HttpRequest_request_closure0(completer), t1._useCapture);
  t1.$builtinTypeInfo = [t2];
  t2 = t1._onData;
  if (t2 != null && !t1.get$isPaused())
    $.$$dom_addEventListener$3$x(t1._liblib3$_target, t1._eventType, t2, t1._useCapture);
  xhr.send();
  return futureImpl;
},

"+request:1:7": 0,

ImageElement_ImageElement: function(height, src, width) {
  var e = document.createElement("img");
  return e;
},

"@ImageElement_ImageElement": function() {
  return [$.DomName_NaB, $.Type_cOY];
},

"+new ImageElement:0:3": 0,

InputElement_InputElement: function(type) {
  var e, exception;
  e = document.createElement("input");
  if (type != null)
    try {
      $.set$type$x(e, type);
    } catch (exception) {
      $.unwrapException(exception);
    }

  return e;
},

"+new InputElement:0:1": 0,

_ChildNodeListLazy$: function(_this) {
  return new $._ChildNodeListLazy(_this);
},

"+new _ChildNodeListLazy:1:0": 0,

OptionElement_OptionElement: function(data, value, defaultSelected, selected) {
  return new Option();
},

"@OptionElement_OptionElement": function() {
  return [$.DomName_3uR0, $.Type_cOY];
},

"+new OptionElement:0:4": 0,

_MultiElementCssClassSet$: function(_elementIterable) {
  var t1 = new $._MultiElementCssClassSet(_elementIterable, null);
  t1._MultiElementCssClassSet$1(_elementIterable);
  return t1;
},

"+new _MultiElementCssClassSet:1:0": 0,

_EventStream$: function(_target, _eventType, _useCapture, T) {
  var t1 = new $._EventStream(_target, _eventType, _useCapture);
  t1.$builtinTypeInfo = [T];
  return t1;
},

"+new _EventStream:3:0": 0,

_RemoteSendPortSync__call: function(isolateId, portId, message) {
  var t1, target, source, t2, output, e;
  t1 = {};
  target = "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
  source = target + "-result";
  t1.result_0 = null;
  t2 = new $._EventStream(new $.Events(window)._ptr, source, false);
  t2.$builtinTypeInfo = [null];
  t2.get$first(t2).then$1(new $._RemoteSendPortSync__call_closure(t1));
  output = new $.StringBuffer("");
  output.StringBuffer$1("");
  new $._JsonStringifier(output, []).stringifyValue$1([source, message]);
  t2 = output._contents;
  e = document.createEvent("CustomEvent");
  $.$$dom_initCustomEvent$4$x(e, target, false, false, t2);
  window.dispatchEvent(e);
  return t1.result_0;
},

"+_call:3:0": 0,

ReceivePortSync$: function() {
  var t1 = new $.ReceivePortSync(null, null, null);
  t1.ReceivePortSync$0();
  return t1;
},

"+new ReceivePortSync:0:0": 0,

ReceivePortSync__lookup: function(isolateId, portId) {
  var t1;
  if ($.ReceivePortSync__cachedIsolateId == null) {
    if (!window.$dart$isolate$counter)
      window.$dart$isolate$counter = 1;
    $.ReceivePortSync__cachedIsolateId = window.$dart$isolate$counter++;
  }
  if ($.$eq(isolateId, $.ReceivePortSync__cachedIsolateId)) {
    t1 = $.ReceivePortSync__portMap;
    return t1.$index(t1, portId).toSendPort$0();
  } else
    return new $._RemoteSendPortSync(isolateId, portId);
},

"+_lookup:2:0": 0,

_MicrotaskScheduler__MicrotaskScheduler$best: function(callback) {
  var t1, t2, t3, t4, t5, t6, t7;
  if (!!window.setImmediate)
    return new $._SetImmediateScheduler(false, callback);
  else if (!!(window.MutationObserver || window.WebKitMutationObserver)) {
    t1 = new $._MutationObserverScheduler(null, null, false, callback);
    t1._observer = new (window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver)($.convertDartClosureToJS(t1.get$_handleMutation(), 2));
    t1._dummy = document.createElement("div");
    $.observe$2$attributes$x(t1._observer, t1._dummy, true);
    return t1;
  }
  t1 = new $._PostMessageScheduler("DART-MICROTASK", false, callback);
  t2 = $._EventStream$(window, $.EventStreamProvider_message._eventType, false, null);
  t3 = t1.get$_handleMessage();
  t4 = t2._liblib3$_target;
  t5 = t2._eventType;
  t6 = t2._useCapture;
  t2 = $.getRuntimeTypeArgument(t2, t2.$as_EventStream, 0);
  t7 = new $._EventStreamSubscription(0, t4, t5, t3, t6);
  $.setRuntimeTypeInfo(t7, [t2]);
  t7._EventStreamSubscription$4(t4, t5, t3, t6, t2);
  return t1;
},

"+new _MicrotaskScheduler$best:1:0": 0,

_completeMicrotasks: function() {
  var callbacks, t1, t2;
  callbacks = $._pendingMicrotasks;
  $._pendingMicrotasks = null;
  callbacks.get$iterator;
  t1 = $.getRuntimeTypeArgument(callbacks, callbacks.$asJSArray, 0);
  t2 = new $.ListIterator(callbacks, callbacks.length, 0, null);
  t2.$builtinTypeInfo = [t1];
  for (; t2.moveNext$0();)
    t2._liblib$_current.call$0();
},

"+_completeMicrotasks:0:0": 0,

_convertNativeToDart_Window: function(win) {
  if (win == null)
    return;
  return $._DOMWindowCrossFrame__createSafe(win);
},

"+_convertNativeToDart_Window:1:0": 0,

_convertNativeToDart_EventTarget: function(e) {
  var $window;
  if (e == null)
    return;
  if ("setInterval" in e) {
    $window = $._DOMWindowCrossFrame__createSafe(e);
    if (typeof $window === "object" && $window !== null && !!$.getInterceptor($window).$isEventTarget)
      return $window;
    return;
  } else
    return e;
},

"+_convertNativeToDart_EventTarget:1:0": 0,

_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new $._DOMWindowCrossFrame(w);
},

"+_createSafe:1:0": 0}],
["dart.dom.svg", "dart:svg", , {
_AttributeClassSet: {
  "": function _AttributeClassSet(_liblib6$_element) {
    this._liblib6$_element = _liblib6$_element;
  },
  "super": "CssClassSetImpl",
  get$_liblib6$_element: function() {
    return this._liblib6$_element;
  },
  readClasses$0: function() {
    var classname, s, t1, t2, trimmed;
    classname = new $._ElementAttributeMap(this._liblib6$_element)._element.getAttribute("class");
    s = new $.LinkedHashSet(0, null, null, null, null, null, 0);
    s.$builtinTypeInfo = [$.JSString];
    if (classname == null)
      return s;
    t1 = classname.split(" ");
    t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();) {
      trimmed = $.trim$0$s(t1._liblib$_current);
      if ($.get$isEmpty$asx(trimmed) !== true)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    new $._ElementAttributeMap(this._liblib6$_element)._element.setAttribute("class", s.join$1(s, " "));
  }
},

"+_AttributeClassSet": 0}],
["dart.isolate", "dart:isolate", , {
ReceivePort: {
  "": function ReceivePort() {
  },
  "super": "Object"
},

"+ReceivePort": 0}],
["dart.json", "dart:json", , {
_convertJsonToDart_closure: {
  "": function _convertJsonToDart_closure() {
  },
  "super": "Closure",
  call$2: function(key, value) {
    return value;
  },
  $isFunction: true
},

"+_convertJsonToDart_closure": 0,

_convertJsonToDart_walk: {
  "": function _convertJsonToDart_walk(revive_0) {
    this.revive_0 = revive_0;
  },
  "super": "Closure",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i] = t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = $.makeLiteralMap([]);
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  },
  $isFunction: true
},

"+_convertJsonToDart_walk": 0,

JsonUnsupportedObjectError: {
  "": function JsonUnsupportedObjectError(unsupportedObject, cause) {
    this.unsupportedObject = unsupportedObject;
    this.cause = cause;
  },
  "super": "Object",
  get$unsupportedObject: function() {
    return this.unsupportedObject;
  },
  get$cause: function() {
    return this.cause;
  },
  toString$0: function(_) {
    if (this.cause != null)
      return "Calling toJson method on object failed.";
    else
      return "Object toJson method returns non-serializable value.";
  }
},

"+JsonUnsupportedObjectError": 0,

JsonCyclicError: {
  "": function JsonCyclicError(unsupportedObject, cause) {
    this.unsupportedObject = unsupportedObject;
    this.cause = cause;
  },
  "super": "JsonUnsupportedObjectError",
  toString$0: function(_) {
    return "Cyclic error in JSON stringify";
  }
},

"+JsonCyclicError": 0,

_JsonStringifier: {
  "": function _JsonStringifier(sb, seen) {
    this.sb = sb;
    this.seen = seen;
  },
  "super": "Object",
  get$sb: function() {
    return this.sb;
  },
  set$sb: function(v) {
    this.sb = v;
  },
  get$seen: function() {
    return this.seen;
  },
  set$seen: function(v) {
    this.seen = v;
  },
  checkCycle$1: function(object) {
    var t1, t2, i, t3;
    for (t1 = this.seen, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      if (t3 == null ? object == null : t3 === object)
        throw $.wrapException(new $.JsonCyclicError(object, null));
    }
    t1.push(object);
  },
  "+checkCycle:1:0": 0,
  stringifyValue$1: function(object) {
    var customJson, e, t1, exception;
    if (!this.stringifyJsonValue$1(object)) {
      this.checkCycle$1(object);
      try {
        customJson = object.toJson$0();
        if (!this.stringifyJsonValue$1(customJson))
          throw $.wrapException(new $.JsonUnsupportedObjectError(object, null));
        t1 = this.seen;
        if (0 >= t1.length)
          throw $.ioore(0);
        t1.pop();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        throw $.wrapException(new $.JsonUnsupportedObjectError(object, e));
      }

    }
  },
  stringifyJsonValue$1: function(object) {
    var t1, t2, i;
    t1 = {};
    if (typeof object === "number") {
      t1 = this.sb;
      t2 = $.JSNumber_methods.toString$0(object);
      t1._contents = t1._contents + t2;
      return true;
    } else if (object === true) {
      t1 = this.sb;
      t1._contents = t1._contents + "true";
      return true;
    } else if (object === false) {
      t1 = this.sb;
      t1._contents = t1._contents + "false";
      return true;
    } else if (object == null) {
      t1 = this.sb;
      t1._contents = t1._contents + "null";
      return true;
    } else if (typeof object === "string") {
      t1 = this.sb;
      t1._contents = t1._contents + "\"";
      $._JsonStringifier_escape(this.sb, object);
      t1 = this.sb;
      t1._contents = t1._contents + "\"";
      return true;
    } else if (typeof object === "object" && object !== null && (object.constructor === Array || !!$.getInterceptor(object).$isList)) {
      if (typeof object !== "string" && (typeof object !== "object" || object === null || object.constructor !== Array && !$.isJsIndexable(object, object[$.dispatchPropertyName])))
        return this.stringifyJsonValue$1$bailout(1, object);
      this.checkCycle$1(object);
      t1 = this.sb;
      t1._contents = t1._contents + "[";
      if (object.length > 0) {
        this.stringifyValue$1(object[0]);
        for (i = 1; i < object.length; ++i) {
          t1 = this.sb;
          t1._contents = t1._contents + ",";
          if (i >= object.length)
            throw $.ioore(i);
          this.stringifyValue$1(object[i]);
        }
      }
      t1 = this.sb;
      t1._contents = t1._contents + "]";
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isMap) {
      this.checkCycle$1(object);
      t2 = this.sb;
      t2._contents = t2._contents + "{";
      t1.first_0 = true;
      object.forEach$1(object, new $._JsonStringifier_stringifyJsonValue_closure(t1, this));
      t1 = this.sb;
      t1._contents = t1._contents + "}";
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else
      return false;
  },
  "+stringifyJsonValue:1:0": 0,
  stringifyJsonValue$1$bailout: function(state0, object) {
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        var t1, t2, i;
        if (state0 === 0 && typeof object === "number") {
          t1 = this.sb;
          t2 = $.JSNumber_methods.toString$0(object);
          t1._contents = t1._contents + t2;
          return true;
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && object === true) {
                t1 = this.sb;
                t1._contents = t1._contents + "true";
                return true;
              } else
                switch (state0) {
                  case 0:
                  case 1:
                    if (state0 === 0 && object === false) {
                      t1 = this.sb;
                      t1._contents = t1._contents + "false";
                      return true;
                    } else
                      switch (state0) {
                        case 0:
                        case 1:
                          if (state0 === 0 && object == null) {
                            t1 = this.sb;
                            t1._contents = t1._contents + "null";
                            return true;
                          } else
                            switch (state0) {
                              case 0:
                              case 1:
                                if (state0 === 0 && typeof object === "string") {
                                  t1 = this.sb;
                                  t1._contents = t1._contents + "\"";
                                  $._JsonStringifier_escape(this.sb, object);
                                  t1 = this.sb;
                                  t1._contents = t1._contents + "\"";
                                  return true;
                                } else
                                  switch (state0) {
                                    case 0:
                                    case 1:
                                      if (state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && (object.constructor === Array || !!$.getInterceptor(object).$isList))
                                        switch (state0) {
                                          case 0:
                                          case 1:
                                            state0 = 0;
                                            this.checkCycle$1(object);
                                            t1 = this.sb;
                                            t1._contents = t1._contents + "[";
                                            t1 = $.getInterceptor$asx(object);
                                            if ($.$gt$n(t1.get$length(object), 0) === true) {
                                              this.stringifyValue$1(t1.$index(object, 0));
                                              i = 1;
                                              while (true) {
                                                t2 = t1.get$length(object);
                                                if (typeof t2 !== "number")
                                                  throw $.iae(t2);
                                                if (!(i < t2))
                                                  break;
                                                t2 = this.sb;
                                                t2._contents = t2._contents + ",";
                                                this.stringifyValue$1(t1.$index(object, i));
                                                ++i;
                                              }
                                            }
                                            t1 = this.sb;
                                            t1._contents = t1._contents + "]";
                                            t1 = this.seen;
                                            if (0 >= t1.length)
                                              throw $.ioore(0);
                                            t1.pop();
                                            return true;
                                        }
                                      else if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isMap) {
                                        this.checkCycle$1(object);
                                        t2 = this.sb;
                                        t2._contents = t2._contents + "{";
                                        t1.first_0 = true;
                                        object.forEach$1(object, new $._JsonStringifier_stringifyJsonValue_closure(t1, this));
                                        t1 = this.sb;
                                        t1._contents = t1._contents + "}";
                                        t1 = this.seen;
                                        if (0 >= t1.length)
                                          throw $.ioore(0);
                                        t1.pop();
                                        return true;
                                      } else
                                        return false;
                                  }
                            }
                      }
                }
          }
    }
  }
},

"+_JsonStringifier": 0,

_JsonStringifier_stringifyJsonValue_closure: {
  "": function _JsonStringifier_stringifyJsonValue_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  },
  "super": "Closure",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = this.this_1;
    if (!t1.first_0) {
      t2 = t2.get$sb();
      t2.set$_contents(t2.get$_contents() + ",\"");
    } else {
      t2 = t2.get$sb();
      t2.set$_contents(t2.get$_contents() + "\"");
    }
    t2 = this.this_1;
    $._JsonStringifier_escape(t2.get$sb(), key);
    t3 = t2.get$sb();
    t3.set$_contents(t3.get$_contents() + "\":");
    t2.stringifyValue$1(value);
    t1.first_0 = false;
  },
  $isFunction: true
},

"+_JsonStringifier_stringifyJsonValue_closure": 0,

_convertJsonToDart: function(json, reviver) {
  var revive = new $._convertJsonToDart_closure();
  return revive.call$2("", new $._convertJsonToDart_walk(revive).call$1(json));
},

"+_convertJsonToDart:2:0": 0,

parse: function(json, reviver) {
  var parsed, e, t1, exception;
  t1 = json;
  if (typeof t1 !== "string")
    throw $.wrapException(new $.ArgumentError(json));
  parsed = null;
  try {
    parsed = JSON.parse(json);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.wrapException(new $.FormatException(String(e)));
  }

  return $._convertJsonToDart(parsed, reviver);
},

"+parse:1:1": 0,

_JsonStringifier_escape: function(sb, s) {
  var t1, $length, charCodes, needsEscape, i, charCode, t2, t3, str;
  t1 = $.getInterceptor$asx(s);
  $length = t1.get$length(s);
  charCodes = $.List_List($, $.JSInt);
  charCodes.$builtinTypeInfo = [$.JSInt];
  needsEscape = false;
  i = 0;
  while (true) {
    if (typeof $length !== "number")
      throw $.iae($length);
    if (!(i < $length))
      break;
    charCode = t1.codeUnitAt$1(s, i);
    t2 = $.getInterceptor$n(charCode);
    if (t2.$lt(charCode, 32) === true) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          t3 = $.$and$n(t2.$shr(charCode, 12), 15);
          if ($.$lt$n(t3, 10) === true) {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t3 = $.$and$n(t2.$shr(charCode, 8), 15);
          if ($.$lt$n(t3, 10) === true) {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t3 = $.$and$n(t2.$shr(charCode, 4), 15);
          if ($.$lt$n(t3, 10) === true) {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t2 = t2.$and(charCode, 15);
          if ($.$lt$n(t2, 10) === true) {
            if (typeof t2 !== "number")
              throw $.iae(t2);
            t2 = 48 + t2;
          } else {
            if (typeof t2 !== "number")
              throw $.iae(t2);
            t2 = 87 + t2;
          }
          charCodes.push(t2);
          break;
      }
      needsEscape = true;
    } else if (t2.$eq(charCode, 34) || t2.$eq(charCode, 92)) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
    ++i;
  }
  if (needsEscape) {
    t1 = $.Primitives_stringFromCharCodes(charCodes);
    str = t1;
  } else
    str = s;
  str = typeof str === "string" ? str : $.S(str);
  sb._contents = sb._contents + str;
},

"+escape:2:0": 0}],
["dart.math", "dart:math", , {
min: function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.JSDouble_methods.get$isNegative(b) || $.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      return a;
    }
    throw $.wrapException(new $.ArgumentError(b));
  }
  throw $.wrapException(new $.ArgumentError(a));
},

"+min:2:0": 0,

max: function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if ($.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      if (b === 0 && $.JSNumber_methods.get$isNegative(a))
        return b;
      return a;
    }
    throw $.wrapException(new $.ArgumentError(b));
  }
  throw $.wrapException(new $.ArgumentError(a));
},

"+max:2:0": 0}],
["dart.typed_data", "dart:typed_data", , {
Endianness: {
  "": function Endianness(_littleEndian) {
    this._littleEndian = _littleEndian;
  },
  "super": "Object",
  get$_littleEndian: function() {
    return this._littleEndian;
  }
},

"+Endianness": 0,

_Lists_indexOf: function(a, element, startIndex, endIndex) {
  var t1, i;
  if (typeof startIndex !== "number")
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  t1 = $.getInterceptor$asx(a);
  if (startIndex >= t1.get$length(a))
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i)
    if (t1.$index(a, i) === element)
      return i;
  return -1;
},

_Lists_indexOf$bailout: function(state0, a, element, startIndex, endIndex) {
  var t1, t2, i;
  t1 = $.getInterceptor$asx(a);
  t2 = $.getInterceptor$n(startIndex);
  if (t2.$ge(startIndex, t1.get$length(a)) === true)
    return -1;
  if (t2.$lt(startIndex, 0) === true)
    startIndex = 0;
  for (i = startIndex; t2 = $.getInterceptor$n(i), t2.$lt(i, endIndex) === true; i = t2.$add(i, 1))
    if (t1.$index(a, i) === element)
      return i;
  return -1;
},

_Lists_lastIndexOf: function(a, element, startIndex) {
  var t1, i;
  if (startIndex == null)
    throw startIndex.$lt();
  if (startIndex < 0)
    return -1;
  t1 = $.getInterceptor$asx(a);
  if (startIndex >= t1.get$length(a))
    startIndex = t1.get$length(a) - 1;
  for (i = startIndex; i >= 0; --i)
    t1.$index(a, i);
  return -1;
}}],
["engine", "../packages/analyzer_experimental/src/generated/engine.dart", , {
AnalysisEngine: {
  "": function AnalysisEngine(_logger) {
    this._logger = _logger;
  },
  "super": "Object",
  get$_logger: function() {
    return this._logger;
  },
  set$_logger: function(v) {
    this._logger = v;
  },
  createAnalysisContext$0: function() {
    var t1, t2, t3, t4;
    if ($.get$Instrumentation__CURRENT_LOGGER() === $.get$Instrumentation__NULL_LOGGER()) {
      t1 = new $.HashMap(0, null, null, null, null);
      t1.$builtinTypeInfo = [$.Source, $.SourceEntry];
      t2 = new $.HashMap(0, null, null, null, null);
      t2.$builtinTypeInfo = [$.Source, $.ChangeNoticeImpl];
      t3 = $.List_List($, $.Source);
      t3.$builtinTypeInfo = [$.Source];
      return new $.DelegatingAnalysisContextImpl(null, new $.AnalysisOptionsImpl(false), null, t1, t2, t3, new $.Object(), 0);
    } else {
      t1 = new $.HashMap(0, null, null, null, null);
      t1.$builtinTypeInfo = [$.Source, $.SourceEntry];
      t2 = new $.HashMap(0, null, null, null, null);
      t2.$builtinTypeInfo = [$.Source, $.ChangeNoticeImpl];
      t3 = $.List_List($, $.Source);
      t3.$builtinTypeInfo = [$.Source];
      t4 = new $.InstrumentedAnalysisContextImpl(new $.UUID($.JSInt_methods.toString$0($.UUID___nextId)).id, null);
      t4._basis = new $.DelegatingAnalysisContextImpl(null, new $.AnalysisOptionsImpl(false), null, t1, t2, t3, new $.Object(), 0);
      return t4;
    }
  },
  "+createAnalysisContext:0:0": 0
},

"+AnalysisEngine": 0,

AnalysisException: {
  "": function AnalysisException(message, e) {
    this.message = message;
    this.e = e;
  },
  "super": "JavaException",
  $isAnalysisException: true
},

"+AnalysisException": 0,

DartEntryImpl: {
  "": function DartEntryImpl(_sourceKindState, _sourceKind, _parsedUnitState, _parsedUnit, _parseErrorsState, _parseErrors, _includedPartsState, _includedParts, _referencedLibrariesState, _referencedLibraries, _resolutionState, _elementState, _liblib16$_element, _publicNamespaceState, _publicNamespace, _clientServerState, _launchableState, _bitmask, _modificationTime, _lineInfoState, _liblib16$_lineInfo) {
    this._sourceKindState = _sourceKindState;
    this._sourceKind = _sourceKind;
    this._parsedUnitState = _parsedUnitState;
    this._parsedUnit = _parsedUnit;
    this._parseErrorsState = _parseErrorsState;
    this._parseErrors = _parseErrors;
    this._includedPartsState = _includedPartsState;
    this._includedParts = _includedParts;
    this._referencedLibrariesState = _referencedLibrariesState;
    this._referencedLibraries = _referencedLibraries;
    this._resolutionState = _resolutionState;
    this._elementState = _elementState;
    this._liblib16$_element = _liblib16$_element;
    this._publicNamespaceState = _publicNamespaceState;
    this._publicNamespace = _publicNamespace;
    this._clientServerState = _clientServerState;
    this._launchableState = _launchableState;
    this._bitmask = _bitmask;
    this._modificationTime = _modificationTime;
    this._lineInfoState = _lineInfoState;
    this._liblib16$_lineInfo = _liblib16$_lineInfo;
  },
  "super": "SourceEntryImpl",
  get$_sourceKindState: function() {
    return this._sourceKindState;
  },
  set$_sourceKindState: function(v) {
    this._sourceKindState = v;
  },
  get$_sourceKind: function() {
    return this._sourceKind;
  },
  set$_sourceKind: function(v) {
    this._sourceKind = v;
  },
  get$_parsedUnitState: function() {
    return this._parsedUnitState;
  },
  set$_parsedUnitState: function(v) {
    this._parsedUnitState = v;
  },
  get$_parsedUnit: function() {
    return this._parsedUnit;
  },
  set$_parsedUnit: function(v) {
    this._parsedUnit = v;
  },
  get$_parseErrorsState: function() {
    return this._parseErrorsState;
  },
  set$_parseErrorsState: function(v) {
    this._parseErrorsState = v;
  },
  get$_parseErrors: function() {
    return this._parseErrors;
  },
  set$_parseErrors: function(v) {
    this._parseErrors = v;
  },
  get$_includedPartsState: function() {
    return this._includedPartsState;
  },
  set$_includedPartsState: function(v) {
    this._includedPartsState = v;
  },
  get$_includedParts: function() {
    return this._includedParts;
  },
  set$_includedParts: function(v) {
    this._includedParts = v;
  },
  get$_referencedLibrariesState: function() {
    return this._referencedLibrariesState;
  },
  set$_referencedLibrariesState: function(v) {
    this._referencedLibrariesState = v;
  },
  get$_referencedLibraries: function() {
    return this._referencedLibraries;
  },
  set$_referencedLibraries: function(v) {
    this._referencedLibraries = v;
  },
  get$_resolutionState: function() {
    return this._resolutionState;
  },
  set$_resolutionState: function(v) {
    this._resolutionState = v;
  },
  get$_elementState: function() {
    return this._elementState;
  },
  set$_elementState: function(v) {
    this._elementState = v;
  },
  get$_liblib16$_element: function() {
    return this._liblib16$_element;
  },
  set$_liblib16$_element: function(v) {
    this._liblib16$_element = v;
  },
  get$_publicNamespaceState: function() {
    return this._publicNamespaceState;
  },
  set$_publicNamespaceState: function(v) {
    this._publicNamespaceState = v;
  },
  get$_publicNamespace: function() {
    return this._publicNamespace;
  },
  set$_publicNamespace: function(v) {
    this._publicNamespace = v;
  },
  get$_clientServerState: function() {
    return this._clientServerState;
  },
  set$_clientServerState: function(v) {
    this._clientServerState = v;
  },
  get$_launchableState: function() {
    return this._launchableState;
  },
  set$_launchableState: function(v) {
    this._launchableState = v;
  },
  get$_bitmask: function() {
    return this._bitmask;
  },
  set$_bitmask: function(v) {
    this._bitmask = v;
  },
  get$anyParsedCompilationUnit: function() {
    if (this._parsedUnitState === $.get$CacheState_VALID())
      return this._parsedUnit;
    return this.get$anyResolvedCompilationUnit();
  },
  "+anyParsedCompilationUnit": 0,
  get$anyResolvedCompilationUnit: function() {
    var state = this._resolutionState;
    for (; state != null;) {
      if (state._resolvedUnitState === $.get$CacheState_VALID())
        return state._resolvedUnit;
      state = state._nextState;
    }
    return;
  },
  "+anyResolvedCompilationUnit": 0,
  get$kind: function(_) {
    return this._sourceKind;
  },
  getState$1: function(descriptor) {
    if (descriptor === $.get$DartEntry_ELEMENT())
      return this._elementState;
    else if (descriptor === $.get$DartEntry_INCLUDED_PARTS())
      return this._includedPartsState;
    else if (descriptor === $.get$DartEntry_IS_CLIENT())
      return this._clientServerState;
    else if (descriptor === $.get$DartEntry_IS_LAUNCHABLE())
      return this._launchableState;
    else if (descriptor === $.get$DartEntry_PARSE_ERRORS())
      return this._parseErrorsState;
    else if (descriptor === $.get$DartEntry_PARSED_UNIT())
      return this._parsedUnitState;
    else if (descriptor === $.get$DartEntry_PUBLIC_NAMESPACE())
      return this._publicNamespaceState;
    else if (descriptor === $.get$DartEntry_REFERENCED_LIBRARIES())
      return this._referencedLibrariesState;
    else if (descriptor === $.get$DartEntry_SOURCE_KIND())
      return this._sourceKindState;
    else
      return $.SourceEntryImpl.prototype.getState$1.call(this, descriptor);
  },
  getValue$1: function(descriptor) {
    var t1;
    if (descriptor === $.get$DartEntry_ELEMENT())
      return this._liblib16$_element;
    else if (descriptor === $.get$DartEntry_INCLUDED_PARTS())
      return this._includedParts;
    else if (descriptor === $.get$DartEntry_IS_CLIENT()) {
      t1 = this._bitmask;
      if (typeof t1 !== "number")
        return this.getValue$1$bailout1(1, t1);
      return (t1 & $.DartEntryImpl__CLIENT_CODE) >>> 0 !== 0 && true;
    } else if (descriptor === $.get$DartEntry_IS_LAUNCHABLE()) {
      t1 = this._bitmask;
      if (typeof t1 !== "number")
        return this.getValue$1$bailout1(2, t1);
      return (t1 & $.DartEntryImpl__LAUNCHABLE) >>> 0 !== 0 && true;
    } else if (descriptor === $.get$DartEntry_PARSE_ERRORS())
      return this._parseErrors;
    else if (descriptor === $.get$DartEntry_PARSED_UNIT())
      return this._parsedUnit;
    else if (descriptor === $.get$DartEntry_PUBLIC_NAMESPACE())
      return this._publicNamespace;
    else if (descriptor === $.get$DartEntry_REFERENCED_LIBRARIES())
      return this._referencedLibraries;
    else if (descriptor === $.get$DartEntry_SOURCE_KIND())
      return this._sourceKind;
    return $.SourceEntryImpl.prototype.getValue$1.call(this, descriptor);
  },
  "+getValue:1:0": 0,
  getValue$1$bailout1: function(state0, t1) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 0 && descriptor === $.get$DartEntry_ELEMENT())
          return this._liblib16$_element;
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 0 && descriptor === $.get$DartEntry_INCLUDED_PARTS())
                return this._includedParts;
              else
                switch (state0) {
                  case 0:
                  default:
                    if (state0 === 1 || state0 === 0 && descriptor === $.get$DartEntry_IS_CLIENT())
                      switch (state0) {
                        case 0:
                          t1 = this._bitmask;
                        case 1:
                          state0 = 0;
                          return !$.$eq($.$and$n(t1, $.DartEntryImpl__CLIENT_CODE), 0) && true;
                      }
                    else
                      switch (state0) {
                        case 0:
                        case 2:
                          if (state0 === 2 || state0 === 0 && descriptor === $.get$DartEntry_IS_LAUNCHABLE())
                            switch (state0) {
                              case 0:
                                t1 = this._bitmask;
                              case 2:
                                state0 = 0;
                                return !$.$eq($.$and$n(t1, $.DartEntryImpl__LAUNCHABLE), 0) && true;
                            }
                          else if (descriptor === $.get$DartEntry_PARSE_ERRORS())
                            return this._parseErrors;
                          else if (descriptor === $.get$DartEntry_PARSED_UNIT())
                            return this._parsedUnit;
                          else if (descriptor === $.get$DartEntry_PUBLIC_NAMESPACE())
                            return this._publicNamespace;
                          else if (descriptor === $.get$DartEntry_REFERENCED_LIBRARIES())
                            return this._referencedLibraries;
                          else if (descriptor === $.get$DartEntry_SOURCE_KIND())
                            return this._sourceKind;
                      }
                }
          }
        return $.SourceEntryImpl.prototype.getValue$1.call(this, descriptor);
    }
  },
  get$writableCopy: function() {
    var copy = new $.DartEntryImpl($.get$CacheState_INVALID(), $.get$SourceKind_UNKNOWN(), $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$AnalysisError_NO_ERRORS(), $.get$CacheState_INVALID(), $.get$Source_EMPTY_ARRAY(), $.get$CacheState_INVALID(), $.get$Source_EMPTY_ARRAY(), new $.DartEntryImpl_ResolutionState(null, null, $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$AnalysisError_NO_ERRORS()), $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$CacheState_INVALID(), 0, 0, $.get$CacheState_INVALID(), null);
    copy.copyFrom$1(this);
    return copy;
  },
  "+writableCopy": 0,
  setState$2: function(descriptor, state) {
    if (descriptor === $.get$DartEntry_ELEMENT()) {
      this._liblib16$_element = this.updatedValue$3(state, this._liblib16$_element, null);
      this._elementState = state;
    } else if (descriptor === $.get$DartEntry_INCLUDED_PARTS()) {
      this._includedParts = this.updatedValue$3(state, this._includedParts, $.get$Source_EMPTY_ARRAY());
      this._includedPartsState = state;
    } else if (descriptor === $.get$DartEntry_IS_CLIENT()) {
      this._bitmask = this.updatedValue2$3(state, this._bitmask, $.DartEntryImpl__CLIENT_CODE);
      this._clientServerState = state;
    } else if (descriptor === $.get$DartEntry_IS_LAUNCHABLE()) {
      this._bitmask = this.updatedValue2$3(state, this._bitmask, $.DartEntryImpl__LAUNCHABLE);
      this._launchableState = state;
    } else if (descriptor === $.get$DartEntry_PARSE_ERRORS()) {
      this._parseErrors = this.updatedValue$3(state, this._parseErrors, $.get$AnalysisError_NO_ERRORS());
      this._parseErrorsState = state;
    } else if (descriptor === $.get$DartEntry_PARSED_UNIT()) {
      this._parsedUnit = this.updatedValue$3(state, this._parsedUnit, null);
      this._parsedUnitState = state;
    } else if (descriptor === $.get$DartEntry_PUBLIC_NAMESPACE()) {
      this._publicNamespace = this.updatedValue$3(state, this._publicNamespace, null);
      this._publicNamespaceState = state;
    } else if (descriptor === $.get$DartEntry_REFERENCED_LIBRARIES()) {
      this._referencedLibraries = this.updatedValue$3(state, this._referencedLibraries, $.get$Source_EMPTY_ARRAY());
      this._referencedLibrariesState = state;
    } else if (descriptor === $.get$DartEntry_SOURCE_KIND()) {
      this._sourceKind = this.updatedValue$3(state, this._sourceKind, $.get$SourceKind_UNKNOWN());
      this._sourceKindState = state;
    } else
      $.SourceEntryImpl.prototype.setState$2.call(this, descriptor, state);
  },
  setState2$3: function(descriptor, librarySource, cacheState) {
    var state = this.getOrCreateResolutionState$1(librarySource);
    if (descriptor === $.get$DartEntry_RESOLUTION_ERRORS()) {
      state._liblib16$_resolutionErrors = this.updatedValue$3(cacheState, state._liblib16$_resolutionErrors, $.get$AnalysisError_NO_ERRORS());
      state._resolutionErrorsState = cacheState;
    } else if (descriptor === $.get$DartEntry_RESOLVED_UNIT()) {
      state._resolvedUnit = this.updatedValue$3(cacheState, state._resolvedUnit, null);
      state._resolvedUnitState = cacheState;
    } else
      throw $.wrapException(new $.IllegalArgumentException("Invalid descriptor: " + $.S(descriptor)));
  },
  "+setState2:3:0": 0,
  setValue$2: function(descriptor, value) {
    var t1, t2;
    if (descriptor === $.get$DartEntry_ELEMENT()) {
      this._liblib16$_element = $.propertyTypeCast(value, "$isLibraryElement");
      this._elementState = $.get$CacheState_VALID();
    } else if (descriptor === $.get$DartEntry_INCLUDED_PARTS()) {
      this._includedParts = value == null ? $.get$Source_EMPTY_ARRAY() : $.interceptedTypeCast(value, "$isList");
      this._includedPartsState = $.get$CacheState_VALID();
    } else if (descriptor === $.get$DartEntry_IS_CLIENT()) {
      $.boolTypeCast(value);
      t1 = $.DartEntryImpl__CLIENT_CODE;
      t2 = this._bitmask;
      if (value === true)
        this._bitmask = $.$or$n(t2, t1);
      else
        this._bitmask = $.$and$n(t2, ~t1 >>> 0);
      this._clientServerState = $.get$CacheState_VALID();
    } else if (descriptor === $.get$DartEntry_IS_LAUNCHABLE()) {
      $.boolTypeCast(value);
      t1 = $.DartEntryImpl__LAUNCHABLE;
      t2 = this._bitmask;
      if (value === true)
        this._bitmask = $.$or$n(t2, t1);
      else
        this._bitmask = $.$and$n(t2, ~t1 >>> 0);
      this._launchableState = $.get$CacheState_VALID();
    } else if (descriptor === $.get$DartEntry_PARSE_ERRORS()) {
      this._parseErrors = value == null ? $.get$AnalysisError_NO_ERRORS() : $.interceptedTypeCast(value, "$isList");
      this._parseErrorsState = $.get$CacheState_VALID();
    } else if (descriptor === $.get$DartEntry_PARSED_UNIT()) {
      this._parsedUnit = $.propertyTypeCast(value, "$isCompilationUnit");
      this._parsedUnitState = $.get$CacheState_VALID();
    } else if (descriptor === $.get$DartEntry_PUBLIC_NAMESPACE()) {
      this._publicNamespace = $.propertyTypeCast(value, "$isNamespace");
      this._publicNamespaceState = $.get$CacheState_VALID();
    } else if (descriptor === $.get$DartEntry_REFERENCED_LIBRARIES()) {
      this._referencedLibraries = value == null ? $.get$Source_EMPTY_ARRAY() : $.interceptedTypeCast(value, "$isList");
      this._referencedLibrariesState = $.get$CacheState_VALID();
    } else if (descriptor === $.get$DartEntry_SOURCE_KIND()) {
      this._sourceKind = $.propertyTypeCast(value, "$isSourceKind");
      this._sourceKindState = $.get$CacheState_VALID();
    } else
      $.SourceEntryImpl.prototype.setValue$2.call(this, descriptor, value);
  },
  copyFrom$1: function(entry) {
    $.SourceEntryImpl.prototype.copyFrom$1.call(this, entry);
    this._sourceKindState = entry._sourceKindState;
    this._sourceKind = entry._sourceKind;
    this._parsedUnitState = entry._parsedUnitState;
    this._parsedUnit = entry._parsedUnit;
    this._parseErrorsState = entry._parseErrorsState;
    this._parseErrors = entry._parseErrors;
    this._includedPartsState = entry._includedPartsState;
    this._includedParts = entry._includedParts;
    this._referencedLibrariesState = entry._referencedLibrariesState;
    this._referencedLibraries = entry._referencedLibraries;
    this._resolutionState.copyFrom$1(entry._resolutionState);
    this._elementState = entry._elementState;
    this._liblib16$_element = entry._liblib16$_element;
    this._publicNamespaceState = entry._publicNamespaceState;
    this._publicNamespace = entry._publicNamespace;
    this._clientServerState = entry._clientServerState;
    this._launchableState = entry._launchableState;
    this._bitmask = entry._bitmask;
  },
  "+copyFrom:1:0": 0,
  getOrCreateResolutionState$1: function(librarySource2) {
    var state, state1, newState;
    state = this._resolutionState;
    if (state._liblib16$_librarySource == null) {
      state._liblib16$_librarySource = librarySource2;
      return state;
    }
    for (; !$.$eq(state._liblib16$_librarySource, librarySource2); state = state1) {
      state1 = state._nextState;
      if (state1 == null) {
        newState = new $.DartEntryImpl_ResolutionState(null, null, $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$AnalysisError_NO_ERRORS());
        newState._liblib16$_librarySource = librarySource2;
        state._nextState = newState;
        return newState;
      }
    }
    return state;
  },
  "+getOrCreateResolutionState:1:0": 0,
  updatedValue2$3: function(state, currentValue, bitMask) {
    if (state === $.get$CacheState_VALID())
      throw $.wrapException(new $.IllegalArgumentException("Use setValue() to set the state to VALID"));
    else if (state === $.get$CacheState_IN_PROCESS())
      return currentValue;
    return $.$and$n(currentValue, ~bitMask >>> 0);
  },
  "+updatedValue2:3:0": 0,
  $isDartEntry: true
},

"+DartEntryImpl": 0,

DartEntryImpl_ResolutionState: {
  "": function DartEntryImpl_ResolutionState(_nextState, _liblib16$_librarySource, _resolvedUnitState, _resolvedUnit, _resolutionErrorsState, _liblib16$_resolutionErrors) {
    this._nextState = _nextState;
    this._liblib16$_librarySource = _liblib16$_librarySource;
    this._resolvedUnitState = _resolvedUnitState;
    this._resolvedUnit = _resolvedUnit;
    this._resolutionErrorsState = _resolutionErrorsState;
    this._liblib16$_resolutionErrors = _liblib16$_resolutionErrors;
  },
  "super": "Object",
  get$_nextState: function() {
    return this._nextState;
  },
  set$_nextState: function(v) {
    this._nextState = v;
  },
  get$_liblib16$_librarySource: function() {
    return this._liblib16$_librarySource;
  },
  set$_liblib16$_librarySource: function(v) {
    this._liblib16$_librarySource = v;
  },
  get$_resolvedUnitState: function() {
    return this._resolvedUnitState;
  },
  set$_resolvedUnitState: function(v) {
    this._resolvedUnitState = v;
  },
  get$_resolvedUnit: function() {
    return this._resolvedUnit;
  },
  set$_resolvedUnit: function(v) {
    this._resolvedUnit = v;
  },
  get$_resolutionErrorsState: function() {
    return this._resolutionErrorsState;
  },
  set$_resolutionErrorsState: function(v) {
    this._resolutionErrorsState = v;
  },
  get$_liblib16$_resolutionErrors: function() {
    return this._liblib16$_resolutionErrors;
  },
  set$_liblib16$_resolutionErrors: function(v) {
    this._liblib16$_resolutionErrors = v;
  },
  copyFrom$1: function(other) {
    this._liblib16$_librarySource = other.get$_liblib16$_librarySource();
    this._resolvedUnitState = other.get$_resolvedUnitState();
    this._resolvedUnit = other.get$_resolvedUnit();
    this._resolutionErrorsState = other.get$_resolutionErrorsState();
    this._liblib16$_resolutionErrors = other.get$_liblib16$_resolutionErrors();
    if (other.get$_nextState() != null) {
      this._nextState = new $.DartEntryImpl_ResolutionState(null, null, $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$AnalysisError_NO_ERRORS());
      this._nextState.copyFrom$1(other.get$_nextState());
    }
  }
},

"+DartEntryImpl_ResolutionState": 0,

DataDescriptor: {
  "": function DataDescriptor(_liblib16$_name) {
    this._liblib16$_name = _liblib16$_name;
  },
  "super": "Object",
  get$_liblib16$_name: function() {
    return this._liblib16$_name;
  },
  set$_liblib16$_name: function(v) {
    this._liblib16$_name = v;
  },
  toString$0: function(_) {
    return this._liblib16$_name;
  }
},

"+DataDescriptor": 0,

HtmlEntryImpl: {
  "": function HtmlEntryImpl(_parsedUnitState, _parsedUnit, _resolutionErrorsState, _liblib16$_resolutionErrors, _resolvedUnitState, _resolvedUnit, _referencedLibrariesState, _referencedLibraries, _elementState, _liblib16$_element, _modificationTime, _lineInfoState, _liblib16$_lineInfo) {
    this._parsedUnitState = _parsedUnitState;
    this._parsedUnit = _parsedUnit;
    this._resolutionErrorsState = _resolutionErrorsState;
    this._liblib16$_resolutionErrors = _liblib16$_resolutionErrors;
    this._resolvedUnitState = _resolvedUnitState;
    this._resolvedUnit = _resolvedUnit;
    this._referencedLibrariesState = _referencedLibrariesState;
    this._referencedLibraries = _referencedLibraries;
    this._elementState = _elementState;
    this._liblib16$_element = _liblib16$_element;
    this._modificationTime = _modificationTime;
    this._lineInfoState = _lineInfoState;
    this._liblib16$_lineInfo = _liblib16$_lineInfo;
  },
  "super": "SourceEntryImpl",
  get$_parsedUnitState: function() {
    return this._parsedUnitState;
  },
  set$_parsedUnitState: function(v) {
    this._parsedUnitState = v;
  },
  get$_parsedUnit: function() {
    return this._parsedUnit;
  },
  set$_parsedUnit: function(v) {
    this._parsedUnit = v;
  },
  get$_resolutionErrorsState: function() {
    return this._resolutionErrorsState;
  },
  set$_resolutionErrorsState: function(v) {
    this._resolutionErrorsState = v;
  },
  get$_liblib16$_resolutionErrors: function() {
    return this._liblib16$_resolutionErrors;
  },
  set$_liblib16$_resolutionErrors: function(v) {
    this._liblib16$_resolutionErrors = v;
  },
  get$_resolvedUnitState: function() {
    return this._resolvedUnitState;
  },
  set$_resolvedUnitState: function(v) {
    this._resolvedUnitState = v;
  },
  get$_resolvedUnit: function() {
    return this._resolvedUnit;
  },
  set$_resolvedUnit: function(v) {
    this._resolvedUnit = v;
  },
  get$_referencedLibrariesState: function() {
    return this._referencedLibrariesState;
  },
  set$_referencedLibrariesState: function(v) {
    this._referencedLibrariesState = v;
  },
  get$_referencedLibraries: function() {
    return this._referencedLibraries;
  },
  set$_referencedLibraries: function(v) {
    this._referencedLibraries = v;
  },
  get$_elementState: function() {
    return this._elementState;
  },
  set$_elementState: function(v) {
    this._elementState = v;
  },
  get$_liblib16$_element: function() {
    return this._liblib16$_element;
  },
  set$_liblib16$_element: function(v) {
    this._liblib16$_element = v;
  },
  get$kind: function(_) {
    return $.get$SourceKind_HTML();
  },
  getState$1: function(descriptor) {
    if (descriptor === $.get$HtmlEntry_ELEMENT())
      return this._elementState;
    else if (descriptor === $.get$HtmlEntry_PARSED_UNIT())
      return this._parsedUnitState;
    else if (descriptor === $.get$HtmlEntry_REFERENCED_LIBRARIES())
      return this._referencedLibrariesState;
    else if (descriptor === $.get$HtmlEntry_RESOLUTION_ERRORS())
      return this._resolutionErrorsState;
    else if (descriptor === $.get$HtmlEntry_RESOLVED_UNIT())
      return this._resolvedUnitState;
    return $.SourceEntryImpl.prototype.getState$1.call(this, descriptor);
  },
  get$writableCopy: function() {
    var copy = new $.HtmlEntryImpl($.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$AnalysisError_NO_ERRORS(), $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$Source_EMPTY_ARRAY(), $.get$CacheState_INVALID(), null, 0, $.get$CacheState_INVALID(), null);
    copy.copyFrom$1(this);
    return copy;
  },
  setState$2: function(descriptor, state) {
    if (descriptor === $.get$HtmlEntry_ELEMENT()) {
      this._liblib16$_element = this.updatedValue$3(state, this._liblib16$_element, null);
      this._elementState = state;
    } else if (descriptor === $.get$HtmlEntry_PARSED_UNIT()) {
      this._parsedUnit = this.updatedValue$3(state, this._parsedUnit, null);
      this._parsedUnitState = state;
    } else if (descriptor === $.get$HtmlEntry_REFERENCED_LIBRARIES()) {
      this._referencedLibraries = this.updatedValue$3(state, this._referencedLibraries, $.get$Source_EMPTY_ARRAY());
      this._referencedLibrariesState = state;
    } else if (descriptor === $.get$HtmlEntry_RESOLUTION_ERRORS()) {
      this._liblib16$_resolutionErrors = this.updatedValue$3(state, this._liblib16$_resolutionErrors, $.get$AnalysisError_NO_ERRORS());
      this._resolutionErrorsState = state;
    } else if (descriptor === $.get$HtmlEntry_RESOLVED_UNIT()) {
      this._resolvedUnit = this.updatedValue$3(state, this._resolvedUnit, null);
      this._resolvedUnitState = state;
    } else
      $.SourceEntryImpl.prototype.setState$2.call(this, descriptor, state);
  },
  setValue$2: function(descriptor, value) {
    if (descriptor === $.get$HtmlEntry_ELEMENT()) {
      this._liblib16$_element = $.propertyTypeCast(value, "$isHtmlElement");
      this._elementState = $.get$CacheState_VALID();
    } else if (descriptor === $.get$HtmlEntry_PARSED_UNIT()) {
      this._parsedUnit = $.propertyTypeCast(value, "$isHtmlUnit");
      this._parsedUnitState = $.get$CacheState_VALID();
    } else if (descriptor === $.get$HtmlEntry_REFERENCED_LIBRARIES()) {
      this._referencedLibraries = value == null ? $.get$Source_EMPTY_ARRAY() : $.interceptedTypeCast(value, "$isList");
      this._referencedLibrariesState = $.get$CacheState_VALID();
    } else if (descriptor === $.get$HtmlEntry_RESOLUTION_ERRORS()) {
      this._liblib16$_resolutionErrors = $.interceptedTypeCast(value, "$isList");
      this._resolutionErrorsState = $.get$CacheState_VALID();
    } else if (descriptor === $.get$HtmlEntry_RESOLVED_UNIT()) {
      this._resolvedUnit = $.propertyTypeCast(value, "$isHtmlUnit");
      this._resolvedUnitState = $.get$CacheState_VALID();
    } else
      $.SourceEntryImpl.prototype.setValue$2.call(this, descriptor, value);
  },
  copyFrom$1: function(entry) {
    $.SourceEntryImpl.prototype.copyFrom$1.call(this, entry);
    this._parsedUnitState = entry._parsedUnitState;
    this._parsedUnit = entry._parsedUnit;
    this._referencedLibrariesState = entry._referencedLibrariesState;
    this._referencedLibraries = entry._referencedLibraries;
    this._liblib16$_resolutionErrors = entry._liblib16$_resolutionErrors;
    this._resolutionErrorsState = entry._resolutionErrorsState;
    this._resolvedUnitState = entry._resolvedUnitState;
    this._resolvedUnit = entry._resolvedUnit;
    this._elementState = entry._elementState;
    this._liblib16$_element = entry._liblib16$_element;
  },
  $isHtmlEntry: true
},

"+HtmlEntryImpl": 0,

SourceEntry: {
  "": function SourceEntry() {
  },
  "super": "Object"
},

"+SourceEntry": 0,

SourceEntryImpl: {
  "": function SourceEntryImpl(_modificationTime, _lineInfoState, _liblib16$_lineInfo) {
    this._modificationTime = _modificationTime;
    this._lineInfoState = _lineInfoState;
    this._liblib16$_lineInfo = _liblib16$_lineInfo;
  },
  "super": "Object",
  get$_modificationTime: function() {
    return this._modificationTime;
  },
  set$_modificationTime: function(v) {
    this._modificationTime = v;
  },
  get$_lineInfoState: function() {
    return this._lineInfoState;
  },
  set$_lineInfoState: function(v) {
    this._lineInfoState = v;
  },
  get$_liblib16$_lineInfo: function() {
    return this._liblib16$_lineInfo;
  },
  set$_liblib16$_lineInfo: function(v) {
    this._liblib16$_lineInfo = v;
  },
  getState$1: function(descriptor) {
    if (descriptor === $.get$SourceEntry_LINE_INFO())
      return this._lineInfoState;
    else
      throw $.wrapException(new $.IllegalArgumentException("Invalid descriptor: " + $.S(descriptor)));
  },
  getValue$1: function(descriptor) {
    if (descriptor === $.get$SourceEntry_LINE_INFO())
      return this._liblib16$_lineInfo;
    else
      throw $.wrapException(new $.IllegalArgumentException("Invalid descriptor: " + $.S(descriptor)));
  },
  setState$2: function(descriptor, state) {
    if (descriptor === $.get$SourceEntry_LINE_INFO()) {
      this._liblib16$_lineInfo = this.updatedValue$3(state, this._liblib16$_lineInfo, null);
      this._lineInfoState = state;
    } else
      throw $.wrapException(new $.IllegalArgumentException("Invalid descriptor: " + $.S(descriptor)));
  },
  setValue$2: function(descriptor, value) {
    if (descriptor === $.get$SourceEntry_LINE_INFO()) {
      this._liblib16$_lineInfo = $.propertyTypeCast(value, "$isLineInfo");
      this._lineInfoState = $.get$CacheState_VALID();
    } else
      throw $.wrapException(new $.IllegalArgumentException("Invalid descriptor: " + $.S(descriptor)));
  },
  copyFrom$1: function(entry) {
    this._modificationTime = entry._modificationTime;
    this._lineInfoState = entry._lineInfoState;
    this._liblib16$_lineInfo = entry._liblib16$_lineInfo;
  },
  updatedValue$3: function(state, currentValue, defaultValue) {
    if (state === $.get$CacheState_VALID())
      throw $.wrapException(new $.IllegalArgumentException("Use setValue() to set the state to VALID"));
    else if (state === $.get$CacheState_IN_PROCESS())
      return currentValue;
    return defaultValue;
  }
},

"+SourceEntryImpl": 0,

AnalysisContextImpl: {
  "": function AnalysisContextImpl(_options, _sourceFactory, _sourceMap, _pendingNotices, _recentlyUsed, _cacheLock, _cacheRemovalCount) {
    this._options = _options;
    this._sourceFactory = _sourceFactory;
    this._sourceMap = _sourceMap;
    this._pendingNotices = _pendingNotices;
    this._recentlyUsed = _recentlyUsed;
    this._cacheLock = _cacheLock;
    this._cacheRemovalCount = _cacheRemovalCount;
  },
  "super": "Object",
  get$_options: function() {
    return this._options;
  },
  set$_options: function(v) {
    this._options = v;
  },
  get$_sourceFactory: function() {
    return this._sourceFactory;
  },
  set$_sourceFactory: function(v) {
    this._sourceFactory = v;
  },
  get$_sourceMap: function() {
    return this._sourceMap;
  },
  set$_sourceMap: function(v) {
    this._sourceMap = v;
  },
  get$_pendingNotices: function() {
    return this._pendingNotices;
  },
  set$_pendingNotices: function(v) {
    this._pendingNotices = v;
  },
  get$_recentlyUsed: function() {
    return this._recentlyUsed;
  },
  set$_recentlyUsed: function(v) {
    this._recentlyUsed = v;
  },
  get$_cacheLock: function() {
    return this._cacheLock;
  },
  set$_cacheLock: function(v) {
    this._cacheLock = v;
  },
  get$_cacheRemovalCount: function() {
    return this._cacheRemovalCount;
  },
  set$_cacheRemovalCount: function(v) {
    this._cacheRemovalCount = v;
  },
  getLibrariesContaining$1: function(source) {
    var librarySources, t1, t2, t3, entry;
    librarySources = $.List_List($, $.Source);
    librarySources.$builtinTypeInfo = [$.Source];
    t1 = $.getMapEntrySet(this._sourceMap);
    t2 = t1._computeElements$0();
    t3 = $.getRuntimeTypeArgument(t1, t1.$asHashSet, 0);
    t2 = new $.HashSetIterator(t1, t2, 0, null);
    t2.$builtinTypeInfo = [t3];
    for (; t2.moveNext$0();) {
      entry = t2._liblib0$_current;
      if ($.get$kind$x(entry.getValue$0()) === $.get$SourceKind_LIBRARY())
        if (this.contains$2(this, $.propertyTypeCast(entry.getValue$0(), "$isDartEntry").getValue$1($.get$DartEntry_INCLUDED_PARTS()), source))
          librarySources.push(entry.getKey$0());
    }
    if (librarySources.length === 0)
      return $.get$Source_EMPTY_ARRAY();
    return $.List_List$from(librarySources, true, null);
  },
  parseCompilationUnit$1: function(source) {
    var dartEntry, unit, dartCopy, t1;
    this.accessed$1(source);
    dartEntry = this.getDartEntry$1(source);
    if (dartEntry == null)
      return;
    unit = dartEntry.get$anyParsedCompilationUnit();
    if (unit == null) {
      dartCopy = dartEntry.get$writableCopy();
      unit = this.internalParseCompilationUnit$2(dartCopy, source);
      t1 = this._sourceMap;
      t1.$indexSet(t1, source, dartCopy);
    }
    return unit;
  },
  accessed$1: function(source) {
    var t1, removedSource, t2, sourceEntry, htmlCopy, dartCopy, t3, t4, librarySource;
    t1 = this._recentlyUsed;
    if ($.JSArray_methods.contains$1(t1, source)) {
      $.JSArray_methods.remove$1(t1, source);
      t1.push(source);
      return;
    }
    if (this._cacheRemovalCount === 0 && t1.length >= $.AnalysisContextImpl__MAX_CACHE_SIZE) {
      removedSource = $.JSArray_methods.removeAt$1(t1, 0);
      t2 = this._sourceMap;
      sourceEntry = t2.$index(t2, removedSource);
      if (typeof sourceEntry === "object" && sourceEntry !== null && !!$.getInterceptor(sourceEntry).$isHtmlEntry) {
        htmlCopy = sourceEntry.get$writableCopy();
        htmlCopy.setState$2($.get$HtmlEntry_PARSED_UNIT(), $.get$CacheState_FLUSHED());
        htmlCopy.setState$2($.get$HtmlEntry_RESOLVED_UNIT(), $.get$CacheState_FLUSHED());
        t2.$indexSet(t2, removedSource, htmlCopy);
      } else if (typeof sourceEntry === "object" && sourceEntry !== null && !!$.getInterceptor(sourceEntry).$isDartEntry) {
        dartCopy = sourceEntry.get$writableCopy();
        dartCopy.setState$2($.get$DartEntry_PARSED_UNIT(), $.get$CacheState_FLUSHED());
        t3 = this.getLibrariesContaining$1(source);
        t4 = $.getRuntimeTypeArgument(t3, t3.$asJSArray, 0);
        t3 = new $.ListIterator(t3, t3.length, 0, null);
        t3.$builtinTypeInfo = [t4];
        for (; t3.moveNext$0();) {
          librarySource = t3._liblib$_current;
          dartCopy.setState2$3($.get$DartEntry_RESOLVED_UNIT(), librarySource, $.get$CacheState_FLUSHED());
        }
        t2.$indexSet(t2, removedSource, dartCopy);
      }
    }
    t1.push(source);
  },
  "+accessed:1:0": 0,
  contains$2: function(_, sources, targetSource) {
    var t1;
    for (t1 = $.get$iterator$ax(sources); t1.moveNext$0() === true;)
      if ($.$eq(t1.get$current(), targetSource))
        return true;
    return false;
  },
  "+contains:2:0": 0,
  createSourceEntry$1: function(source) {
    var t1, t2, htmlEntry, dartEntry;
    t1 = source.file;
    t2 = this._sourceMap;
    if ($.AnalysisEngine_isHtmlFileName(t1 == null ? null : $.get$name$x(t1))) {
      htmlEntry = new $.HtmlEntryImpl($.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$AnalysisError_NO_ERRORS(), $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$Source_EMPTY_ARRAY(), $.get$CacheState_INVALID(), null, 0, $.get$CacheState_INVALID(), null);
      t2.$indexSet(t2, source, htmlEntry);
      return htmlEntry;
    } else {
      dartEntry = new $.DartEntryImpl($.get$CacheState_INVALID(), $.get$SourceKind_UNKNOWN(), $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$AnalysisError_NO_ERRORS(), $.get$CacheState_INVALID(), $.get$Source_EMPTY_ARRAY(), $.get$CacheState_INVALID(), $.get$Source_EMPTY_ARRAY(), new $.DartEntryImpl_ResolutionState(null, null, $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$AnalysisError_NO_ERRORS()), $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$CacheState_INVALID(), 0, 0, $.get$CacheState_INVALID(), null);
      t2.$indexSet(t2, source, dartEntry);
      return dartEntry;
    }
  },
  "+createSourceEntry:1:0": 0,
  getDartEntry$1: function(source) {
    var t1, sourceEntry;
    t1 = this._sourceMap;
    sourceEntry = t1.$index(t1, source);
    if (sourceEntry == null)
      sourceEntry = this.createSourceEntry$1(source);
    if (sourceEntry == null) {
      sourceEntry = new $.DartEntryImpl($.get$CacheState_INVALID(), $.get$SourceKind_UNKNOWN(), $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$AnalysisError_NO_ERRORS(), $.get$CacheState_INVALID(), $.get$Source_EMPTY_ARRAY(), $.get$CacheState_INVALID(), $.get$Source_EMPTY_ARRAY(), new $.DartEntryImpl_ResolutionState(null, null, $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$AnalysisError_NO_ERRORS()), $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), null, $.get$CacheState_INVALID(), $.get$CacheState_INVALID(), 0, 0, $.get$CacheState_INVALID(), null);
      t1.$indexSet(t1, source, sourceEntry);
      return sourceEntry;
    } else if (typeof sourceEntry === "object" && sourceEntry !== null && !!$.getInterceptor(sourceEntry).$isDartEntry)
      return sourceEntry;
    return;
  },
  "+getDartEntry:1:0": 0,
  hasPartOfDirective$1: function(unit) {
    var t1, t2, hasPartOf, directive;
    unit.get$directives;
    t1 = unit._directives;
    t1.get$iterator;
    t1 = t1.elements;
    t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    hasPartOf = false;
    for (; t1.moveNext$0();) {
      directive = t1._liblib$_current;
      if (typeof directive === "object" && directive !== null && !!$.getInterceptor(directive).$isPartOfDirective)
        hasPartOf = true;
      else if (typeof directive === "object" && directive !== null && !!$.getInterceptor(directive).$isLibraryDirective)
        return false;
    }
    return hasPartOf;
  },
  "+hasPartOfDirective:1:0": 0,
  internalParseCompilationUnit$2: function(dartCopy, source) {
    var errorListener, scanResult, parser, unit, lineInfo, errors, exception, t1, parser0, lineInfo0, t2, exception0;
    this.accessed$1(source);
    try {
      t1 = new $.HashMap(0, null, null, null, null);
      t1.$builtinTypeInfo = [$.Source, [$.JSArray, $.AnalysisError]];
      errorListener = new $.RecordingErrorListener(t1);
      scanResult = this.internalScan$2(source, errorListener);
      parser0 = new $.Parser(null, null, null, false, false);
      parser0._liblib14$_source = source;
      parser0._errorListener = errorListener;
      parser = parser0;
      unit = parser.parseCompilationUnit$1(scanResult.get$_token());
      t1 = scanResult.get$_lineStarts();
      lineInfo0 = new $.LineInfo(null);
      if (t1 == null)
        $.throwExpression(new $.IllegalArgumentException("lineStarts must be non-null"));
      else {
        t2 = $.get$length$asx(t1);
        if (typeof t2 !== "number")
          throw t2.$lt();
        if (t2 < 1)
          $.throwExpression(new $.IllegalArgumentException("lineStarts must be non-empty"));
      }
      lineInfo0._liblib15$_lineStarts = t1;
      lineInfo = lineInfo0;
      errors = errorListener.getErrors2$1(source);
      t1 = unit;
      t2 = errors;
      t1.set$parsingErrors;
      t1.set$_parsingErrors(t2 == null ? $.get$AnalysisError_NO_ERRORS() : t2);
      t1 = unit;
      t1.set$lineInfo;
      t1.set$_lineInfo(lineInfo);
      if (dartCopy.getState$1($.get$DartEntry_SOURCE_KIND()) === $.get$CacheState_INVALID())
        if (this.hasPartOfDirective$1(unit))
          dartCopy.setValue$2($.get$DartEntry_SOURCE_KIND(), $.get$SourceKind_PART());
        else
          dartCopy.setValue$2($.get$DartEntry_SOURCE_KIND(), $.get$SourceKind_LIBRARY());
      dartCopy.setValue$2($.get$SourceEntry_LINE_INFO(), lineInfo);
      dartCopy.setValue$2($.get$DartEntry_PARSED_UNIT(), unit);
      dartCopy.setValue$2($.get$DartEntry_PARSE_ERRORS(), errors);
      return unit;
    } catch (exception0) {
      t1 = $.unwrapException(exception0);
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isAnalysisException) {
        exception = t1;
        dartCopy.setState$2($.get$SourceEntry_LINE_INFO(), $.get$CacheState_ERROR());
        dartCopy.setState$2($.get$DartEntry_PARSED_UNIT(), $.get$CacheState_ERROR());
        dartCopy.setState$2($.get$DartEntry_PARSE_ERRORS(), $.get$CacheState_ERROR());
        throw $.wrapException(exception);
      } else
        throw exception0;
    }

  },
  "+internalParseCompilationUnit:2:0": 0,
  internalScan$2: function(source, errorListener) {
    var receiver, exception, result, exception0, t1;
    result = new $.AnalysisContextImpl_ScanResult(0, null, null);
    receiver = new $.Source_ContentReceiver_8(source, errorListener, result);
    try {
      receiver.accept2$2(source.get$contents(), 0);
    } catch (exception0) {
      t1 = $.unwrapException(exception0);
      exception = t1;
      throw $.wrapException(new $.AnalysisException(null, exception));
    }

    return result;
  },
  "+internalScan:2:0": 0
},

"+AnalysisContextImpl": 0,

AnalysisContextImpl_ScanResult: {
  "": function AnalysisContextImpl_ScanResult(_modificationTime, _token, _lineStarts) {
    this._modificationTime = _modificationTime;
    this._token = _token;
    this._lineStarts = _lineStarts;
  },
  "super": "Object",
  get$_modificationTime: function() {
    return this._modificationTime;
  },
  set$_modificationTime: function(v) {
    this._modificationTime = v;
  },
  get$_token: function() {
    return this._token;
  },
  set$_token: function(v) {
    this._token = v;
  },
  get$_lineStarts: function() {
    return this._lineStarts;
  },
  set$_lineStarts: function(v) {
    this._lineStarts = v;
  }
},

"+AnalysisContextImpl_ScanResult": 0,

Source_ContentReceiver_8: {
  "": function Source_ContentReceiver_8(source, errorListener, result) {
    this.source = source;
    this.errorListener = errorListener;
    this.result = result;
  },
  "super": "Object",
  get$source: function(receiver) {
    return this.source;
  },
  set$source: function(receiver, v) {
    this.source = v;
  },
  get$errorListener: function() {
    return this.errorListener;
  },
  set$errorListener: function(v) {
    this.errorListener = v;
  },
  get$result: function(receiver) {
    return this.result;
  },
  set$result: function(receiver, v) {
    this.result = v;
  },
  accept2$2: function(contents, modificationTime2) {
    var t1, t2, scanner;
    t1 = $.List_List($, $.JSInt);
    t1.$builtinTypeInfo = [$.JSInt];
    t2 = $.List_List($, $.BeginToken);
    t2.$builtinTypeInfo = [$.BeginToken];
    scanner = new $.StringScanner(0, null, 0, 0, null, null, null, null, null, null, 0, t1, t2, false);
    scanner.AbstractScanner$2(this.source, this.errorListener);
    scanner._offsetDelta = 0;
    scanner._string = contents;
    scanner._stringLength = $.get$length$asx(contents);
    scanner._charOffset = -1;
    t1 = this.result;
    t1._modificationTime = modificationTime2;
    t1._token = scanner.tokenize$0();
    t1._lineStarts = scanner._liblib9$_lineStarts;
  }
},

"+Source_ContentReceiver_8": 0,

AnalysisOptionsImpl: {
  "": function AnalysisOptionsImpl(_strictMode) {
    this._strictMode = _strictMode;
  },
  "super": "Object",
  get$_strictMode: function() {
    return this._strictMode;
  },
  set$_strictMode: function(v) {
    this._strictMode = v;
  }
},

"+AnalysisOptionsImpl": 0,

CacheState: {
  "": function CacheState(name, ordinal) {
    this.name = name;
    this.ordinal = ordinal;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  get$ordinal: function() {
    return this.ordinal;
  },
  compareTo$1: function(_, other) {
    var t1 = other.get$ordinal();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this.ordinal - t1;
  },
  toString$0: function(_) {
    return this.name;
  }
},

"+CacheState": 0,

ChangeNoticeImpl: {
  "": function ChangeNoticeImpl(_liblib16$_source, _compilationUnit, _errors, _liblib16$_lineInfo) {
    this._liblib16$_source = _liblib16$_source;
    this._compilationUnit = _compilationUnit;
    this._errors = _errors;
    this._liblib16$_lineInfo = _liblib16$_lineInfo;
  },
  "super": "Object",
  get$_liblib16$_source: function() {
    return this._liblib16$_source;
  },
  set$_liblib16$_source: function(v) {
    this._liblib16$_source = v;
  },
  get$_compilationUnit: function() {
    return this._compilationUnit;
  },
  set$_compilationUnit: function(v) {
    this._compilationUnit = v;
  },
  get$_errors: function() {
    return this._errors;
  },
  set$_errors: function(v) {
    this._errors = v;
  },
  get$_liblib16$_lineInfo: function() {
    return this._liblib16$_lineInfo;
  },
  set$_liblib16$_lineInfo: function(v) {
    this._liblib16$_lineInfo = v;
  }
},

"+ChangeNoticeImpl": 0,

DelegatingAnalysisContextImpl: {
  "": function DelegatingAnalysisContextImpl(_sdkAnalysisContext, _options, _sourceFactory, _sourceMap, _pendingNotices, _recentlyUsed, _cacheLock, _cacheRemovalCount) {
    this._sdkAnalysisContext = _sdkAnalysisContext;
    this._options = _options;
    this._sourceFactory = _sourceFactory;
    this._sourceMap = _sourceMap;
    this._pendingNotices = _pendingNotices;
    this._recentlyUsed = _recentlyUsed;
    this._cacheLock = _cacheLock;
    this._cacheRemovalCount = _cacheRemovalCount;
  },
  "super": "AnalysisContextImpl",
  get$_sdkAnalysisContext: function() {
    return this._sdkAnalysisContext;
  },
  set$_sdkAnalysisContext: function(v) {
    this._sdkAnalysisContext = v;
  },
  getLibrariesContaining$1: function(source) {
    if (source.isInSystemLibrary$0() === true)
      return this._sdkAnalysisContext.getLibrariesContaining$1(source);
    else
      return $.AnalysisContextImpl.prototype.getLibrariesContaining$1.call(this, source);
  },
  parseCompilationUnit$1: function(source) {
    return $.AnalysisContextImpl.prototype.parseCompilationUnit$1.call(this, source);
  }
},

"+DelegatingAnalysisContextImpl": 0,

InstrumentedAnalysisContextImpl: {
  "": function InstrumentedAnalysisContextImpl(_contextId, _basis) {
    this._contextId = _contextId;
    this._basis = _basis;
  },
  "super": "Object",
  get$_contextId: function() {
    return this._contextId;
  },
  set$_contextId: function(v) {
    this._contextId = v;
  },
  get$_basis: function() {
    return this._basis;
  },
  set$_basis: function(v) {
    this._basis = v;
  },
  parseCompilationUnit$1: function(source) {
    var instrumentation, e, t1, exception;
    $.get$Instrumentation__CURRENT_LOGGER();
    instrumentation = $.get$Instrumentation__NULL_INSTRUMENTATION_BUILDER();
    try {
      t1 = this._basis.parseCompilationUnit$1(source);
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isAnalysisException) {
        e = t1;
        throw $.wrapException(e);
      } else
        throw exception;
    }
 finally {
    }
  }
},

"+InstrumentedAnalysisContextImpl": 0,

RecordingErrorListener: {
  "": function RecordingErrorListener(_errors) {
    this._errors = _errors;
  },
  "super": "Object",
  get$_errors: function() {
    return this._errors;
  },
  set$_errors: function(v) {
    this._errors = v;
  },
  addAll$1: function(_, listener) {
    var t1;
    for (t1 = $.get$iterator$ax(listener.get$errors()); t1.moveNext$0() === true;)
      this.onError$1(this, t1.get$current());
  },
  get$errors: function() {
    var entrySet2, resultList, t1, t2;
    entrySet2 = $.getMapEntrySet(this._errors);
    if (entrySet2._liblib0$_length === 0)
      return $.get$AnalysisError_NO_ERRORS();
    resultList = $.List_List($, $.AnalysisError);
    resultList.$builtinTypeInfo = [$.AnalysisError];
    t1 = entrySet2._computeElements$0();
    t2 = $.getRuntimeTypeArgument(entrySet2, entrySet2.$asHashSet, 0);
    t1 = new $.HashSetIterator(entrySet2, t1, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();)
      $.JSArray_methods.addAll$1(resultList, t1._liblib0$_current.getValue$0());
    return $.List_List$from(resultList, true, null);
  },
  getErrors2$1: function(source) {
    var t1, errorsForSource;
    t1 = this._errors;
    errorsForSource = t1.$index(t1, source);
    if (errorsForSource == null)
      return $.get$AnalysisError_NO_ERRORS();
    else
      return $.List_List$from(errorsForSource, true, null);
  },
  onError$1: function(_, $event) {
    var source2, t1, errorsForSource;
    source2 = $.get$source$x($event);
    t1 = this._errors;
    errorsForSource = t1.$index(t1, source2);
    if (typeof errorsForSource !== "object" || errorsForSource === null || errorsForSource.constructor !== Array || !!errorsForSource.fixed$length)
      return this.onError$1$bailout(1, $event, errorsForSource, source2, t1);
    if (t1.$index(t1, source2) == null) {
      errorsForSource = $.List_List($, $.AnalysisError);
      errorsForSource.$builtinTypeInfo = [$.AnalysisError];
      t1.$indexSet(t1, source2, errorsForSource);
    }
    errorsForSource.push($event);
  },
  "+onError:1:0": 0,
  onError$1$bailout: function(state0, $event, errorsForSource, source2, t1) {
    if (t1.$index(t1, source2) == null) {
      errorsForSource = $.List_List($, $.AnalysisError);
      errorsForSource.$builtinTypeInfo = [$.AnalysisError];
      t1.$indexSet(t1, source2, errorsForSource);
    }
    $.add$1$ax(errorsForSource, $event);
  }
},

"+RecordingErrorListener": 0,

Logger_NullLogger: {
  "": function Logger_NullLogger() {
  },
  "super": "Object"
},

"+Logger_NullLogger": 0,

AnalysisEngine_isHtmlFileName: function(fileName) {
  var extension, t1, t2;
  if (fileName == null)
    return false;
  extension = $.FileNameUtilities_getExtension(fileName);
  t1 = $.AnalysisEngine_SUFFIX_HTML;
  t2 = $.getInterceptor$s(extension);
  if (!$.$eq(t2.toLowerCase$0(extension), t1.toLowerCase())) {
    t1 = $.AnalysisEngine_SUFFIX_HTM;
    t1 = $.$eq(t2.toLowerCase$0(extension), t1.toLowerCase());
  } else
    t1 = true;
  return t1;
},

"+isHtmlFileName:1:0": 0}],
["engine.ast", "../packages/analyzer_experimental/src/generated/ast.dart", , {
ASTNode: {
  "": function ASTNode(_liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Object",
  get$_liblib4$_parent: function() {
    return this._liblib4$_parent;
  },
  set$_liblib4$_parent: function(v) {
    this._liblib4$_parent = v;
  },
  get$_propertyMap: function() {
    return this._propertyMap;
  },
  set$_propertyMap: function(v) {
    this._propertyMap = v;
  },
  get$hashCode: function(receiver) {
    return this.hashCode;
  },
  get$length: function(_) {
    var beginToken2, endToken2, t1, t2, t3;
    beginToken2 = this.get$beginToken();
    endToken2 = this.get$endToken();
    if (beginToken2 == null || endToken2 == null)
      return -1;
    t1 = $.getInterceptor$x(endToken2);
    t2 = t1.get$offset(endToken2);
    if (typeof t2 !== "number")
      return this.get$length$bailout(1, beginToken2, t2, endToken2, t1);
    t1 = t1.get$length(endToken2);
    if (typeof t1 !== "number")
      return this.get$length$bailout(2, beginToken2, t2, 0, t1);
    t3 = $.get$offset$x(beginToken2);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return t2 + t1 - t3;
  },
  get$length$bailout: function(state0, beginToken2, t2, endToken2, t1) {
    switch (state0) {
      case 0:
        beginToken2 = this.get$beginToken();
        endToken2 = this.get$endToken();
        if (beginToken2 == null || endToken2 == null)
          return -1;
        t1 = $.getInterceptor$x(endToken2);
        t2 = t1.get$offset(endToken2);
      case 1:
        state0 = 0;
        t1 = t1.get$length(endToken2);
      case 2:
        state0 = 0;
        t1 = $.$add$ns(t2, t1);
        t2 = $.get$offset$x(beginToken2);
        if (typeof t2 !== "number")
          throw $.iae(t2);
        return $.$sub$n(t1, t2);
    }
  },
  get$offset: function(_) {
    if (this.get$beginToken() == null)
      return -1;
    return $.get$offset$x(this.get$beginToken());
  },
  get$parent: function(_) {
    return this._liblib4$_parent;
  },
  setProperty$2: function(_, propertyName, propertyValue) {
    var t1;
    if (propertyValue == null) {
      t1 = this._propertyMap;
      if (t1 != null) {
        t1.remove$1(t1, propertyName);
        t1 = this._propertyMap;
        t1.get$isEmpty;
        if (t1._liblib0$_length === 0)
          this._propertyMap = null;
      }
    } else {
      if (this._propertyMap == null) {
        t1 = new $.HashMap(0, null, null, null, null);
        t1.$builtinTypeInfo = [$.JSString, $.Object];
        this._propertyMap = t1;
      }
      t1 = this._propertyMap;
      t1.$indexSet(t1, propertyName, propertyValue);
    }
  },
  toString$0: function(_) {
    var t1, writer;
    t1 = new $.StringBuffer("");
    t1._contents = "";
    writer = new $.PrintStringWriter(t1);
    t1 = new $.ToSourceVisitor(null);
    t1._writer = writer;
    this.accept$1(this, t1);
    return writer._sb._contents;
  },
  becomeParentOf$1: function(child) {
    if (child != null)
      $.set$parent$x(child, this);
    return child;
  },
  set$parent: function(_, newParent) {
    this._liblib4$_parent = newParent;
  }
},

"+ASTNode": 0,

AdjacentStrings: {
  "": function AdjacentStrings(_liblib4$_strings, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_strings = _liblib4$_strings;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "StringLiteral",
  get$_liblib4$_strings: function() {
    return this._liblib4$_strings;
  },
  set$_liblib4$_strings: function(v) {
    this._liblib4$_strings = v;
  },
  accept$1: function(_, visitor) {
    visitor.visitList2$2(this._liblib4$_strings, " ");
    return;
  },
  get$beginToken: function() {
    return this._liblib4$_strings.get$beginToken();
  },
  get$endToken: function() {
    return this._liblib4$_strings.get$endToken();
  }
},

"+AdjacentStrings": 0,

AnnotatedNode: {
  "": function AnnotatedNode(_comment, _metadata) {
    this._comment = _comment;
    this._metadata = _metadata;
  },
  "super": "ASTNode",
  get$_comment: function() {
    return this._comment;
  },
  set$_comment: function(v) {
    this._comment = v;
  },
  get$_metadata: function() {
    return this._metadata;
  },
  set$_metadata: function(v) {
    this._metadata = v;
  },
  get$beginToken: function() {
    var t1, commentToken, metadataToken;
    if (this._comment == null) {
      t1 = this._metadata;
      if (t1.get$isEmpty(t1))
        return this.get$firstTokenAfterCommentAndMetadata();
      else
        return this._metadata.get$beginToken();
    } else {
      t1 = this._metadata;
      if (t1.get$isEmpty(t1))
        return this._comment.get$beginToken();
    }
    commentToken = this._comment.get$beginToken();
    metadataToken = this._metadata.get$beginToken();
    if ($.$lt$n($.get$offset$x(commentToken), $.get$offset$x(metadataToken)) === true)
      return commentToken;
    return metadataToken;
  }
},

"+AnnotatedNode": 0,

Annotation: {
  "": function Annotation(_atSign, _liblib4$_name, _period, _constructorName, _liblib4$_arguments, _liblib4$_parent, _propertyMap, hashCode) {
    this._atSign = _atSign;
    this._liblib4$_name = _liblib4$_name;
    this._period = _period;
    this._constructorName = _constructorName;
    this._liblib4$_arguments = _liblib4$_arguments;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_atSign: function() {
    return this._atSign;
  },
  set$_atSign: function(v) {
    this._atSign = v;
  },
  get$_liblib4$_name: function() {
    return this._liblib4$_name;
  },
  set$_liblib4$_name: function(v) {
    this._liblib4$_name = v;
  },
  get$_period: function() {
    return this._period;
  },
  set$_period: function(v) {
    this._period = v;
  },
  get$_constructorName: function() {
    return this._constructorName;
  },
  set$_constructorName: function(v) {
    this._constructorName = v;
  },
  get$_liblib4$_arguments: function() {
    return this._liblib4$_arguments;
  },
  set$_liblib4$_arguments: function(v) {
    this._liblib4$_arguments = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "@";
    t1 = this._liblib4$_name;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = this._constructorName;
    if (t1 != null) {
      t2 = visitor._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, ".");
      $.accept$1$x(t1, visitor);
    }
    t1 = this._liblib4$_arguments;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._atSign;
  },
  get$element: function() {
    var t1 = this._constructorName;
    if (t1 != null)
      return t1.get$element();
    else {
      t1 = this._liblib4$_name;
      if (t1 != null)
        return t1.get$element();
    }
    return;
  },
  get$endToken: function() {
    var t1 = this._liblib4$_arguments;
    if (t1 != null)
      return t1.get$endToken();
    else {
      t1 = this._constructorName;
      if (t1 != null)
        return t1.get$endToken();
    }
    return this._liblib4$_name.get$endToken();
  },
  get$name: function(_) {
    return this._liblib4$_name;
  },
  Annotation$full$5: function(atSign, $name, period, constructorName, $arguments) {
    this._atSign = atSign;
    $name.set$parent($name, this);
    this._liblib4$_name = $name;
    this._period = period;
    if (constructorName != null)
      constructorName.set$parent(constructorName, this);
    this._constructorName = constructorName;
    if ($arguments != null)
      $arguments.set$parent($arguments, this);
    this._liblib4$_arguments = $arguments;
  }
},

"+Annotation": 0,

ArgumentDefinitionTest: {
  "": function ArgumentDefinitionTest(_question, _identifier, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._question = _question;
    this._identifier = _identifier;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_question: function() {
    return this._question;
  },
  set$_question: function(v) {
    this._question = v;
  },
  get$_identifier: function() {
    return this._identifier;
  },
  set$_identifier: function(v) {
    this._identifier = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "?";
    t1 = this._identifier;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._question;
  },
  get$endToken: function() {
    return this._identifier.get$endToken();
  },
  get$identifier: function() {
    return this._identifier;
  }
},

"+ArgumentDefinitionTest": 0,

ArgumentList: {
  "": function ArgumentList(_leftParenthesis, _liblib4$_arguments, _rightParenthesis, _correspondingStaticParameters, _correspondingPropagatedParameters, _liblib4$_parent, _propertyMap, hashCode) {
    this._leftParenthesis = _leftParenthesis;
    this._liblib4$_arguments = _liblib4$_arguments;
    this._rightParenthesis = _rightParenthesis;
    this._correspondingStaticParameters = _correspondingStaticParameters;
    this._correspondingPropagatedParameters = _correspondingPropagatedParameters;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_leftParenthesis: function() {
    return this._leftParenthesis;
  },
  set$_leftParenthesis: function(v) {
    this._leftParenthesis = v;
  },
  get$_liblib4$_arguments: function() {
    return this._liblib4$_arguments;
  },
  set$_liblib4$_arguments: function(v) {
    this._liblib4$_arguments = v;
  },
  get$_rightParenthesis: function() {
    return this._rightParenthesis;
  },
  set$_rightParenthesis: function(v) {
    this._rightParenthesis = v;
  },
  get$_correspondingStaticParameters: function() {
    return this._correspondingStaticParameters;
  },
  set$_correspondingStaticParameters: function(v) {
    this._correspondingStaticParameters = v;
  },
  get$_correspondingPropagatedParameters: function() {
    return this._correspondingPropagatedParameters;
  },
  set$_correspondingPropagatedParameters: function(v) {
    this._correspondingPropagatedParameters = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "(";
    visitor.visitList2$2(this._liblib4$_arguments, ", ");
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ")";
    return;
  },
  get$beginToken: function() {
    return this._leftParenthesis;
  },
  get$endToken: function() {
    return this._rightParenthesis;
  }
},

"+ArgumentList": 0,

AsExpression: {
  "": function AsExpression(_expression, _asOperator, _liblib4$_type, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._expression = _expression;
    this._asOperator = _asOperator;
    this._liblib4$_type = _liblib4$_type;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_expression: function() {
    return this._expression;
  },
  set$_expression: function(v) {
    this._expression = v;
  },
  get$_asOperator: function() {
    return this._asOperator;
  },
  set$_asOperator: function(v) {
    this._asOperator = v;
  },
  get$_liblib4$_type: function() {
    return this._liblib4$_type;
  },
  set$_liblib4$_type: function(v) {
    this._liblib4$_type = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._expression;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " as ";
    t1 = this._liblib4$_type;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._expression.get$beginToken();
  },
  get$endToken: function() {
    return this._liblib4$_type.get$endToken();
  },
  get$type: function(_) {
    return this._liblib4$_type;
  },
  set$type: function(_, $name) {
    if ($name != null)
      $.set$parent$x($name, this);
    this._liblib4$_type = $name;
  }
},

"+AsExpression": 0,

AssertStatement: {
  "": function AssertStatement(_keyword, _leftParenthesis, _condition, _rightParenthesis, _semicolon, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._leftParenthesis = _leftParenthesis;
    this._condition = _condition;
    this._rightParenthesis = _rightParenthesis;
    this._semicolon = _semicolon;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_leftParenthesis: function() {
    return this._leftParenthesis;
  },
  set$_leftParenthesis: function(v) {
    this._leftParenthesis = v;
  },
  get$_condition: function() {
    return this._condition;
  },
  set$_condition: function(v) {
    this._condition = v;
  },
  get$_rightParenthesis: function() {
    return this._rightParenthesis;
  },
  set$_rightParenthesis: function(v) {
    this._rightParenthesis = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "assert (";
    t1 = this._condition;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ");";
    return;
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$endToken: function() {
    return this._semicolon;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  }
},

"+AssertStatement": 0,

AssignmentExpression: {
  "": function AssignmentExpression(_leftHandSide, _operator, _rightHandSide, _staticElement, _propagatedElement, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._leftHandSide = _leftHandSide;
    this._operator = _operator;
    this._rightHandSide = _rightHandSide;
    this._staticElement = _staticElement;
    this._propagatedElement = _propagatedElement;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_leftHandSide: function() {
    return this._leftHandSide;
  },
  set$_leftHandSide: function(v) {
    this._leftHandSide = v;
  },
  get$_operator: function() {
    return this._operator;
  },
  set$_operator: function(v) {
    this._operator = v;
  },
  get$_rightHandSide: function() {
    return this._rightHandSide;
  },
  set$_rightHandSide: function(v) {
    this._rightHandSide = v;
  },
  get$_staticElement: function() {
    return this._staticElement;
  },
  set$_staticElement: function(v) {
    this._staticElement = v;
  },
  get$_propagatedElement: function() {
    return this._propagatedElement;
  },
  set$_propagatedElement: function(v) {
    this._propagatedElement = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._leftHandSide;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " ";
    t1 = visitor._writer;
    t2 = this._operator.get$lexeme();
    if (typeof t2 !== "string")
      return this.accept$1$bailout1(1, visitor, t1, t2);
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + t2;
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " ";
    t1 = this._rightHandSide;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  accept$1$bailout1: function(state0, visitor, t1, t2) {
    var str;
    t1.print$1;
    t1 = t1._sb;
    str = typeof t2 === "string" ? t2 : $.S(t2);
    t1._contents = t1._contents + str;
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " ";
    t1 = this._rightHandSide;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._leftHandSide.get$beginToken();
  },
  get$element: function() {
    return this._propagatedElement;
  },
  get$endToken: function() {
    return this._rightHandSide.get$endToken();
  }
},

"+AssignmentExpression": 0,

BinaryExpression: {
  "": function BinaryExpression(_leftOperand, _operator, _rightOperand, _staticElement, _propagatedElement, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._leftOperand = _leftOperand;
    this._operator = _operator;
    this._rightOperand = _rightOperand;
    this._staticElement = _staticElement;
    this._propagatedElement = _propagatedElement;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_leftOperand: function() {
    return this._leftOperand;
  },
  set$_leftOperand: function(v) {
    this._leftOperand = v;
  },
  get$_operator: function() {
    return this._operator;
  },
  set$_operator: function(v) {
    this._operator = v;
  },
  get$_rightOperand: function() {
    return this._rightOperand;
  },
  set$_rightOperand: function(v) {
    this._rightOperand = v;
  },
  get$_staticElement: function() {
    return this._staticElement;
  },
  set$_staticElement: function(v) {
    this._staticElement = v;
  },
  get$_propagatedElement: function() {
    return this._propagatedElement;
  },
  set$_propagatedElement: function(v) {
    this._propagatedElement = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._leftOperand;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " ";
    t1 = visitor._writer;
    t2 = this._operator.get$lexeme();
    if (typeof t2 !== "string")
      return this.accept$1$bailout1(1, visitor, t1, t2);
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + t2;
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " ";
    t1 = this._rightOperand;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  accept$1$bailout1: function(state0, visitor, t1, t2) {
    var str;
    t1.print$1;
    t1 = t1._sb;
    str = typeof t2 === "string" ? t2 : $.S(t2);
    t1._contents = t1._contents + str;
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " ";
    t1 = this._rightOperand;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._leftOperand.get$beginToken();
  },
  get$element: function() {
    return this._propagatedElement;
  },
  get$endToken: function() {
    return this._rightOperand.get$endToken();
  }
},

"+BinaryExpression": 0,

Block: {
  "": function Block(_leftBracket, _statements, _rightBracket, _liblib4$_parent, _propertyMap, hashCode) {
    this._leftBracket = _leftBracket;
    this._statements = _statements;
    this._rightBracket = _rightBracket;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_leftBracket: function() {
    return this._leftBracket;
  },
  set$_leftBracket: function(v) {
    this._leftBracket = v;
  },
  get$_statements: function() {
    return this._statements;
  },
  set$_statements: function(v) {
    this._statements = v;
  },
  get$_rightBracket: function() {
    return this._rightBracket;
  },
  set$_rightBracket: function(v) {
    this._rightBracket = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "{";
    visitor.visitList2$2(this._statements, " ");
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "}";
    return;
  },
  get$beginToken: function() {
    return this._leftBracket;
  },
  get$endToken: function() {
    return this._rightBracket;
  }
},

"+Block": 0,

BlockFunctionBody: {
  "": function BlockFunctionBody(_block, _liblib4$_parent, _propertyMap, hashCode) {
    this._block = _block;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "FunctionBody",
  get$_block: function() {
    return this._block;
  },
  set$_block: function(v) {
    this._block = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._block;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._block.get$beginToken();
  },
  get$endToken: function() {
    return this._block.get$endToken();
  }
},

"+BlockFunctionBody": 0,

BooleanLiteral: {
  "": function BooleanLiteral(_literal, _liblib4$_value, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._literal = _literal;
    this._liblib4$_value = _liblib4$_value;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Literal",
  get$_literal: function() {
    return this._literal;
  },
  set$_literal: function(v) {
    this._literal = v;
  },
  get$_liblib4$_value: function() {
    return this._liblib4$_value;
  },
  set$_liblib4$_value: function(v) {
    this._liblib4$_value = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t2 = this._literal.get$lexeme();
    if (typeof t2 !== "string")
      return this.accept$1$bailout1(1, t1, t2);
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + t2;
    return;
  },
  accept$1$bailout1: function(state0, t1, t2) {
    var str;
    t1.print$1;
    t1 = t1._sb;
    str = typeof t2 === "string" ? t2 : $.S(t2);
    t1._contents = t1._contents + str;
    return;
  },
  get$beginToken: function() {
    return this._literal;
  },
  get$endToken: function() {
    return this._literal;
  },
  get$value: function(_) {
    return this._liblib4$_value;
  },
  set$value: function(_, value2) {
    this._liblib4$_value = value2;
  }
},

"+BooleanLiteral": 0,

BreakStatement: {
  "": function BreakStatement(_keyword, _label, _semicolon, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._label = _label;
    this._semicolon = _semicolon;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_label: function() {
    return this._label;
  },
  set$_label: function(v) {
    this._label = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "break";
    t1 = this._label;
    if (t1 != null) {
      t2 = visitor._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, " ");
      $.accept$1$x(t1, visitor);
    }
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$endToken: function() {
    return this._semicolon;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$label: function(_) {
    return this._label;
  }
},

"+BreakStatement": 0,

CascadeExpression: {
  "": function CascadeExpression(_liblib4$_target, _cascadeSections, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_target = _liblib4$_target;
    this._cascadeSections = _cascadeSections;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_liblib4$_target: function() {
    return this._liblib4$_target;
  },
  set$_liblib4$_target: function(v) {
    this._liblib4$_target = v;
  },
  get$_cascadeSections: function() {
    return this._cascadeSections;
  },
  set$_cascadeSections: function(v) {
    this._cascadeSections = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._liblib4$_target;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    visitor.visitList2$2(this._cascadeSections, "");
    return;
  },
  get$beginToken: function() {
    return this._liblib4$_target.get$beginToken();
  },
  get$endToken: function() {
    return this._cascadeSections.get$endToken();
  },
  get$target: function(_) {
    return this._liblib4$_target;
  }
},

"+CascadeExpression": 0,

CatchClause: {
  "": function CatchClause(_onKeyword, _exceptionType, _catchKeyword, _leftParenthesis, _exceptionParameter, _comma, _stackTraceParameter, _rightParenthesis, _body, _liblib4$_parent, _propertyMap, hashCode) {
    this._onKeyword = _onKeyword;
    this._exceptionType = _exceptionType;
    this._catchKeyword = _catchKeyword;
    this._leftParenthesis = _leftParenthesis;
    this._exceptionParameter = _exceptionParameter;
    this._comma = _comma;
    this._stackTraceParameter = _stackTraceParameter;
    this._rightParenthesis = _rightParenthesis;
    this._body = _body;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_onKeyword: function() {
    return this._onKeyword;
  },
  set$_onKeyword: function(v) {
    this._onKeyword = v;
  },
  get$_exceptionType: function() {
    return this._exceptionType;
  },
  set$_exceptionType: function(v) {
    this._exceptionType = v;
  },
  get$_catchKeyword: function() {
    return this._catchKeyword;
  },
  set$_catchKeyword: function(v) {
    this._catchKeyword = v;
  },
  get$_leftParenthesis: function() {
    return this._leftParenthesis;
  },
  set$_leftParenthesis: function(v) {
    this._leftParenthesis = v;
  },
  get$_exceptionParameter: function() {
    return this._exceptionParameter;
  },
  set$_exceptionParameter: function(v) {
    this._exceptionParameter = v;
  },
  get$_comma: function() {
    return this._comma;
  },
  set$_comma: function(v) {
    this._comma = v;
  },
  get$_stackTraceParameter: function() {
    return this._stackTraceParameter;
  },
  set$_stackTraceParameter: function(v) {
    this._stackTraceParameter = v;
  },
  get$_rightParenthesis: function() {
    return this._rightParenthesis;
  },
  set$_rightParenthesis: function(v) {
    this._rightParenthesis = v;
  },
  get$_body: function() {
    return this._body;
  },
  set$_body: function(v) {
    this._body = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitCatchClause$1(this);
  },
  get$beginToken: function() {
    var t1 = this._onKeyword;
    if (t1 != null)
      return t1;
    return this._catchKeyword;
  },
  get$endToken: function() {
    return this._body.get$endToken();
  },
  CatchClause$full$9: function(onKeyword, exceptionType, catchKeyword, leftParenthesis, exceptionParameter, comma, stackTraceParameter, rightParenthesis, body) {
    this._onKeyword = onKeyword;
    if (exceptionType != null)
      exceptionType.set$parent(exceptionType, this);
    this._exceptionType = exceptionType;
    this._catchKeyword = catchKeyword;
    this._leftParenthesis = leftParenthesis;
    if (exceptionParameter != null)
      exceptionParameter.set$parent(exceptionParameter, this);
    this._exceptionParameter = exceptionParameter;
    this._comma = comma;
    if (stackTraceParameter != null)
      stackTraceParameter.set$parent(stackTraceParameter, this);
    this._stackTraceParameter = stackTraceParameter;
    this._rightParenthesis = rightParenthesis;
    body.set$parent(body, this);
    this._body = body;
  }
},

"+CatchClause": 0,

ClassDeclaration: {
  "": function ClassDeclaration(_abstractKeyword, _classKeyword, _liblib4$_name, _typeParameters, _extendsClause, _withClause, _implementsClause, _leftBracket, _members, _rightBracket, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._abstractKeyword = _abstractKeyword;
    this._classKeyword = _classKeyword;
    this._liblib4$_name = _liblib4$_name;
    this._typeParameters = _typeParameters;
    this._extendsClause = _extendsClause;
    this._withClause = _withClause;
    this._implementsClause = _implementsClause;
    this._leftBracket = _leftBracket;
    this._members = _members;
    this._rightBracket = _rightBracket;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "CompilationUnitMember",
  get$_abstractKeyword: function() {
    return this._abstractKeyword;
  },
  set$_abstractKeyword: function(v) {
    this._abstractKeyword = v;
  },
  get$_classKeyword: function() {
    return this._classKeyword;
  },
  set$_classKeyword: function(v) {
    this._classKeyword = v;
  },
  get$_liblib4$_name: function() {
    return this._liblib4$_name;
  },
  set$_liblib4$_name: function(v) {
    this._liblib4$_name = v;
  },
  get$_typeParameters: function() {
    return this._typeParameters;
  },
  set$_typeParameters: function(v) {
    this._typeParameters = v;
  },
  get$_extendsClause: function() {
    return this._extendsClause;
  },
  set$_extendsClause: function(v) {
    this._extendsClause = v;
  },
  get$_withClause: function() {
    return this._withClause;
  },
  set$_withClause: function(v) {
    this._withClause = v;
  },
  get$_implementsClause: function() {
    return this._implementsClause;
  },
  set$_implementsClause: function(v) {
    this._implementsClause = v;
  },
  get$_leftBracket: function() {
    return this._leftBracket;
  },
  set$_leftBracket: function(v) {
    this._leftBracket = v;
  },
  get$_members: function() {
    return this._members;
  },
  set$_members: function(v) {
    this._members = v;
  },
  get$_rightBracket: function() {
    return this._rightBracket;
  },
  set$_rightBracket: function(v) {
    this._rightBracket = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitClassDeclaration$1(this);
  },
  get$element: function() {
    var t1 = this._liblib4$_name;
    return t1 != null ? $.propertyTypeCast(t1.get$element(), "$isClassElement") : null;
  },
  get$endToken: function() {
    return this._rightBracket;
  },
  get$name: function(_) {
    return this._liblib4$_name;
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    var t1 = this._abstractKeyword;
    if (t1 != null)
      return t1;
    return this._classKeyword;
  },
  "+firstTokenAfterCommentAndMetadata": 0,
  ClassDeclaration$full$12: function(comment, metadata, abstractKeyword, classKeyword, $name, typeParameters, extendsClause, withClause, implementsClause, leftBracket, members, rightBracket) {
    var t1, t2, t3, t4;
    t1 = $.ClassMember;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._members = t2;
    this._abstractKeyword = abstractKeyword;
    this._classKeyword = classKeyword;
    $name.set$parent($name, this);
    this._liblib4$_name = $name;
    if (typeParameters != null)
      typeParameters.set$parent(typeParameters, this);
    this._typeParameters = typeParameters;
    if (extendsClause != null)
      extendsClause.set$parent(extendsClause, this);
    this._extendsClause = extendsClause;
    if (withClause != null)
      withClause.set$parent(withClause, this);
    this._withClause = withClause;
    if (implementsClause != null)
      implementsClause.set$parent(implementsClause, this);
    this._implementsClause = implementsClause;
    this._leftBracket = leftBracket;
    t1 = this._members;
    t1.addAll$1(t1, members);
    this._rightBracket = rightBracket;
  },
  $isClassDeclaration: true
},

"+ClassDeclaration": 0,

ClassMember: {
  "": function ClassMember() {
  },
  "super": "Declaration"
},

"+ClassMember": 0,

ClassTypeAlias: {
  "": function ClassTypeAlias(_liblib4$_name, _typeParameters, _equals, _abstractKeyword, _superclass, _withClause, _implementsClause, _keyword, _semicolon, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_name = _liblib4$_name;
    this._typeParameters = _typeParameters;
    this._equals = _equals;
    this._abstractKeyword = _abstractKeyword;
    this._superclass = _superclass;
    this._withClause = _withClause;
    this._implementsClause = _implementsClause;
    this._keyword = _keyword;
    this._semicolon = _semicolon;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "TypeAlias",
  get$_liblib4$_name: function() {
    return this._liblib4$_name;
  },
  set$_liblib4$_name: function(v) {
    this._liblib4$_name = v;
  },
  get$_typeParameters: function() {
    return this._typeParameters;
  },
  set$_typeParameters: function(v) {
    this._typeParameters = v;
  },
  get$_equals: function() {
    return this._equals;
  },
  set$_equals: function(v) {
    this._equals = v;
  },
  get$_abstractKeyword: function() {
    return this._abstractKeyword;
  },
  set$_abstractKeyword: function(v) {
    this._abstractKeyword = v;
  },
  get$_superclass: function() {
    return this._superclass;
  },
  set$_superclass: function(v) {
    this._superclass = v;
  },
  get$_withClause: function() {
    return this._withClause;
  },
  set$_withClause: function(v) {
    this._withClause = v;
  },
  get$_implementsClause: function() {
    return this._implementsClause;
  },
  set$_implementsClause: function(v) {
    this._implementsClause = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitClassTypeAlias$1(this);
  },
  get$element: function() {
    var t1 = this._liblib4$_name;
    return t1 != null ? $.propertyTypeCast(t1.get$element(), "$isClassElement") : null;
  },
  get$name: function(_) {
    return this._liblib4$_name;
  },
  ClassTypeAlias$full$11: function(comment, metadata, keyword, $name, typeParameters, equals, abstractKeyword, superclass, withClause, implementsClause, semicolon) {
    $name.set$parent($name, this);
    this._liblib4$_name = $name;
    if (typeParameters != null)
      typeParameters.set$parent(typeParameters, this);
    this._typeParameters = typeParameters;
    this._equals = equals;
    this._abstractKeyword = abstractKeyword;
    superclass.set$parent(superclass, this);
    this._superclass = superclass;
    if (withClause != null)
      withClause.set$parent(withClause, this);
    this._withClause = withClause;
    if (implementsClause != null)
      implementsClause.set$parent(implementsClause, this);
    this._implementsClause = implementsClause;
  }
},

"+ClassTypeAlias": 0,

Combinator: {
  "": function Combinator(_keyword) {
    this._keyword = _keyword;
  },
  "super": "ASTNode",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  }
},

"+Combinator": 0,

Comment: {
  "": function Comment(_liblib4$_tokens, _liblib4$_type, _references, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_tokens = _liblib4$_tokens;
    this._liblib4$_type = _liblib4$_type;
    this._references = _references;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_liblib4$_tokens: function() {
    return this._liblib4$_tokens;
  },
  set$_liblib4$_tokens: function(v) {
    this._liblib4$_tokens = v;
  },
  get$_liblib4$_type: function() {
    return this._liblib4$_type;
  },
  set$_liblib4$_type: function(v) {
    this._liblib4$_type = v;
  },
  get$_references: function() {
    return this._references;
  },
  set$_references: function(v) {
    this._references = v;
  },
  accept$1: function(_, visitor) {
    return;
  },
  get$beginToken: function() {
    var t1 = this._liblib4$_tokens;
    if (0 >= t1.length)
      throw $.ioore(0);
    return t1[0];
  },
  get$endToken: function() {
    var t1, t2, t3;
    t1 = this._liblib4$_tokens;
    t2 = t1.length;
    t3 = t2 - 1;
    if (t3 < 0)
      throw $.ioore(t3);
    return t1[t3];
  }
},

"+Comment": 0,

CommentType: {
  "": function CommentType(name, ordinal) {
    this.name = name;
    this.ordinal = ordinal;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  get$ordinal: function() {
    return this.ordinal;
  },
  compareTo$1: function(_, other) {
    var t1 = other.get$ordinal();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this.ordinal - t1;
  },
  toString$0: function(_) {
    return this.name;
  }
},

"+CommentType": 0,

CommentReference: {
  "": function CommentReference(_newKeyword, _identifier, _liblib4$_parent, _propertyMap, hashCode) {
    this._newKeyword = _newKeyword;
    this._identifier = _identifier;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_newKeyword: function() {
    return this._newKeyword;
  },
  set$_newKeyword: function(v) {
    this._newKeyword = v;
  },
  get$_identifier: function() {
    return this._identifier;
  },
  set$_identifier: function(v) {
    this._identifier = v;
  },
  accept$1: function(_, visitor) {
    return;
  },
  get$beginToken: function() {
    return this._identifier.get$beginToken();
  },
  get$endToken: function() {
    return this._identifier.get$endToken();
  },
  get$identifier: function() {
    return this._identifier;
  }
},

"+CommentReference": 0,

CompilationUnit: {
  "": function CompilationUnit(_beginToken, _scriptTag, _directives, _declarations, _endToken, _liblib4$_element, _lineInfo, _parsingErrors, _resolutionErrors, _liblib4$_parent, _propertyMap, hashCode) {
    this._beginToken = _beginToken;
    this._scriptTag = _scriptTag;
    this._directives = _directives;
    this._declarations = _declarations;
    this._endToken = _endToken;
    this._liblib4$_element = _liblib4$_element;
    this._lineInfo = _lineInfo;
    this._parsingErrors = _parsingErrors;
    this._resolutionErrors = _resolutionErrors;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_beginToken: function() {
    return this._beginToken;
  },
  set$_beginToken: function(v) {
    this._beginToken = v;
  },
  get$_scriptTag: function() {
    return this._scriptTag;
  },
  set$_scriptTag: function(v) {
    this._scriptTag = v;
  },
  get$_directives: function() {
    return this._directives;
  },
  set$_directives: function(v) {
    this._directives = v;
  },
  get$_declarations: function() {
    return this._declarations;
  },
  set$_declarations: function(v) {
    this._declarations = v;
  },
  get$_endToken: function() {
    return this._endToken;
  },
  set$_endToken: function(v) {
    this._endToken = v;
  },
  get$_liblib4$_element: function() {
    return this._liblib4$_element;
  },
  set$_liblib4$_element: function(v) {
    this._liblib4$_element = v;
  },
  get$_lineInfo: function() {
    return this._lineInfo;
  },
  set$_lineInfo: function(v) {
    this._lineInfo = v;
  },
  get$_parsingErrors: function() {
    return this._parsingErrors;
  },
  set$_parsingErrors: function(v) {
    this._parsingErrors = v;
  },
  get$_resolutionErrors: function() {
    return this._resolutionErrors;
  },
  set$_resolutionErrors: function(v) {
    this._resolutionErrors = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitCompilationUnit$1(this);
  },
  get$beginToken: function() {
    return this._beginToken;
  },
  get$declarations: function() {
    return this._declarations;
  },
  get$directives: function() {
    return this._directives;
  },
  get$element: function() {
    return this._liblib4$_element;
  },
  get$endToken: function() {
    return this._endToken;
  },
  get$errors: function() {
    var parserErrors, resolverErrors, t1, t2, allErrors;
    parserErrors = this._parsingErrors;
    resolverErrors = this._resolutionErrors;
    t1 = resolverErrors.length;
    if (t1 === 0)
      return parserErrors;
    else {
      t2 = parserErrors.length;
      if (t2 === 0)
        return resolverErrors;
      else {
        allErrors = $.List_List(t2 + t1, $.AnalysisError);
        allErrors.$builtinTypeInfo = [$.AnalysisError];
        $.JavaSystem_arraycopy(parserErrors, 0, allErrors, 0, parserErrors.length);
        $.JavaSystem_arraycopy(resolverErrors, 0, allErrors, parserErrors.length, t1);
        return allErrors;
      }
    }
  },
  get$length: function(_) {
    var endToken2, t1, t2;
    endToken2 = this._endToken;
    if (endToken2 == null)
      return 0;
    t1 = $.getInterceptor$x(endToken2);
    t2 = t1.get$offset(endToken2);
    if (typeof t2 !== "number")
      return this.get$length$bailout1(1, endToken2, t1, t2);
    t1 = t1.get$length(endToken2);
    if (typeof t1 !== "number")
      return this.get$length$bailout1(2, 0, t1, t2);
    return t2 + t1;
  },
  get$length$bailout1: function(state0, endToken2, t1, t2) {
    switch (state0) {
      case 0:
        endToken2 = this._endToken;
        if (endToken2 == null)
          return 0;
        t1 = $.getInterceptor$x(endToken2);
        t2 = t1.get$offset(endToken2);
      case 1:
        state0 = 0;
        t1 = t1.get$length(endToken2);
      case 2:
        state0 = 0;
        return $.$add$ns(t2, t1);
    }
  },
  get$offset: function(_) {
    return 0;
  },
  CompilationUnit$full$5: function(beginToken, scriptTag, directives, declarations, endToken) {
    var t1, t2, t3, t4;
    t1 = $.Directive;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._directives = t2;
    t1 = $.CompilationUnitMember;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._declarations = t2;
    this._beginToken = beginToken;
    if (scriptTag != null)
      scriptTag.set$parent(scriptTag, this);
    this._scriptTag = scriptTag;
    t1 = this._directives;
    t1.addAll$1(t1, directives);
    t1 = this._declarations;
    t1.addAll$1(t1, declarations);
    this._endToken = endToken;
  },
  $isCompilationUnit: true
},

"+CompilationUnit": 0,

CompilationUnitMember: {
  "": function CompilationUnitMember() {
  },
  "super": "Declaration"
},

"+CompilationUnitMember": 0,

ConditionalExpression: {
  "": function ConditionalExpression(_condition, _question, _thenExpression, _colon, _elseExpression, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._condition = _condition;
    this._question = _question;
    this._thenExpression = _thenExpression;
    this._colon = _colon;
    this._elseExpression = _elseExpression;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_condition: function() {
    return this._condition;
  },
  set$_condition: function(v) {
    this._condition = v;
  },
  get$_question: function() {
    return this._question;
  },
  set$_question: function(v) {
    this._question = v;
  },
  get$_thenExpression: function() {
    return this._thenExpression;
  },
  set$_thenExpression: function(v) {
    this._thenExpression = v;
  },
  get$_colon: function() {
    return this._colon;
  },
  set$_colon: function(v) {
    this._colon = v;
  },
  get$_elseExpression: function() {
    return this._elseExpression;
  },
  set$_elseExpression: function(v) {
    this._elseExpression = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._condition;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " ? ";
    t1 = this._thenExpression;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " : ";
    t1 = this._elseExpression;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._condition.get$beginToken();
  },
  get$endToken: function() {
    return this._elseExpression.get$endToken();
  },
  ConditionalExpression$full$5: function(condition, question, thenExpression, colon, elseExpression) {
    if (condition != null)
      $.set$parent$x(condition, this);
    this._condition = condition;
    this._question = question;
    if (thenExpression != null)
      $.set$parent$x(thenExpression, this);
    this._thenExpression = thenExpression;
    this._colon = colon;
    if (elseExpression != null)
      $.set$parent$x(elseExpression, this);
    this._elseExpression = elseExpression;
  }
},

"+ConditionalExpression": 0,

ConstructorDeclaration: {
  "": function ConstructorDeclaration(_liblib4$_externalKeyword, _liblib4$_constKeyword, _factoryKeyword, _returnType, _period, _liblib4$_name, _liblib4$_element, _parameters, _separator, _initializers, _redirectedConstructor, _body, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_externalKeyword = _liblib4$_externalKeyword;
    this._liblib4$_constKeyword = _liblib4$_constKeyword;
    this._factoryKeyword = _factoryKeyword;
    this._returnType = _returnType;
    this._period = _period;
    this._liblib4$_name = _liblib4$_name;
    this._liblib4$_element = _liblib4$_element;
    this._parameters = _parameters;
    this._separator = _separator;
    this._initializers = _initializers;
    this._redirectedConstructor = _redirectedConstructor;
    this._body = _body;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ClassMember",
  get$_liblib4$_externalKeyword: function() {
    return this._liblib4$_externalKeyword;
  },
  set$_liblib4$_externalKeyword: function(v) {
    this._liblib4$_externalKeyword = v;
  },
  get$_liblib4$_constKeyword: function() {
    return this._liblib4$_constKeyword;
  },
  set$_liblib4$_constKeyword: function(v) {
    this._liblib4$_constKeyword = v;
  },
  get$_factoryKeyword: function() {
    return this._factoryKeyword;
  },
  set$_factoryKeyword: function(v) {
    this._factoryKeyword = v;
  },
  get$_returnType: function() {
    return this._returnType;
  },
  set$_returnType: function(v) {
    this._returnType = v;
  },
  get$_period: function() {
    return this._period;
  },
  set$_period: function(v) {
    this._period = v;
  },
  get$_liblib4$_name: function() {
    return this._liblib4$_name;
  },
  set$_liblib4$_name: function(v) {
    this._liblib4$_name = v;
  },
  get$_liblib4$_element: function() {
    return this._liblib4$_element;
  },
  set$_liblib4$_element: function(v) {
    this._liblib4$_element = v;
  },
  get$_parameters: function() {
    return this._parameters;
  },
  set$_parameters: function(v) {
    this._parameters = v;
  },
  get$_separator: function() {
    return this._separator;
  },
  set$_separator: function(v) {
    this._separator = v;
  },
  get$_initializers: function() {
    return this._initializers;
  },
  set$_initializers: function(v) {
    this._initializers = v;
  },
  get$_redirectedConstructor: function() {
    return this._redirectedConstructor;
  },
  set$_redirectedConstructor: function(v) {
    this._redirectedConstructor = v;
  },
  get$_body: function() {
    return this._body;
  },
  set$_body: function(v) {
    this._body = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitConstructorDeclaration$1(this);
  },
  get$element: function() {
    return this._liblib4$_element;
  },
  get$endToken: function() {
    var t1 = this._body;
    if (t1 != null)
      return t1.get$endToken();
    else {
      t1 = this._initializers;
      if (!t1.get$isEmpty(t1))
        return this._initializers.get$endToken();
    }
    return this._parameters.get$endToken();
  },
  get$name: function(_) {
    return this._liblib4$_name;
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    var leftMost2 = this.leftMost$1([this._liblib4$_externalKeyword, this._liblib4$_constKeyword, this._factoryKeyword]);
    if (leftMost2 != null)
      return leftMost2;
    return this._returnType.get$beginToken();
  },
  leftMost$1: function(tokens) {
    var t1, t2, leftMost, token;
    t1 = $.getRuntimeTypeArgument(tokens, tokens.$asJSArray, 0);
    t2 = new $.ListIterator(tokens, tokens.length, 0, null);
    t2.$builtinTypeInfo = [t1];
    leftMost = null;
    for (; t2.moveNext$0();) {
      token = t2._liblib$_current;
      if (token != null && $.$lt$n($.get$offset$x(token), 2147483647) === true)
        leftMost = token;
    }
    return leftMost;
  },
  "+leftMost:1:0": 0,
  ConstructorDeclaration$full$13: function(comment, metadata, externalKeyword, constKeyword, factoryKeyword, returnType, period, $name, parameters, separator, initializers, redirectedConstructor, body) {
    var t1, t2, t3, t4;
    t1 = $.ConstructorInitializer;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._initializers = t2;
    this._liblib4$_externalKeyword = externalKeyword;
    this._liblib4$_constKeyword = constKeyword;
    this._factoryKeyword = factoryKeyword;
    returnType.set$parent(returnType, this);
    this._returnType = returnType;
    this._period = period;
    if ($name != null)
      $name.set$parent($name, this);
    this._liblib4$_name = $name;
    parameters.set$parent(parameters, this);
    this._parameters = parameters;
    this._separator = separator;
    t1 = this._initializers;
    t1.addAll$1(t1, initializers);
    if (redirectedConstructor != null)
      redirectedConstructor.set$parent(redirectedConstructor, this);
    this._redirectedConstructor = redirectedConstructor;
    if (body != null)
      body.set$parent(body, this);
    this._body = body;
  },
  $isConstructorDeclaration: true
},

"+ConstructorDeclaration": 0,

ConstructorFieldInitializer: {
  "": function ConstructorFieldInitializer(_keyword, _period, _fieldName, _equals, _expression, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._period = _period;
    this._fieldName = _fieldName;
    this._equals = _equals;
    this._expression = _expression;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ConstructorInitializer",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_period: function() {
    return this._period;
  },
  set$_period: function(v) {
    this._period = v;
  },
  get$_fieldName: function() {
    return this._fieldName;
  },
  set$_fieldName: function(v) {
    this._fieldName = v;
  },
  get$_equals: function() {
    return this._equals;
  },
  set$_equals: function(v) {
    this._equals = v;
  },
  get$_expression: function() {
    return this._expression;
  },
  set$_expression: function(v) {
    this._expression = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._keyword;
    if (t1 != null) {
      t2 = visitor._writer;
      t1 = t1.get$lexeme();
      if (typeof t1 !== "string")
        return this.accept$1$bailout1(1, visitor, t2, t1);
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, t1);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, ".");
    }
    t1 = this._fieldName;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " = ";
    t1 = this._expression;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  accept$1$bailout1: function(state0, visitor, t2, t1) {
    switch (state0) {
      case 0:
        t1 = this._keyword;
      case 1:
        var str;
        if (state0 === 1 || state0 === 0 && t1 != null)
          switch (state0) {
            case 0:
              t2 = visitor._writer;
              t1 = t1.get$lexeme();
            case 1:
              state0 = 0;
              t2.print$1;
              t2 = t2._sb;
              str = typeof t1 === "string" ? t1 : $.S(t1);
              t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, str);
              t1 = visitor._writer;
              t1.print$1;
              t1 = t1._sb;
              t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, ".");
          }
        t1 = this._fieldName;
        if (t1 != null)
          $.accept$1$x(t1, visitor);
        t1 = visitor._writer;
        t1.print$1;
        t1 = t1._sb;
        t1._contents = t1._contents + " = ";
        t1 = this._expression;
        if (t1 != null)
          $.accept$1$x(t1, visitor);
        return;
    }
  },
  get$beginToken: function() {
    var t1 = this._keyword;
    if (t1 != null)
      return t1;
    return this._fieldName.get$beginToken();
  },
  get$endToken: function() {
    return this._expression.get$endToken();
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  ConstructorFieldInitializer$full$5: function(keyword, period, fieldName, equals, expression) {
    this._keyword = keyword;
    this._period = period;
    fieldName.set$parent(fieldName, this);
    this._fieldName = fieldName;
    this._equals = equals;
    if (expression != null)
      $.set$parent$x(expression, this);
    this._expression = expression;
  }
},

"+ConstructorFieldInitializer": 0,

ConstructorInitializer: {
  "": function ConstructorInitializer() {
  },
  "super": "ASTNode"
},

"+ConstructorInitializer": 0,

ConstructorName: {
  "": function ConstructorName(_liblib4$_type, _period, _liblib4$_name, _staticElement, _propagatedElement, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_type = _liblib4$_type;
    this._period = _period;
    this._liblib4$_name = _liblib4$_name;
    this._staticElement = _staticElement;
    this._propagatedElement = _propagatedElement;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_liblib4$_type: function() {
    return this._liblib4$_type;
  },
  set$_liblib4$_type: function(v) {
    this._liblib4$_type = v;
  },
  get$_period: function() {
    return this._period;
  },
  set$_period: function(v) {
    this._period = v;
  },
  get$_liblib4$_name: function() {
    return this._liblib4$_name;
  },
  set$_liblib4$_name: function(v) {
    this._liblib4$_name = v;
  },
  get$_staticElement: function() {
    return this._staticElement;
  },
  set$_staticElement: function(v) {
    this._staticElement = v;
  },
  get$_propagatedElement: function() {
    return this._propagatedElement;
  },
  set$_propagatedElement: function(v) {
    this._propagatedElement = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._liblib4$_type;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = this._liblib4$_name;
    if (t1 != null) {
      t2 = visitor._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, ".");
      $.accept$1$x(t1, visitor);
    }
    return;
  },
  get$beginToken: function() {
    return this._liblib4$_type.get$beginToken();
  },
  get$element: function() {
    return this._propagatedElement;
  },
  get$endToken: function() {
    var t1 = this._liblib4$_name;
    if (t1 != null)
      return t1.get$endToken();
    return this._liblib4$_type.get$endToken();
  },
  get$name: function(_) {
    return this._liblib4$_name;
  },
  get$type: function(_) {
    return this._liblib4$_type;
  },
  set$type: function(_, type2) {
    if (type2 != null)
      $.set$parent$x(type2, this);
    this._liblib4$_type = type2;
  }
},

"+ConstructorName": 0,

ContinueStatement: {
  "": function ContinueStatement(_keyword, _label, _semicolon, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._label = _label;
    this._semicolon = _semicolon;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_label: function() {
    return this._label;
  },
  set$_label: function(v) {
    this._label = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "continue";
    t1 = this._label;
    if (t1 != null) {
      t2 = visitor._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, " ");
      $.accept$1$x(t1, visitor);
    }
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$endToken: function() {
    return this._semicolon;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$label: function(_) {
    return this._label;
  }
},

"+ContinueStatement": 0,

Declaration: {
  "": function Declaration() {
  },
  "super": "AnnotatedNode"
},

"+Declaration": 0,

DeclaredIdentifier: {
  "": function DeclaredIdentifier(_keyword, _liblib4$_type, _identifier, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._liblib4$_type = _liblib4$_type;
    this._identifier = _identifier;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Declaration",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_liblib4$_type: function() {
    return this._liblib4$_type;
  },
  set$_liblib4$_type: function(v) {
    this._liblib4$_type = v;
  },
  get$_identifier: function() {
    return this._identifier;
  },
  set$_identifier: function(v) {
    this._identifier = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._keyword;
    if (t1 != null) {
      t2 = visitor._writer;
      t1 = t1.get$lexeme();
      if (typeof t1 !== "string")
        return this.accept$1$bailout1(1, visitor, t2, t1);
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, t1);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
    }
    t1 = this._liblib4$_type;
    if (t1 != null) {
      $.accept$1$x(t1, visitor);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
    }
    t1 = this._identifier;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  accept$1$bailout1: function(state0, visitor, t2, t1) {
    switch (state0) {
      case 0:
        t1 = this._keyword;
      case 1:
        var str;
        if (state0 === 1 || state0 === 0 && t1 != null)
          switch (state0) {
            case 0:
              t2 = visitor._writer;
              t1 = t1.get$lexeme();
            case 1:
              state0 = 0;
              t2.print$1;
              t2 = t2._sb;
              str = typeof t1 === "string" ? t1 : $.S(t1);
              t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, str);
              t1 = visitor._writer;
              t1.print$1;
              t1 = t1._sb;
              t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
          }
        t1 = this._liblib4$_type;
        if (t1 != null) {
          $.accept$1$x(t1, visitor);
          t1 = visitor._writer;
          t1.print$1;
          t1 = t1._sb;
          t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
        }
        t1 = this._identifier;
        if (t1 != null)
          $.accept$1$x(t1, visitor);
        return;
    }
  },
  get$element: function() {
    var identifier2 = this._identifier;
    if (identifier2 == null)
      return;
    return $.propertyTypeCast(identifier2.get$element(), "$isLocalVariableElement");
  },
  get$endToken: function() {
    return this._identifier.get$endToken();
  },
  get$identifier: function() {
    return this._identifier;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$type: function(_) {
    return this._liblib4$_type;
  },
  set$type: function(_, typeName) {
    if (typeName != null)
      $.set$parent$x(typeName, this);
    this._liblib4$_type = typeName;
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    var t1 = this._keyword;
    if (t1 != null)
      return t1;
    else {
      t1 = this._liblib4$_type;
      if (t1 != null)
        return t1.get$beginToken();
    }
    return this._identifier.get$beginToken();
  }
},

"+DeclaredIdentifier": 0,

DefaultFormalParameter: {
  "": function DefaultFormalParameter(_parameter, _kind, _separator, _defaultValue, _liblib4$_parent, _propertyMap, hashCode) {
    this._parameter = _parameter;
    this._kind = _kind;
    this._separator = _separator;
    this._defaultValue = _defaultValue;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "FormalParameter",
  get$_parameter: function() {
    return this._parameter;
  },
  set$_parameter: function(v) {
    this._parameter = v;
  },
  get$_kind: function() {
    return this._kind;
  },
  set$_kind: function(v) {
    this._kind = v;
  },
  get$_separator: function() {
    return this._separator;
  },
  set$_separator: function(v) {
    this._separator = v;
  },
  get$_defaultValue: function() {
    return this._defaultValue;
  },
  set$_defaultValue: function(v) {
    this._defaultValue = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitDefaultFormalParameter$1(this);
  },
  get$beginToken: function() {
    return this._parameter.get$beginToken();
  },
  get$endToken: function() {
    var t1 = this._defaultValue;
    if (t1 != null)
      return t1.get$endToken();
    return this._parameter.get$endToken();
  },
  get$identifier: function() {
    return this._parameter.get$identifier();
  },
  get$kind: function(_) {
    return this._kind;
  },
  $isDefaultFormalParameter: true
},

"+DefaultFormalParameter": 0,

Directive: {
  "": function Directive(_liblib4$_element) {
    this._liblib4$_element = _liblib4$_element;
  },
  "super": "AnnotatedNode",
  get$_liblib4$_element: function() {
    return this._liblib4$_element;
  },
  set$_liblib4$_element: function(v) {
    this._liblib4$_element = v;
  },
  get$element: function() {
    return this._liblib4$_element;
  }
},

"+Directive": 0,

DoStatement: {
  "": function DoStatement(_doKeyword, _body, _whileKeyword, _leftParenthesis, _condition, _rightParenthesis, _semicolon, _liblib4$_parent, _propertyMap, hashCode) {
    this._doKeyword = _doKeyword;
    this._body = _body;
    this._whileKeyword = _whileKeyword;
    this._leftParenthesis = _leftParenthesis;
    this._condition = _condition;
    this._rightParenthesis = _rightParenthesis;
    this._semicolon = _semicolon;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_doKeyword: function() {
    return this._doKeyword;
  },
  set$_doKeyword: function(v) {
    this._doKeyword = v;
  },
  get$_body: function() {
    return this._body;
  },
  set$_body: function(v) {
    this._body = v;
  },
  get$_whileKeyword: function() {
    return this._whileKeyword;
  },
  set$_whileKeyword: function(v) {
    this._whileKeyword = v;
  },
  get$_leftParenthesis: function() {
    return this._leftParenthesis;
  },
  set$_leftParenthesis: function(v) {
    this._leftParenthesis = v;
  },
  get$_condition: function() {
    return this._condition;
  },
  set$_condition: function(v) {
    this._condition = v;
  },
  get$_rightParenthesis: function() {
    return this._rightParenthesis;
  },
  set$_rightParenthesis: function(v) {
    this._rightParenthesis = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "do ";
    t1 = this._body;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " while (";
    t1 = this._condition;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ");";
    return;
  },
  get$beginToken: function() {
    return this._doKeyword;
  },
  get$endToken: function() {
    return this._semicolon;
  },
  DoStatement$full$7: function(doKeyword, body, whileKeyword, leftParenthesis, condition, rightParenthesis, semicolon) {
    this._doKeyword = doKeyword;
    if (body != null)
      body.set$parent(body, this);
    this._body = body;
    this._whileKeyword = whileKeyword;
    this._leftParenthesis = leftParenthesis;
    if (condition != null)
      $.set$parent$x(condition, this);
    this._condition = condition;
    this._rightParenthesis = rightParenthesis;
    this._semicolon = semicolon;
  }
},

"+DoStatement": 0,

DoubleLiteral: {
  "": function DoubleLiteral(_literal, _liblib4$_value, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._literal = _literal;
    this._liblib4$_value = _liblib4$_value;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Literal",
  get$_literal: function() {
    return this._literal;
  },
  set$_literal: function(v) {
    this._literal = v;
  },
  get$_liblib4$_value: function() {
    return this._liblib4$_value;
  },
  set$_liblib4$_value: function(v) {
    this._liblib4$_value = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t2 = this._literal.get$lexeme();
    if (typeof t2 !== "string")
      return this.accept$1$bailout1(1, t1, t2);
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + t2;
    return;
  },
  accept$1$bailout1: function(state0, t1, t2) {
    var str;
    t1.print$1;
    t1 = t1._sb;
    str = typeof t2 === "string" ? t2 : $.S(t2);
    t1._contents = t1._contents + str;
    return;
  },
  get$beginToken: function() {
    return this._literal;
  },
  get$endToken: function() {
    return this._literal;
  },
  get$value: function(_) {
    return this._liblib4$_value;
  },
  set$value: function(_, value2) {
    this._liblib4$_value = value2;
  }
},

"+DoubleLiteral": 0,

EmptyFunctionBody: {
  "": function EmptyFunctionBody(_semicolon, _liblib4$_parent, _propertyMap, hashCode) {
    this._semicolon = _semicolon;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "FunctionBody",
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  get$beginToken: function() {
    return this._semicolon;
  },
  get$endToken: function() {
    return this._semicolon;
  },
  $isEmptyFunctionBody: true
},

"+EmptyFunctionBody": 0,

EmptyStatement: {
  "": function EmptyStatement(_semicolon, _liblib4$_parent, _propertyMap, hashCode) {
    this._semicolon = _semicolon;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  get$beginToken: function() {
    return this._semicolon;
  },
  get$endToken: function() {
    return this._semicolon;
  }
},

"+EmptyStatement": 0,

ExportDirective: {
  "": function ExportDirective(_keyword, _combinators, _semicolon, _uri, _liblib4$_element, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._combinators = _combinators;
    this._semicolon = _semicolon;
    this._uri = _uri;
    this._liblib4$_element = _liblib4$_element;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "NamespaceDirective",
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "export ";
    t1 = this._uri;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    visitor.visitList4$3(" ", this._combinators, " ");
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  $isExportDirective: true
},

"+ExportDirective": 0,

Expression: {
  "": function Expression(_staticType, _propagatedType) {
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
  },
  "super": "ASTNode",
  get$_staticType: function() {
    return this._staticType;
  },
  set$_staticType: function(v) {
    this._staticType = v;
  },
  get$_propagatedType: function() {
    return this._propagatedType;
  },
  set$_propagatedType: function(v) {
    this._propagatedType = v;
  },
  isAssignable$0: function() {
    return false;
  }
},

"+Expression": 0,

ExpressionFunctionBody: {
  "": function ExpressionFunctionBody(_functionDefinition, _expression, _semicolon, _liblib4$_parent, _propertyMap, hashCode) {
    this._functionDefinition = _functionDefinition;
    this._expression = _expression;
    this._semicolon = _semicolon;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "FunctionBody",
  get$_functionDefinition: function() {
    return this._functionDefinition;
  },
  set$_functionDefinition: function(v) {
    this._functionDefinition = v;
  },
  get$_expression: function() {
    return this._expression;
  },
  set$_expression: function(v) {
    this._expression = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "=> ";
    t1 = this._expression;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    if (this._semicolon != null) {
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + ";";
    }
    return;
  },
  get$beginToken: function() {
    return this._functionDefinition;
  },
  get$endToken: function() {
    var t1 = this._semicolon;
    if (t1 != null)
      return t1;
    return this._expression.get$endToken();
  }
},

"+ExpressionFunctionBody": 0,

ExpressionStatement: {
  "": function ExpressionStatement(_expression, _semicolon, _liblib4$_parent, _propertyMap, hashCode) {
    this._expression = _expression;
    this._semicolon = _semicolon;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_expression: function() {
    return this._expression;
  },
  set$_expression: function(v) {
    this._expression = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._expression;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  get$beginToken: function() {
    return this._expression.get$beginToken();
  },
  get$endToken: function() {
    var t1 = this._semicolon;
    if (t1 != null)
      return t1;
    return this._expression.get$endToken();
  }
},

"+ExpressionStatement": 0,

ExtendsClause: {
  "": function ExtendsClause(_keyword, _superclass, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._superclass = _superclass;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_superclass: function() {
    return this._superclass;
  },
  set$_superclass: function(v) {
    this._superclass = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "extends ";
    t1 = this._superclass;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$endToken: function() {
    return this._superclass.get$endToken();
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  }
},

"+ExtendsClause": 0,

FieldDeclaration: {
  "": function FieldDeclaration(_keyword, _fieldList, _semicolon, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._fieldList = _fieldList;
    this._semicolon = _semicolon;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ClassMember",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_fieldList: function() {
    return this._fieldList;
  },
  set$_fieldList: function(v) {
    this._fieldList = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._keyword;
    if (t1 != null) {
      t2 = visitor._writer;
      t1 = t1.get$lexeme();
      if (typeof t1 !== "string")
        return this.accept$1$bailout1(1, visitor, t2, t1);
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, t1);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
    }
    t1 = this._fieldList;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  accept$1$bailout1: function(state0, visitor, t2, t1) {
    switch (state0) {
      case 0:
        t1 = this._keyword;
      case 1:
        var str;
        if (state0 === 1 || state0 === 0 && t1 != null)
          switch (state0) {
            case 0:
              t2 = visitor._writer;
              t1 = t1.get$lexeme();
            case 1:
              state0 = 0;
              t2.print$1;
              t2 = t2._sb;
              str = typeof t1 === "string" ? t1 : $.S(t1);
              t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, str);
              t1 = visitor._writer;
              t1.print$1;
              t1 = t1._sb;
              t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
          }
        t1 = this._fieldList;
        if (t1 != null)
          $.accept$1$x(t1, visitor);
        t1 = visitor._writer;
        t1.print$1;
        t1 = t1._sb;
        t1._contents = t1._contents + ";";
        return;
    }
  },
  get$element: function() {
    return;
  },
  get$endToken: function() {
    return this._semicolon;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    var t1 = this._keyword;
    if (t1 != null)
      return t1;
    return this._fieldList.get$beginToken();
  },
  $isFieldDeclaration: true
},

"+FieldDeclaration": 0,

FieldFormalParameter: {
  "": function FieldFormalParameter(_keyword, _liblib4$_type, _thisToken, _period, _comment, _metadata, _identifier, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._liblib4$_type = _liblib4$_type;
    this._thisToken = _thisToken;
    this._period = _period;
    this._comment = _comment;
    this._metadata = _metadata;
    this._identifier = _identifier;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "NormalFormalParameter",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_liblib4$_type: function() {
    return this._liblib4$_type;
  },
  set$_liblib4$_type: function(v) {
    this._liblib4$_type = v;
  },
  get$_thisToken: function() {
    return this._thisToken;
  },
  set$_thisToken: function(v) {
    this._thisToken = v;
  },
  get$_period: function() {
    return this._period;
  },
  set$_period: function(v) {
    this._period = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._keyword;
    if (t1 != null) {
      t2 = visitor._writer;
      t1 = t1.get$lexeme();
      if (typeof t1 !== "string")
        return this.accept$1$bailout1(1, visitor, t2, t1);
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, t1);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
    }
    t1 = this._liblib4$_type;
    if (t1 != null) {
      $.accept$1$x(t1, visitor);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
    }
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "this.";
    t1 = this._identifier;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  accept$1$bailout1: function(state0, visitor, t2, t1) {
    switch (state0) {
      case 0:
        t1 = this._keyword;
      case 1:
        var str;
        if (state0 === 1 || state0 === 0 && t1 != null)
          switch (state0) {
            case 0:
              t2 = visitor._writer;
              t1 = t1.get$lexeme();
            case 1:
              state0 = 0;
              t2.print$1;
              t2 = t2._sb;
              str = typeof t1 === "string" ? t1 : $.S(t1);
              t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, str);
              t1 = visitor._writer;
              t1.print$1;
              t1 = t1._sb;
              t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
          }
        t1 = this._liblib4$_type;
        if (t1 != null) {
          $.accept$1$x(t1, visitor);
          t1 = visitor._writer;
          t1.print$1;
          t1 = t1._sb;
          t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
        }
        t1 = visitor._writer;
        t1.print$1;
        t1 = t1._sb;
        t1._contents = t1._contents + "this.";
        t1 = this._identifier;
        if (t1 != null)
          $.accept$1$x(t1, visitor);
        return;
    }
  },
  get$beginToken: function() {
    var t1 = this._keyword;
    if (t1 != null)
      return t1;
    else {
      t1 = this._liblib4$_type;
      if (t1 != null)
        return t1.get$beginToken();
    }
    return this._thisToken;
  },
  get$endToken: function() {
    return this._identifier.get$endToken();
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$type: function(_) {
    return this._liblib4$_type;
  },
  set$type: function(_, typeName) {
    if (typeName != null)
      $.set$parent$x(typeName, this);
    this._liblib4$_type = typeName;
  },
  FieldFormalParameter$full$7: function(comment, metadata, keyword, type, thisToken, period, identifier) {
    this._keyword = keyword;
    if (type != null)
      type.set$parent(type, this);
    this._liblib4$_type = type;
    this._thisToken = thisToken;
    this._period = period;
  },
  $isFieldFormalParameter: true
},

"+FieldFormalParameter": 0,

ForEachStatement: {
  "": function ForEachStatement(_forKeyword, _leftParenthesis, _loopVariable, _inKeyword, _liblib4$_iterator, _rightParenthesis, _body, _liblib4$_parent, _propertyMap, hashCode) {
    this._forKeyword = _forKeyword;
    this._leftParenthesis = _leftParenthesis;
    this._loopVariable = _loopVariable;
    this._inKeyword = _inKeyword;
    this._liblib4$_iterator = _liblib4$_iterator;
    this._rightParenthesis = _rightParenthesis;
    this._body = _body;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_forKeyword: function() {
    return this._forKeyword;
  },
  set$_forKeyword: function(v) {
    this._forKeyword = v;
  },
  get$_leftParenthesis: function() {
    return this._leftParenthesis;
  },
  set$_leftParenthesis: function(v) {
    this._leftParenthesis = v;
  },
  get$_loopVariable: function() {
    return this._loopVariable;
  },
  set$_loopVariable: function(v) {
    this._loopVariable = v;
  },
  get$_inKeyword: function() {
    return this._inKeyword;
  },
  set$_inKeyword: function(v) {
    this._inKeyword = v;
  },
  get$_liblib4$_iterator: function() {
    return this._liblib4$_iterator;
  },
  set$_liblib4$_iterator: function(v) {
    this._liblib4$_iterator = v;
  },
  get$_rightParenthesis: function() {
    return this._rightParenthesis;
  },
  set$_rightParenthesis: function(v) {
    this._rightParenthesis = v;
  },
  get$_body: function() {
    return this._body;
  },
  set$_body: function(v) {
    this._body = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitForEachStatement$1(this);
  },
  get$beginToken: function() {
    return this._forKeyword;
  },
  get$endToken: function() {
    return this._body.get$endToken();
  },
  get$iterator: function(_) {
    return this._liblib4$_iterator;
  },
  ForEachStatement$full$7: function(forKeyword, leftParenthesis, loopVariable, inKeyword, iterator, rightParenthesis, body) {
    this._forKeyword = forKeyword;
    this._leftParenthesis = leftParenthesis;
    if (loopVariable != null)
      loopVariable.set$parent(loopVariable, this);
    this._loopVariable = loopVariable;
    this._inKeyword = inKeyword;
    if (iterator != null)
      $.set$parent$x(iterator, this);
    this._liblib4$_iterator = iterator;
    this._rightParenthesis = rightParenthesis;
    if (body != null)
      body.set$parent(body, this);
    this._body = body;
  }
},

"+ForEachStatement": 0,

ForStatement: {
  "": function ForStatement(_forKeyword, _leftParenthesis, _variableList, _initialization, _leftSeparator, _condition, _rightSeparator, _updaters, _rightParenthesis, _body, _liblib4$_parent, _propertyMap, hashCode) {
    this._forKeyword = _forKeyword;
    this._leftParenthesis = _leftParenthesis;
    this._variableList = _variableList;
    this._initialization = _initialization;
    this._leftSeparator = _leftSeparator;
    this._condition = _condition;
    this._rightSeparator = _rightSeparator;
    this._updaters = _updaters;
    this._rightParenthesis = _rightParenthesis;
    this._body = _body;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_forKeyword: function() {
    return this._forKeyword;
  },
  set$_forKeyword: function(v) {
    this._forKeyword = v;
  },
  get$_leftParenthesis: function() {
    return this._leftParenthesis;
  },
  set$_leftParenthesis: function(v) {
    this._leftParenthesis = v;
  },
  get$_variableList: function() {
    return this._variableList;
  },
  set$_variableList: function(v) {
    this._variableList = v;
  },
  get$_initialization: function() {
    return this._initialization;
  },
  set$_initialization: function(v) {
    this._initialization = v;
  },
  get$_leftSeparator: function() {
    return this._leftSeparator;
  },
  set$_leftSeparator: function(v) {
    this._leftSeparator = v;
  },
  get$_condition: function() {
    return this._condition;
  },
  set$_condition: function(v) {
    this._condition = v;
  },
  get$_rightSeparator: function() {
    return this._rightSeparator;
  },
  set$_rightSeparator: function(v) {
    this._rightSeparator = v;
  },
  get$_updaters: function() {
    return this._updaters;
  },
  set$_updaters: function(v) {
    this._updaters = v;
  },
  get$_rightParenthesis: function() {
    return this._rightParenthesis;
  },
  set$_rightParenthesis: function(v) {
    this._rightParenthesis = v;
  },
  get$_body: function() {
    return this._body;
  },
  set$_body: function(v) {
    this._body = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitForStatement$1(this);
  },
  get$beginToken: function() {
    return this._forKeyword;
  },
  get$endToken: function() {
    return this._body.get$endToken();
  },
  get$variables: function() {
    return this._variableList;
  },
  ForStatement$full$10: function(forKeyword, leftParenthesis, variableList, initialization, leftSeparator, condition, rightSeparator, updaters, rightParenthesis, body) {
    var t1, t2, t3, t4;
    t1 = $.Expression;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._updaters = t2;
    this._forKeyword = forKeyword;
    this._leftParenthesis = leftParenthesis;
    if (variableList != null)
      variableList.set$parent(variableList, this);
    this._variableList = variableList;
    if (initialization != null)
      $.set$parent$x(initialization, this);
    this._initialization = initialization;
    this._leftSeparator = leftSeparator;
    if (condition != null)
      $.set$parent$x(condition, this);
    this._condition = condition;
    this._rightSeparator = rightSeparator;
    t1 = this._updaters;
    t1.addAll$1(t1, updaters);
    this._rightParenthesis = rightParenthesis;
    if (body != null)
      body.set$parent(body, this);
    this._body = body;
  }
},

"+ForStatement": 0,

FormalParameter: {
  "": function FormalParameter() {
  },
  "super": "ASTNode",
  get$element: function() {
    var identifier2 = this.get$identifier();
    if (identifier2 == null)
      return;
    return $.propertyTypeCast(identifier2.get$element(), "$isParameterElement");
  }
},

"+FormalParameter": 0,

FormalParameterList: {
  "": function FormalParameterList(_leftParenthesis, _parameters, _leftDelimiter, _rightDelimiter, _rightParenthesis, _liblib4$_parent, _propertyMap, hashCode) {
    this._leftParenthesis = _leftParenthesis;
    this._parameters = _parameters;
    this._leftDelimiter = _leftDelimiter;
    this._rightDelimiter = _rightDelimiter;
    this._rightParenthesis = _rightParenthesis;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_leftParenthesis: function() {
    return this._leftParenthesis;
  },
  set$_leftParenthesis: function(v) {
    this._leftParenthesis = v;
  },
  get$_parameters: function() {
    return this._parameters;
  },
  set$_parameters: function(v) {
    this._parameters = v;
  },
  get$_leftDelimiter: function() {
    return this._leftDelimiter;
  },
  set$_leftDelimiter: function(v) {
    this._leftDelimiter = v;
  },
  get$_rightDelimiter: function() {
    return this._rightDelimiter;
  },
  set$_rightDelimiter: function(v) {
    this._rightDelimiter = v;
  },
  get$_rightParenthesis: function() {
    return this._rightParenthesis;
  },
  set$_rightParenthesis: function(v) {
    this._rightParenthesis = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitFormalParameterList$1(this);
  },
  get$beginToken: function() {
    return this._leftParenthesis;
  },
  get$elements: function(_) {
    var t1, count, types, i, t2;
    t1 = this._parameters;
    t1.get$length;
    count = t1.elements.length;
    types = $.List_List(count, $.ParameterElement);
    types.$builtinTypeInfo = [$.ParameterElement];
    for (t1 = types.length, i = 0; i < count; ++i) {
      t2 = this._parameters;
      t2.$index;
      t2 = t2.elements;
      if (i >= t2.length)
        throw $.ioore(i);
      t2 = t2[i].get$element();
      if (i >= t1)
        throw $.ioore(i);
      types[i] = t2;
    }
    return types;
  },
  get$endToken: function() {
    return this._rightParenthesis;
  },
  FormalParameterList$full$5: function(leftParenthesis, parameters, leftDelimiter, rightDelimiter, rightParenthesis) {
    var t1, t2, t3, t4;
    t1 = $.FormalParameter;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._parameters = t2;
    this._leftParenthesis = leftParenthesis;
    t1 = this._parameters;
    t1.addAll$1(t1, parameters);
    this._leftDelimiter = leftDelimiter;
    this._rightDelimiter = rightDelimiter;
    this._rightParenthesis = rightParenthesis;
  }
},

"+FormalParameterList": 0,

FunctionBody: {
  "": function FunctionBody() {
  },
  "super": "ASTNode"
},

"+FunctionBody": 0,

FunctionDeclaration: {
  "": function FunctionDeclaration(_liblib4$_externalKeyword, _returnType, _propertyKeyword, _liblib4$_name, _functionExpression, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_externalKeyword = _liblib4$_externalKeyword;
    this._returnType = _returnType;
    this._propertyKeyword = _propertyKeyword;
    this._liblib4$_name = _liblib4$_name;
    this._functionExpression = _functionExpression;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "CompilationUnitMember",
  get$_liblib4$_externalKeyword: function() {
    return this._liblib4$_externalKeyword;
  },
  set$_liblib4$_externalKeyword: function(v) {
    this._liblib4$_externalKeyword = v;
  },
  get$_returnType: function() {
    return this._returnType;
  },
  set$_returnType: function(v) {
    this._returnType = v;
  },
  get$_propertyKeyword: function() {
    return this._propertyKeyword;
  },
  set$_propertyKeyword: function(v) {
    this._propertyKeyword = v;
  },
  get$_liblib4$_name: function() {
    return this._liblib4$_name;
  },
  set$_liblib4$_name: function(v) {
    this._liblib4$_name = v;
  },
  get$_functionExpression: function() {
    return this._functionExpression;
  },
  set$_functionExpression: function(v) {
    this._functionExpression = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._returnType;
    if (t1 != null) {
      $.accept$1$x(t1, visitor);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
    }
    t1 = this._propertyKeyword;
    if (t1 != null) {
      t2 = visitor._writer;
      t1 = t1.get$lexeme();
      if (typeof t1 !== "string")
        return this.accept$1$bailout1(1, visitor, t1, t2);
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, t1);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
    }
    t1 = this._liblib4$_name;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = this._functionExpression;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  accept$1$bailout1: function(state0, visitor, t1, t2) {
    switch (state0) {
      case 0:
        t1 = this._returnType;
        if (t1 != null) {
          $.accept$1$x(t1, visitor);
          t1 = visitor._writer;
          t1.print$1;
          t1 = t1._sb;
          t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
        }
        t1 = this._propertyKeyword;
      case 1:
        var str;
        if (state0 === 1 || state0 === 0 && t1 != null)
          switch (state0) {
            case 0:
              t2 = visitor._writer;
              t1 = t1.get$lexeme();
            case 1:
              state0 = 0;
              t2.print$1;
              t2 = t2._sb;
              str = typeof t1 === "string" ? t1 : $.S(t1);
              t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, str);
              t1 = visitor._writer;
              t1.print$1;
              t1 = t1._sb;
              t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
          }
        t1 = this._liblib4$_name;
        if (t1 != null)
          $.accept$1$x(t1, visitor);
        t1 = this._functionExpression;
        if (t1 != null)
          $.accept$1$x(t1, visitor);
        return;
    }
  },
  get$element: function() {
    var t1 = this._liblib4$_name;
    return t1 != null ? $.propertyTypeCast(t1.get$element(), "$isExecutableElement") : null;
  },
  get$endToken: function() {
    return this._functionExpression.get$endToken();
  },
  get$name: function(_) {
    return this._liblib4$_name;
  },
  isGetter$0: function() {
    var t1 = this._propertyKeyword;
    if (t1 != null) {
      $.propertyTypeCast(t1, "$isKeywordToken");
      t1.get$keyword;
      t1 = t1._liblib9$_keyword === $.get$Keyword_GET();
    } else
      t1 = false;
    return t1;
  },
  "+isGetter:0:0": 0,
  get$isGetter: function() {
    return new $.BoundClosure$0(this, "isGetter$0", null);
  },
  isSetter$0: function() {
    var t1 = this._propertyKeyword;
    if (t1 != null) {
      $.propertyTypeCast(t1, "$isKeywordToken");
      t1.get$keyword;
      t1 = t1._liblib9$_keyword === $.get$Keyword_SET();
    } else
      t1 = false;
    return t1;
  },
  "+isSetter:0:0": 0,
  get$isSetter: function() {
    return new $.BoundClosure$0(this, "isSetter$0", null);
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    var t1 = this._liblib4$_externalKeyword;
    if (t1 != null)
      return t1;
    t1 = this._returnType;
    if (t1 != null)
      return t1.get$beginToken();
    else {
      t1 = this._propertyKeyword;
      if (t1 != null)
        return t1;
      else {
        t1 = this._liblib4$_name;
        if (t1 != null)
          return t1.get$beginToken();
      }
    }
    return this._functionExpression.get$beginToken();
  },
  FunctionDeclaration$full$7: function(comment, metadata, externalKeyword, returnType, propertyKeyword, $name, functionExpression) {
    this._liblib4$_externalKeyword = externalKeyword;
    if (returnType != null)
      $.set$parent$x(returnType, this);
    this._returnType = returnType;
    this._propertyKeyword = propertyKeyword;
    if ($name != null)
      $.set$parent$x($name, this);
    this._liblib4$_name = $name;
    functionExpression.set$parent(functionExpression, this);
    this._functionExpression = functionExpression;
  },
  $isFunctionDeclaration: true
},

"+FunctionDeclaration": 0,

FunctionDeclarationStatement: {
  "": function FunctionDeclarationStatement(_functionDeclaration, _liblib4$_parent, _propertyMap, hashCode) {
    this._functionDeclaration = _functionDeclaration;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_functionDeclaration: function() {
    return this._functionDeclaration;
  },
  set$_functionDeclaration: function(v) {
    this._functionDeclaration = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._functionDeclaration;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  get$beginToken: function() {
    return this._functionDeclaration.get$beginToken();
  },
  get$endToken: function() {
    return this._functionDeclaration.get$endToken();
  }
},

"+FunctionDeclarationStatement": 0,

FunctionExpression: {
  "": function FunctionExpression(_parameters, _body, _liblib4$_element, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._parameters = _parameters;
    this._body = _body;
    this._liblib4$_element = _liblib4$_element;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_parameters: function() {
    return this._parameters;
  },
  set$_parameters: function(v) {
    this._parameters = v;
  },
  get$_body: function() {
    return this._body;
  },
  set$_body: function(v) {
    this._body = v;
  },
  get$_liblib4$_element: function() {
    return this._liblib4$_element;
  },
  set$_liblib4$_element: function(v) {
    this._liblib4$_element = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._parameters;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " ";
    t1 = this._body;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    var t1 = this._parameters;
    if (t1 != null)
      return t1.get$beginToken();
    else {
      t1 = this._body;
      if (t1 != null)
        return t1.get$beginToken();
    }
    throw $.wrapException(new $.IllegalStateException("Non-external functions must have a body"));
  },
  get$element: function() {
    return this._liblib4$_element;
  },
  get$endToken: function() {
    var t1 = this._body;
    if (t1 != null)
      return t1.get$endToken();
    else {
      t1 = this._parameters;
      if (t1 != null)
        return t1.get$endToken();
    }
    throw $.wrapException(new $.IllegalStateException("Non-external functions must have a body"));
  }
},

"+FunctionExpression": 0,

FunctionExpressionInvocation: {
  "": function FunctionExpressionInvocation(_function, _argumentList, _staticElement, _propagatedElement, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._function = _function;
    this._argumentList = _argumentList;
    this._staticElement = _staticElement;
    this._propagatedElement = _propagatedElement;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_function: function() {
    return this._function;
  },
  set$_function: function(v) {
    this._function = v;
  },
  get$_argumentList: function() {
    return this._argumentList;
  },
  set$_argumentList: function(v) {
    this._argumentList = v;
  },
  get$_staticElement: function() {
    return this._staticElement;
  },
  set$_staticElement: function(v) {
    this._staticElement = v;
  },
  get$_propagatedElement: function() {
    return this._propagatedElement;
  },
  set$_propagatedElement: function(v) {
    this._propagatedElement = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._function;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = this._argumentList;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._function.get$beginToken();
  },
  get$element: function() {
    return this._propagatedElement;
  },
  get$endToken: function() {
    return this._argumentList.get$endToken();
  },
  $isFunctionExpressionInvocation: true
},

"+FunctionExpressionInvocation": 0,

FunctionTypeAlias: {
  "": function FunctionTypeAlias(_returnType, _liblib4$_name, _typeParameters, _parameters, _keyword, _semicolon, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._returnType = _returnType;
    this._liblib4$_name = _liblib4$_name;
    this._typeParameters = _typeParameters;
    this._parameters = _parameters;
    this._keyword = _keyword;
    this._semicolon = _semicolon;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "TypeAlias",
  get$_returnType: function() {
    return this._returnType;
  },
  set$_returnType: function(v) {
    this._returnType = v;
  },
  get$_liblib4$_name: function() {
    return this._liblib4$_name;
  },
  set$_liblib4$_name: function(v) {
    this._liblib4$_name = v;
  },
  get$_typeParameters: function() {
    return this._typeParameters;
  },
  set$_typeParameters: function(v) {
    this._typeParameters = v;
  },
  get$_parameters: function() {
    return this._parameters;
  },
  set$_parameters: function(v) {
    this._parameters = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitFunctionTypeAlias$1(this);
  },
  get$element: function() {
    var t1 = this._liblib4$_name;
    return t1 != null ? $.propertyTypeCast(t1.get$element(), "$isFunctionTypeAliasElement") : null;
  },
  get$name: function(_) {
    return this._liblib4$_name;
  },
  FunctionTypeAlias$full$8: function(comment, metadata, keyword, returnType, $name, typeParameters, parameters, semicolon) {
    if (returnType != null)
      returnType.set$parent(returnType, this);
    this._returnType = returnType;
    $name.set$parent($name, this);
    this._liblib4$_name = $name;
    if (typeParameters != null)
      typeParameters.set$parent(typeParameters, this);
    this._typeParameters = typeParameters;
    parameters.set$parent(parameters, this);
    this._parameters = parameters;
  }
},

"+FunctionTypeAlias": 0,

FunctionTypedFormalParameter: {
  "": function FunctionTypedFormalParameter(_returnType, _parameters, _comment, _metadata, _identifier, _liblib4$_parent, _propertyMap, hashCode) {
    this._returnType = _returnType;
    this._parameters = _parameters;
    this._comment = _comment;
    this._metadata = _metadata;
    this._identifier = _identifier;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "NormalFormalParameter",
  get$_returnType: function() {
    return this._returnType;
  },
  set$_returnType: function(v) {
    this._returnType = v;
  },
  get$_parameters: function() {
    return this._parameters;
  },
  set$_parameters: function(v) {
    this._parameters = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._returnType;
    if (t1 != null) {
      $.accept$1$x(t1, visitor);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
    }
    t1 = this._identifier;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = this._parameters;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    var t1 = this._returnType;
    if (t1 != null)
      return t1.get$beginToken();
    return this._identifier.get$beginToken();
  },
  get$endToken: function() {
    return this._parameters.get$endToken();
  }
},

"+FunctionTypedFormalParameter": 0,

HideCombinator: {
  "": function HideCombinator(_hiddenNames, _keyword, _liblib4$_parent, _propertyMap, hashCode) {
    this._hiddenNames = _hiddenNames;
    this._keyword = _keyword;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Combinator",
  get$_hiddenNames: function() {
    return this._hiddenNames;
  },
  set$_hiddenNames: function(v) {
    this._hiddenNames = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "hide ";
    visitor.visitList2$2(this._hiddenNames, ", ");
    return;
  },
  get$endToken: function() {
    return this._hiddenNames.get$endToken();
  }
},

"+HideCombinator": 0,

Identifier: {
  "": function Identifier() {
  },
  "super": "Expression",
  isAssignable$0: function() {
    return true;
  }
},

"+Identifier": 0,

IfStatement: {
  "": function IfStatement(_ifKeyword, _leftParenthesis, _condition, _rightParenthesis, _thenStatement, _elseKeyword, _elseStatement, _liblib4$_parent, _propertyMap, hashCode) {
    this._ifKeyword = _ifKeyword;
    this._leftParenthesis = _leftParenthesis;
    this._condition = _condition;
    this._rightParenthesis = _rightParenthesis;
    this._thenStatement = _thenStatement;
    this._elseKeyword = _elseKeyword;
    this._elseStatement = _elseStatement;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_ifKeyword: function() {
    return this._ifKeyword;
  },
  set$_ifKeyword: function(v) {
    this._ifKeyword = v;
  },
  get$_leftParenthesis: function() {
    return this._leftParenthesis;
  },
  set$_leftParenthesis: function(v) {
    this._leftParenthesis = v;
  },
  get$_condition: function() {
    return this._condition;
  },
  set$_condition: function(v) {
    this._condition = v;
  },
  get$_rightParenthesis: function() {
    return this._rightParenthesis;
  },
  set$_rightParenthesis: function(v) {
    this._rightParenthesis = v;
  },
  get$_thenStatement: function() {
    return this._thenStatement;
  },
  set$_thenStatement: function(v) {
    this._thenStatement = v;
  },
  get$_elseKeyword: function() {
    return this._elseKeyword;
  },
  set$_elseKeyword: function(v) {
    this._elseKeyword = v;
  },
  get$_elseStatement: function() {
    return this._elseStatement;
  },
  set$_elseStatement: function(v) {
    this._elseStatement = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "if (";
    t1 = this._condition;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ") ";
    t1 = this._thenStatement;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = this._elseStatement;
    if (t1 != null) {
      t2 = visitor._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, " else ");
      $.accept$1$x(t1, visitor);
    }
    return;
  },
  get$beginToken: function() {
    return this._ifKeyword;
  },
  get$endToken: function() {
    var t1 = this._elseStatement;
    if (t1 != null)
      return t1.get$endToken();
    return this._thenStatement.get$endToken();
  },
  IfStatement$full$7: function(ifKeyword, leftParenthesis, condition, rightParenthesis, thenStatement, elseKeyword, elseStatement) {
    this._ifKeyword = ifKeyword;
    this._leftParenthesis = leftParenthesis;
    if (condition != null)
      $.set$parent$x(condition, this);
    this._condition = condition;
    this._rightParenthesis = rightParenthesis;
    if (thenStatement != null)
      thenStatement.set$parent(thenStatement, this);
    this._thenStatement = thenStatement;
    this._elseKeyword = elseKeyword;
    if (elseStatement != null)
      elseStatement.set$parent(elseStatement, this);
    this._elseStatement = elseStatement;
  }
},

"+IfStatement": 0,

ImplementsClause: {
  "": function ImplementsClause(_keyword, _interfaces, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._interfaces = _interfaces;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_interfaces: function() {
    return this._interfaces;
  },
  set$_interfaces: function(v) {
    this._interfaces = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "implements ";
    visitor.visitList2$2(this._interfaces, ", ");
    return;
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$endToken: function() {
    return this._interfaces.get$endToken();
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  }
},

"+ImplementsClause": 0,

ImportDirective: {
  "": function ImportDirective(_asToken, _prefix, _keyword, _combinators, _semicolon, _uri, _liblib4$_element, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._asToken = _asToken;
    this._prefix = _prefix;
    this._keyword = _keyword;
    this._combinators = _combinators;
    this._semicolon = _semicolon;
    this._uri = _uri;
    this._liblib4$_element = _liblib4$_element;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "NamespaceDirective",
  get$_asToken: function() {
    return this._asToken;
  },
  set$_asToken: function(v) {
    this._asToken = v;
  },
  get$_prefix: function() {
    return this._prefix;
  },
  set$_prefix: function(v) {
    this._prefix = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "import ";
    t1 = this._uri;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = this._prefix;
    if (t1 != null) {
      t2 = visitor._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, " as ");
      $.accept$1$x(t1, visitor);
    }
    visitor.visitList4$3(" ", this._combinators, " ");
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  $isImportDirective: true
},

"+ImportDirective": 0,

IndexExpression: {
  "": function IndexExpression(_liblib4$_target, _period, _leftBracket, _liblib4$_index, _rightBracket, _staticElement, _propagatedElement, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_target = _liblib4$_target;
    this._period = _period;
    this._leftBracket = _leftBracket;
    this._liblib4$_index = _liblib4$_index;
    this._rightBracket = _rightBracket;
    this._staticElement = _staticElement;
    this._propagatedElement = _propagatedElement;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_liblib4$_target: function() {
    return this._liblib4$_target;
  },
  set$_liblib4$_target: function(v) {
    this._liblib4$_target = v;
  },
  get$_period: function() {
    return this._period;
  },
  set$_period: function(v) {
    this._period = v;
  },
  get$_leftBracket: function() {
    return this._leftBracket;
  },
  set$_leftBracket: function(v) {
    this._leftBracket = v;
  },
  get$_liblib4$_index: function() {
    return this._liblib4$_index;
  },
  set$_liblib4$_index: function(v) {
    this._liblib4$_index = v;
  },
  get$_rightBracket: function() {
    return this._rightBracket;
  },
  set$_rightBracket: function(v) {
    this._rightBracket = v;
  },
  get$_staticElement: function() {
    return this._staticElement;
  },
  set$_staticElement: function(v) {
    this._staticElement = v;
  },
  get$_propagatedElement: function() {
    return this._propagatedElement;
  },
  set$_propagatedElement: function(v) {
    this._propagatedElement = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitIndexExpression$1(this);
  },
  get$beginToken: function() {
    var t1 = this._liblib4$_target;
    if (t1 != null)
      return t1.get$beginToken();
    return this._period;
  },
  get$element: function() {
    return this._propagatedElement;
  },
  get$endToken: function() {
    return this._rightBracket;
  },
  isAssignable$0: function() {
    return true;
  }
},

"+IndexExpression": 0,

InstanceCreationExpression: {
  "": function InstanceCreationExpression(_keyword, _constructorName, _argumentList, _staticElement, _propagatedElement, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._constructorName = _constructorName;
    this._argumentList = _argumentList;
    this._staticElement = _staticElement;
    this._propagatedElement = _propagatedElement;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_constructorName: function() {
    return this._constructorName;
  },
  set$_constructorName: function(v) {
    this._constructorName = v;
  },
  get$_argumentList: function() {
    return this._argumentList;
  },
  set$_argumentList: function(v) {
    this._argumentList = v;
  },
  get$_staticElement: function() {
    return this._staticElement;
  },
  set$_staticElement: function(v) {
    this._staticElement = v;
  },
  get$_propagatedElement: function() {
    return this._propagatedElement;
  },
  set$_propagatedElement: function(v) {
    this._propagatedElement = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._keyword;
    if (t1 != null) {
      t2 = visitor._writer;
      t1 = t1.get$lexeme();
      if (typeof t1 !== "string")
        return this.accept$1$bailout1(1, visitor, t2, t1);
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, t1);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
    }
    t1 = this._constructorName;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = this._argumentList;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  accept$1$bailout1: function(state0, visitor, t2, t1) {
    switch (state0) {
      case 0:
        t1 = this._keyword;
      case 1:
        var str;
        if (state0 === 1 || state0 === 0 && t1 != null)
          switch (state0) {
            case 0:
              t2 = visitor._writer;
              t1 = t1.get$lexeme();
            case 1:
              state0 = 0;
              t2.print$1;
              t2 = t2._sb;
              str = typeof t1 === "string" ? t1 : $.S(t1);
              t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, str);
              t1 = visitor._writer;
              t1.print$1;
              t1 = t1._sb;
              t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
          }
        t1 = this._constructorName;
        if (t1 != null)
          $.accept$1$x(t1, visitor);
        t1 = this._argumentList;
        if (t1 != null)
          $.accept$1$x(t1, visitor);
        return;
    }
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$element: function() {
    return this._propagatedElement;
  },
  get$endToken: function() {
    return this._argumentList.get$endToken();
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  }
},

"+InstanceCreationExpression": 0,

IntegerLiteral: {
  "": function IntegerLiteral(_literal, _liblib4$_value, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._literal = _literal;
    this._liblib4$_value = _liblib4$_value;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Literal",
  get$_literal: function() {
    return this._literal;
  },
  set$_literal: function(v) {
    this._literal = v;
  },
  get$_liblib4$_value: function() {
    return this._liblib4$_value;
  },
  set$_liblib4$_value: function(v) {
    this._liblib4$_value = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t2 = this._literal.get$lexeme();
    if (typeof t2 !== "string")
      return this.accept$1$bailout1(1, t1, t2);
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + t2;
    return;
  },
  accept$1$bailout1: function(state0, t1, t2) {
    var str;
    t1.print$1;
    t1 = t1._sb;
    str = typeof t2 === "string" ? t2 : $.S(t2);
    t1._contents = t1._contents + str;
    return;
  },
  get$beginToken: function() {
    return this._literal;
  },
  get$endToken: function() {
    return this._literal;
  },
  get$value: function(_) {
    return this._liblib4$_value;
  },
  set$value: function(_, value2) {
    this._liblib4$_value = value2;
  }
},

"+IntegerLiteral": 0,

InterpolationElement: {
  "": function InterpolationElement() {
  },
  "super": "ASTNode"
},

"+InterpolationElement": 0,

InterpolationExpression: {
  "": function InterpolationExpression(_leftBracket, _expression, _rightBracket, _liblib4$_parent, _propertyMap, hashCode) {
    this._leftBracket = _leftBracket;
    this._expression = _expression;
    this._rightBracket = _rightBracket;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "InterpolationElement",
  get$_leftBracket: function() {
    return this._leftBracket;
  },
  set$_leftBracket: function(v) {
    this._leftBracket = v;
  },
  get$_expression: function() {
    return this._expression;
  },
  set$_expression: function(v) {
    this._expression = v;
  },
  get$_rightBracket: function() {
    return this._rightBracket;
  },
  set$_rightBracket: function(v) {
    this._rightBracket = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitInterpolationExpression$1(this);
  },
  get$beginToken: function() {
    return this._leftBracket;
  },
  get$endToken: function() {
    var t1 = this._rightBracket;
    if (t1 != null)
      return t1;
    return this._expression.get$endToken();
  }
},

"+InterpolationExpression": 0,

InterpolationString: {
  "": function InterpolationString(_liblib4$_contents, _liblib4$_value, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_contents = _liblib4$_contents;
    this._liblib4$_value = _liblib4$_value;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "InterpolationElement",
  get$_liblib4$_contents: function() {
    return this._liblib4$_contents;
  },
  set$_liblib4$_contents: function(v) {
    this._liblib4$_contents = v;
  },
  get$_liblib4$_value: function() {
    return this._liblib4$_value;
  },
  set$_liblib4$_value: function(v) {
    this._liblib4$_value = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t2 = this._liblib4$_contents.get$lexeme();
    if (typeof t2 !== "string")
      return this.accept$1$bailout1(1, t1, t2);
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + t2;
    return;
  },
  accept$1$bailout1: function(state0, t1, t2) {
    var str;
    t1.print$1;
    t1 = t1._sb;
    str = typeof t2 === "string" ? t2 : $.S(t2);
    t1._contents = t1._contents + str;
    return;
  },
  get$beginToken: function() {
    return this._liblib4$_contents;
  },
  get$contents: function() {
    return this._liblib4$_contents;
  },
  get$endToken: function() {
    return this._liblib4$_contents;
  },
  get$value: function(_) {
    return this._liblib4$_value;
  },
  set$value: function(_, string) {
    this._liblib4$_value = string;
  }
},

"+InterpolationString": 0,

IsExpression: {
  "": function IsExpression(_expression, _isOperator, _notOperator, _liblib4$_type, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._expression = _expression;
    this._isOperator = _isOperator;
    this._notOperator = _notOperator;
    this._liblib4$_type = _liblib4$_type;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_expression: function() {
    return this._expression;
  },
  set$_expression: function(v) {
    this._expression = v;
  },
  get$_isOperator: function() {
    return this._isOperator;
  },
  set$_isOperator: function(v) {
    this._isOperator = v;
  },
  get$_notOperator: function() {
    return this._notOperator;
  },
  set$_notOperator: function(v) {
    this._notOperator = v;
  },
  get$_liblib4$_type: function() {
    return this._liblib4$_type;
  },
  set$_liblib4$_type: function(v) {
    this._liblib4$_type = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitIsExpression$1(this);
  },
  get$beginToken: function() {
    return this._expression.get$beginToken();
  },
  get$endToken: function() {
    return this._liblib4$_type.get$endToken();
  },
  get$isOperator: function() {
    return this._isOperator;
  },
  "+isOperator": 0,
  isOperator$0: function() {
    return this.get$isOperator().call$0();
  },
  get$type: function(_) {
    return this._liblib4$_type;
  },
  set$type: function(_, $name) {
    if ($name != null)
      $.set$parent$x($name, this);
    this._liblib4$_type = $name;
  }
},

"+IsExpression": 0,

Label: {
  "": function Label(_label, _colon, _liblib4$_parent, _propertyMap, hashCode) {
    this._label = _label;
    this._colon = _colon;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_label: function() {
    return this._label;
  },
  set$_label: function(v) {
    this._label = v;
  },
  get$_colon: function() {
    return this._colon;
  },
  set$_colon: function(v) {
    this._colon = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._label;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ":";
    return;
  },
  get$beginToken: function() {
    return this._label.get$beginToken();
  },
  get$endToken: function() {
    return this._colon;
  },
  get$label: function(_) {
    return this._label;
  }
},

"+Label": 0,

LabeledStatement: {
  "": function LabeledStatement(_labels, _statement, _liblib4$_parent, _propertyMap, hashCode) {
    this._labels = _labels;
    this._statement = _statement;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_labels: function() {
    return this._labels;
  },
  set$_labels: function(v) {
    this._labels = v;
  },
  get$_statement: function() {
    return this._statement;
  },
  set$_statement: function(v) {
    this._statement = v;
  },
  accept$1: function(_, visitor) {
    var t1;
    visitor.visitList3$3(this._labels, " ", " ");
    t1 = this._statement;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    var t1 = this._labels;
    if (!t1.get$isEmpty(t1))
      return this._labels.get$beginToken();
    return this._statement.get$beginToken();
  },
  get$endToken: function() {
    return this._statement.get$endToken();
  }
},

"+LabeledStatement": 0,

LibraryDirective: {
  "": function LibraryDirective(_liblib4$_libraryToken, _liblib4$_name, _semicolon, _liblib4$_element, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_libraryToken = _liblib4$_libraryToken;
    this._liblib4$_name = _liblib4$_name;
    this._semicolon = _semicolon;
    this._liblib4$_element = _liblib4$_element;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Directive",
  get$_liblib4$_libraryToken: function() {
    return this._liblib4$_libraryToken;
  },
  set$_liblib4$_libraryToken: function(v) {
    this._liblib4$_libraryToken = v;
  },
  get$_liblib4$_name: function() {
    return this._liblib4$_name;
  },
  set$_liblib4$_name: function(v) {
    this._liblib4$_name = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "library ";
    t1 = this._liblib4$_name;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  get$endToken: function() {
    return this._semicolon;
  },
  get$keyword: function() {
    return this._liblib4$_libraryToken;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$name: function(_) {
    return this._liblib4$_name;
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    return this._liblib4$_libraryToken;
  },
  $isLibraryDirective: true
},

"+LibraryDirective": 0,

LibraryIdentifier: {
  "": function LibraryIdentifier(_components, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._components = _components;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Identifier",
  get$_components: function() {
    return this._components;
  },
  set$_components: function(v) {
    this._components = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t2 = this.get$name(this);
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + t2;
    return;
  },
  get$beginToken: function() {
    return this._components.get$beginToken();
  },
  get$element: function() {
    return;
  },
  get$endToken: function() {
    return this._components.get$endToken();
  },
  get$name: function(_) {
    var t1, builder, t2, needsPeriod, identifier, t3;
    t1 = new $.StringBuffer("");
    t1._contents = "";
    builder = new $.JavaStringBuilder(t1);
    t1 = this._components;
    t1.get$iterator;
    t1 = t1.elements;
    t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    needsPeriod = false;
    for (; t1.moveNext$0();) {
      identifier = t1._liblib$_current;
      if (needsPeriod) {
        t2 = builder.sb;
        t2._contents = t2._contents + ".";
      } else
        needsPeriod = true;
      t2 = $.get$name$x(identifier);
      if (typeof t2 !== "string")
        return this.get$name$bailout1(1, builder, t2, needsPeriod, t1);
      t3 = builder.sb;
      t3._contents = t3._contents + t2;
    }
    return builder.sb._contents;
  },
  get$name$bailout1: function(state0, builder, t2, needsPeriod, t1) {
    switch (state0) {
      case 0:
        t1 = new $.StringBuffer("");
        t1._contents = "";
        builder = new $.JavaStringBuilder(t1);
        t1 = this._components;
        t1.get$iterator;
        t1 = t1.elements;
        t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
        t1 = new $.ListIterator(t1, t1.length, 0, null);
        t1.$builtinTypeInfo = [t2];
        needsPeriod = false;
      case 1:
        var identifier, t3, str;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!t1.moveNext$0())
                  break L0;
                identifier = t1._liblib$_current;
                if (needsPeriod) {
                  t2 = builder.sb;
                  t2._contents = t2._contents + ".";
                } else
                  needsPeriod = true;
                t2 = $.get$name$x(identifier);
              case 1:
                state0 = 0;
                t3 = builder.sb;
                str = typeof t2 === "string" ? t2 : $.S(t2);
                t3._contents = t3._contents + str;
            }
        return builder.sb._contents;
    }
  }
},

"+LibraryIdentifier": 0,

ListLiteral: {
  "": function ListLiteral(_leftBracket, _liblib4$_elements, _rightBracket, _modifier, _typeArguments, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._leftBracket = _leftBracket;
    this._liblib4$_elements = _liblib4$_elements;
    this._rightBracket = _rightBracket;
    this._modifier = _modifier;
    this._typeArguments = _typeArguments;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "TypedLiteral",
  get$_leftBracket: function() {
    return this._leftBracket;
  },
  set$_leftBracket: function(v) {
    this._leftBracket = v;
  },
  get$_liblib4$_elements: function() {
    return this._liblib4$_elements;
  },
  set$_liblib4$_elements: function(v) {
    this._liblib4$_elements = v;
  },
  get$_rightBracket: function() {
    return this._rightBracket;
  },
  set$_rightBracket: function(v) {
    this._rightBracket = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitListLiteral$1(this);
  },
  get$beginToken: function() {
    var token, typeArguments2;
    token = this._modifier;
    if (token != null)
      return token;
    typeArguments2 = this._typeArguments;
    if (typeArguments2 != null)
      return typeArguments2.get$beginToken();
    return this._leftBracket;
  },
  get$elements: function(_) {
    return this._liblib4$_elements;
  },
  get$endToken: function() {
    return this._rightBracket;
  },
  ListLiteral$full$5: function(modifier, typeArguments, leftBracket, elements, rightBracket) {
    var t1, t2, t3, t4;
    t1 = $.Expression;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._liblib4$_elements = t2;
    this._leftBracket = leftBracket;
    t1 = this._liblib4$_elements;
    t1.addAll$1(t1, elements);
    this._rightBracket = rightBracket;
  }
},

"+ListLiteral": 0,

Literal: {
  "": function Literal() {
  },
  "super": "Expression"
},

"+Literal": 0,

MapLiteral: {
  "": function MapLiteral(_leftBracket, _entries, _rightBracket, _modifier, _typeArguments, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._leftBracket = _leftBracket;
    this._entries = _entries;
    this._rightBracket = _rightBracket;
    this._modifier = _modifier;
    this._typeArguments = _typeArguments;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "TypedLiteral",
  get$_leftBracket: function() {
    return this._leftBracket;
  },
  set$_leftBracket: function(v) {
    this._leftBracket = v;
  },
  get$_entries: function() {
    return this._entries;
  },
  set$_entries: function(v) {
    this._entries = v;
  },
  get$_rightBracket: function() {
    return this._rightBracket;
  },
  set$_rightBracket: function(v) {
    this._rightBracket = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitMapLiteral$1(this);
  },
  get$beginToken: function() {
    var token, typeArguments2;
    token = this._modifier;
    if (token != null)
      return token;
    typeArguments2 = this._typeArguments;
    if (typeArguments2 != null)
      return typeArguments2.get$beginToken();
    return this._leftBracket;
  },
  get$endToken: function() {
    return this._rightBracket;
  },
  MapLiteral$full$5: function(modifier, typeArguments, leftBracket, entries, rightBracket) {
    var t1, t2, t3, t4;
    t1 = $.MapLiteralEntry;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._entries = t2;
    this._leftBracket = leftBracket;
    t1 = this._entries;
    t1.addAll$1(t1, entries);
    this._rightBracket = rightBracket;
  }
},

"+MapLiteral": 0,

MapLiteralEntry: {
  "": function MapLiteralEntry(_liblib4$_key, _separator, _liblib4$_value, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_key = _liblib4$_key;
    this._separator = _separator;
    this._liblib4$_value = _liblib4$_value;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_liblib4$_key: function() {
    return this._liblib4$_key;
  },
  set$_liblib4$_key: function(v) {
    this._liblib4$_key = v;
  },
  get$_separator: function() {
    return this._separator;
  },
  set$_separator: function(v) {
    this._separator = v;
  },
  get$_liblib4$_value: function() {
    return this._liblib4$_value;
  },
  set$_liblib4$_value: function(v) {
    this._liblib4$_value = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._liblib4$_key;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " : ";
    t1 = this._liblib4$_value;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._liblib4$_key.get$beginToken();
  },
  get$endToken: function() {
    return this._liblib4$_value.get$endToken();
  },
  get$value: function(_) {
    return this._liblib4$_value;
  },
  set$value: function(_, expression) {
    if (expression != null)
      $.set$parent$x(expression, this);
    this._liblib4$_value = expression;
  }
},

"+MapLiteralEntry": 0,

MethodDeclaration: {
  "": function MethodDeclaration(_liblib4$_externalKeyword, _modifierKeyword, _returnType, _propertyKeyword, _operatorKeyword, _liblib4$_name, _parameters, _body, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_externalKeyword = _liblib4$_externalKeyword;
    this._modifierKeyword = _modifierKeyword;
    this._returnType = _returnType;
    this._propertyKeyword = _propertyKeyword;
    this._operatorKeyword = _operatorKeyword;
    this._liblib4$_name = _liblib4$_name;
    this._parameters = _parameters;
    this._body = _body;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ClassMember",
  get$_liblib4$_externalKeyword: function() {
    return this._liblib4$_externalKeyword;
  },
  set$_liblib4$_externalKeyword: function(v) {
    this._liblib4$_externalKeyword = v;
  },
  get$_modifierKeyword: function() {
    return this._modifierKeyword;
  },
  set$_modifierKeyword: function(v) {
    this._modifierKeyword = v;
  },
  get$_returnType: function() {
    return this._returnType;
  },
  set$_returnType: function(v) {
    this._returnType = v;
  },
  get$_propertyKeyword: function() {
    return this._propertyKeyword;
  },
  set$_propertyKeyword: function(v) {
    this._propertyKeyword = v;
  },
  get$_operatorKeyword: function() {
    return this._operatorKeyword;
  },
  set$_operatorKeyword: function(v) {
    this._operatorKeyword = v;
  },
  get$_liblib4$_name: function() {
    return this._liblib4$_name;
  },
  set$_liblib4$_name: function(v) {
    this._liblib4$_name = v;
  },
  get$_parameters: function() {
    return this._parameters;
  },
  set$_parameters: function(v) {
    this._parameters = v;
  },
  get$_body: function() {
    return this._body;
  },
  set$_body: function(v) {
    this._body = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitMethodDeclaration$1(this);
  },
  get$element: function() {
    var t1 = this._liblib4$_name;
    return t1 != null ? $.propertyTypeCast(t1.get$element(), "$isExecutableElement") : null;
  },
  get$endToken: function() {
    return this._body.get$endToken();
  },
  get$name: function(_) {
    return this._liblib4$_name;
  },
  isGetter$0: function() {
    var t1 = this._propertyKeyword;
    if (t1 != null) {
      $.propertyTypeCast(t1, "$isKeywordToken");
      t1.get$keyword;
      t1 = t1._liblib9$_keyword === $.get$Keyword_GET();
    } else
      t1 = false;
    return t1;
  },
  get$isGetter: function() {
    return new $.BoundClosure$0(this, "isGetter$0", null);
  },
  isOperator$0: function() {
    return this._operatorKeyword != null;
  },
  isSetter$0: function() {
    var t1 = this._propertyKeyword;
    if (t1 != null) {
      $.propertyTypeCast(t1, "$isKeywordToken");
      t1.get$keyword;
      t1 = t1._liblib9$_keyword === $.get$Keyword_SET();
    } else
      t1 = false;
    return t1;
  },
  get$isSetter: function() {
    return new $.BoundClosure$0(this, "isSetter$0", null);
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    var t1 = this._modifierKeyword;
    if (t1 != null)
      return t1;
    else {
      t1 = this._returnType;
      if (t1 != null)
        return t1.get$beginToken();
      else {
        t1 = this._propertyKeyword;
        if (t1 != null)
          return t1;
        else {
          t1 = this._operatorKeyword;
          if (t1 != null)
            return t1;
        }
      }
    }
    return this._liblib4$_name.get$beginToken();
  },
  MethodDeclaration$full$10: function(comment, metadata, externalKeyword, modifierKeyword, returnType, propertyKeyword, operatorKeyword, $name, parameters, body) {
    this._liblib4$_externalKeyword = externalKeyword;
    this._modifierKeyword = modifierKeyword;
    if (returnType != null)
      returnType.set$parent(returnType, this);
    this._returnType = returnType;
    this._propertyKeyword = propertyKeyword;
    this._operatorKeyword = operatorKeyword;
    $name.set$parent($name, this);
    this._liblib4$_name = $name;
    if (parameters != null)
      parameters.set$parent(parameters, this);
    this._parameters = parameters;
    if (body != null)
      body.set$parent(body, this);
    this._body = body;
  },
  $isMethodDeclaration: true
},

"+MethodDeclaration": 0,

MethodInvocation: {
  "": function MethodInvocation(_liblib4$_target, _period, _methodName, _argumentList, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_target = _liblib4$_target;
    this._period = _period;
    this._methodName = _methodName;
    this._argumentList = _argumentList;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_liblib4$_target: function() {
    return this._liblib4$_target;
  },
  set$_liblib4$_target: function(v) {
    this._liblib4$_target = v;
  },
  get$_period: function() {
    return this._period;
  },
  set$_period: function(v) {
    this._period = v;
  },
  get$_methodName: function() {
    return this._methodName;
  },
  set$_methodName: function(v) {
    this._methodName = v;
  },
  get$_argumentList: function() {
    return this._argumentList;
  },
  set$_argumentList: function(v) {
    this._argumentList = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._period;
    if (t1 != null && $.get$type$x(t1) === $.get$TokenType_PERIOD_PERIOD()) {
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + "..";
    } else {
      t1 = this._liblib4$_target;
      if (t1 != null) {
        $.accept$1$x(t1, visitor);
        t1 = visitor._writer;
        t1.print$1;
        t1 = t1._sb;
        t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, ".");
      }
    }
    t1 = this._methodName;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = this._argumentList;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    var t1 = this._liblib4$_target;
    if (t1 != null)
      return t1.get$beginToken();
    else {
      t1 = this._period;
      if (t1 != null)
        return t1;
    }
    return this._methodName.get$beginToken();
  },
  get$endToken: function() {
    return this._argumentList.get$endToken();
  },
  get$target: function(_) {
    return this._liblib4$_target;
  }
},

"+MethodInvocation": 0,

NamedExpression: {
  "": function NamedExpression(_liblib4$_name, _expression, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_name = _liblib4$_name;
    this._expression = _expression;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_liblib4$_name: function() {
    return this._liblib4$_name;
  },
  set$_liblib4$_name: function(v) {
    this._liblib4$_name = v;
  },
  get$_expression: function() {
    return this._expression;
  },
  set$_expression: function(v) {
    this._expression = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._liblib4$_name;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = this._expression;
    if (t1 != null) {
      t2 = visitor._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, " ");
      $.accept$1$x(t1, visitor);
    }
    return;
  },
  get$beginToken: function() {
    return this._liblib4$_name.get$beginToken();
  },
  get$element: function() {
    var element2 = $.get$label$x(this._liblib4$_name).get$element();
    return;
  },
  get$endToken: function() {
    return this._expression.get$endToken();
  },
  get$name: function(_) {
    return this._liblib4$_name;
  },
  $isNamedExpression: true
},

"+NamedExpression": 0,

NamespaceDirective: {
  "": function NamespaceDirective(_keyword, _combinators, _semicolon) {
    this._keyword = _keyword;
    this._combinators = _combinators;
    this._semicolon = _semicolon;
  },
  "super": "UriBasedDirective",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_combinators: function() {
    return this._combinators;
  },
  set$_combinators: function(v) {
    this._combinators = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  get$endToken: function() {
    return this._semicolon;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    return this._keyword;
  },
  NamespaceDirective$full$6: function(comment, metadata, keyword, libraryUri, combinators, semicolon) {
    var t1, t2, t3, t4;
    t1 = $.Combinator;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._combinators = t2;
    this._keyword = keyword;
    t1 = this._combinators;
    t1.addAll$1(t1, combinators);
    this._semicolon = semicolon;
  }
},

"+NamespaceDirective": 0,

NativeFunctionBody: {
  "": function NativeFunctionBody(_nativeToken, _stringLiteral, _semicolon, _liblib4$_parent, _propertyMap, hashCode) {
    this._nativeToken = _nativeToken;
    this._stringLiteral = _stringLiteral;
    this._semicolon = _semicolon;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "FunctionBody",
  get$_nativeToken: function() {
    return this._nativeToken;
  },
  set$_nativeToken: function(v) {
    this._nativeToken = v;
  },
  get$_stringLiteral: function() {
    return this._stringLiteral;
  },
  set$_stringLiteral: function(v) {
    this._stringLiteral = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "native ";
    t1 = this._stringLiteral;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  get$beginToken: function() {
    return this._nativeToken;
  },
  get$endToken: function() {
    return this._semicolon;
  }
},

"+NativeFunctionBody": 0,

NormalFormalParameter: {
  "": function NormalFormalParameter(_comment, _metadata, _identifier) {
    this._comment = _comment;
    this._metadata = _metadata;
    this._identifier = _identifier;
  },
  "super": "FormalParameter",
  get$_comment: function() {
    return this._comment;
  },
  set$_comment: function(v) {
    this._comment = v;
  },
  get$_metadata: function() {
    return this._metadata;
  },
  set$_metadata: function(v) {
    this._metadata = v;
  },
  get$_identifier: function() {
    return this._identifier;
  },
  set$_identifier: function(v) {
    this._identifier = v;
  },
  get$identifier: function() {
    return this._identifier;
  },
  get$kind: function(_) {
    var parent2 = this._liblib4$_parent;
    if (typeof parent2 === "object" && parent2 !== null && !!$.getInterceptor(parent2).$isDefaultFormalParameter)
      return parent2._kind;
    return $.get$ParameterKind_REQUIRED();
  },
  NormalFormalParameter$full$3: function(comment, metadata, identifier) {
    var t1, t2, t3, t4;
    t1 = $.Annotation;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._metadata = t2;
    if (comment != null)
      $.set$parent$x(comment, this);
    this._comment = comment;
    t1 = this._metadata;
    t1.addAll$1(t1, metadata);
    if (identifier != null)
      $.set$parent$x(identifier, this);
    this._identifier = identifier;
  }
},

"+NormalFormalParameter": 0,

NullLiteral: {
  "": function NullLiteral(_literal, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._literal = _literal;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Literal",
  get$_literal: function() {
    return this._literal;
  },
  set$_literal: function(v) {
    this._literal = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "null";
    return;
  },
  get$beginToken: function() {
    return this._literal;
  },
  get$endToken: function() {
    return this._literal;
  }
},

"+NullLiteral": 0,

ParenthesizedExpression: {
  "": function ParenthesizedExpression(_leftParenthesis, _expression, _rightParenthesis, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._leftParenthesis = _leftParenthesis;
    this._expression = _expression;
    this._rightParenthesis = _rightParenthesis;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_leftParenthesis: function() {
    return this._leftParenthesis;
  },
  set$_leftParenthesis: function(v) {
    this._leftParenthesis = v;
  },
  get$_expression: function() {
    return this._expression;
  },
  set$_expression: function(v) {
    this._expression = v;
  },
  get$_rightParenthesis: function() {
    return this._rightParenthesis;
  },
  set$_rightParenthesis: function(v) {
    this._rightParenthesis = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "(";
    t1 = this._expression;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ")";
    return;
  },
  get$beginToken: function() {
    return this._leftParenthesis;
  },
  get$endToken: function() {
    return this._rightParenthesis;
  }
},

"+ParenthesizedExpression": 0,

PartDirective: {
  "": function PartDirective(_partToken, _semicolon, _uri, _liblib4$_element, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._partToken = _partToken;
    this._semicolon = _semicolon;
    this._uri = _uri;
    this._liblib4$_element = _liblib4$_element;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "UriBasedDirective",
  get$_partToken: function() {
    return this._partToken;
  },
  set$_partToken: function(v) {
    this._partToken = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "part ";
    t1 = this._uri;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  get$endToken: function() {
    return this._semicolon;
  },
  get$keyword: function() {
    return this._partToken;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    return this._partToken;
  },
  $isPartDirective: true
},

"+PartDirective": 0,

PartOfDirective: {
  "": function PartOfDirective(_partToken, _ofToken, _liblib4$_libraryName, _semicolon, _liblib4$_element, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._partToken = _partToken;
    this._ofToken = _ofToken;
    this._liblib4$_libraryName = _liblib4$_libraryName;
    this._semicolon = _semicolon;
    this._liblib4$_element = _liblib4$_element;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Directive",
  get$_partToken: function() {
    return this._partToken;
  },
  set$_partToken: function(v) {
    this._partToken = v;
  },
  get$_ofToken: function() {
    return this._ofToken;
  },
  set$_ofToken: function(v) {
    this._ofToken = v;
  },
  get$_liblib4$_libraryName: function() {
    return this._liblib4$_libraryName;
  },
  set$_liblib4$_libraryName: function(v) {
    this._liblib4$_libraryName = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "part of ";
    t1 = this._liblib4$_libraryName;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  get$endToken: function() {
    return this._semicolon;
  },
  get$keyword: function() {
    return this._partToken;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    return this._partToken;
  },
  $isPartOfDirective: true
},

"+PartOfDirective": 0,

PostfixExpression: {
  "": function PostfixExpression(_operand, _operator, _propagatedElement, _staticElement, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._operand = _operand;
    this._operator = _operator;
    this._propagatedElement = _propagatedElement;
    this._staticElement = _staticElement;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_operand: function() {
    return this._operand;
  },
  set$_operand: function(v) {
    this._operand = v;
  },
  get$_operator: function() {
    return this._operator;
  },
  set$_operator: function(v) {
    this._operator = v;
  },
  get$_propagatedElement: function() {
    return this._propagatedElement;
  },
  set$_propagatedElement: function(v) {
    this._propagatedElement = v;
  },
  get$_staticElement: function() {
    return this._staticElement;
  },
  set$_staticElement: function(v) {
    this._staticElement = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._operand;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t2 = this._operator.get$lexeme();
    if (typeof t2 !== "string")
      return this.accept$1$bailout1(1, t1, t2);
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + t2;
    return;
  },
  accept$1$bailout1: function(state0, t1, t2) {
    var str;
    t1.print$1;
    t1 = t1._sb;
    str = typeof t2 === "string" ? t2 : $.S(t2);
    t1._contents = t1._contents + str;
    return;
  },
  get$beginToken: function() {
    return this._operand.get$beginToken();
  },
  get$element: function() {
    return this._propagatedElement;
  },
  get$endToken: function() {
    return this._operator;
  }
},

"+PostfixExpression": 0,

PrefixExpression: {
  "": function PrefixExpression(_operator, _operand, _staticElement, _propagatedElement, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._operator = _operator;
    this._operand = _operand;
    this._staticElement = _staticElement;
    this._propagatedElement = _propagatedElement;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_operator: function() {
    return this._operator;
  },
  set$_operator: function(v) {
    this._operator = v;
  },
  get$_operand: function() {
    return this._operand;
  },
  set$_operand: function(v) {
    this._operand = v;
  },
  get$_staticElement: function() {
    return this._staticElement;
  },
  set$_staticElement: function(v) {
    this._staticElement = v;
  },
  get$_propagatedElement: function() {
    return this._propagatedElement;
  },
  set$_propagatedElement: function(v) {
    this._propagatedElement = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t2 = this._operator.get$lexeme();
    if (typeof t2 !== "string")
      return this.accept$1$bailout1(1, visitor, t1, t2);
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + t2;
    t1 = this._operand;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  accept$1$bailout1: function(state0, visitor, t1, t2) {
    var str;
    t1.print$1;
    t1 = t1._sb;
    str = typeof t2 === "string" ? t2 : $.S(t2);
    t1._contents = t1._contents + str;
    t1 = this._operand;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._operator;
  },
  get$element: function() {
    return this._propagatedElement;
  },
  get$endToken: function() {
    return this._operand.get$endToken();
  }
},

"+PrefixExpression": 0,

PrefixedIdentifier: {
  "": function PrefixedIdentifier(_prefix, _period, _identifier, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._prefix = _prefix;
    this._period = _period;
    this._identifier = _identifier;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Identifier",
  get$_prefix: function() {
    return this._prefix;
  },
  set$_prefix: function(v) {
    this._prefix = v;
  },
  get$_period: function() {
    return this._period;
  },
  set$_period: function(v) {
    this._period = v;
  },
  get$_identifier: function() {
    return this._identifier;
  },
  set$_identifier: function(v) {
    this._identifier = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._prefix;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ".";
    t1 = this._identifier;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._prefix.get$beginToken();
  },
  get$element: function() {
    var t1 = this._identifier;
    if (t1 == null)
      return;
    return t1.get$element();
  },
  get$endToken: function() {
    return this._identifier.get$endToken();
  },
  get$identifier: function() {
    return this._identifier;
  },
  get$name: function(_) {
    return $.S($.get$name$x(this._prefix)) + "." + $.S($.get$name$x(this._identifier));
  },
  $isPrefixedIdentifier: true
},

"+PrefixedIdentifier": 0,

PropertyAccess: {
  "": function PropertyAccess(_liblib4$_target, _operator, _propertyName, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_target = _liblib4$_target;
    this._operator = _operator;
    this._propertyName = _propertyName;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_liblib4$_target: function() {
    return this._liblib4$_target;
  },
  set$_liblib4$_target: function(v) {
    this._liblib4$_target = v;
  },
  get$_operator: function() {
    return this._operator;
  },
  set$_operator: function(v) {
    this._operator = v;
  },
  get$_propertyName: function() {
    return this._propertyName;
  },
  set$_propertyName: function(v) {
    this._propertyName = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._operator;
    if (t1 != null && $.get$type$x(t1) === $.get$TokenType_PERIOD_PERIOD()) {
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + "..";
    } else {
      t1 = this._liblib4$_target;
      if (t1 != null)
        $.accept$1$x(t1, visitor);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + ".";
    }
    t1 = this._propertyName;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    var t1 = this._liblib4$_target;
    if (t1 != null)
      return t1.get$beginToken();
    return this._operator;
  },
  get$endToken: function() {
    return this._propertyName.get$endToken();
  },
  get$target: function(_) {
    return this._liblib4$_target;
  },
  isAssignable$0: function() {
    return true;
  },
  $isPropertyAccess: true
},

"+PropertyAccess": 0,

RedirectingConstructorInvocation: {
  "": function RedirectingConstructorInvocation(_keyword, _period, _constructorName, _argumentList, _staticElement, _propagatedElement, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._period = _period;
    this._constructorName = _constructorName;
    this._argumentList = _argumentList;
    this._staticElement = _staticElement;
    this._propagatedElement = _propagatedElement;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ConstructorInitializer",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_period: function() {
    return this._period;
  },
  set$_period: function(v) {
    this._period = v;
  },
  get$_constructorName: function() {
    return this._constructorName;
  },
  set$_constructorName: function(v) {
    this._constructorName = v;
  },
  get$_argumentList: function() {
    return this._argumentList;
  },
  set$_argumentList: function(v) {
    this._argumentList = v;
  },
  get$_staticElement: function() {
    return this._staticElement;
  },
  set$_staticElement: function(v) {
    this._staticElement = v;
  },
  get$_propagatedElement: function() {
    return this._propagatedElement;
  },
  set$_propagatedElement: function(v) {
    this._propagatedElement = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "this";
    t1 = this._constructorName;
    if (t1 != null) {
      t2 = visitor._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, ".");
      $.accept$1$x(t1, visitor);
    }
    t1 = this._argumentList;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$element: function() {
    return this._propagatedElement;
  },
  get$endToken: function() {
    return this._argumentList.get$endToken();
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  }
},

"+RedirectingConstructorInvocation": 0,

RethrowExpression: {
  "": function RethrowExpression(_keyword, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "rethrow";
    return;
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$endToken: function() {
    return this._keyword;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  }
},

"+RethrowExpression": 0,

ReturnStatement: {
  "": function ReturnStatement(_keyword, _expression, _semicolon, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._expression = _expression;
    this._semicolon = _semicolon;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_expression: function() {
    return this._expression;
  },
  set$_expression: function(v) {
    this._expression = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    return visitor.visitReturnStatement$1(this);
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$endToken: function() {
    return this._semicolon;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  }
},

"+ReturnStatement": 0,

ScriptTag: {
  "": function ScriptTag(_scriptTag, _liblib4$_parent, _propertyMap, hashCode) {
    this._scriptTag = _scriptTag;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_scriptTag: function() {
    return this._scriptTag;
  },
  set$_scriptTag: function(v) {
    this._scriptTag = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t2 = this._scriptTag.get$lexeme();
    if (typeof t2 !== "string")
      return this.accept$1$bailout1(1, t1, t2);
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + t2;
    return;
  },
  accept$1$bailout1: function(state0, t1, t2) {
    var str;
    t1.print$1;
    t1 = t1._sb;
    str = typeof t2 === "string" ? t2 : $.S(t2);
    t1._contents = t1._contents + str;
    return;
  },
  get$beginToken: function() {
    return this._scriptTag;
  },
  get$endToken: function() {
    return this._scriptTag;
  }
},

"+ScriptTag": 0,

ShowCombinator: {
  "": function ShowCombinator(_shownNames, _keyword, _liblib4$_parent, _propertyMap, hashCode) {
    this._shownNames = _shownNames;
    this._keyword = _keyword;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Combinator",
  get$_shownNames: function() {
    return this._shownNames;
  },
  set$_shownNames: function(v) {
    this._shownNames = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "show ";
    visitor.visitList2$2(this._shownNames, ", ");
    return;
  },
  get$endToken: function() {
    return this._shownNames.get$endToken();
  }
},

"+ShowCombinator": 0,

SimpleFormalParameter: {
  "": function SimpleFormalParameter(_keyword, _liblib4$_type, _comment, _metadata, _identifier, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._liblib4$_type = _liblib4$_type;
    this._comment = _comment;
    this._metadata = _metadata;
    this._identifier = _identifier;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "NormalFormalParameter",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_liblib4$_type: function() {
    return this._liblib4$_type;
  },
  set$_liblib4$_type: function(v) {
    this._liblib4$_type = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._keyword;
    if (t1 != null) {
      t2 = visitor._writer;
      t1 = t1.get$lexeme();
      if (typeof t1 !== "string")
        return this.accept$1$bailout1(1, visitor, t2, t1);
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, t1);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
    }
    t1 = this._liblib4$_type;
    if (t1 != null) {
      $.accept$1$x(t1, visitor);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
    }
    t1 = this._identifier;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  accept$1$bailout1: function(state0, visitor, t2, t1) {
    switch (state0) {
      case 0:
        t1 = this._keyword;
      case 1:
        var str;
        if (state0 === 1 || state0 === 0 && t1 != null)
          switch (state0) {
            case 0:
              t2 = visitor._writer;
              t1 = t1.get$lexeme();
            case 1:
              state0 = 0;
              t2.print$1;
              t2 = t2._sb;
              str = typeof t1 === "string" ? t1 : $.S(t1);
              t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, str);
              t1 = visitor._writer;
              t1.print$1;
              t1 = t1._sb;
              t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
          }
        t1 = this._liblib4$_type;
        if (t1 != null) {
          $.accept$1$x(t1, visitor);
          t1 = visitor._writer;
          t1.print$1;
          t1 = t1._sb;
          t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
        }
        t1 = this._identifier;
        if (t1 != null)
          $.accept$1$x(t1, visitor);
        return;
    }
  },
  get$beginToken: function() {
    var t1 = this._keyword;
    if (t1 != null)
      return t1;
    else {
      t1 = this._liblib4$_type;
      if (t1 != null)
        return t1.get$beginToken();
    }
    return this._identifier.get$beginToken();
  },
  get$endToken: function() {
    return this._identifier.get$endToken();
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$type: function(_) {
    return this._liblib4$_type;
  },
  set$type: function(_, typeName) {
    if (typeName != null)
      $.set$parent$x(typeName, this);
    this._liblib4$_type = typeName;
  }
},

"+SimpleFormalParameter": 0,

SimpleIdentifier: {
  "": function SimpleIdentifier(_liblib4$_token, _staticElement, _propagatedElement, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_token = _liblib4$_token;
    this._staticElement = _staticElement;
    this._propagatedElement = _propagatedElement;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Identifier",
  get$_liblib4$_token: function() {
    return this._liblib4$_token;
  },
  set$_liblib4$_token: function(v) {
    this._liblib4$_token = v;
  },
  get$_staticElement: function() {
    return this._staticElement;
  },
  set$_staticElement: function(v) {
    this._staticElement = v;
  },
  get$_propagatedElement: function() {
    return this._propagatedElement;
  },
  set$_propagatedElement: function(v) {
    this._propagatedElement = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t2 = this._liblib4$_token.get$lexeme();
    if (typeof t2 !== "string")
      return this.accept$1$bailout1(1, t1, t2);
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + t2;
    return;
  },
  accept$1$bailout1: function(state0, t1, t2) {
    var str;
    t1.print$1;
    t1 = t1._sb;
    str = typeof t2 === "string" ? t2 : $.S(t2);
    t1._contents = t1._contents + str;
    return;
  },
  get$beginToken: function() {
    return this._liblib4$_token;
  },
  get$element: function() {
    return this._propagatedElement;
  },
  get$endToken: function() {
    return this._liblib4$_token;
  },
  get$name: function(_) {
    return this._liblib4$_token.get$lexeme();
  },
  $isSimpleIdentifier: true
},

"+SimpleIdentifier": 0,

SimpleStringLiteral: {
  "": function SimpleStringLiteral(_literal, _liblib4$_value, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._literal = _literal;
    this._liblib4$_value = _liblib4$_value;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "StringLiteral",
  get$_literal: function() {
    return this._literal;
  },
  set$_literal: function(v) {
    this._literal = v;
  },
  get$_liblib4$_value: function() {
    return this._liblib4$_value;
  },
  set$_liblib4$_value: function(v) {
    this._liblib4$_value = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t2 = this._literal.get$lexeme();
    if (typeof t2 !== "string")
      return this.accept$1$bailout1(1, t1, t2);
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + t2;
    return;
  },
  accept$1$bailout1: function(state0, t1, t2) {
    var str;
    t1.print$1;
    t1 = t1._sb;
    str = typeof t2 === "string" ? t2 : $.S(t2);
    t1._contents = t1._contents + str;
    return;
  },
  get$beginToken: function() {
    return this._literal;
  },
  get$endToken: function() {
    return this._literal;
  },
  get$value: function(_) {
    return this._liblib4$_value;
  },
  set$value: function(_, string) {
    this._liblib4$_value = this._liblib4$_value;
  },
  $isSimpleStringLiteral: true
},

"+SimpleStringLiteral": 0,

Statement: {
  "": function Statement() {
  },
  "super": "ASTNode"
},

"+Statement": 0,

StringInterpolation: {
  "": function StringInterpolation(_liblib4$_elements, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_elements = _liblib4$_elements;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "StringLiteral",
  get$_liblib4$_elements: function() {
    return this._liblib4$_elements;
  },
  set$_liblib4$_elements: function(v) {
    this._liblib4$_elements = v;
  },
  accept$1: function(_, visitor) {
    visitor.visitList2$2(this._liblib4$_elements, "");
    return;
  },
  get$beginToken: function() {
    return this._liblib4$_elements.get$beginToken();
  },
  get$elements: function(_) {
    return this._liblib4$_elements;
  },
  get$endToken: function() {
    return this._liblib4$_elements.get$endToken();
  }
},

"+StringInterpolation": 0,

StringLiteral: {
  "": function StringLiteral() {
  },
  "super": "Literal"
},

"+StringLiteral": 0,

SuperConstructorInvocation: {
  "": function SuperConstructorInvocation(_keyword, _period, _constructorName, _argumentList, _staticElement, _propagatedElement, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._period = _period;
    this._constructorName = _constructorName;
    this._argumentList = _argumentList;
    this._staticElement = _staticElement;
    this._propagatedElement = _propagatedElement;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ConstructorInitializer",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_period: function() {
    return this._period;
  },
  set$_period: function(v) {
    this._period = v;
  },
  get$_constructorName: function() {
    return this._constructorName;
  },
  set$_constructorName: function(v) {
    this._constructorName = v;
  },
  get$_argumentList: function() {
    return this._argumentList;
  },
  set$_argumentList: function(v) {
    this._argumentList = v;
  },
  get$_staticElement: function() {
    return this._staticElement;
  },
  set$_staticElement: function(v) {
    this._staticElement = v;
  },
  get$_propagatedElement: function() {
    return this._propagatedElement;
  },
  set$_propagatedElement: function(v) {
    this._propagatedElement = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "super";
    t1 = this._constructorName;
    if (t1 != null) {
      t2 = visitor._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, ".");
      $.accept$1$x(t1, visitor);
    }
    t1 = this._argumentList;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$element: function() {
    return this._propagatedElement;
  },
  get$endToken: function() {
    return this._argumentList.get$endToken();
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  }
},

"+SuperConstructorInvocation": 0,

SuperExpression: {
  "": function SuperExpression(_keyword, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "super";
    return;
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$endToken: function() {
    return this._keyword;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  }
},

"+SuperExpression": 0,

SwitchCase: {
  "": function SwitchCase(_expression, _labels, _keyword, _colon, _statements, _liblib4$_parent, _propertyMap, hashCode) {
    this._expression = _expression;
    this._labels = _labels;
    this._keyword = _keyword;
    this._colon = _colon;
    this._statements = _statements;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "SwitchMember",
  get$_expression: function() {
    return this._expression;
  },
  set$_expression: function(v) {
    this._expression = v;
  },
  accept$1: function(_, visitor) {
    var t1;
    visitor.visitList3$3(this._labels, " ", " ");
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "case ";
    t1 = this._expression;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ": ";
    visitor.visitList2$2(this._statements, " ");
    return;
  }
},

"+SwitchCase": 0,

SwitchDefault: {
  "": function SwitchDefault(_labels, _keyword, _colon, _statements, _liblib4$_parent, _propertyMap, hashCode) {
    this._labels = _labels;
    this._keyword = _keyword;
    this._colon = _colon;
    this._statements = _statements;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "SwitchMember",
  accept$1: function(_, visitor) {
    var t1;
    visitor.visitList3$3(this._labels, " ", " ");
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "default: ";
    visitor.visitList2$2(this._statements, " ");
    return;
  }
},

"+SwitchDefault": 0,

SwitchMember: {
  "": function SwitchMember(_labels, _keyword, _colon, _statements) {
    this._labels = _labels;
    this._keyword = _keyword;
    this._colon = _colon;
    this._statements = _statements;
  },
  "super": "ASTNode",
  get$_labels: function() {
    return this._labels;
  },
  set$_labels: function(v) {
    this._labels = v;
  },
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_colon: function() {
    return this._colon;
  },
  set$_colon: function(v) {
    this._colon = v;
  },
  get$_statements: function() {
    return this._statements;
  },
  set$_statements: function(v) {
    this._statements = v;
  },
  get$beginToken: function() {
    var t1 = this._labels;
    if (!t1.get$isEmpty(t1))
      return this._labels.get$beginToken();
    return this._keyword;
  },
  get$endToken: function() {
    var t1 = this._statements;
    if (!t1.get$isEmpty(t1))
      return this._statements.get$endToken();
    return this._colon;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  SwitchMember$full$4: function(labels, keyword, colon, statements) {
    var t1, t2, t3, t4;
    t1 = $.Label;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._labels = t2;
    t1 = $.Statement;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._statements = t2;
    t1 = this._labels;
    t1.addAll$1(t1, labels);
    this._keyword = keyword;
    this._colon = colon;
    t1 = this._statements;
    t1.addAll$1(t1, statements);
  }
},

"+SwitchMember": 0,

SwitchStatement: {
  "": function SwitchStatement(_keyword, _leftParenthesis, _expression, _rightParenthesis, _leftBracket, _members, _rightBracket, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._leftParenthesis = _leftParenthesis;
    this._expression = _expression;
    this._rightParenthesis = _rightParenthesis;
    this._leftBracket = _leftBracket;
    this._members = _members;
    this._rightBracket = _rightBracket;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_leftParenthesis: function() {
    return this._leftParenthesis;
  },
  set$_leftParenthesis: function(v) {
    this._leftParenthesis = v;
  },
  get$_expression: function() {
    return this._expression;
  },
  set$_expression: function(v) {
    this._expression = v;
  },
  get$_rightParenthesis: function() {
    return this._rightParenthesis;
  },
  set$_rightParenthesis: function(v) {
    this._rightParenthesis = v;
  },
  get$_leftBracket: function() {
    return this._leftBracket;
  },
  set$_leftBracket: function(v) {
    this._leftBracket = v;
  },
  get$_members: function() {
    return this._members;
  },
  set$_members: function(v) {
    this._members = v;
  },
  get$_rightBracket: function() {
    return this._rightBracket;
  },
  set$_rightBracket: function(v) {
    this._rightBracket = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "switch (";
    t1 = this._expression;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ") {";
    visitor.visitList2$2(this._members, " ");
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "}";
    return;
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$endToken: function() {
    return this._rightBracket;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  SwitchStatement$full$7: function(keyword, leftParenthesis, expression, rightParenthesis, leftBracket, members, rightBracket) {
    var t1, t2, t3, t4;
    t1 = $.SwitchMember;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._members = t2;
    this._keyword = keyword;
    this._leftParenthesis = leftParenthesis;
    if (expression != null)
      $.set$parent$x(expression, this);
    this._expression = expression;
    this._rightParenthesis = rightParenthesis;
    this._leftBracket = leftBracket;
    t1 = this._members;
    t1.addAll$1(t1, members);
    this._rightBracket = rightBracket;
  }
},

"+SwitchStatement": 0,

ThisExpression: {
  "": function ThisExpression(_keyword, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "this";
    return;
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$endToken: function() {
    return this._keyword;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  }
},

"+ThisExpression": 0,

ThrowExpression: {
  "": function ThrowExpression(_keyword, _expression, _staticType, _propagatedType, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._expression = _expression;
    this._staticType = _staticType;
    this._propagatedType = _propagatedType;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Expression",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_expression: function() {
    return this._expression;
  },
  set$_expression: function(v) {
    this._expression = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "throw ";
    t1 = this._expression;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$endToken: function() {
    var t1 = this._expression;
    if (t1 != null)
      return t1.get$endToken();
    return this._keyword;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  }
},

"+ThrowExpression": 0,

TopLevelVariableDeclaration: {
  "": function TopLevelVariableDeclaration(_variableList, _semicolon, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._variableList = _variableList;
    this._semicolon = _semicolon;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "CompilationUnitMember",
  get$_variableList: function() {
    return this._variableList;
  },
  set$_variableList: function(v) {
    this._variableList = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._variableList;
    if (t1 != null) {
      $.accept$1$x(t1, visitor);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, ";");
    }
    return;
  },
  get$element: function() {
    return;
  },
  get$endToken: function() {
    return this._semicolon;
  },
  get$variables: function() {
    return this._variableList;
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    return this._variableList.get$beginToken();
  },
  $isTopLevelVariableDeclaration: true
},

"+TopLevelVariableDeclaration": 0,

TryStatement: {
  "": function TryStatement(_tryKeyword, _body, _catchClauses, _finallyKeyword, _finallyClause, _liblib4$_parent, _propertyMap, hashCode) {
    this._tryKeyword = _tryKeyword;
    this._body = _body;
    this._catchClauses = _catchClauses;
    this._finallyKeyword = _finallyKeyword;
    this._finallyClause = _finallyClause;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_tryKeyword: function() {
    return this._tryKeyword;
  },
  set$_tryKeyword: function(v) {
    this._tryKeyword = v;
  },
  get$_body: function() {
    return this._body;
  },
  set$_body: function(v) {
    this._body = v;
  },
  get$_catchClauses: function() {
    return this._catchClauses;
  },
  set$_catchClauses: function(v) {
    this._catchClauses = v;
  },
  get$_finallyKeyword: function() {
    return this._finallyKeyword;
  },
  set$_finallyKeyword: function(v) {
    this._finallyKeyword = v;
  },
  get$_finallyClause: function() {
    return this._finallyClause;
  },
  set$_finallyClause: function(v) {
    this._finallyClause = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "try ";
    t1 = this._body;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    visitor.visitList4$3(" ", this._catchClauses, " ");
    t1 = this._finallyClause;
    if (t1 != null) {
      t2 = visitor._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, " finally ");
      $.accept$1$x(t1, visitor);
    }
    return;
  },
  get$beginToken: function() {
    return this._tryKeyword;
  },
  get$endToken: function() {
    var t1 = this._finallyClause;
    if (t1 != null)
      return t1.get$endToken();
    else {
      t1 = this._finallyKeyword;
      if (t1 != null)
        return t1;
      else {
        t1 = this._catchClauses;
        if (!t1.get$isEmpty(t1))
          return this._catchClauses.get$endToken();
      }
    }
    return this._body.get$endToken();
  },
  TryStatement$full$5: function(tryKeyword, body, catchClauses, finallyKeyword, finallyClause) {
    var t1, t2, t3, t4;
    t1 = $.CatchClause;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._catchClauses = t2;
    this._tryKeyword = tryKeyword;
    body.set$parent(body, this);
    this._body = body;
    t1 = this._catchClauses;
    t1.addAll$1(t1, catchClauses);
    this._finallyKeyword = finallyKeyword;
    if (finallyClause != null)
      finallyClause.set$parent(finallyClause, this);
    this._finallyClause = finallyClause;
  }
},

"+TryStatement": 0,

TypeAlias: {
  "": function TypeAlias(_keyword, _semicolon) {
    this._keyword = _keyword;
    this._semicolon = _semicolon;
  },
  "super": "CompilationUnitMember",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  get$endToken: function() {
    return this._semicolon;
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    return this._keyword;
  }
},

"+TypeAlias": 0,

TypeArgumentList: {
  "": function TypeArgumentList(_leftBracket, _liblib4$_arguments, _rightBracket, _liblib4$_parent, _propertyMap, hashCode) {
    this._leftBracket = _leftBracket;
    this._liblib4$_arguments = _liblib4$_arguments;
    this._rightBracket = _rightBracket;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_leftBracket: function() {
    return this._leftBracket;
  },
  set$_leftBracket: function(v) {
    this._leftBracket = v;
  },
  get$_liblib4$_arguments: function() {
    return this._liblib4$_arguments;
  },
  set$_liblib4$_arguments: function(v) {
    this._liblib4$_arguments = v;
  },
  get$_rightBracket: function() {
    return this._rightBracket;
  },
  set$_rightBracket: function(v) {
    this._rightBracket = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "<";
    visitor.visitList2$2(this._liblib4$_arguments, ", ");
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ">";
    return;
  },
  get$beginToken: function() {
    return this._leftBracket;
  },
  get$endToken: function() {
    return this._rightBracket;
  }
},

"+TypeArgumentList": 0,

TypeName: {
  "": function TypeName(_liblib4$_name, _typeArguments, _liblib4$_type, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_name = _liblib4$_name;
    this._typeArguments = _typeArguments;
    this._liblib4$_type = _liblib4$_type;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_liblib4$_name: function() {
    return this._liblib4$_name;
  },
  set$_liblib4$_name: function(v) {
    this._liblib4$_name = v;
  },
  get$_typeArguments: function() {
    return this._typeArguments;
  },
  set$_typeArguments: function(v) {
    this._typeArguments = v;
  },
  get$_liblib4$_type: function() {
    return this._liblib4$_type;
  },
  set$_liblib4$_type: function(v) {
    this._liblib4$_type = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._liblib4$_name;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = this._typeArguments;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._liblib4$_name.get$beginToken();
  },
  get$endToken: function() {
    var t1 = this._typeArguments;
    if (t1 != null)
      return t1.get$endToken();
    return this._liblib4$_name.get$endToken();
  },
  get$name: function(_) {
    return this._liblib4$_name;
  },
  get$type: function(_) {
    return this._liblib4$_type;
  },
  set$type: function(_, type2) {
    this._liblib4$_type = type2;
  }
},

"+TypeName": 0,

TypeParameter: {
  "": function TypeParameter(_liblib4$_name, _keyword, _bound, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_name = _liblib4$_name;
    this._keyword = _keyword;
    this._bound = _bound;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Declaration",
  get$_liblib4$_name: function() {
    return this._liblib4$_name;
  },
  set$_liblib4$_name: function(v) {
    this._liblib4$_name = v;
  },
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_bound: function() {
    return this._bound;
  },
  set$_bound: function(v) {
    this._bound = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._liblib4$_name;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = this._bound;
    if (t1 != null) {
      t2 = visitor._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, " extends ");
      $.accept$1$x(t1, visitor);
    }
    return;
  },
  get$element: function() {
    var t1 = this._liblib4$_name;
    return t1 != null ? $.propertyTypeCast(t1.get$element(), "$isTypeVariableElement") : null;
  },
  get$endToken: function() {
    var t1 = this._bound;
    if (t1 == null)
      return this._liblib4$_name.get$endToken();
    return t1.get$endToken();
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$name: function(_) {
    return this._liblib4$_name;
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    return this._liblib4$_name.get$beginToken();
  }
},

"+TypeParameter": 0,

TypeParameterList: {
  "": function TypeParameterList(_leftBracket, _typeParameters, _rightBracket, _liblib4$_parent, _propertyMap, hashCode) {
    this._leftBracket = _leftBracket;
    this._typeParameters = _typeParameters;
    this._rightBracket = _rightBracket;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_leftBracket: function() {
    return this._leftBracket;
  },
  set$_leftBracket: function(v) {
    this._leftBracket = v;
  },
  get$_typeParameters: function() {
    return this._typeParameters;
  },
  set$_typeParameters: function(v) {
    this._typeParameters = v;
  },
  get$_rightBracket: function() {
    return this._rightBracket;
  },
  set$_rightBracket: function(v) {
    this._rightBracket = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "<";
    visitor.visitList2$2(this._typeParameters, ", ");
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ">";
    return;
  },
  get$beginToken: function() {
    return this._leftBracket;
  },
  get$endToken: function() {
    return this._rightBracket;
  }
},

"+TypeParameterList": 0,

TypedLiteral: {
  "": function TypedLiteral(_modifier, _typeArguments) {
    this._modifier = _modifier;
    this._typeArguments = _typeArguments;
  },
  "super": "Literal",
  get$_modifier: function() {
    return this._modifier;
  },
  set$_modifier: function(v) {
    this._modifier = v;
  },
  get$_typeArguments: function() {
    return this._typeArguments;
  },
  set$_typeArguments: function(v) {
    this._typeArguments = v;
  }
},

"+TypedLiteral": 0,

UriBasedDirective: {
  "": function UriBasedDirective(_uri) {
    this._uri = _uri;
  },
  "super": "Directive",
  get$_uri: function() {
    return this._uri;
  },
  set$_uri: function(v) {
    this._uri = v;
  },
  $isUriBasedDirective: true
},

"+UriBasedDirective": 0,

VariableDeclaration: {
  "": function VariableDeclaration(_liblib4$_name, _equals, _initializer, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._liblib4$_name = _liblib4$_name;
    this._equals = _equals;
    this._initializer = _initializer;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Declaration",
  get$_liblib4$_name: function() {
    return this._liblib4$_name;
  },
  set$_liblib4$_name: function(v) {
    this._liblib4$_name = v;
  },
  get$_equals: function() {
    return this._equals;
  },
  set$_equals: function(v) {
    this._equals = v;
  },
  get$_initializer: function() {
    return this._initializer;
  },
  set$_initializer: function(v) {
    this._initializer = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._liblib4$_name;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = this._initializer;
    if (t1 != null) {
      t2 = visitor._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, " = ");
      $.accept$1$x(t1, visitor);
    }
    return;
  },
  get$element: function() {
    var t1 = this._liblib4$_name;
    return t1 != null ? $.propertyTypeCast(t1.get$element(), "$isVariableElement") : null;
  },
  get$endToken: function() {
    var t1 = this._initializer;
    if (t1 != null)
      return t1.get$endToken();
    return this._liblib4$_name.get$endToken();
  },
  get$initializer: function() {
    return this._initializer;
  },
  get$name: function(_) {
    return this._liblib4$_name;
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    return this._liblib4$_name.get$beginToken();
  }
},

"+VariableDeclaration": 0,

VariableDeclarationList: {
  "": function VariableDeclarationList(_keyword, _liblib4$_type, _variables, _comment, _metadata, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._liblib4$_type = _liblib4$_type;
    this._variables = _variables;
    this._comment = _comment;
    this._metadata = _metadata;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "AnnotatedNode",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_liblib4$_type: function() {
    return this._liblib4$_type;
  },
  set$_liblib4$_type: function(v) {
    this._liblib4$_type = v;
  },
  get$_variables: function() {
    return this._variables;
  },
  set$_variables: function(v) {
    this._variables = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this._keyword;
    if (t1 != null) {
      t2 = visitor._writer;
      t1 = t1.get$lexeme();
      if (typeof t1 !== "string")
        return this.accept$1$bailout1(1, visitor, t2, t1);
      t2.print$1;
      t2 = t2._sb;
      t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, t1);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
    }
    t1 = this._liblib4$_type;
    if (t1 != null) {
      $.accept$1$x(t1, visitor);
      t1 = visitor._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
    }
    visitor.visitList2$2(this._variables, ", ");
    return;
  },
  accept$1$bailout1: function(state0, visitor, t2, t1) {
    switch (state0) {
      case 0:
        t1 = this._keyword;
      case 1:
        var str;
        if (state0 === 1 || state0 === 0 && t1 != null)
          switch (state0) {
            case 0:
              t2 = visitor._writer;
              t1 = t1.get$lexeme();
            case 1:
              state0 = 0;
              t2.print$1;
              t2 = t2._sb;
              str = typeof t1 === "string" ? t1 : $.S(t1);
              t2._contents = $.Primitives_stringConcatUnchecked(t2._contents, str);
              t1 = visitor._writer;
              t1.print$1;
              t1 = t1._sb;
              t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
          }
        t1 = this._liblib4$_type;
        if (t1 != null) {
          $.accept$1$x(t1, visitor);
          t1 = visitor._writer;
          t1.print$1;
          t1 = t1._sb;
          t1._contents = $.Primitives_stringConcatUnchecked(t1._contents, " ");
        }
        visitor.visitList2$2(this._variables, ", ");
        return;
    }
  },
  get$endToken: function() {
    return this._variables.get$endToken();
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$type: function(_) {
    return this._liblib4$_type;
  },
  get$variables: function() {
    return this._variables;
  },
  set$type: function(_, typeName) {
    if (typeName != null)
      $.set$parent$x(typeName, this);
    this._liblib4$_type = typeName;
  },
  get$firstTokenAfterCommentAndMetadata: function() {
    var t1 = this._keyword;
    if (t1 != null)
      return t1;
    else {
      t1 = this._liblib4$_type;
      if (t1 != null)
        return t1.get$beginToken();
    }
    return this._variables.get$beginToken();
  },
  VariableDeclarationList$full$5: function(comment, metadata, keyword, type, variables) {
    var t1, t2, t3, t4;
    t1 = $.VariableDeclaration;
    t2 = $.List_List($, t1);
    t2.$builtinTypeInfo = [t1];
    t3 = t1;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t2 = new $.NodeList(this, t2, t4);
    t2.$builtinTypeInfo = [t1];
    this._variables = t2;
    this._keyword = keyword;
    if (type != null)
      type.set$parent(type, this);
    this._liblib4$_type = type;
    t1 = this._variables;
    t1.addAll$1(t1, variables);
  }
},

"+VariableDeclarationList": 0,

VariableDeclarationStatement: {
  "": function VariableDeclarationStatement(_variableList, _semicolon, _liblib4$_parent, _propertyMap, hashCode) {
    this._variableList = _variableList;
    this._semicolon = _semicolon;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_variableList: function() {
    return this._variableList;
  },
  set$_variableList: function(v) {
    this._variableList = v;
  },
  get$_semicolon: function() {
    return this._semicolon;
  },
  set$_semicolon: function(v) {
    this._semicolon = v;
  },
  accept$1: function(_, visitor) {
    var t1 = this._variableList;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  get$beginToken: function() {
    return this._variableList.get$beginToken();
  },
  get$endToken: function() {
    return this._semicolon;
  },
  get$variables: function() {
    return this._variableList;
  }
},

"+VariableDeclarationStatement": 0,

WhileStatement: {
  "": function WhileStatement(_keyword, _leftParenthesis, _condition, _rightParenthesis, _body, _liblib4$_parent, _propertyMap, hashCode) {
    this._keyword = _keyword;
    this._leftParenthesis = _leftParenthesis;
    this._condition = _condition;
    this._rightParenthesis = _rightParenthesis;
    this._body = _body;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "Statement",
  get$_keyword: function() {
    return this._keyword;
  },
  set$_keyword: function(v) {
    this._keyword = v;
  },
  get$_leftParenthesis: function() {
    return this._leftParenthesis;
  },
  set$_leftParenthesis: function(v) {
    this._leftParenthesis = v;
  },
  get$_condition: function() {
    return this._condition;
  },
  set$_condition: function(v) {
    this._condition = v;
  },
  get$_rightParenthesis: function() {
    return this._rightParenthesis;
  },
  set$_rightParenthesis: function(v) {
    this._rightParenthesis = v;
  },
  get$_body: function() {
    return this._body;
  },
  set$_body: function(v) {
    this._body = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "while (";
    t1 = this._condition;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ") ";
    t1 = this._body;
    if (t1 != null)
      $.accept$1$x(t1, visitor);
    return;
  },
  get$beginToken: function() {
    return this._keyword;
  },
  get$endToken: function() {
    return this._body.get$endToken();
  },
  get$keyword: function() {
    return this._keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  WhileStatement$full$5: function(keyword, leftParenthesis, condition, rightParenthesis, body) {
    this._keyword = keyword;
    this._leftParenthesis = leftParenthesis;
    if (condition != null)
      $.set$parent$x(condition, this);
    this._condition = condition;
    this._rightParenthesis = rightParenthesis;
    if (body != null)
      body.set$parent(body, this);
    this._body = body;
  }
},

"+WhileStatement": 0,

WithClause: {
  "": function WithClause(_withKeyword, _mixinTypes, _liblib4$_parent, _propertyMap, hashCode) {
    this._withKeyword = _withKeyword;
    this._mixinTypes = _mixinTypes;
    this._liblib4$_parent = _liblib4$_parent;
    this._propertyMap = _propertyMap;
    this.hashCode = hashCode;
  },
  "super": "ASTNode",
  get$_withKeyword: function() {
    return this._withKeyword;
  },
  set$_withKeyword: function(v) {
    this._withKeyword = v;
  },
  get$_mixinTypes: function() {
    return this._mixinTypes;
  },
  set$_mixinTypes: function(v) {
    this._mixinTypes = v;
  },
  accept$1: function(_, visitor) {
    var t1 = visitor._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "with ";
    visitor.visitList2$2(this._mixinTypes, ", ");
    return;
  },
  get$beginToken: function() {
    return this._withKeyword;
  },
  get$endToken: function() {
    return this._mixinTypes.get$endToken();
  }
},

"+WithClause": 0,

ToSourceVisitor: {
  "": function ToSourceVisitor(_writer) {
    this._writer = _writer;
  },
  "super": "Object",
  get$_writer: function() {
    return this._writer;
  },
  set$_writer: function(v) {
    this._writer = v;
  },
  visitCatchClause$1: function(node) {
    var t1, t2;
    t1 = node._exceptionType;
    if (t1 != null) {
      t2 = this._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = t2._contents + "on ";
      $.accept$1$x(t1, this);
    }
    if (node._catchKeyword != null) {
      if (node._exceptionType != null) {
        t1 = this._writer;
        t1.print$1;
        t1 = t1._sb;
        t1._contents = t1._contents + " ";
      }
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + "catch (";
      t1 = node._exceptionParameter;
      if (t1 != null)
        $.accept$1$x(t1, this);
      t1 = node._stackTraceParameter;
      if (t1 != null) {
        t2 = this._writer;
        t2.print$1;
        t2 = t2._sb;
        t2._contents = t2._contents + ", ";
        $.accept$1$x(t1, this);
      }
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + ") ";
    } else {
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = node._body;
    if (t1 != null)
      $.accept$1$x(t1, this);
    return;
  },
  "+visitCatchClause:1:0": 0,
  visitClassDeclaration$1: function(node) {
    var t1, t2, str;
    t1 = node._abstractKeyword;
    if (t1 != null) {
      t2 = this._writer;
      str = t1.get$lexeme();
      t2.print$1;
      t2 = t2._sb;
      str = typeof str === "string" ? str : $.S(str);
      t2._contents = t2._contents + str;
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "class ";
    t1 = node._liblib4$_name;
    if (t1 != null)
      $.accept$1$x(t1, this);
    t1 = node._typeParameters;
    if (t1 != null)
      $.accept$1$x(t1, this);
    t1 = node._extendsClause;
    if (t1 != null) {
      t2 = this._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = t2._contents + " ";
      $.accept$1$x(t1, this);
    }
    t1 = node._withClause;
    if (t1 != null) {
      t2 = this._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = t2._contents + " ";
      $.accept$1$x(t1, this);
    }
    t1 = node._implementsClause;
    if (t1 != null) {
      t2 = this._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = t2._contents + " ";
      $.accept$1$x(t1, this);
    }
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " {";
    this.visitList2$2(node._members, " ");
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "}";
    return;
  },
  "+visitClassDeclaration:1:0": 0,
  visitClassTypeAlias$1: function(node) {
    var t1, t2;
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "typedef ";
    t1 = node._liblib4$_name;
    if (t1 != null)
      $.accept$1$x(t1, this);
    t1 = node._typeParameters;
    if (t1 != null)
      $.accept$1$x(t1, this);
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " = ";
    if (node._abstractKeyword != null) {
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + "abstract ";
    }
    t1 = node._superclass;
    if (t1 != null)
      $.accept$1$x(t1, this);
    t1 = node._withClause;
    if (t1 != null) {
      t2 = this._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = t2._contents + " ";
      $.accept$1$x(t1, this);
    }
    t1 = node._implementsClause;
    if (t1 != null) {
      t2 = this._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = t2._contents + " ";
      $.accept$1$x(t1, this);
    }
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  "+visitClassTypeAlias:1:0": 0,
  visitCompilationUnit$1: function(node) {
    var scriptTag2, directives2, t1, prefix;
    scriptTag2 = node._scriptTag;
    directives2 = node._directives;
    t1 = scriptTag2 == null;
    if (!t1)
      $.accept$1$x(scriptTag2, this);
    this.visitList4$3(t1 ? "" : " ", directives2, " ");
    prefix = t1 && directives2.get$isEmpty(directives2) ? "" : " ";
    this.visitList4$3(prefix, node._declarations, " ");
    return;
  },
  "+visitCompilationUnit:1:0": 0,
  visitConstructorDeclaration$1: function(node) {
    var t1, t2, str;
    t1 = node._liblib4$_externalKeyword;
    if (t1 != null) {
      t2 = this._writer;
      str = t1.get$lexeme();
      t2.print$1;
      t2 = t2._sb;
      str = typeof str === "string" ? str : $.S(str);
      t2._contents = t2._contents + str;
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = node._liblib4$_constKeyword;
    if (t1 != null) {
      t2 = this._writer;
      str = t1.get$lexeme();
      t2.print$1;
      t2 = t2._sb;
      str = typeof str === "string" ? str : $.S(str);
      t2._contents = t2._contents + str;
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = node._factoryKeyword;
    if (t1 != null) {
      t2 = this._writer;
      str = t1.get$lexeme();
      t2.print$1;
      t2 = t2._sb;
      str = typeof str === "string" ? str : $.S(str);
      t2._contents = t2._contents + str;
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = node._returnType;
    if (t1 != null)
      $.accept$1$x(t1, this);
    t1 = node._liblib4$_name;
    if (t1 != null) {
      t2 = this._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = t2._contents + ".";
      $.accept$1$x(t1, this);
    }
    t1 = node._parameters;
    if (t1 != null)
      $.accept$1$x(t1, this);
    this.visitList4$3(" : ", node._initializers, ", ");
    t1 = node._redirectedConstructor;
    if (t1 != null) {
      t2 = this._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = t2._contents + " = ";
      $.accept$1$x(t1, this);
    }
    t1 = node._body;
    if (typeof t1 !== "object" || t1 === null || !$.getInterceptor(t1).$isEmptyFunctionBody) {
      t2 = this._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = t2._contents + " ";
    }
    if (t1 != null)
      $.accept$1$x(t1, this);
    return;
  },
  "+visitConstructorDeclaration:1:0": 0,
  visitDefaultFormalParameter$1: function(node) {
    var t1, str, t2;
    t1 = node._parameter;
    if (t1 != null)
      $.accept$1$x(t1, this);
    if (node._separator != null) {
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
      t1 = this._writer;
      str = node._separator.get$lexeme();
      t1.print$1;
      t1 = t1._sb;
      str = typeof str === "string" ? str : $.S(str);
      t1._contents = t1._contents + str;
      t1 = node._defaultValue;
      if (t1 != null) {
        t2 = this._writer;
        t2.print$1;
        t2 = t2._sb;
        t2._contents = t2._contents + " ";
        $.accept$1$x(t1, this);
      }
    }
    return;
  },
  "+visitDefaultFormalParameter:1:0": 0,
  visitForEachStatement$1: function(node) {
    var t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "for (";
    t1 = node._loopVariable;
    if (t1 != null)
      $.accept$1$x(t1, this);
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + " in ";
    t1 = node._liblib4$_iterator;
    if (t1 != null)
      $.accept$1$x(t1, this);
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ") ";
    t1 = node._body;
    if (t1 != null)
      $.accept$1$x(t1, this);
    return;
  },
  "+visitForEachStatement:1:0": 0,
  visitFormalParameterList$1: function(node) {
    var t1, parameters2, size2, groupEnd, i, parameter, t2, t3, t4, str;
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "(";
    parameters2 = node._parameters;
    parameters2.get$length;
    t1 = parameters2.elements;
    size2 = t1.length;
    for (groupEnd = null, i = 0; i < size2; ++i) {
      parameters2.$index;
      if (i >= t1.length)
        throw $.ioore(i);
      parameter = t1[i];
      if (i > 0) {
        t2 = this._writer;
        t2.print$1;
        t2 = t2._sb;
        t2._contents = t2._contents + ", ";
      }
      if (groupEnd == null && typeof parameter === "object" && parameter !== null && !!$.getInterceptor(parameter).$isDefaultFormalParameter) {
        t2 = parameter.get$_kind();
        t3 = $.get$ParameterKind_NAMED();
        t4 = this._writer;
        if (t2 === t3) {
          t4.print$1;
          t2 = t4._sb;
          t2._contents = t2._contents + "{";
          groupEnd = "}";
        } else {
          t4.print$1;
          t2 = t4._sb;
          t2._contents = t2._contents + "[";
          groupEnd = "]";
        }
      }
      $.accept$1$x(parameter, this);
    }
    if (groupEnd != null) {
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      str = typeof groupEnd === "string" ? groupEnd : groupEnd;
      t1._contents = t1._contents + str;
    }
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ")";
    return;
  },
  "+visitFormalParameterList:1:0": 0,
  visitForStatement$1: function(node) {
    var initialization2, t1, t2;
    initialization2 = node._initialization;
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "for (";
    t1 = initialization2 != null;
    if (t1) {
      if (t1)
        $.accept$1$x(initialization2, this);
    } else {
      t1 = node._variableList;
      if (t1 != null)
        $.accept$1$x(t1, this);
    }
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    t1 = node._condition;
    if (t1 != null) {
      t2 = this._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = t2._contents + " ";
      $.accept$1$x(t1, this);
    }
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    this.visitList4$3(" ", node._updaters, ", ");
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ") ";
    t1 = node._body;
    if (t1 != null)
      $.accept$1$x(t1, this);
    return;
  },
  "+visitForStatement:1:0": 0,
  visitFunctionTypeAlias$1: function(node) {
    var t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "typedef ";
    t1 = node._returnType;
    if (t1 != null) {
      $.accept$1$x(t1, this);
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = node._liblib4$_name;
    if (t1 != null)
      $.accept$1$x(t1, this);
    t1 = node._typeParameters;
    if (t1 != null)
      $.accept$1$x(t1, this);
    t1 = node._parameters;
    if (t1 != null)
      $.accept$1$x(t1, this);
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + ";";
    return;
  },
  "+visitFunctionTypeAlias:1:0": 0,
  visitIndexExpression$1: function(node) {
    var t1;
    if (node._period != null) {
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + "..";
    } else {
      t1 = node._liblib4$_target;
      if (t1 != null)
        $.accept$1$x(t1, this);
    }
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "[";
    t1 = node._liblib4$_index;
    if (t1 != null)
      $.accept$1$x(t1, this);
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "]";
    return;
  },
  "+visitIndexExpression:1:0": 0,
  visitInterpolationExpression$1: function(node) {
    var t1, t2;
    t1 = node._rightBracket;
    t2 = this._writer;
    if (t1 != null) {
      t2.print$1;
      t1 = t2._sb;
      t1._contents = t1._contents + "${";
      t1 = node._expression;
      if (t1 != null)
        $.accept$1$x(t1, this);
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + "}";
    } else {
      t2.print$1;
      t1 = t2._sb;
      t1._contents = t1._contents + "$";
      t1 = node._expression;
      if (t1 != null)
        $.accept$1$x(t1, this);
    }
    return;
  },
  "+visitInterpolationExpression:1:0": 0,
  visitIsExpression$1: function(node) {
    var t1, t2;
    t1 = node._expression;
    if (t1 != null)
      $.accept$1$x(t1, this);
    t1 = node._notOperator;
    t2 = this._writer;
    if (t1 == null) {
      t2.print$1;
      t1 = t2._sb;
      t1._contents = t1._contents + " is ";
    } else {
      t2.print$1;
      t1 = t2._sb;
      t1._contents = t1._contents + " is! ";
    }
    t1 = node._liblib4$_type;
    if (t1 != null)
      $.accept$1$x(t1, this);
    return;
  },
  "+visitIsExpression:1:0": 0,
  visitListLiteral$1: function(node) {
    var t1, t2, str;
    t1 = node._modifier;
    if (t1 != null) {
      t2 = this._writer;
      str = t1.get$lexeme();
      t2.print$1;
      t2 = t2._sb;
      str = typeof str === "string" ? str : $.S(str);
      t2._contents = t2._contents + str;
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = node._typeArguments;
    if (t1 != null) {
      $.accept$1$x(t1, this);
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "[";
    this.visitList2$2(node._liblib4$_elements, ", ");
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "]";
    return;
  },
  "+visitListLiteral:1:0": 0,
  visitMapLiteral$1: function(node) {
    var t1, t2, str;
    t1 = node._modifier;
    if (t1 != null) {
      t2 = this._writer;
      str = t1.get$lexeme();
      t2.print$1;
      t2 = t2._sb;
      str = typeof str === "string" ? str : $.S(str);
      t2._contents = t2._contents + str;
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = node._typeArguments;
    if (t1 != null) {
      $.accept$1$x(t1, this);
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "{";
    this.visitList2$2(node._entries, ", ");
    t1 = this._writer;
    t1.print$1;
    t1 = t1._sb;
    t1._contents = t1._contents + "}";
    return;
  },
  "+visitMapLiteral:1:0": 0,
  visitMethodDeclaration$1: function(node) {
    var t1, t2, str;
    t1 = node._liblib4$_externalKeyword;
    if (t1 != null) {
      t2 = this._writer;
      str = t1.get$lexeme();
      t2.print$1;
      t2 = t2._sb;
      str = typeof str === "string" ? str : $.S(str);
      t2._contents = t2._contents + str;
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = node._modifierKeyword;
    if (t1 != null) {
      t2 = this._writer;
      str = t1.get$lexeme();
      t2.print$1;
      t2 = t2._sb;
      str = typeof str === "string" ? str : $.S(str);
      t2._contents = t2._contents + str;
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = node._returnType;
    if (t1 != null) {
      $.accept$1$x(t1, this);
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = node._propertyKeyword;
    if (t1 != null) {
      t2 = this._writer;
      str = t1.get$lexeme();
      t2.print$1;
      t2 = t2._sb;
      str = typeof str === "string" ? str : $.S(str);
      t2._contents = t2._contents + str;
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = node._operatorKeyword;
    if (t1 != null) {
      t2 = this._writer;
      str = t1.get$lexeme();
      t2.print$1;
      t2 = t2._sb;
      str = typeof str === "string" ? str : $.S(str);
      t2._contents = t2._contents + str;
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + " ";
    }
    t1 = node._liblib4$_name;
    if (t1 != null)
      $.accept$1$x(t1, this);
    t1 = node._propertyKeyword;
    if (t1 != null) {
      $.propertyTypeCast(t1, "$isKeywordToken");
      t1.get$keyword;
      t1 = t1._liblib9$_keyword === $.get$Keyword_GET();
    } else
      t1 = false;
    if (!t1) {
      t1 = node._parameters;
      if (t1 != null)
        $.accept$1$x(t1, this);
    }
    t1 = node._body;
    if (typeof t1 !== "object" || t1 === null || !$.getInterceptor(t1).$isEmptyFunctionBody) {
      t2 = this._writer;
      t2.print$1;
      t2 = t2._sb;
      t2._contents = t2._contents + " ";
    }
    if (t1 != null)
      $.accept$1$x(t1, this);
    return;
  },
  "+visitMethodDeclaration:1:0": 0,
  visitReturnStatement$1: function(node) {
    var expression2, t1;
    expression2 = node._expression;
    t1 = this._writer;
    if (expression2 == null) {
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + "return;";
    } else {
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + "return ";
      $.accept$1$x(expression2, this);
      t1 = this._writer;
      t1.print$1;
      t1 = t1._sb;
      t1._contents = t1._contents + ";";
    }
    return;
  },
  "+visitReturnStatement:1:0": 0,
  visitList2$2: function(nodes, separator) {
    var t1, size2, i, t2;
    if (nodes != null) {
      nodes.get$length;
      t1 = nodes.elements;
      size2 = t1.length;
      for (i = 0; i < size2; ++i) {
        if (i > 0) {
          t2 = this._writer;
          t2.print$1;
          t2 = t2._sb;
          t2._contents = t2._contents + separator;
        }
        nodes.$index;
        if (i >= t1.length)
          throw $.ioore(i);
        $.accept$1$x(t1[i], this);
      }
    }
  },
  "+visitList2:2:0": 0,
  visitList3$3: function(nodes, separator, suffix) {
    var t1, size2, i, t2;
    if (nodes != null) {
      nodes.get$length;
      t1 = nodes.elements;
      size2 = t1.length;
      if (size2 > 0) {
        for (i = 0; i < size2; ++i) {
          if (i > 0) {
            t2 = this._writer;
            t2.print$1;
            t2 = t2._sb;
            t2._contents = t2._contents + separator;
          }
          nodes.$index;
          if (i >= t1.length)
            throw $.ioore(i);
          $.accept$1$x(t1[i], this);
        }
        t1 = this._writer;
        t1.print$1;
        t1 = t1._sb;
        t1._contents = t1._contents + suffix;
      }
    }
  },
  "+visitList3:3:0": 0,
  visitList4$3: function(prefix, nodes, separator) {
    var t1, size2, t2, i;
    if (nodes != null) {
      nodes.get$length;
      t1 = nodes.elements;
      size2 = t1.length;
      if (size2 > 0) {
        t2 = this._writer;
        t2.print$1;
        t2 = t2._sb;
        t2._contents = t2._contents + prefix;
        for (i = 0; i < size2; ++i) {
          if (i > 0) {
            t2 = this._writer;
            t2.print$1;
            t2 = t2._sb;
            t2._contents = t2._contents + separator;
          }
          nodes.$index;
          if (i >= t1.length)
            throw $.ioore(i);
          $.accept$1$x(t1[i], this);
        }
      }
    }
  },
  "+visitList4:3:0": 0
},

"+ToSourceVisitor": 0,

NodeList: {
  "": function NodeList(owner, elements, lib13$ListWrapper$elements) {
    this.owner = owner;
    this.elements = elements;
    this.lib13$ListWrapper$elements = lib13$ListWrapper$elements;
  },
  "super": "ListWrapper",
  get$owner: function() {
    return this.owner;
  },
  set$owner: function(v) {
    this.owner = v;
  },
  get$elements: function(receiver) {
    return this.elements;
  },
  set$elements: function(receiver, v) {
    this.elements = v;
  },
  accept$1: function(_, visitor) {
    var t1, t2;
    t1 = this.elements;
    t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();)
      $.accept$1$x(t1._liblib$_current, visitor);
  },
  add$1: function(_, node) {
    if (node != null)
      $.set$parent$x(node, this.owner);
    this.elements.push(node);
  },
  addAll$1: function(_, nodes) {
    var t1, t2, t3, node;
    if (nodes != null) {
      for (t1 = $.get$iterator$ax(nodes), t2 = this.elements, t3 = this.owner; t1.moveNext$0() === true;) {
        node = t1.get$current();
        if (node != null)
          $.set$parent$x(node, t3);
        t2.push(node);
      }
      return true;
    }
    return false;
  },
  get$beginToken: function() {
    var t1, t2;
    t1 = this.elements;
    t2 = t1.length;
    if (t2 === 0)
      return;
    if (0 >= t2)
      throw $.ioore(0);
    return t1[0].get$beginToken();
  },
  get$endToken: function() {
    var t1, t2, t3;
    t1 = this.elements;
    t2 = t1.length;
    if (t2 === 0)
      return;
    t3 = t2 - 1;
    if (t3 < 0)
      throw $.ioore(t3);
    return t1[t3].get$endToken();
  },
  $asListWrapper: null,
  $asList: null,
  $asIterable: null
},

"+NodeList": 0,

Annotation$full: function(atSign, $name, period, constructorName, $arguments) {
  var t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.Annotation(null, null, null, null, null, null, null, t1);
  t1.Annotation$full$5(atSign, $name, period, constructorName, $arguments);
  return t1;
},

"+new Annotation$full:5:0": 0,

CatchClause$full: function(onKeyword, exceptionType, catchKeyword, leftParenthesis, exceptionParameter, comma, stackTraceParameter, rightParenthesis, body) {
  var t1 = $.ASTNode__hashCodeGenerator;
  if (typeof t1 !== "number")
    return $.CatchClause$full$bailout(1, onKeyword, exceptionType, catchKeyword, leftParenthesis, exceptionParameter, comma, stackTraceParameter, rightParenthesis, body, t1);
  ++t1;
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.CatchClause(null, null, null, null, null, null, null, null, null, null, null, t1);
  t1.CatchClause$full$9(onKeyword, exceptionType, catchKeyword, leftParenthesis, exceptionParameter, comma, stackTraceParameter, rightParenthesis, body);
  return t1;
},

"+new CatchClause$full:9:0": 0,

CatchClause$full$bailout: function(state0, onKeyword, exceptionType, catchKeyword, leftParenthesis, exceptionParameter, comma, stackTraceParameter, rightParenthesis, body, t1) {
  t1 = $.$add$ns(t1, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.CatchClause(null, null, null, null, null, null, null, null, null, null, null, t1);
  t1.CatchClause$full$9(onKeyword, exceptionType, catchKeyword, leftParenthesis, exceptionParameter, comma, stackTraceParameter, rightParenthesis, body);
  return t1;
},

ClassDeclaration$full: function(comment, metadata, abstractKeyword, classKeyword, $name, typeParameters, extendsClause, withClause, implementsClause, leftBracket, members, rightBracket) {
  var t1, t2, t3, t4, t5;
  t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.ClassDeclaration(null, null, null, null, null, null, null, null, null, null, null, null, null, null, t1);
  t2 = $.Annotation;
  t3 = $.List_List($, t2);
  t3.$builtinTypeInfo = [t2];
  t4 = t2;
  t5 = $.List_List($, t4);
  t5.$builtinTypeInfo = [t4];
  t3 = new $.NodeList(t1, t3, t5);
  t3.$builtinTypeInfo = [t2];
  t1._metadata = t3;
  if (comment != null)
    comment.set$parent(comment, t1);
  t1._comment = comment;
  t2 = t1._metadata;
  t2.addAll$1(t2, metadata);
  t1.ClassDeclaration$full$12(comment, metadata, abstractKeyword, classKeyword, $name, typeParameters, extendsClause, withClause, implementsClause, leftBracket, members, rightBracket);
  return t1;
},

"+new ClassDeclaration$full:12:0": 0,

ClassTypeAlias$full: function(comment, metadata, keyword, $name, typeParameters, equals, abstractKeyword, superclass, withClause, implementsClause, semicolon) {
  var t1, t2, t3, t4, t5;
  t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.ClassTypeAlias(null, null, null, null, null, null, null, null, null, null, null, null, null, t1);
  t2 = $.Annotation;
  t3 = $.List_List($, t2);
  t3.$builtinTypeInfo = [t2];
  t4 = t2;
  t5 = $.List_List($, t4);
  t5.$builtinTypeInfo = [t4];
  t3 = new $.NodeList(t1, t3, t5);
  t3.$builtinTypeInfo = [t2];
  t1._metadata = t3;
  if (comment != null)
    comment.set$parent(comment, t1);
  t1._comment = comment;
  t2 = t1._metadata;
  t2.addAll$1(t2, metadata);
  t1._keyword = keyword;
  t1._semicolon = semicolon;
  t1.ClassTypeAlias$full$11(comment, metadata, keyword, $name, typeParameters, equals, abstractKeyword, superclass, withClause, implementsClause, semicolon);
  return t1;
},

"+new ClassTypeAlias$full:11:0": 0,

CompilationUnit$full: function(beginToken, scriptTag, directives, declarations, endToken) {
  var t1, t2, t3;
  t1 = $.get$AnalysisError_NO_ERRORS();
  t2 = $.get$AnalysisError_NO_ERRORS();
  t3 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t3;
  t3 = new $.CompilationUnit(null, null, null, null, null, null, null, t1, t2, null, null, t3);
  t3.CompilationUnit$full$5(beginToken, scriptTag, directives, declarations, endToken);
  return t3;
},

"+new CompilationUnit$full:5:0": 0,

ConditionalExpression$full: function(condition, question, thenExpression, colon, elseExpression) {
  var t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.ConditionalExpression(null, null, null, null, null, null, null, null, null, t1);
  t1.ConditionalExpression$full$5(condition, question, thenExpression, colon, elseExpression);
  return t1;
},

"+new ConditionalExpression$full:5:0": 0,

ConstructorDeclaration$full: function(comment, metadata, externalKeyword, constKeyword, factoryKeyword, returnType, period, $name, parameters, separator, initializers, redirectedConstructor, body) {
  var t1, t2, t3, t4, t5;
  t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.ConstructorDeclaration(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t1);
  t2 = $.Annotation;
  t3 = $.List_List($, t2);
  t3.$builtinTypeInfo = [t2];
  t4 = t2;
  t5 = $.List_List($, t4);
  t5.$builtinTypeInfo = [t4];
  t3 = new $.NodeList(t1, t3, t5);
  t3.$builtinTypeInfo = [t2];
  t1._metadata = t3;
  if (comment != null)
    comment.set$parent(comment, t1);
  t1._comment = comment;
  t2 = t1._metadata;
  t2.addAll$1(t2, metadata);
  t1.ConstructorDeclaration$full$13(comment, metadata, externalKeyword, constKeyword, factoryKeyword, returnType, period, $name, parameters, separator, initializers, redirectedConstructor, body);
  return t1;
},

"+new ConstructorDeclaration$full:13:0": 0,

ConstructorFieldInitializer$full: function(keyword, period, fieldName, equals, expression) {
  var t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.ConstructorFieldInitializer(null, null, null, null, null, null, null, t1);
  t1.ConstructorFieldInitializer$full$5(keyword, period, fieldName, equals, expression);
  return t1;
},

"+new ConstructorFieldInitializer$full:5:0": 0,

DoStatement$full: function(doKeyword, body, whileKeyword, leftParenthesis, condition, rightParenthesis, semicolon) {
  var t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.DoStatement(null, null, null, null, null, null, null, null, null, t1);
  t1.DoStatement$full$7(doKeyword, body, whileKeyword, leftParenthesis, condition, rightParenthesis, semicolon);
  return t1;
},

"+new DoStatement$full:7:0": 0,

FieldFormalParameter$full: function(comment, metadata, keyword, type, thisToken, period, identifier) {
  var t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.FieldFormalParameter(null, null, null, null, null, null, null, null, null, t1);
  t1.NormalFormalParameter$full$3(comment, metadata, identifier);
  t1.FieldFormalParameter$full$7(comment, metadata, keyword, type, thisToken, period, identifier);
  return t1;
},

"+new FieldFormalParameter$full:7:0": 0,

ForEachStatement$full: function(forKeyword, leftParenthesis, loopVariable, inKeyword, iterator, rightParenthesis, body) {
  var t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.ForEachStatement(null, null, null, null, null, null, null, null, null, t1);
  t1.ForEachStatement$full$7(forKeyword, leftParenthesis, loopVariable, inKeyword, iterator, rightParenthesis, body);
  return t1;
},

"+new ForEachStatement$full:7:0": 0,

ForStatement$full: function(forKeyword, leftParenthesis, variableList, initialization, leftSeparator, condition, rightSeparator, updaters, rightParenthesis, body) {
  var t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.ForStatement(null, null, null, null, null, null, null, null, null, null, null, null, t1);
  t1.ForStatement$full$10(forKeyword, leftParenthesis, variableList, initialization, leftSeparator, condition, rightSeparator, updaters, rightParenthesis, body);
  return t1;
},

"+new ForStatement$full:10:0": 0,

FormalParameterList$full: function(leftParenthesis, parameters, leftDelimiter, rightDelimiter, rightParenthesis) {
  var t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.FormalParameterList(null, null, null, null, null, null, null, t1);
  t1.FormalParameterList$full$5(leftParenthesis, parameters, leftDelimiter, rightDelimiter, rightParenthesis);
  return t1;
},

"+new FormalParameterList$full:5:0": 0,

FunctionDeclaration$full: function(comment, metadata, externalKeyword, returnType, propertyKeyword, $name, functionExpression) {
  var t1, t2, t3, t4, t5;
  t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.FunctionDeclaration(null, null, null, null, null, null, null, null, null, t1);
  t2 = $.Annotation;
  t3 = $.List_List($, t2);
  t3.$builtinTypeInfo = [t2];
  t4 = t2;
  t5 = $.List_List($, t4);
  t5.$builtinTypeInfo = [t4];
  t3 = new $.NodeList(t1, t3, t5);
  t3.$builtinTypeInfo = [t2];
  t1._metadata = t3;
  if (comment != null)
    $.set$parent$x(comment, t1);
  t1._comment = comment;
  t2 = t1._metadata;
  t2.addAll$1(t2, metadata);
  t1.FunctionDeclaration$full$7(comment, metadata, externalKeyword, returnType, propertyKeyword, $name, functionExpression);
  return t1;
},

"+new FunctionDeclaration$full:7:0": 0,

FunctionTypeAlias$full: function(comment, metadata, keyword, returnType, $name, typeParameters, parameters, semicolon) {
  var t1, t2, t3, t4, t5;
  t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.FunctionTypeAlias(null, null, null, null, null, null, null, null, null, null, t1);
  t2 = $.Annotation;
  t3 = $.List_List($, t2);
  t3.$builtinTypeInfo = [t2];
  t4 = t2;
  t5 = $.List_List($, t4);
  t5.$builtinTypeInfo = [t4];
  t3 = new $.NodeList(t1, t3, t5);
  t3.$builtinTypeInfo = [t2];
  t1._metadata = t3;
  if (comment != null)
    comment.set$parent(comment, t1);
  t1._comment = comment;
  t2 = t1._metadata;
  t2.addAll$1(t2, metadata);
  t1._keyword = keyword;
  t1._semicolon = semicolon;
  t1.FunctionTypeAlias$full$8(comment, metadata, keyword, returnType, $name, typeParameters, parameters, semicolon);
  return t1;
},

"+new FunctionTypeAlias$full:8:0": 0,

IfStatement$full: function(ifKeyword, leftParenthesis, condition, rightParenthesis, thenStatement, elseKeyword, elseStatement) {
  var t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.IfStatement(null, null, null, null, null, null, null, null, null, t1);
  t1.IfStatement$full$7(ifKeyword, leftParenthesis, condition, rightParenthesis, thenStatement, elseKeyword, elseStatement);
  return t1;
},

"+new IfStatement$full:7:0": 0,

ListLiteral$full: function(modifier, typeArguments, leftBracket, elements, rightBracket) {
  var t1 = $.ASTNode__hashCodeGenerator;
  if (typeof t1 !== "number")
    return $.ListLiteral$full$bailout(1, modifier, typeArguments, leftBracket, elements, rightBracket, t1);
  ++t1;
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.ListLiteral(null, null, null, null, null, null, null, null, null, t1);
  t1._modifier = modifier;
  if (typeArguments != null)
    typeArguments.set$parent(typeArguments, t1);
  t1._typeArguments = typeArguments;
  t1.ListLiteral$full$5(modifier, typeArguments, leftBracket, elements, rightBracket);
  return t1;
},

"+new ListLiteral$full:5:0": 0,

ListLiteral$full$bailout: function(state0, modifier, typeArguments, leftBracket, elements, rightBracket, t1) {
  t1 = $.$add$ns(t1, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.ListLiteral(null, null, null, null, null, null, null, null, null, t1);
  t1._modifier = modifier;
  if (typeArguments != null)
    typeArguments.set$parent(typeArguments, t1);
  t1._typeArguments = typeArguments;
  t1.ListLiteral$full$5(modifier, typeArguments, leftBracket, elements, rightBracket);
  return t1;
},

MapLiteral$full: function(modifier, typeArguments, leftBracket, entries, rightBracket) {
  var t1 = $.ASTNode__hashCodeGenerator;
  if (typeof t1 !== "number")
    return $.MapLiteral$full$bailout(1, modifier, typeArguments, leftBracket, entries, rightBracket, t1);
  ++t1;
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.MapLiteral(null, null, null, null, null, null, null, null, null, t1);
  t1._modifier = modifier;
  if (typeArguments != null)
    typeArguments.set$parent(typeArguments, t1);
  t1._typeArguments = typeArguments;
  t1.MapLiteral$full$5(modifier, typeArguments, leftBracket, entries, rightBracket);
  return t1;
},

"+new MapLiteral$full:5:0": 0,

MapLiteral$full$bailout: function(state0, modifier, typeArguments, leftBracket, entries, rightBracket, t1) {
  t1 = $.$add$ns(t1, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.MapLiteral(null, null, null, null, null, null, null, null, null, t1);
  t1._modifier = modifier;
  if (typeArguments != null)
    typeArguments.set$parent(typeArguments, t1);
  t1._typeArguments = typeArguments;
  t1.MapLiteral$full$5(modifier, typeArguments, leftBracket, entries, rightBracket);
  return t1;
},

MethodDeclaration$full: function(comment, metadata, externalKeyword, modifierKeyword, returnType, propertyKeyword, operatorKeyword, $name, parameters, body) {
  var t1, t2, t3, t4, t5;
  t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.MethodDeclaration(null, null, null, null, null, null, null, null, null, null, null, null, t1);
  t2 = $.Annotation;
  t3 = $.List_List($, t2);
  t3.$builtinTypeInfo = [t2];
  t4 = t2;
  t5 = $.List_List($, t4);
  t5.$builtinTypeInfo = [t4];
  t3 = new $.NodeList(t1, t3, t5);
  t3.$builtinTypeInfo = [t2];
  t1._metadata = t3;
  if (comment != null)
    comment.set$parent(comment, t1);
  t1._comment = comment;
  t2 = t1._metadata;
  t2.addAll$1(t2, metadata);
  t1.MethodDeclaration$full$10(comment, metadata, externalKeyword, modifierKeyword, returnType, propertyKeyword, operatorKeyword, $name, parameters, body);
  return t1;
},

"+new MethodDeclaration$full:10:0": 0,

SwitchStatement$full: function(keyword, leftParenthesis, expression, rightParenthesis, leftBracket, members, rightBracket) {
  var t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.SwitchStatement(null, null, null, null, null, null, null, null, null, t1);
  t1.SwitchStatement$full$7(keyword, leftParenthesis, expression, rightParenthesis, leftBracket, members, rightBracket);
  return t1;
},

"+new SwitchStatement$full:7:0": 0,

TryStatement$full: function(tryKeyword, body, catchClauses, finallyKeyword, finallyClause) {
  var t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.TryStatement(null, null, null, null, null, null, null, t1);
  t1.TryStatement$full$5(tryKeyword, body, catchClauses, finallyKeyword, finallyClause);
  return t1;
},

"+new TryStatement$full:5:0": 0,

VariableDeclarationList$full: function(comment, metadata, keyword, type, variables) {
  var t1, t2, t3, t4, t5;
  t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.VariableDeclarationList(null, null, null, null, null, null, null, t1);
  t2 = $.Annotation;
  t3 = $.List_List($, t2);
  t3.$builtinTypeInfo = [t2];
  t4 = t2;
  t5 = $.List_List($, t4);
  t5.$builtinTypeInfo = [t4];
  t3 = new $.NodeList(t1, t3, t5);
  t3.$builtinTypeInfo = [t2];
  t1._metadata = t3;
  if (comment != null)
    comment.set$parent(comment, t1);
  t1._comment = comment;
  t2 = t1._metadata;
  t2.addAll$1(t2, metadata);
  t1.VariableDeclarationList$full$5(comment, metadata, keyword, type, variables);
  return t1;
},

"+new VariableDeclarationList$full:5:0": 0,

WhileStatement$full: function(keyword, leftParenthesis, condition, rightParenthesis, body) {
  var t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
  $.ASTNode__hashCodeGenerator = t1;
  t1 = new $.WhileStatement(null, null, null, null, null, null, null, t1);
  t1.WhileStatement$full$5(keyword, leftParenthesis, condition, rightParenthesis, body);
  return t1;
},

"+new WhileStatement$full:5:0": 0}],
["engine.element", "../packages/analyzer_experimental/src/generated/element.dart", , {
HtmlElement: {
  "": function HtmlElement() {
  },
  "super": "Object",
  $isHtmlElement: true
},

"+HtmlElement": 0,

LibraryElement: {
  "": function LibraryElement() {
  },
  "super": "Object",
  $isLibraryElement: true
},

"+LibraryElement": 0,

ParameterElement: {
  "": function ParameterElement() {
  },
  "super": "Object",
  $isParameterElement: true,
  $isVariableElement: true
},

"+ParameterElement": 0}],
["engine.error", "../packages/analyzer_experimental/src/generated/error.dart", , {
ErrorSeverity: {
  "": function ErrorSeverity(name, ordinal, _machineCode, _displayName) {
    this.name = name;
    this.ordinal = ordinal;
    this._machineCode = _machineCode;
    this._displayName = _displayName;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  get$ordinal: function() {
    return this.ordinal;
  },
  get$_machineCode: function() {
    return this._machineCode;
  },
  set$_machineCode: function(v) {
    this._machineCode = v;
  },
  get$_displayName: function() {
    return this._displayName;
  },
  set$_displayName: function(v) {
    this._displayName = v;
  },
  compareTo$1: function(_, other) {
    var t1 = other.get$ordinal();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this.ordinal - t1;
  },
  toString$0: function(_) {
    return this.name;
  }
},

"+ErrorSeverity": 0,

AnalysisError: {
  "": function AnalysisError(_errorCode, _message, _liblib17$_source, _liblib17$_offset, _liblib17$_length) {
    this._errorCode = _errorCode;
    this._message = _message;
    this._liblib17$_source = _liblib17$_source;
    this._liblib17$_offset = _liblib17$_offset;
    this._liblib17$_length = _liblib17$_length;
  },
  "super": "Object",
  get$_errorCode: function() {
    return this._errorCode;
  },
  set$_errorCode: function(v) {
    this._errorCode = v;
  },
  get$_message: function() {
    return this._message;
  },
  set$_message: function(v) {
    this._message = v;
  },
  get$_liblib17$_source: function() {
    return this._liblib17$_source;
  },
  set$_liblib17$_source: function(v) {
    this._liblib17$_source = v;
  },
  get$_liblib17$_offset: function() {
    return this._liblib17$_offset;
  },
  set$_liblib17$_offset: function(v) {
    this._liblib17$_offset = v;
  },
  get$_liblib17$_length: function() {
    return this._liblib17$_length;
  },
  set$_liblib17$_length: function(v) {
    this._liblib17$_length = v;
  },
  _jtd_constructor_132_impl$5: function(source2, offset2, length2, errorCode2, $arguments) {
    this._liblib17$_source = source2;
    this._liblib17$_offset = offset2;
    this._liblib17$_length = length2;
    this._errorCode = errorCode2;
    this._message = $.JavaString_format(errorCode2.get$message(errorCode2), $arguments);
  },
  "+_jtd_constructor_132_impl:5:0": 0,
  get$length: function(_) {
    return this._liblib17$_length;
  },
  get$message: function(_) {
    return this._message;
  },
  get$offset: function(_) {
    return this._liblib17$_offset;
  },
  get$source: function(_) {
    return this._liblib17$_source;
  },
  get$hashCode: function(_) {
    var hashCode, t1;
    hashCode = this._liblib17$_offset;
    t1 = this._message;
    hashCode = $.$xor$n(hashCode, t1 != null ? $.get$hashCode$(t1) : 0);
    t1 = this._liblib17$_source;
    return $.$xor$n(hashCode, t1 != null ? $.get$hashCode$(t1) : 0);
  },
  toString$0: function(_) {
    var t1, builder, str;
    t1 = new $.StringBuffer("");
    t1._contents = "";
    builder = new $.JavaStringBuilder(t1);
    t1 = this._liblib17$_source;
    if (t1 != null) {
      t1.get$fullName;
      t1 = t1.file;
      t1 = t1 == null ? null : $.get$name$x(t1);
      str = t1;
    } else
      str = "<unknown source>";
    t1 = builder.sb;
    str = typeof str === "string" ? str : $.S(str);
    t1._contents = t1._contents + str;
    t1 = builder.sb;
    t1._contents = t1._contents + "(";
    str = this._liblib17$_offset;
    t1 = builder.sb;
    str = typeof str === "string" ? str : $.S(str);
    t1._contents = t1._contents + str;
    t1 = builder.sb;
    t1._contents = t1._contents + "..";
    str = $.$sub$n($.$add$ns(this._liblib17$_offset, this._liblib17$_length), 1);
    t1 = builder.sb;
    str = typeof str === "string" ? str : $.S(str);
    t1._contents = t1._contents + str;
    t1 = builder.sb;
    t1._contents = t1._contents + "): ";
    str = this._message;
    t1 = builder.sb;
    str = typeof str === "string" ? str : str;
    t1._contents = t1._contents + str;
    return builder.sb._contents;
  },
  AnalysisError$con2$5: function(source2, offset2, length2, errorCode2, $arguments) {
    this._jtd_constructor_132_impl$5(source2, offset2, length2, errorCode2, $arguments);
  }
},

"+AnalysisError": 0,

ErrorType: {
  "": function ErrorType(name, ordinal, _severity) {
    this.name = name;
    this.ordinal = ordinal;
    this._severity = _severity;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  get$ordinal: function() {
    return this.ordinal;
  },
  get$_severity: function() {
    return this._severity;
  },
  set$_severity: function(v) {
    this._severity = v;
  },
  compareTo$1: function(_, other) {
    var t1 = other.get$ordinal();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this.ordinal - t1;
  },
  toString$0: function(_) {
    return this.name;
  }
},

"+ErrorType": 0}],
["engine.html", "../packages/analyzer_experimental/src/generated/html.dart", , {
XmlNode: {
  "": function XmlNode(_liblib25$_parent) {
    this._liblib25$_parent = _liblib25$_parent;
  },
  "super": "Object",
  get$_liblib25$_parent: function() {
    return this._liblib25$_parent;
  },
  set$_liblib25$_parent: function(v) {
    this._liblib25$_parent = v;
  }
},

"+XmlNode": 0,

HtmlUnit: {
  "": function HtmlUnit(_liblib25$_beginToken, _liblib25$_endToken, _tagNodes, _liblib25$_element) {
    this._liblib25$_beginToken = _liblib25$_beginToken;
    this._liblib25$_endToken = _liblib25$_endToken;
    this._tagNodes = _tagNodes;
    this._liblib25$_element = _liblib25$_element;
  },
  "super": "XmlNode",
  get$_liblib25$_beginToken: function() {
    return this._liblib25$_beginToken;
  },
  set$_liblib25$_beginToken: function(v) {
    this._liblib25$_beginToken = v;
  },
  get$_liblib25$_endToken: function() {
    return this._liblib25$_endToken;
  },
  set$_liblib25$_endToken: function(v) {
    this._liblib25$_endToken = v;
  },
  get$_tagNodes: function() {
    return this._tagNodes;
  },
  set$_tagNodes: function(v) {
    this._tagNodes = v;
  },
  get$_liblib25$_element: function() {
    return this._liblib25$_element;
  },
  set$_liblib25$_element: function(v) {
    this._liblib25$_element = v;
  },
  $isHtmlUnit: true
},

"+HtmlUnit": 0}],
["engine.instrumentation", "../packages/analyzer_experimental/src/generated/instrumentation.dart", , {
InstrumentationBuilder_13: {
  "": function InstrumentationBuilder_13() {
  },
  "super": "Object"
},

"+InstrumentationBuilder_13": 0,

InstrumentationLogger_14: {
  "": function InstrumentationLogger_14() {
  },
  "super": "Object"
},

"+InstrumentationLogger_14": 0}],
["engine.parser", "../packages/analyzer_experimental/src/generated/parser.dart", , {
CommentAndMetadata: {
  "": function CommentAndMetadata(_liblib14$_comment, _liblib14$_metadata) {
    this._liblib14$_comment = _liblib14$_comment;
    this._liblib14$_metadata = _liblib14$_metadata;
  },
  "super": "Object",
  get$_liblib14$_comment: function() {
    return this._liblib14$_comment;
  },
  set$_liblib14$_comment: function(v) {
    this._liblib14$_comment = v;
  },
  get$_liblib14$_metadata: function() {
    return this._liblib14$_metadata;
  },
  set$_liblib14$_metadata: function(v) {
    this._liblib14$_metadata = v;
  }
},

"+CommentAndMetadata": 0,

FinalConstVarOrType: {
  "": function FinalConstVarOrType(_liblib14$_keyword, _liblib14$_type) {
    this._liblib14$_keyword = _liblib14$_keyword;
    this._liblib14$_type = _liblib14$_type;
  },
  "super": "Object",
  get$_liblib14$_keyword: function() {
    return this._liblib14$_keyword;
  },
  set$_liblib14$_keyword: function(v) {
    this._liblib14$_keyword = v;
  },
  get$_liblib14$_type: function() {
    return this._liblib14$_type;
  },
  set$_liblib14$_type: function(v) {
    this._liblib14$_type = v;
  },
  get$keyword: function() {
    return this._liblib14$_keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$type: function(_) {
    return this._liblib14$_type;
  }
},

"+FinalConstVarOrType": 0,

Modifiers: {
  "": function Modifiers(_liblib14$_abstractKeyword, _constKeyword, _externalKeyword, _liblib14$_factoryKeyword, _finalKeyword, _staticKeyword, _varKeyword) {
    this._liblib14$_abstractKeyword = _liblib14$_abstractKeyword;
    this._constKeyword = _constKeyword;
    this._externalKeyword = _externalKeyword;
    this._liblib14$_factoryKeyword = _liblib14$_factoryKeyword;
    this._finalKeyword = _finalKeyword;
    this._staticKeyword = _staticKeyword;
    this._varKeyword = _varKeyword;
  },
  "super": "Object",
  get$_liblib14$_abstractKeyword: function() {
    return this._liblib14$_abstractKeyword;
  },
  set$_liblib14$_abstractKeyword: function(v) {
    this._liblib14$_abstractKeyword = v;
  },
  get$_constKeyword: function() {
    return this._constKeyword;
  },
  set$_constKeyword: function(v) {
    this._constKeyword = v;
  },
  get$_externalKeyword: function() {
    return this._externalKeyword;
  },
  set$_externalKeyword: function(v) {
    this._externalKeyword = v;
  },
  get$_liblib14$_factoryKeyword: function() {
    return this._liblib14$_factoryKeyword;
  },
  set$_liblib14$_factoryKeyword: function(v) {
    this._liblib14$_factoryKeyword = v;
  },
  get$_finalKeyword: function() {
    return this._finalKeyword;
  },
  set$_finalKeyword: function(v) {
    this._finalKeyword = v;
  },
  get$_staticKeyword: function() {
    return this._staticKeyword;
  },
  set$_staticKeyword: function(v) {
    this._staticKeyword = v;
  },
  get$_varKeyword: function() {
    return this._varKeyword;
  },
  set$_varKeyword: function(v) {
    this._varKeyword = v;
  },
  toString$0: function(_) {
    var t1, builder;
    t1 = new $.StringBuffer("");
    t1._contents = "";
    builder = new $.JavaStringBuilder(t1);
    this.appendKeyword$3(builder, this.appendKeyword$3(builder, this.appendKeyword$3(builder, this.appendKeyword$3(builder, this.appendKeyword$3(builder, this.appendKeyword$3(builder, this.appendKeyword$3(builder, false, this._liblib14$_abstractKeyword), this._constKeyword), this._externalKeyword), this._liblib14$_factoryKeyword), this._finalKeyword), this._staticKeyword), this._varKeyword);
    return builder.sb._contents;
  },
  appendKeyword$3: function(builder, needsSpace, keyword) {
    var t1, charCodes, t2, str;
    if (keyword != null) {
      if (needsSpace === true) {
        t1 = builder.sb;
        charCodes = $.List_List$filled(1, 32, $.JSInt);
        charCodes.$builtinTypeInfo = [$.JSInt];
        t2 = $.Primitives_stringFromCharCodes(charCodes);
        t1._contents = t1._contents + t2;
      }
      str = keyword.get$lexeme();
      t1 = builder.sb;
      str = typeof str === "string" ? str : $.S(str);
      t1._contents = t1._contents + str;
      return true;
    }
    return needsSpace;
  },
  "+appendKeyword:3:0": 0
},

"+Modifiers": 0,

Parser: {
  "": function Parser(_liblib14$_source, _errorListener, _currentToken, _inLoop, _inSwitch) {
    this._liblib14$_source = _liblib14$_source;
    this._errorListener = _errorListener;
    this._currentToken = _currentToken;
    this._inLoop = _inLoop;
    this._inSwitch = _inSwitch;
  },
  "super": "Object",
  get$_liblib14$_source: function() {
    return this._liblib14$_source;
  },
  set$_liblib14$_source: function(v) {
    this._liblib14$_source = v;
  },
  get$_errorListener: function() {
    return this._errorListener;
  },
  set$_errorListener: function(v) {
    this._errorListener = v;
  },
  get$_currentToken: function() {
    return this._currentToken;
  },
  set$_currentToken: function(v) {
    this._currentToken = v;
  },
  get$_inLoop: function() {
    return this._inLoop;
  },
  set$_inLoop: function(v) {
    this._inLoop = v;
  },
  get$_inSwitch: function() {
    return this._inSwitch;
  },
  set$_inSwitch: function(v) {
    this._inSwitch = v;
  },
  parseCompilationUnit$1: function(token) {
    var instrumentation, t1;
    $.get$Instrumentation__CURRENT_LOGGER();
    instrumentation = $.get$Instrumentation__NULL_INSTRUMENTATION_BUILDER();
    try {
      this._currentToken = token;
      t1 = this.parseCompilationUnit2$0();
      return t1;
    } finally {
    }
  },
  appendScalarValue$5: function(builder, escapeSequence, scalarValue, startIndex, endIndex) {
    var t1, t2, t3, t4, t5, charCodes;
    t1 = $.getInterceptor$n(scalarValue);
    if (t1.$lt(scalarValue, 0) !== true)
      if (t1.$gt(scalarValue, 1114111) !== true)
        t2 = t1.$ge(scalarValue, 55296) === true && t1.$le(scalarValue, 57343) === true;
      else
        t2 = true;
    else
      t2 = true;
    if (t2) {
      t1 = $.get$ParserErrorCode_INVALID_CODE_POINT();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, [escapeSequence]);
      t3.onError$1(t3, t5);
      return;
    }
    if (t1.$lt(scalarValue, 65535) === true) {
      $.intTypeCast(scalarValue);
      t1 = builder.sb;
      charCodes = $.List_List$filled(1, scalarValue, $.JSInt);
      charCodes.$builtinTypeInfo = [$.JSInt];
      t2 = $.Primitives_stringFromCharCodes(charCodes);
      t1._contents = t1._contents + t2;
    } else {
      t1 = $.Character_toChars(scalarValue);
      t2 = builder.sb;
      t2._contents = t2._contents + t1;
    }
  },
  "+appendScalarValue:5:0": 0,
  computeStringValue$1: function(lexeme) {
    var t1, t2, start, end, builder, index;
    t1 = $.getInterceptor$s(lexeme);
    if (t1.startsWith$1(lexeme, "r\"\"\"") === true || t1.startsWith$1(lexeme, "r'''") === true) {
      t2 = t1.get$length(lexeme);
      if (typeof t2 !== "number")
        return this.computeStringValue$1$bailout(1, lexeme, t2, t1);
      if (t2 > 4) {
        t2 = t1.get$length(lexeme);
        if (typeof t2 !== "number")
          return this.computeStringValue$1$bailout(2, lexeme, t2, t1);
        return t1.substring$2(lexeme, 4, t2 - 3);
      }
    } else if (t1.startsWith$1(lexeme, "r\"") === true || t1.startsWith$1(lexeme, "r'") === true) {
      t2 = t1.get$length(lexeme);
      if (typeof t2 !== "number")
        return this.computeStringValue$1$bailout(3, lexeme, t2, t1);
      if (t2 > 2) {
        t2 = t1.get$length(lexeme);
        if (typeof t2 !== "number")
          return this.computeStringValue$1$bailout(4, lexeme, t2, t1);
        return t1.substring$2(lexeme, 2, t2 - 1);
      }
    }
    if (t1.startsWith$1(lexeme, "\"\"\"") === true || t1.startsWith$1(lexeme, "'''") === true)
      start = 3;
    else
      start = t1.startsWith$1(lexeme, "\"") === true || t1.startsWith$1(lexeme, "'") === true ? 1 : 0;
    end = t1.get$length(lexeme);
    if (typeof end !== "number")
      return this.computeStringValue$1$bailout(5, lexeme, 0, t1, start, end);
    if (end > 3)
      t2 = t1.endsWith$1(lexeme, "\"\"\"") === true || t1.endsWith$1(lexeme, "'''") === true;
    else
      t2 = false;
    if (t2)
      end -= 3;
    else {
      if (end > 1)
        t1 = t1.endsWith$1(lexeme, "\"") === true || t1.endsWith$1(lexeme, "'") === true;
      else
        t1 = false;
      if (t1)
        --end;
    }
    t1 = new $.StringBuffer("");
    t1._contents = "";
    builder = new $.JavaStringBuilder(t1);
    for (index = start; index < end;) {
      index = this.translateCharacter$3(builder, lexeme, index);
      if (typeof index !== "number")
        return this.computeStringValue$1$bailout(6, lexeme, 0, 0, 0, end, index, builder);
    }
    return builder.sb._contents;
  },
  "+computeStringValue:1:0": 0,
  computeStringValue$1$bailout: function(state0, lexeme, t2, t1, start, end, index, builder) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$s(lexeme);
      default:
        if (state0 === 2 || state0 === 1 || state0 === 0 && (t1.startsWith$1(lexeme, "r\"\"\"") === true || t1.startsWith$1(lexeme, "r'''") === true))
          switch (state0) {
            case 0:
              t2 = t1.get$length(lexeme);
            case 1:
              state0 = 0;
            case 2:
              if (state0 === 2 || state0 === 0 && $.$gt$n(t2, 4) === true)
                switch (state0) {
                  case 0:
                    t2 = t1.get$length(lexeme);
                  case 2:
                    state0 = 0;
                    return t1.substring$2(lexeme, 4, $.$sub$n(t2, 3));
                }
          }
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 4 || state0 === 3 || state0 === 0 && (t1.startsWith$1(lexeme, "r\"") === true || t1.startsWith$1(lexeme, "r'") === true))
                switch (state0) {
                  case 0:
                    t2 = t1.get$length(lexeme);
                  case 3:
                    state0 = 0;
                  case 4:
                    if (state0 === 4 || state0 === 0 && $.$gt$n(t2, 2) === true)
                      switch (state0) {
                        case 0:
                          t2 = t1.get$length(lexeme);
                        case 4:
                          state0 = 0;
                          return t1.substring$2(lexeme, 2, $.$sub$n(t2, 1));
                      }
                }
          }
        if (t1.startsWith$1(lexeme, "\"\"\"") === true || t1.startsWith$1(lexeme, "'''") === true)
          start = 3;
        else
          start = t1.startsWith$1(lexeme, "\"") === true || t1.startsWith$1(lexeme, "'") === true ? 1 : 0;
        end = t1.get$length(lexeme);
      case 5:
        state0 = 0;
        t2 = $.getInterceptor$n(end);
        if (t2.$gt(end, 3) === true)
          t3 = t1.endsWith$1(lexeme, "\"\"\"") === true || t1.endsWith$1(lexeme, "'''") === true;
        else
          t3 = false;
        if (t3)
          end = t2.$sub(end, 3);
        else {
          if (t2.$gt(end, 1) === true)
            t1 = t1.endsWith$1(lexeme, "\"") === true || t1.endsWith$1(lexeme, "'") === true;
          else
            t1 = false;
          if (t1)
            end = t2.$sub(end, 1);
        }
        t1 = new $.StringBuffer("");
        t1._contents = "";
        builder = new $.JavaStringBuilder(t1);
        index = start;
      case 6:
        var t3;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!($.$lt$n(index, end) === true))
                  break L0;
                index = this.translateCharacter$3(builder, lexeme, index);
              case 6:
                state0 = 0;
            }
        return builder.sb._contents;
    }
  },
  couldBeStartOfCompilationUnitMember$0: function() {
    var t1, t2, t3;
    t1 = $.get$Keyword_IMPORT();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (!t1) {
      t1 = $.get$Keyword_EXPORT();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (!t1) {
        t1 = $.get$Keyword_LIBRARY();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (!t1) {
          t1 = $.get$Keyword_PART();
          t2 = this._currentToken;
          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t2, "$isKeywordToken");
            t2.get$keyword;
            t1 = t2._liblib9$_keyword === t1;
          } else
            t1 = false;
        } else
          t1 = true;
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1) {
      t1 = this._currentToken.get$next();
      t2 = $.get$TokenType_PERIOD();
      if ($.get$type$x(t1) !== t2) {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_LT();
        t2 = $.get$type$x(t1) !== t2;
        t1 = t2;
      } else
        t1 = false;
    } else
      t1 = false;
    if (t1)
      return true;
    else {
      t1 = $.get$Keyword_CLASS();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1)
        return true;
      else {
        t1 = $.get$Keyword_TYPEDEF();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_PERIOD();
          if ($.get$type$x(t1) !== t2) {
            t1 = this._currentToken.get$next();
            t2 = $.get$TokenType_LT();
            t2 = $.get$type$x(t1) !== t2;
            t1 = t2;
          } else
            t1 = false;
        } else
          t1 = false;
        if (t1)
          return true;
        else {
          t1 = $.get$Keyword_VOID();
          t2 = this._currentToken;
          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t2, "$isKeywordToken");
            t2.get$keyword;
            t1 = t2._liblib9$_keyword === t1;
          } else
            t1 = false;
          if (!t1) {
            t1 = $.get$Keyword_GET();
            t2 = this._currentToken;
            if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
              $.propertyTypeCast(t2, "$isKeywordToken");
              t2.get$keyword;
              t1 = t2._liblib9$_keyword === t1;
            } else
              t1 = false;
            if (!t1) {
              t1 = $.get$Keyword_SET();
              t2 = this._currentToken;
              if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t2, "$isKeywordToken");
                t2.get$keyword;
                t1 = t2._liblib9$_keyword === t1;
              } else
                t1 = false;
            } else
              t1 = true;
            if (t1) {
              t1 = this._currentToken.get$next();
              t2 = $.get$TokenType_IDENTIFIER();
              t3 = $.getInterceptor$x(t1);
              if (t3.get$type(t1) !== t2) {
                t2 = $.get$TokenType_KEYWORD();
                if (t3.get$type(t1) === t2) {
                  $.propertyTypeCast(t1, "$isKeywordToken");
                  t1.get$keyword;
                  t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                } else
                  t1 = false;
              } else
                t1 = true;
            } else
              t1 = false;
            if (!t1) {
              t1 = $.get$Keyword_OPERATOR();
              t2 = this._currentToken;
              if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t2, "$isKeywordToken");
                t2.get$keyword;
                t1 = t2._liblib9$_keyword === t1;
              } else
                t1 = false;
              t1 = t1 && this.isOperator$1(this._currentToken.get$next());
            } else
              t1 = true;
          } else
            t1 = true;
          if (t1)
            return true;
          else {
            t1 = this._currentToken;
            t2 = $.get$TokenType_IDENTIFIER();
            t3 = $.getInterceptor$x(t1);
            if (t3.get$type(t1) !== t2) {
              t2 = $.get$TokenType_KEYWORD();
              if (t3.get$type(t1) === t2) {
                $.propertyTypeCast(t1, "$isKeywordToken");
                t1.get$keyword;
                t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
              } else
                t1 = false;
            } else
              t1 = true;
            if (t1) {
              t1 = this._currentToken.get$next();
              t2 = $.get$TokenType_OPEN_PAREN();
              if ($.get$type$x(t1) === t2)
                return true;
              if (this.skipReturnType$1(this._currentToken) == null)
                return false;
              t1 = $.get$Keyword_GET();
              t2 = this._currentToken;
              if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t2, "$isKeywordToken");
                t2.get$keyword;
                t1 = t2._liblib9$_keyword === t1;
              } else
                t1 = false;
              if (!t1) {
                t1 = $.get$Keyword_SET();
                t2 = this._currentToken;
                if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                  $.propertyTypeCast(t2, "$isKeywordToken");
                  t2.get$keyword;
                  t1 = t2._liblib9$_keyword === t1;
                } else
                  t1 = false;
                if (!t1) {
                  t1 = $.get$Keyword_OPERATOR();
                  t2 = this._currentToken;
                  if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                    $.propertyTypeCast(t2, "$isKeywordToken");
                    t2.get$keyword;
                    t1 = t2._liblib9$_keyword === t1;
                  } else
                    t1 = false;
                  if (!(t1 && this.isOperator$1(this._currentToken.get$next()))) {
                    t1 = this._currentToken;
                    t2 = $.get$TokenType_IDENTIFIER();
                    t3 = $.getInterceptor$x(t1);
                    if (t3.get$type(t1) !== t2) {
                      t2 = $.get$TokenType_KEYWORD();
                      if (t3.get$type(t1) === t2) {
                        $.propertyTypeCast(t1, "$isKeywordToken");
                        t1.get$keyword;
                        t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                      } else
                        t1 = false;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
              if (t1)
                return true;
            }
          }
        }
      }
    }
    return false;
  },
  "+couldBeStartOfCompilationUnitMember:0:0": 0,
  expect$1: function(keyword) {
    var t1, token, t2, t3, t4, t5, t6;
    t1 = this._currentToken;
    if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t1, "$isKeywordToken");
      t1.get$keyword;
      t1 = t1._liblib9$_keyword === keyword;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      return token;
    }
    t1 = $.get$ParserErrorCode_EXPECTED_TOKEN();
    t2 = keyword._syntax;
    t3 = this._currentToken;
    t4 = this._errorListener;
    t5 = $.getInterceptor$x(t3);
    t6 = new $.AnalysisError(null, null, null, 0, 0);
    t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
    t4.onError$1(t4, t6);
    return this._currentToken;
  },
  "+expect:1:0": 0,
  expect2$1: function(type) {
    var token, t1, t2, t3, t4, t5, t6;
    if (this.matches5$1(type)) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      return token;
    }
    if (type === $.get$TokenType_SEMICOLON()) {
      t1 = $.get$ParserErrorCode_EXPECTED_TOKEN();
      t2 = this._currentToken.get$previous();
      t3 = type._lexeme;
      t4 = this._errorListener;
      t5 = $.getInterceptor$x(t2);
      t6 = new $.AnalysisError(null, null, null, 0, 0);
      t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t2), t5.get$length(t2), t1, [t3]);
      t4.onError$1(t4, t6);
    } else {
      t1 = $.get$ParserErrorCode_EXPECTED_TOKEN();
      t2 = type._lexeme;
      t3 = this._currentToken;
      t4 = this._errorListener;
      t5 = $.getInterceptor$x(t3);
      t6 = new $.AnalysisError(null, null, null, 0, 0);
      t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
      t4.onError$1(t4, t6);
    }
    return this._currentToken;
  },
  "+expect2:1:0": 0,
  findRange$2: function(ranges, index) {
    var t1, t2, range, t3, t4;
    if (typeof index !== "number")
      return this.findRange$2$bailout(1, ranges, index);
    t1 = $.getRuntimeTypeArgument(ranges, ranges.$asJSArray, 0);
    t2 = new $.ListIterator(ranges, ranges.length, 0, null);
    t2.$builtinTypeInfo = [t1];
    for (; t2.moveNext$0();) {
      range = t2._liblib$_current;
      if (typeof range !== "string" && (typeof range !== "object" || range === null || range.constructor !== Array && !$.isJsIndexable(range, range[$.dispatchPropertyName])))
        return this.findRange$2$bailout(2, 0, index, $.JSNumber_methods, t2, range);
      t1 = $.getInterceptor(range);
      t3 = range.length;
      if (0 >= t3)
        throw $.ioore(0);
      t4 = range[0];
      if (typeof t4 !== "number")
        return this.findRange$2$bailout(3, 0, index, $.JSNumber_methods, t2, range, t1, t4);
      if (t4 <= index) {
        if (1 >= t3)
          throw $.ioore(1);
        t3 = range[1];
        if (typeof t3 !== "number")
          return this.findRange$2$bailout(4, 0, index, $.JSNumber_methods, t2, range, t1, t3);
        t3 = index <= t3;
        t1 = t3;
      } else
        t1 = false;
      if (t1)
        return range;
      else if (index < t4)
        return;
    }
    return;
  },
  "+findRange:2:0": 0,
  findRange$2$bailout: function(state0, ranges, index, t1, t2, range, t3, t4) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getRuntimeTypeArgument(ranges, ranges.$asJSArray, 0);
        t2 = new $.ListIterator(ranges, ranges.length, 0, null);
        t2.$builtinTypeInfo = [t1];
        t1 = $.getInterceptor$n(index);
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!t2.moveNext$0())
                  break L0;
                range = t2._liblib$_current;
              case 2:
                state0 = 0;
                t3 = $.getInterceptor$asx(range);
                t4 = t3.$index(range, 0);
              case 3:
                state0 = 0;
              case 4:
                if (state0 === 4 || state0 === 0 && $.$le$n(t4, index) === true)
                  switch (state0) {
                    case 0:
                      t4 = t3.$index(range, 1);
                    case 4:
                      state0 = 0;
                      t4 = t1.$le(index, t4) === true;
                  }
                else
                  t4 = false;
              case 5:
                if (state0 === 0 && t4)
                  return range;
                else
                  switch (state0) {
                    case 0:
                      t3 = t3.$index(range, 0);
                    case 5:
                      state0 = 0;
                      if (t1.$lt(index, t3) === true)
                        return;
                  }
            }
        return;
    }
  },
  getCodeBlockRanges$1: function(comment) {
    var ranges, t1, length2, index, currentChar, t2, end;
    ranges = $.List_List($, [$.JSArray, $.JSInt]);
    ranges.$builtinTypeInfo = [[$.JSArray, $.JSInt]];
    t1 = $.getInterceptor$asx(comment);
    length2 = t1.get$length(comment);
    if (typeof length2 !== "number")
      return this.getCodeBlockRanges$1$bailout(1, comment, t1, length2, ranges);
    index = t1.startsWith$1(comment, "/**") === true || t1.startsWith$1(comment, "///") === true ? 3 : 0;
    for (; index < length2;) {
      currentChar = t1.codeUnitAt$1(comment, index);
      if (typeof currentChar !== "number")
        return this.getCodeBlockRanges$1$bailout(2, comment, t1, length2, ranges, index, $.JSNumber_methods, currentChar);
      if (currentChar === 13 || currentChar === 10) {
        ++index;
        while (true) {
          if (index < length2) {
            t2 = t1.codeUnitAt$1(comment, index);
            if (typeof t2 !== "number")
              return this.getCodeBlockRanges$1$bailout(3, comment, t1, length2, ranges, index, $.JSNumber_methods, 0, t2);
            t2 = t2 === 9 || t2 === 32 || t2 === 10 || t2 === 13;
          } else
            t2 = false;
          if (!t2)
            break;
          ++index;
        }
        t2 = t1.indexOf$2(comment, "*     ", index);
        if (typeof t2 !== "number")
          return this.getCodeBlockRanges$1$bailout(4, comment, t1, length2, ranges, index, $.JSNumber_methods, 0, t2);
        if (t2 !== -1) {
          end = index + 6;
          while (true) {
            if (end < length2) {
              t2 = t1.codeUnitAt$1(comment, end);
              if (typeof t2 !== "number")
                return this.getCodeBlockRanges$1$bailout(5, comment, t1, length2, ranges, index, $.JSNumber_methods, 0, t2, end);
              if (t2 !== 13) {
                t2 = t1.codeUnitAt$1(comment, end);
                if (typeof t2 !== "number")
                  return this.getCodeBlockRanges$1$bailout(6, comment, t1, length2, ranges, index, $.JSNumber_methods, 0, t2, end);
                t2 = t2 !== 10;
              } else
                t2 = false;
            } else
              t2 = false;
            if (!t2)
              break;
            ++end;
          }
          ranges.push([index, end]);
          index = end;
        }
      } else {
        t2 = t1.indexOf$2(comment, "[:", index);
        if (typeof t2 !== "number")
          return this.getCodeBlockRanges$1$bailout(7, comment, t1, length2, ranges, index, $.JSNumber_methods, 0, t2);
        if (t2 !== -1) {
          end = t1.indexOf$2(comment, ":]", index + 2);
          if (typeof end !== "number")
            return this.getCodeBlockRanges$1$bailout(8, comment, t1, length2, ranges, index, 0, 0, 0, end);
          if (end < 0)
            end = length2;
          ranges.push([index, end]);
          index = end + 1;
        } else
          ++index;
      }
    }
    return ranges;
  },
  "+getCodeBlockRanges:1:0": 0,
  getCodeBlockRanges$1$bailout: function(state0, comment, t1, length2, ranges, index, t2, currentChar, t3, end) {
    switch (state0) {
      case 0:
        ranges = $.List_List($, [$.JSArray, $.JSInt]);
        ranges.$builtinTypeInfo = [[$.JSArray, $.JSInt]];
        t1 = $.getInterceptor$asx(comment);
        length2 = t1.get$length(comment);
      case 1:
        state0 = 0;
        index = t1.startsWith$1(comment, "/**") === true || t1.startsWith$1(comment, "///") === true ? 3 : 0;
      default:
        var t4;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = $.getInterceptor$n(index);
                if (!(t2.$lt(index, length2) === true))
                  break L0;
                currentChar = t1.codeUnitAt$1(comment, index);
              case 2:
                state0 = 0;
                t3 = $.getInterceptor(currentChar);
              default:
                if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && (t3.$eq(currentChar, 13) || t3.$eq(currentChar, 10)))
                  switch (state0) {
                    case 0:
                      index = t2.$add(index, 1);
                    case 3:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              t2 = $.getInterceptor$n(index);
                            case 3:
                              if (state0 === 3 || state0 === 0 && t2.$lt(index, length2) === true)
                                switch (state0) {
                                  case 0:
                                    t3 = t1.codeUnitAt$1(comment, index);
                                  case 3:
                                    state0 = 0;
                                    t4 = $.getInterceptor(t3);
                                    t3 = t4.$eq(t3, 9) || t4.$eq(t3, 32) || t4.$eq(t3, 10) || t4.$eq(t3, 13);
                                }
                              else
                                t3 = false;
                              if (!t3)
                                break L1;
                              index = t2.$add(index, 1);
                          }
                      t3 = t1.indexOf$2(comment, "*     ", index);
                    case 4:
                      state0 = 0;
                    default:
                      if (state0 === 6 || state0 === 5 || state0 === 0 && !$.$eq(t3, -1))
                        switch (state0) {
                          case 0:
                            end = t2.$add(index, 6);
                          default:
                            L2:
                              while (true)
                                switch (state0) {
                                  case 0:
                                    t2 = $.getInterceptor$n(end);
                                  default:
                                    if (state0 === 6 || state0 === 5 || state0 === 0 && t2.$lt(end, length2) === true)
                                      switch (state0) {
                                        case 0:
                                          t3 = t1.codeUnitAt$1(comment, end);
                                        case 5:
                                          state0 = 0;
                                        case 6:
                                          if (state0 === 6 || state0 === 0 && !$.$eq(t3, 13))
                                            switch (state0) {
                                              case 0:
                                                t3 = t1.codeUnitAt$1(comment, end);
                                              case 6:
                                                state0 = 0;
                                                t3 = !$.$eq(t3, 10);
                                            }
                                          else
                                            t3 = false;
                                      }
                                    else
                                      t3 = false;
                                    if (!t3)
                                      break L2;
                                    end = t2.$add(end, 1);
                                }
                            ranges.push([index, end]);
                            index = end;
                        }
                  }
                else
                  switch (state0) {
                    case 0:
                      t3 = t1.indexOf$2(comment, "[:", index);
                    case 7:
                      state0 = 0;
                    case 8:
                      if (state0 === 8 || state0 === 0 && !$.$eq(t3, -1))
                        switch (state0) {
                          case 0:
                            end = t1.indexOf$2(comment, ":]", t2.$add(index, 2));
                          case 8:
                            state0 = 0;
                            if ($.$lt$n(end, 0) === true)
                              end = length2;
                            ranges.push([index, end]);
                            index = $.$add$ns(end, 1);
                        }
                      else
                        index = t2.$add(index, 1);
                  }
            }
        return ranges;
    }
  },
  getEndToken$1: function(beginToken) {
    if (typeof beginToken === "object" && beginToken !== null && !!$.getInterceptor(beginToken).$isBeginToken)
      return beginToken._liblib9$_endToken;
    return;
  },
  "+getEndToken:1:0": 0,
  hasReturnTypeInTypeAlias$0: function() {
    var next, t1, t2;
    next = this.skipReturnType$1(this._currentToken);
    if (next == null)
      return false;
    t1 = $.get$TokenType_IDENTIFIER();
    t2 = $.getInterceptor$x(next);
    if (t2.get$type(next) !== t1) {
      t1 = $.get$TokenType_KEYWORD();
      if (t2.get$type(next) === t1) {
        $.propertyTypeCast(next, "$isKeywordToken");
        next.get$keyword;
        t1 = next._liblib9$_keyword.isPseudoKeyword$0() === true;
      } else
        t1 = false;
    } else
      t1 = true;
    return t1;
  },
  "+hasReturnTypeInTypeAlias:0:0": 0,
  isFunctionDeclaration$0: function() {
    var t1, t2, afterReturnType, afterIdentifier;
    t1 = $.get$Keyword_VOID();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1)
      return true;
    afterReturnType = this.skipTypeName$1(this._currentToken);
    afterIdentifier = this.skipSimpleIdentifier$1(afterReturnType == null ? this._currentToken : afterReturnType);
    if (afterIdentifier == null)
      afterIdentifier = this.skipSimpleIdentifier$1(this._currentToken);
    if (afterIdentifier == null)
      return false;
    return this.isFunctionExpression$1(afterIdentifier);
  },
  "+isFunctionDeclaration:0:0": 0,
  isFunctionExpression$1: function(startToken) {
    var afterParameters = this.skipFormalParameterList$1(startToken);
    if (afterParameters == null)
      return false;
    return this.matchesAny$2(afterParameters, [$.get$TokenType_OPEN_CURLY_BRACKET(), $.get$TokenType_FUNCTION()]);
  },
  "+isFunctionExpression:1:0": 0,
  isHexDigit$1: function(character) {
    var t1;
    if (typeof character !== "number")
      throw $.iae(character);
    if (!(48 <= character && character <= 57))
      if (!(65 <= character && character <= 70))
        t1 = 97 <= character && character <= 102;
      else
        t1 = true;
    else
      t1 = true;
    return t1;
  },
  "+isHexDigit:1:0": 0,
  isInitializedVariableDeclaration$0: function() {
    var t1, t2, token, type2;
    t1 = $.get$Keyword_FINAL();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (!t1) {
      t1 = $.get$Keyword_VAR();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
    } else
      t1 = true;
    if (t1)
      return true;
    t1 = $.get$Keyword_CONST();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1)
      return !this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_LT(), $.get$TokenType_OPEN_CURLY_BRACKET(), $.get$TokenType_OPEN_SQUARE_BRACKET(), $.get$TokenType_INDEX()]);
    token = this.skipTypeName$1(this._currentToken);
    if (token == null)
      return false;
    token = this.skipSimpleIdentifier$1(token);
    if (token == null)
      return false;
    t1 = $.getInterceptor$x(token);
    type2 = t1.get$type(token);
    if (type2 !== $.get$TokenType_EQ())
      if (type2 !== $.get$TokenType_COMMA())
        if (type2 !== $.get$TokenType_SEMICOLON()) {
          t2 = $.get$Keyword_IN();
          if (t1.get$type(token) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(token, "$isKeywordToken");
            token.get$keyword;
            t1 = token._liblib9$_keyword === t2;
          } else
            t1 = false;
        } else
          t1 = true;
      else
        t1 = true;
    else
      t1 = true;
    return t1;
  },
  "+isInitializedVariableDeclaration:0:0": 0,
  isLinkText$2: function(comment, rightIndex) {
    var t1, length2, index, nextChar;
    if (typeof rightIndex !== "number")
      return this.isLinkText$2$bailout(1, comment, rightIndex);
    t1 = $.getInterceptor$asx(comment);
    length2 = t1.get$length(comment);
    if (typeof length2 !== "number")
      return this.isLinkText$2$bailout(2, comment, rightIndex, t1, length2);
    index = rightIndex + 1;
    if (index >= length2)
      return false;
    nextChar = t1.codeUnitAt$1(comment, index);
    if (typeof nextChar !== "number")
      return this.isLinkText$2$bailout(3, comment, 0, t1, length2, nextChar, index);
    if (nextChar === 40 || nextChar === 58)
      return true;
    while (true) {
      if (!(nextChar === 9 || nextChar === 32 || nextChar === 10 || nextChar === 13))
        break;
      ++index;
      if (index >= length2)
        return false;
      nextChar = t1.codeUnitAt$1(comment, index);
      if (typeof nextChar !== "number")
        return this.isLinkText$2$bailout(4, comment, 0, t1, length2, nextChar, index);
    }
    return nextChar === 91;
  },
  "+isLinkText:2:0": 0,
  isLinkText$2$bailout: function(state0, comment, rightIndex, t1, length2, nextChar, index) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(comment);
        length2 = t1.get$length(comment);
      case 2:
        state0 = 0;
        index = $.$add$ns(rightIndex, 1);
        if ($.$ge$n(index, length2) === true)
          return false;
        nextChar = t1.codeUnitAt$1(comment, index);
      case 3:
        state0 = 0;
        t2 = $.getInterceptor(nextChar);
        if (t2.$eq(nextChar, 40) || t2.$eq(nextChar, 58))
          return true;
      case 4:
        var t2;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = $.getInterceptor(nextChar);
                if (!(t2.$eq(nextChar, 9) || t2.$eq(nextChar, 32) || t2.$eq(nextChar, 10) || t2.$eq(nextChar, 13)))
                  break L0;
                index = $.$add$ns(index, 1);
                if ($.$ge$n(index, length2) === true)
                  return false;
                nextChar = t1.codeUnitAt$1(comment, index);
              case 4:
                state0 = 0;
            }
        return t2.$eq(nextChar, 91);
    }
  },
  isOperator$1: function(startToken) {
    var token, t1;
    if (startToken.isOperator$0() === true) {
      token = startToken.get$next();
      for (; token.isOperator$0() === true;)
        token = token.get$next();
      t1 = $.get$TokenType_OPEN_PAREN();
      return $.get$type$x(token) === t1;
    }
    return false;
  },
  "+isOperator:1:0": 0,
  isSwitchMember$0: function() {
    var token, t1, t2, t3, keyword2;
    token = this._currentToken;
    while (true) {
      t1 = $.get$TokenType_IDENTIFIER();
      t2 = $.getInterceptor$x(token);
      if (t2.get$type(token) === t1) {
        t1 = token.get$next();
        t3 = $.get$TokenType_COLON();
        t3 = $.get$type$x(t1) === t3;
        t1 = t3;
      } else
        t1 = false;
      if (!t1)
        break;
      token = token.get$next().get$next();
    }
    if (t2.get$type(token) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(token, "$isKeywordToken");
      token.get$keyword;
      keyword2 = token._liblib9$_keyword;
      return keyword2 === $.get$Keyword_CASE() || keyword2 === $.get$Keyword_DEFAULT();
    }
    return false;
  },
  "+isSwitchMember:0:0": 0,
  lexicallyFirst$1: function(tokens) {
    var t1, t2, first, firstOffset, token, offset2;
    t1 = $.getRuntimeTypeArgument(tokens, tokens.$asJSArray, 0);
    t2 = new $.ListIterator(tokens, tokens.length, 0, null);
    t2.$builtinTypeInfo = [t1];
    first = null;
    firstOffset = 2147483647;
    for (; t2.moveNext$0();) {
      token = t2._liblib$_current;
      if (token != null) {
        offset2 = $.get$offset$x(token);
        if ($.$lt$n(offset2, firstOffset) === true) {
          firstOffset = offset2;
          first = token;
        }
      }
    }
    return first;
  },
  "+lexicallyFirst:1:0": 0,
  matches$1: function(_, keyword) {
    var t1 = this._currentToken;
    if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t1, "$isKeywordToken");
      t1.get$keyword;
      t1 = t1._liblib9$_keyword;
      t1 = t1 == null ? keyword == null : t1 === keyword;
    } else
      t1 = false;
    return t1;
  },
  matches5$1: function(type2) {
    var currentType, offset2, first, second, offset3, offset4, third;
    currentType = $.get$type$x(this._currentToken);
    if (!$.$eq(currentType, type2)) {
      if (type2 === $.get$TokenType_GT())
        if (currentType === $.get$TokenType_GT_GT()) {
          offset2 = $.get$offset$x(this._currentToken);
          if (typeof offset2 !== "number")
            return this.matches5$1$bailout(1, offset2);
          first = new $.Token(null, 0, null, null);
          first._liblib9$_type = $.get$TokenType_GT();
          first._liblib9$_offset = offset2;
          second = new $.Token(null, 0, null, null);
          second._liblib9$_type = $.get$TokenType_GT();
          second._liblib9$_offset = offset2 + 1;
          offset2 = this._currentToken.get$next();
          second._liblib9$_next = offset2;
          offset2.set$previous(second);
          first._liblib9$_next = second;
          second.set$previous(first);
          this._currentToken.get$previous().setNext$1(first);
          this._currentToken = first;
          return true;
        } else if (currentType === $.get$TokenType_GT_EQ()) {
          offset3 = $.get$offset$x(this._currentToken);
          if (typeof offset3 !== "number")
            return this.matches5$1$bailout(2, 0, offset3);
          first = new $.Token(null, 0, null, null);
          first._liblib9$_type = $.get$TokenType_GT();
          first._liblib9$_offset = offset3;
          second = new $.Token(null, 0, null, null);
          second._liblib9$_type = $.get$TokenType_EQ();
          second._liblib9$_offset = offset3 + 1;
          offset3 = this._currentToken.get$next();
          second._liblib9$_next = offset3;
          offset3.set$previous(second);
          first._liblib9$_next = second;
          second.set$previous(first);
          this._currentToken.get$previous().setNext$1(first);
          this._currentToken = first;
          return true;
        } else if (currentType === $.get$TokenType_GT_GT_EQ()) {
          offset4 = $.get$offset$x(this._currentToken);
          if (typeof offset4 !== "number")
            return this.matches5$1$bailout(3, 0, 0, offset4);
          first = new $.Token(null, 0, null, null);
          first._liblib9$_type = $.get$TokenType_GT();
          first._liblib9$_offset = offset4;
          second = new $.Token(null, 0, null, null);
          second._liblib9$_type = $.get$TokenType_GT();
          second._liblib9$_offset = offset4 + 1;
          third = new $.Token(null, 0, null, null);
          third._liblib9$_type = $.get$TokenType_EQ();
          third._liblib9$_offset = offset4 + 2;
          offset4 = this._currentToken.get$next();
          third._liblib9$_next = offset4;
          offset4.set$previous(third);
          second._liblib9$_next = third;
          third.set$previous(second);
          first._liblib9$_next = second;
          second.set$previous(first);
          this._currentToken.get$previous().setNext$1(first);
          this._currentToken = first;
          return true;
        }
      return false;
    }
    return true;
  },
  "+matches5:1:0": 0,
  matches5$1$bailout: function(state0, offset2, offset3, offset4) {
    switch (state0) {
      case 0:
        currentType = $.get$type$x(this._currentToken);
      default:
        var currentType, first, t1, second, t2, t3, third;
        if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && !$.$eq(currentType, type2))
          switch (state0) {
            case 0:
            default:
              if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && type2 === $.get$TokenType_GT())
                switch (state0) {
                  case 0:
                  default:
                    if (state0 === 1 || state0 === 0 && currentType === $.get$TokenType_GT_GT())
                      switch (state0) {
                        case 0:
                          offset2 = $.get$offset$x(this._currentToken);
                        case 1:
                          state0 = 0;
                          first = new $.Token(null, 0, null, null);
                          first._liblib9$_type = $.get$TokenType_GT();
                          first._liblib9$_offset = offset2;
                          t1 = $.get$TokenType_GT();
                          offset2 = $.$add$ns(offset2, 1);
                          second = new $.Token(null, 0, null, null);
                          second._liblib9$_type = t1;
                          second._liblib9$_offset = offset2;
                          offset2 = this._currentToken.get$next();
                          second._liblib9$_next = offset2;
                          offset2.set$previous(second);
                          first._liblib9$_next = second;
                          second.set$previous(first);
                          this._currentToken.get$previous().setNext$1(first);
                          this._currentToken = first;
                          return true;
                      }
                    else
                      switch (state0) {
                        case 0:
                        default:
                          if (state0 === 2 || state0 === 0 && currentType === $.get$TokenType_GT_EQ())
                            switch (state0) {
                              case 0:
                                offset3 = $.get$offset$x(this._currentToken);
                              case 2:
                                state0 = 0;
                                first = new $.Token(null, 0, null, null);
                                first._liblib9$_type = $.get$TokenType_GT();
                                first._liblib9$_offset = offset3;
                                t1 = $.get$TokenType_EQ();
                                offset3 = $.$add$ns(offset3, 1);
                                second = new $.Token(null, 0, null, null);
                                second._liblib9$_type = t1;
                                second._liblib9$_offset = offset3;
                                offset3 = this._currentToken.get$next();
                                second._liblib9$_next = offset3;
                                offset3.set$previous(second);
                                first._liblib9$_next = second;
                                second.set$previous(first);
                                this._currentToken.get$previous().setNext$1(first);
                                this._currentToken = first;
                                return true;
                            }
                          else
                            switch (state0) {
                              case 0:
                              case 3:
                                if (state0 === 3 || state0 === 0 && currentType === $.get$TokenType_GT_GT_EQ())
                                  switch (state0) {
                                    case 0:
                                      offset4 = $.get$offset$x(this._currentToken);
                                    case 3:
                                      state0 = 0;
                                      first = new $.Token(null, 0, null, null);
                                      first._liblib9$_type = $.get$TokenType_GT();
                                      first._liblib9$_offset = offset4;
                                      t1 = $.get$TokenType_GT();
                                      t2 = $.getInterceptor$ns(offset4);
                                      t3 = t2.$add(offset4, 1);
                                      second = new $.Token(null, 0, null, null);
                                      second._liblib9$_type = t1;
                                      second._liblib9$_offset = t3;
                                      t3 = $.get$TokenType_EQ();
                                      offset4 = t2.$add(offset4, 2);
                                      third = new $.Token(null, 0, null, null);
                                      third._liblib9$_type = t3;
                                      third._liblib9$_offset = offset4;
                                      offset4 = this._currentToken.get$next();
                                      third._liblib9$_next = offset4;
                                      offset4.set$previous(third);
                                      second._liblib9$_next = third;
                                      third.set$previous(second);
                                      first._liblib9$_next = second;
                                      second.set$previous(first);
                                      this._currentToken.get$previous().setNext$1(first);
                                      this._currentToken = first;
                                      return true;
                                  }
                            }
                      }
                }
              return false;
          }
        return true;
    }
  },
  matchesAny$2: function(token, types) {
    var actualType, t1, t2, type;
    actualType = $.get$type$x(token);
    t1 = $.getRuntimeTypeArgument(types, types.$asJSArray, 0);
    t2 = new $.ListIterator(types, types.length, 0, null);
    t2.$builtinTypeInfo = [t1];
    for (; t2.moveNext$0();) {
      type = t2._liblib$_current;
      if (actualType == null ? type == null : actualType === type)
        return true;
    }
    return false;
  },
  "+matchesAny:2:0": 0,
  optional$1: function(type) {
    if (this.matches5$1(type)) {
      this._currentToken = this._currentToken.get$next();
      return true;
    }
    return false;
  },
  "+optional:1:0": 0,
  parseAdditiveExpression$0: function() {
    var t1, t2, token, expression, node, expression0;
    t1 = $.get$Keyword_SUPER();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1 && $.get$type$x(this._currentToken.get$next()).isAdditiveOperator$0() === true) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseAdditiveExpression$0$bailout(1, token, t1);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression = new $.SuperExpression(null, null, null, null, null, t1);
      expression._keyword = token;
    } else
      expression = this.parseMultiplicativeExpression$0();
    for (; $.get$type$x(this._currentToken).isAdditiveOperator$0() === true; expression = expression0) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      node = this.parseMultiplicativeExpression$0();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseAdditiveExpression$0$bailout(2, token, t1, node, expression);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
      if (expression != null)
        $.set$parent$x(expression, expression0);
      expression0._leftOperand = expression;
      expression0._operator = token;
      if (node != null)
        $.set$parent$x(node, expression0);
      expression0._rightOperand = node;
    }
    return expression;
  },
  "+parseAdditiveExpression:0:0": 0,
  parseAdditiveExpression$0$bailout: function(state0, token, t1, node, expression) {
    switch (state0) {
      case 0:
        t1 = $.get$Keyword_SUPER();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
      case 1:
        if (state0 === 1 || state0 === 0 && t1 && $.get$type$x(this._currentToken.get$next()).isAdditiveOperator$0() === true)
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              expression = new $.SuperExpression(null, null, null, null, null, t1);
              expression._keyword = token;
          }
        else
          expression = this.parseMultiplicativeExpression$0();
      case 2:
        var t2, expression0;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!($.get$type$x(this._currentToken).isAdditiveOperator$0() === true))
                  break L0;
                token = this._currentToken;
                this._currentToken = token.get$next();
                node = this.parseMultiplicativeExpression$0();
                t1 = $.ASTNode__hashCodeGenerator;
              case 2:
                state0 = 0;
                t1 = $.$add$ns(t1, 1);
                $.ASTNode__hashCodeGenerator = t1;
                expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
                if (expression != null)
                  $.set$parent$x(expression, expression0);
                expression0._leftOperand = expression;
                expression0._operator = token;
                if (node != null)
                  $.set$parent$x(node, expression0);
                expression0._rightOperand = node;
                expression = expression0;
            }
        return expression;
    }
  },
  parseAnnotation$0: function() {
    var atSign, $name, token, constructorName, period;
    atSign = this.expect2$1($.get$TokenType_AT());
    $name = this.parsePrefixedIdentifier$0();
    if (this.matches5$1($.get$TokenType_PERIOD())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      constructorName = this.parseSimpleIdentifier$0();
      period = token;
    } else {
      period = null;
      constructorName = null;
    }
    return $.Annotation$full(atSign, $name, period, constructorName, this.matches5$1($.get$TokenType_OPEN_PAREN()) ? this.parseArgumentList$0() : null);
  },
  "+parseAnnotation:0:0": 0,
  parseArgument$0: function() {
    var t1, t2, t3, token, label, $name, node;
    t1 = this._currentToken;
    t2 = $.get$TokenType_IDENTIFIER();
    t3 = $.getInterceptor$x(t1);
    if (t3.get$type(t1) !== t2) {
      t2 = $.get$TokenType_KEYWORD();
      if (t3.get$type(t1) === t2) {
        $.propertyTypeCast(t1, "$isKeywordToken");
        t1.get$keyword;
        t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
      } else
        t1 = false;
    } else
      t1 = true;
    if (t1) {
      t1 = this._currentToken.get$next();
      t2 = $.get$TokenType_COLON();
      t2 = $.get$type$x(t1) === t2;
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseArgument$0$bailout(1, t1, token);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      label = new $.SimpleIdentifier(null, null, null, null, null, null, null, t1);
      label._liblib4$_token = token;
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseArgument$0$bailout(2, t1, token, label);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      $name = new $.Label(null, null, null, null, t1);
      label.set$parent(label, $name);
      $name._label = label;
      $name._colon = token;
      node = this.parseExpression2$0();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseArgument$0$bailout(3, t1, 0, 0, node, $name);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.NamedExpression(null, null, null, null, null, null, t1);
      $name.set$parent($name, t1);
      t1._liblib4$_name = $name;
      if (node != null)
        $.set$parent$x(node, t1);
      t1._expression = node;
      return t1;
    } else
      return this.parseExpression2$0();
  },
  "+parseArgument:0:0": 0,
  parseArgument$0$bailout: function(state0, t1, token, label, node, $name) {
    switch (state0) {
      case 0:
        t1 = this._currentToken;
        t2 = $.get$TokenType_IDENTIFIER();
        t3 = $.getInterceptor$x(t1);
        if (t3.get$type(t1) !== t2) {
          t2 = $.get$TokenType_KEYWORD();
          if (t3.get$type(t1) === t2) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
          } else
            t1 = false;
        } else
          t1 = true;
        if (t1) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_COLON();
          t2 = $.get$type$x(t1) === t2;
          t1 = t2;
        } else
          t1 = false;
      default:
        var t2, t3;
        if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              label = new $.SimpleIdentifier(null, null, null, null, null, null, null, t1);
              label._liblib4$_token = token;
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = $.ASTNode__hashCodeGenerator;
            case 2:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              $name = new $.Label(null, null, null, null, t1);
              label.set$parent(label, $name);
              $name._label = label;
              $name._colon = token;
              node = this.parseExpression2$0();
              t1 = $.ASTNode__hashCodeGenerator;
            case 3:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              t1 = new $.NamedExpression(null, null, null, null, null, null, t1);
              $name.set$parent($name, t1);
              t1._liblib4$_name = $name;
              if (node != null)
                $.set$parent$x(node, t1);
              t1._expression = node;
              return t1;
          }
        else
          return this.parseExpression2$0();
    }
  },
  parseArgumentList$0: function() {
    var leftParenthesis, $arguments, token, t1, t2, t3, t4, t5, argument, foundNamedArgument, generatedError, rightParenthesis;
    leftParenthesis = this.expect2$1($.get$TokenType_OPEN_PAREN());
    $arguments = $.List_List($, $.Expression);
    $arguments.$builtinTypeInfo = [$.Expression];
    if (this.matches5$1($.get$TokenType_CLOSE_PAREN())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseArgumentList$0$bailout(1, t1, leftParenthesis, token, $arguments);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.ArgumentList(null, null, null, null, null, null, null, t1);
      t2 = $.Expression;
      t3 = $.List_List($, t2);
      t3.$builtinTypeInfo = [t2];
      t4 = t2;
      t5 = $.List_List($, t4);
      t5.$builtinTypeInfo = [t4];
      t3 = new $.NodeList(t1, t3, t5);
      t3.$builtinTypeInfo = [t2];
      t1._liblib4$_arguments = t3;
      t1._leftParenthesis = leftParenthesis;
      t2 = t1._liblib4$_arguments;
      t2.addAll$1(t2, $arguments);
      t1._rightParenthesis = token;
      return t1;
    }
    argument = this.parseArgument$0();
    $arguments.push(argument);
    foundNamedArgument = typeof argument === "object" && argument !== null && !!$.getInterceptor(argument).$isNamedExpression;
    for (generatedError = false; this.optional$1($.get$TokenType_COMMA());) {
      argument = this.parseArgument$0();
      $arguments.push(argument);
      if (foundNamedArgument) {
        if (!generatedError && (typeof argument !== "object" || argument === null || !$.getInterceptor(argument).$isNamedExpression)) {
          t1 = $.get$ParserErrorCode_POSITIONAL_AFTER_NAMED_ARGUMENT();
          t2 = this._currentToken;
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
          generatedError = true;
        }
      } else if (typeof argument === "object" && argument !== null && !!$.getInterceptor(argument).$isNamedExpression)
        foundNamedArgument = true;
    }
    rightParenthesis = this.expect2$1($.get$TokenType_CLOSE_PAREN());
    t1 = $.ASTNode__hashCodeGenerator;
    if (typeof t1 !== "number")
      return this.parseArgumentList$0$bailout(2, t1, leftParenthesis, 0, $arguments, rightParenthesis);
    ++t1;
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.ArgumentList(null, null, null, null, null, null, null, t1);
    t2 = $.Expression;
    t3 = $.List_List($, t2);
    t3.$builtinTypeInfo = [t2];
    t4 = t2;
    t5 = $.List_List($, t4);
    t5.$builtinTypeInfo = [t4];
    t3 = new $.NodeList(t1, t3, t5);
    t3.$builtinTypeInfo = [t2];
    t1._liblib4$_arguments = t3;
    t1._leftParenthesis = leftParenthesis;
    t2 = t1._liblib4$_arguments;
    t2.addAll$1(t2, $arguments);
    t1._rightParenthesis = rightParenthesis;
    return t1;
  },
  "+parseArgumentList:0:0": 0,
  parseArgumentList$0$bailout: function(state0, t1, leftParenthesis, token, $arguments, rightParenthesis) {
    switch (state0) {
      case 0:
        leftParenthesis = this.expect2$1($.get$TokenType_OPEN_PAREN());
        $arguments = $.List_List($, $.Expression);
        $arguments.$builtinTypeInfo = [$.Expression];
      case 1:
        if (state0 === 1 || state0 === 0 && this.matches5$1($.get$TokenType_CLOSE_PAREN()))
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              t1 = new $.ArgumentList(null, null, null, null, null, null, null, t1);
              t2 = $.Expression;
              t3 = $.List_List($, t2);
              t3.$builtinTypeInfo = [t2];
              t4 = t2;
              t5 = $.List_List($, t4);
              t5.$builtinTypeInfo = [t4];
              t3 = new $.NodeList(t1, t3, t5);
              t3.$builtinTypeInfo = [t2];
              t1._liblib4$_arguments = t3;
              t1._leftParenthesis = leftParenthesis;
              t2 = t1._liblib4$_arguments;
              t2.addAll$1(t2, $arguments);
              t1._rightParenthesis = token;
              return t1;
          }
        argument = this.parseArgument$0();
        $arguments.push(argument);
        foundNamedArgument = typeof argument === "object" && argument !== null && !!$.getInterceptor(argument).$isNamedExpression;
        for (generatedError = false; this.optional$1($.get$TokenType_COMMA());) {
          argument = this.parseArgument$0();
          $arguments.push(argument);
          if (foundNamedArgument) {
            if (!generatedError && (typeof argument !== "object" || argument === null || !$.getInterceptor(argument).$isNamedExpression)) {
              t1 = $.get$ParserErrorCode_POSITIONAL_AFTER_NAMED_ARGUMENT();
              t2 = this._currentToken;
              t3 = this._errorListener;
              t4 = $.getInterceptor$x(t2);
              t5 = new $.AnalysisError(null, null, null, 0, 0);
              t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
              t3.onError$1(t3, t5);
              generatedError = true;
            }
          } else if (typeof argument === "object" && argument !== null && !!$.getInterceptor(argument).$isNamedExpression)
            foundNamedArgument = true;
        }
        rightParenthesis = this.expect2$1($.get$TokenType_CLOSE_PAREN());
        t1 = $.ASTNode__hashCodeGenerator;
      case 2:
        var t2, t3, t4, t5, argument, foundNamedArgument, generatedError;
        state0 = 0;
        t1 = $.$add$ns(t1, 1);
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.ArgumentList(null, null, null, null, null, null, null, t1);
        t2 = $.Expression;
        t3 = $.List_List($, t2);
        t3.$builtinTypeInfo = [t2];
        t4 = t2;
        t5 = $.List_List($, t4);
        t5.$builtinTypeInfo = [t4];
        t3 = new $.NodeList(t1, t3, t5);
        t3.$builtinTypeInfo = [t2];
        t1._liblib4$_arguments = t3;
        t1._leftParenthesis = leftParenthesis;
        t2 = t1._liblib4$_arguments;
        t2.addAll$1(t2, $arguments);
        t1._rightParenthesis = rightParenthesis;
        return t1;
    }
  },
  parseAssertStatement$0: function() {
    var keyword, leftParen, expression, rightParen, semicolon, t1;
    keyword = this.expect$1($.get$Keyword_ASSERT());
    leftParen = this.expect2$1($.get$TokenType_OPEN_PAREN());
    expression = this.parseConditionalExpression$0();
    rightParen = this.expect2$1($.get$TokenType_CLOSE_PAREN());
    semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.AssertStatement(null, null, null, null, null, null, null, t1);
    t1._keyword = keyword;
    t1._leftParenthesis = leftParen;
    if (expression != null)
      $.set$parent$x(expression, t1);
    t1._condition = expression;
    t1._rightParenthesis = rightParen;
    t1._semicolon = semicolon;
    return t1;
  },
  "+parseAssertStatement:0:0": 0,
  parseAssignableExpression$1: function(primaryAllowed) {
    var t1, t2, token, expression, isOptional, argumentList, expression0, node, node0, t3, selectorExpression;
    t1 = $.get$Keyword_SUPER();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.SuperExpression(null, null, null, null, null, t1);
      t1._keyword = token;
      return this.parseAssignableSelector$2(t1, false);
    }
    expression = this.parsePrimaryExpression$0();
    t1 = !primaryAllowed;
    isOptional = primaryAllowed || typeof expression === "object" && expression !== null && !!$.getInterceptor(expression).$isSimpleIdentifier;
    for (; true; expression = selectorExpression, isOptional = true) {
      for (; this.matches5$1($.get$TokenType_OPEN_PAREN());) {
        argumentList = this.parseArgumentList$0();
        if (typeof expression === "object" && expression !== null && !!$.getInterceptor(expression).$isSimpleIdentifier) {
          t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t2;
          expression0 = new $.MethodInvocation(null, null, null, null, null, null, null, null, t2);
          expression0._liblib4$_target = null;
          expression0._period = null;
          expression.set$parent(expression, expression0);
          expression0._methodName = expression;
          argumentList.set$parent(argumentList, expression0);
          expression0._argumentList = argumentList;
          expression = expression0;
        } else if (typeof expression === "object" && expression !== null && !!$.getInterceptor(expression).$isPrefixedIdentifier) {
          node = expression._prefix;
          t2 = expression._period;
          node0 = expression._identifier;
          t3 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t3;
          expression = new $.MethodInvocation(null, null, null, null, null, null, null, null, t3);
          if (node != null)
            $.set$parent$x(node, expression);
          expression._liblib4$_target = node;
          expression._period = t2;
          if (node0 != null)
            $.set$parent$x(node0, expression);
          expression._methodName = node0;
          argumentList.set$parent(argumentList, expression);
          expression._argumentList = argumentList;
        } else {
          t2 = $.ASTNode__hashCodeGenerator;
          if (typeof expression === "object" && expression !== null && !!$.getInterceptor(expression).$isPropertyAccess) {
            node = expression._liblib4$_target;
            t3 = expression._operator;
            node0 = expression._propertyName;
            t2 = $.$add$ns(t2, 1);
            $.ASTNode__hashCodeGenerator = t2;
            expression = new $.MethodInvocation(null, null, null, null, null, null, null, null, t2);
            if (node != null)
              $.set$parent$x(node, expression);
            expression._liblib4$_target = node;
            expression._period = t3;
            if (node0 != null)
              $.set$parent$x(node0, expression);
            expression._methodName = node0;
            argumentList.set$parent(argumentList, expression);
            expression._argumentList = argumentList;
          } else {
            t2 = $.$add$ns(t2, 1);
            $.ASTNode__hashCodeGenerator = t2;
            expression0 = new $.FunctionExpressionInvocation(null, null, null, null, null, null, null, null, t2);
            if (expression != null)
              $.set$parent$x(expression, expression0);
            expression0._function = expression;
            argumentList.set$parent(argumentList, expression0);
            expression0._argumentList = argumentList;
            expression = expression0;
          }
        }
        if (t1)
          isOptional = false;
      }
      t2 = !isOptional;
      selectorExpression = this.parseAssignableSelector$2(expression, isOptional || typeof expression === "object" && expression !== null && !!$.getInterceptor(expression).$isPrefixedIdentifier);
      if (selectorExpression == null ? expression == null : selectorExpression === expression) {
        if (t2 && typeof expression === "object" && expression !== null && !!$.getInterceptor(expression).$isPrefixedIdentifier) {
          $.propertyTypeCast(expression, "$isPrefixedIdentifier");
          node = expression._prefix;
          t1 = expression._period;
          node0 = expression._identifier;
          t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t2;
          expression = new $.PropertyAccess(null, null, null, null, null, null, null, t2);
          if (node != null)
            $.set$parent$x(node, expression);
          expression._liblib4$_target = node;
          expression._operator = t1;
          if (node0 != null)
            $.set$parent$x(node0, expression);
          expression._propertyName = node0;
        }
        return expression;
      }
    }
  },
  "+parseAssignableExpression:1:0": 0,
  parseAssignableSelector$2: function(prefix, optional) {
    var token, index, rightBracket, t1, node, t2, t3, t4, t5;
    if (this.matches5$1($.get$TokenType_OPEN_SQUARE_BRACKET())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      index = this.parseExpression2$0();
      rightBracket = this.expect2$1($.get$TokenType_CLOSE_SQUARE_BRACKET());
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseAssignableSelector$2$bailout(1, rightBracket, prefix, token, t1, index);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.IndexExpression(null, null, null, null, null, null, null, null, null, null, null, t1);
      if (prefix != null)
        $.set$parent$x(prefix, t1);
      t1._liblib4$_target = prefix;
      t1._leftBracket = token;
      if (index != null)
        $.set$parent$x(index, t1);
      t1._liblib4$_index = index;
      t1._rightBracket = rightBracket;
      return t1;
    } else if (this.matches5$1($.get$TokenType_PERIOD())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      node = this.parseSimpleIdentifier$0();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseAssignableSelector$2$bailout(2, 0, prefix, token, t1, 0, node);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.PropertyAccess(null, null, null, null, null, null, null, t1);
      if (prefix != null)
        $.set$parent$x(prefix, t1);
      t1._liblib4$_target = prefix;
      t1._operator = token;
      node.set$parent(node, t1);
      t1._propertyName = node;
      return t1;
    } else {
      if (!optional) {
        t1 = $.get$ParserErrorCode_MISSING_ASSIGNABLE_SELECTOR();
        t2 = this._currentToken;
        t3 = this._errorListener;
        t4 = $.getInterceptor$x(t2);
        t5 = new $.AnalysisError(null, null, null, 0, 0);
        t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
        t3.onError$1(t3, t5);
      }
      return prefix;
    }
  },
  "+parseAssignableSelector:2:0": 0,
  parseAssignableSelector$2$bailout: function(state0, rightBracket, prefix, token, t1, index, node) {
    switch (state0) {
      case 0:
      default:
        var t2, t3, t4, t5;
        if (state0 === 1 || state0 === 0 && this.matches5$1($.get$TokenType_OPEN_SQUARE_BRACKET()))
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              index = this.parseExpression2$0();
              rightBracket = this.expect2$1($.get$TokenType_CLOSE_SQUARE_BRACKET());
              t1 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              t1 = new $.IndexExpression(null, null, null, null, null, null, null, null, null, null, null, t1);
              if (prefix != null)
                $.set$parent$x(prefix, t1);
              t1._liblib4$_target = prefix;
              t1._leftBracket = token;
              if (index != null)
                $.set$parent$x(index, t1);
              t1._liblib4$_index = index;
              t1._rightBracket = rightBracket;
              return t1;
          }
        else
          switch (state0) {
            case 0:
            case 2:
              if (state0 === 2 || state0 === 0 && this.matches5$1($.get$TokenType_PERIOD()))
                switch (state0) {
                  case 0:
                    token = this._currentToken;
                    this._currentToken = token.get$next();
                    node = this.parseSimpleIdentifier$0();
                    t1 = $.ASTNode__hashCodeGenerator;
                  case 2:
                    state0 = 0;
                    t1 = $.$add$ns(t1, 1);
                    $.ASTNode__hashCodeGenerator = t1;
                    t1 = new $.PropertyAccess(null, null, null, null, null, null, null, t1);
                    if (prefix != null)
                      $.set$parent$x(prefix, t1);
                    t1._liblib4$_target = prefix;
                    t1._operator = token;
                    node.set$parent(node, t1);
                    t1._propertyName = node;
                    return t1;
                }
              else {
                if (!optional) {
                  t1 = $.get$ParserErrorCode_MISSING_ASSIGNABLE_SELECTOR();
                  t2 = this._currentToken;
                  t3 = this._errorListener;
                  t4 = $.getInterceptor$x(t2);
                  t5 = new $.AnalysisError(null, null, null, 0, 0);
                  t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                  t3.onError$1(t3, t5);
                }
                return prefix;
              }
          }
    }
  },
  parseBitwiseAndExpression$0: function() {
    var t1, t2, token, expression, node, expression0;
    t1 = $.get$Keyword_SUPER();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      t1 = this._currentToken.get$next();
      t2 = $.get$TokenType_AMPERSAND();
      t2 = $.get$type$x(t1) === t2;
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseBitwiseAndExpression$0$bailout(1, t1, token);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression = new $.SuperExpression(null, null, null, null, null, t1);
      expression._keyword = token;
    } else
      expression = this.parseEqualityExpression$0();
    for (; this.matches5$1($.get$TokenType_AMPERSAND()); expression = expression0) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      node = this.parseEqualityExpression$0();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseBitwiseAndExpression$0$bailout(2, t1, token, expression, node);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
      if (expression != null)
        $.set$parent$x(expression, expression0);
      expression0._leftOperand = expression;
      expression0._operator = token;
      if (node != null)
        $.set$parent$x(node, expression0);
      expression0._rightOperand = node;
    }
    return expression;
  },
  "+parseBitwiseAndExpression:0:0": 0,
  parseBitwiseAndExpression$0$bailout: function(state0, t1, token, expression, node) {
    switch (state0) {
      case 0:
        t1 = $.get$Keyword_SUPER();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_AMPERSAND();
          t2 = $.get$type$x(t1) === t2;
          t1 = t2;
        } else
          t1 = false;
      case 1:
        if (state0 === 1 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              expression = new $.SuperExpression(null, null, null, null, null, t1);
              expression._keyword = token;
          }
        else
          expression = this.parseEqualityExpression$0();
      case 2:
        var t2, expression0;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!this.matches5$1($.get$TokenType_AMPERSAND()))
                  break L0;
                token = this._currentToken;
                this._currentToken = token.get$next();
                node = this.parseEqualityExpression$0();
                t1 = $.ASTNode__hashCodeGenerator;
              case 2:
                state0 = 0;
                t1 = $.$add$ns(t1, 1);
                $.ASTNode__hashCodeGenerator = t1;
                expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
                if (expression != null)
                  $.set$parent$x(expression, expression0);
                expression0._leftOperand = expression;
                expression0._operator = token;
                if (node != null)
                  $.set$parent$x(node, expression0);
                expression0._rightOperand = node;
                expression = expression0;
            }
        return expression;
    }
  },
  parseBitwiseOrExpression$0: function() {
    var t1, t2, token, expression, node, expression0;
    t1 = $.get$Keyword_SUPER();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      t1 = this._currentToken.get$next();
      t2 = $.get$TokenType_BAR();
      t2 = $.get$type$x(t1) === t2;
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseBitwiseOrExpression$0$bailout(1, t1, token);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression = new $.SuperExpression(null, null, null, null, null, t1);
      expression._keyword = token;
    } else
      expression = this.parseBitwiseXorExpression$0();
    for (; this.matches5$1($.get$TokenType_BAR()); expression = expression0) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      node = this.parseBitwiseXorExpression$0();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseBitwiseOrExpression$0$bailout(2, t1, token, expression, node);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
      if (expression != null)
        $.set$parent$x(expression, expression0);
      expression0._leftOperand = expression;
      expression0._operator = token;
      if (node != null)
        $.set$parent$x(node, expression0);
      expression0._rightOperand = node;
    }
    return expression;
  },
  "+parseBitwiseOrExpression:0:0": 0,
  parseBitwiseOrExpression$0$bailout: function(state0, t1, token, expression, node) {
    switch (state0) {
      case 0:
        t1 = $.get$Keyword_SUPER();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_BAR();
          t2 = $.get$type$x(t1) === t2;
          t1 = t2;
        } else
          t1 = false;
      case 1:
        if (state0 === 1 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              expression = new $.SuperExpression(null, null, null, null, null, t1);
              expression._keyword = token;
          }
        else
          expression = this.parseBitwiseXorExpression$0();
      case 2:
        var t2, expression0;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!this.matches5$1($.get$TokenType_BAR()))
                  break L0;
                token = this._currentToken;
                this._currentToken = token.get$next();
                node = this.parseBitwiseXorExpression$0();
                t1 = $.ASTNode__hashCodeGenerator;
              case 2:
                state0 = 0;
                t1 = $.$add$ns(t1, 1);
                $.ASTNode__hashCodeGenerator = t1;
                expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
                if (expression != null)
                  $.set$parent$x(expression, expression0);
                expression0._leftOperand = expression;
                expression0._operator = token;
                if (node != null)
                  $.set$parent$x(node, expression0);
                expression0._rightOperand = node;
                expression = expression0;
            }
        return expression;
    }
  },
  parseBitwiseXorExpression$0: function() {
    var t1, t2, token, expression, node, expression0;
    t1 = $.get$Keyword_SUPER();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      t1 = this._currentToken.get$next();
      t2 = $.get$TokenType_CARET();
      t2 = $.get$type$x(t1) === t2;
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseBitwiseXorExpression$0$bailout(1, t1, token);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression = new $.SuperExpression(null, null, null, null, null, t1);
      expression._keyword = token;
    } else
      expression = this.parseBitwiseAndExpression$0();
    for (; this.matches5$1($.get$TokenType_CARET()); expression = expression0) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      node = this.parseBitwiseAndExpression$0();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseBitwiseXorExpression$0$bailout(2, t1, token, expression, node);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
      if (expression != null)
        $.set$parent$x(expression, expression0);
      expression0._leftOperand = expression;
      expression0._operator = token;
      if (node != null)
        $.set$parent$x(node, expression0);
      expression0._rightOperand = node;
    }
    return expression;
  },
  "+parseBitwiseXorExpression:0:0": 0,
  parseBitwiseXorExpression$0$bailout: function(state0, t1, token, expression, node) {
    switch (state0) {
      case 0:
        t1 = $.get$Keyword_SUPER();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_CARET();
          t2 = $.get$type$x(t1) === t2;
          t1 = t2;
        } else
          t1 = false;
      case 1:
        if (state0 === 1 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              expression = new $.SuperExpression(null, null, null, null, null, t1);
              expression._keyword = token;
          }
        else
          expression = this.parseBitwiseAndExpression$0();
      case 2:
        var t2, expression0;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!this.matches5$1($.get$TokenType_CARET()))
                  break L0;
                token = this._currentToken;
                this._currentToken = token.get$next();
                node = this.parseBitwiseAndExpression$0();
                t1 = $.ASTNode__hashCodeGenerator;
              case 2:
                state0 = 0;
                t1 = $.$add$ns(t1, 1);
                $.ASTNode__hashCodeGenerator = t1;
                expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
                if (expression != null)
                  $.set$parent$x(expression, expression0);
                expression0._leftOperand = expression;
                expression0._operator = token;
                if (node != null)
                  $.set$parent$x(node, expression0);
                expression0._rightOperand = node;
                expression = expression0;
            }
        return expression;
    }
  },
  parseBlock$0: function() {
    var leftBracket, statements, statementStart, statement, t1, t2, t3, t4, t5, t6, rightBracket;
    leftBracket = this.expect2$1($.get$TokenType_OPEN_CURLY_BRACKET());
    statements = $.List_List($, $.Statement);
    statements.$builtinTypeInfo = [$.Statement];
    statementStart = this._currentToken;
    while (true) {
      if (!(!this.matches5$1($.get$TokenType_EOF()) && !this.matches5$1($.get$TokenType_CLOSE_CURLY_BRACKET())))
        break;
      statement = this.parseStatement2$0();
      if (statement != null)
        statements.push(statement);
      t1 = this._currentToken;
      if (t1 == null ? statementStart == null : t1 === statementStart) {
        t1 = $.get$ParserErrorCode_UNEXPECTED_TOKEN();
        t2 = this._currentToken;
        t3 = t2.get$lexeme();
        t4 = this._errorListener;
        t5 = $.getInterceptor$x(t2);
        t6 = new $.AnalysisError(null, null, null, 0, 0);
        t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t2), t5.get$length(t2), t1, [t3]);
        t4.onError$1(t4, t6);
        this._currentToken = this._currentToken.get$next();
      }
      statementStart = this._currentToken;
    }
    rightBracket = this.expect2$1($.get$TokenType_CLOSE_CURLY_BRACKET());
    t1 = $.ASTNode__hashCodeGenerator;
    if (typeof t1 !== "number")
      return this.parseBlock$0$bailout(1, t1, leftBracket, statements, rightBracket);
    ++t1;
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.Block(null, null, null, null, null, t1);
    t2 = $.Statement;
    t3 = $.List_List($, t2);
    t3.$builtinTypeInfo = [t2];
    t4 = t2;
    t5 = $.List_List($, t4);
    t5.$builtinTypeInfo = [t4];
    t3 = new $.NodeList(t1, t3, t5);
    t3.$builtinTypeInfo = [t2];
    t1._statements = t3;
    t1._leftBracket = leftBracket;
    t2 = t1._statements;
    t2.addAll$1(t2, statements);
    t1._rightBracket = rightBracket;
    return t1;
  },
  "+parseBlock:0:0": 0,
  parseBlock$0$bailout: function(state0, t1, leftBracket, statements, rightBracket) {
    var t2, t3, t4, t5;
    t1 = $.$add$ns(t1, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.Block(null, null, null, null, null, t1);
    t2 = $.Statement;
    t3 = $.List_List($, t2);
    t3.$builtinTypeInfo = [t2];
    t4 = t2;
    t5 = $.List_List($, t4);
    t5.$builtinTypeInfo = [t4];
    t3 = new $.NodeList(t1, t3, t5);
    t3.$builtinTypeInfo = [t2];
    t1._statements = t3;
    t1._leftBracket = leftBracket;
    t2 = t1._statements;
    t2.addAll$1(t2, statements);
    t1._rightBracket = rightBracket;
    return t1;
  },
  parseBreakStatement$0: function() {
    var breakKeyword, t1, t2, t3, label, t4, semicolon;
    breakKeyword = this.expect$1($.get$Keyword_BREAK());
    t1 = this._currentToken;
    t2 = $.get$TokenType_IDENTIFIER();
    t3 = $.getInterceptor$x(t1);
    if (t3.get$type(t1) !== t2) {
      t2 = $.get$TokenType_KEYWORD();
      if (t3.get$type(t1) === t2) {
        $.propertyTypeCast(t1, "$isKeywordToken");
        t1.get$keyword;
        t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
      } else
        t1 = false;
    } else
      t1 = true;
    label = t1 ? this.parseSimpleIdentifier$0() : null;
    if (!this._inLoop && !this._inSwitch && label == null) {
      t1 = $.get$ParserErrorCode_BREAK_OUTSIDE_OF_LOOP();
      t2 = this._errorListener;
      t3 = $.getInterceptor$x(breakKeyword);
      t4 = new $.AnalysisError(null, null, null, 0, 0);
      t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(breakKeyword), t3.get$length(breakKeyword), t1, []);
      t2.onError$1(t2, t4);
    }
    semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.BreakStatement(null, null, null, null, null, t1);
    t1._keyword = breakKeyword;
    if (label != null)
      label.set$parent(label, t1);
    t1._label = label;
    t1._semicolon = semicolon;
    return t1;
  },
  "+parseBreakStatement:0:0": 0,
  parseCascadeSection$0: function() {
    var period, t1, t2, t3, functionName, expression, token, index, rightBracket, t4, t5, t6, node, expression0, node0, progress, selector;
    period = this.expect2$1($.get$TokenType_PERIOD_PERIOD());
    t1 = this._currentToken;
    t2 = $.get$TokenType_IDENTIFIER();
    t3 = $.getInterceptor$x(t1);
    if (t3.get$type(t1) !== t2) {
      t2 = $.get$TokenType_KEYWORD();
      if (t3.get$type(t1) === t2) {
        $.propertyTypeCast(t1, "$isKeywordToken");
        t1.get$keyword;
        t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
      } else
        t1 = false;
    } else
      t1 = true;
    if (t1) {
      functionName = this.parseSimpleIdentifier$0();
      expression = null;
    } else if ($.get$type$x(this._currentToken) === $.get$TokenType_OPEN_SQUARE_BRACKET()) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      index = this.parseExpression2$0();
      rightBracket = this.expect2$1($.get$TokenType_CLOSE_SQUARE_BRACKET());
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseCascadeSection$0$bailout(1, rightBracket, t1, period, token, index);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression = new $.IndexExpression(null, null, null, null, null, null, null, null, null, null, null, t1);
      expression._period = period;
      expression._leftBracket = token;
      if (index != null)
        $.set$parent$x(index, expression);
      expression._liblib4$_index = index;
      expression._rightBracket = rightBracket;
      period = null;
      functionName = null;
    } else {
      t1 = $.get$ParserErrorCode_MISSING_IDENTIFIER();
      t2 = this._currentToken;
      t3 = t2.get$lexeme();
      t4 = this._errorListener;
      t5 = $.getInterceptor$x(t2);
      t6 = new $.AnalysisError(null, null, null, 0, 0);
      t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t2), t5.get$length(t2), t1, [t3]);
      t4.onError$1(t4, t6);
      t6 = $.get$TokenType_IDENTIFIER();
      t4 = $.get$offset$x(this._currentToken);
      t3 = new $.StringToken(null, null, 0, null, null);
      t3._liblib9$_type = t6;
      t3._liblib9$_offset = t4;
      t3._value2 = $.StringUtilities_intern("");
      t4 = $.ASTNode__hashCodeGenerator;
      if (typeof t4 !== "number")
        return this.parseCascadeSection$0$bailout(2, 0, 0, period, 0, 0, t4, t3);
      ++t4;
      $.ASTNode__hashCodeGenerator = t4;
      functionName = new $.SimpleIdentifier(null, null, null, null, null, null, null, t4);
      functionName._liblib4$_token = t3;
      expression = null;
    }
    if ($.get$type$x(this._currentToken) === $.get$TokenType_OPEN_PAREN())
      for (; $.get$type$x(this._currentToken) === $.get$TokenType_OPEN_PAREN();) {
        t1 = functionName != null;
        if (t1) {
          node = this.parseArgumentList$0();
          t2 = $.ASTNode__hashCodeGenerator;
          if (typeof t2 !== "number")
            return this.parseCascadeSection$0$bailout(3, 0, t1, period, 0, 0, 0, 0, node, functionName, t2, expression);
          ++t2;
          $.ASTNode__hashCodeGenerator = t2;
          expression0 = new $.MethodInvocation(null, null, null, null, null, null, null, null, t2);
          if (expression != null)
            expression.set$parent(expression, expression0);
          expression0._liblib4$_target = expression;
          expression0._period = period;
          if (t1)
            functionName.set$parent(functionName, expression0);
          expression0._methodName = functionName;
          node.set$parent(node, expression0);
          expression0._argumentList = node;
          expression = expression0;
          period = null;
          functionName = null;
        } else {
          t1 = expression == null;
          if (t1) {
            t2 = $.get$TokenType_IDENTIFIER();
            t3 = $.get$offset$x(this._currentToken);
            t4 = new $.StringToken(null, null, 0, null, null);
            t4._liblib9$_type = t2;
            t4._liblib9$_offset = t3;
            t4._value2 = $.StringUtilities_intern("");
            t3 = $.ASTNode__hashCodeGenerator;
            if (typeof t3 !== "number")
              return this.parseCascadeSection$0$bailout(4, 0, t1, period, 0, 0, t4, t3, 0, functionName, 0, expression);
            ++t3;
            $.ASTNode__hashCodeGenerator = t3;
            node = new $.SimpleIdentifier(null, null, null, null, null, null, null, t3);
            node._liblib4$_token = t4;
            node0 = this.parseArgumentList$0();
            t4 = $.ASTNode__hashCodeGenerator;
            if (typeof t4 !== "number")
              return this.parseCascadeSection$0$bailout(5, 0, t1, period, 0, 0, t4, 0, node, functionName, 0, expression, node0);
            ++t4;
            $.ASTNode__hashCodeGenerator = t4;
            expression0 = new $.MethodInvocation(null, null, null, null, null, null, null, null, t4);
            if (!t1)
              expression.set$parent(expression, expression0);
            expression0._liblib4$_target = expression;
            expression0._period = period;
            node.set$parent(node, expression0);
            expression0._methodName = node;
            node0.set$parent(node0, expression0);
            expression0._argumentList = node0;
            expression = expression0;
          } else {
            node = this.parseArgumentList$0();
            t2 = $.ASTNode__hashCodeGenerator;
            if (typeof t2 !== "number")
              return this.parseCascadeSection$0$bailout(6, 0, t1, period, 0, 0, 0, 0, node, functionName, t2, expression);
            ++t2;
            $.ASTNode__hashCodeGenerator = t2;
            expression0 = new $.FunctionExpressionInvocation(null, null, null, null, null, null, null, null, t2);
            if (!t1)
              expression.set$parent(expression, expression0);
            expression0._function = expression;
            node.set$parent(node, expression0);
            expression0._argumentList = node;
            expression = expression0;
          }
        }
      }
    else {
      t1 = functionName != null;
      if (t1) {
        t2 = $.ASTNode__hashCodeGenerator;
        if (typeof t2 !== "number")
          return this.parseCascadeSection$0$bailout(7, 0, t1, period, 0, 0, 0, 0, 0, functionName, t2, expression);
        ++t2;
        $.ASTNode__hashCodeGenerator = t2;
        expression0 = new $.PropertyAccess(null, null, null, null, null, null, null, t2);
        if (expression != null)
          expression.set$parent(expression, expression0);
        expression0._liblib4$_target = expression;
        expression0._operator = period;
        if (t1)
          functionName.set$parent(functionName, expression0);
        expression0._propertyName = functionName;
        expression = expression0;
      }
    }
    for (progress = true; progress;) {
      selector = this.parseAssignableSelector$2(expression, true);
      if (!$.$eq(selector, expression)) {
        for (expression = selector; $.get$type$x(this._currentToken) === $.get$TokenType_OPEN_PAREN(); expression = expression0) {
          node = this.parseArgumentList$0();
          t1 = $.ASTNode__hashCodeGenerator;
          if (typeof t1 !== "number")
            return this.parseCascadeSection$0$bailout(8, 0, t1, 0, 0, 0, 0, 0, node, 0, 0, expression);
          ++t1;
          $.ASTNode__hashCodeGenerator = t1;
          expression0 = new $.FunctionExpressionInvocation(null, null, null, null, null, null, null, null, t1);
          if (expression != null)
            $.set$parent$x(expression, expression0);
          expression0._function = expression;
          node.set$parent(node, expression0);
          expression0._argumentList = node;
        }
        progress = true;
      } else
        progress = false;
    }
    if ($.get$type$x(this._currentToken).isAssignmentOperator$0() === true) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = expression != null;
      if (t1 && expression.isAssignable$0() !== true) {
        t2 = $.get$ParserErrorCode_ILLEGAL_ASSIGNMENT_TO_NON_ASSIGNABLE();
        t3 = this._currentToken;
        t4 = this._errorListener;
        t5 = $.getInterceptor$x(t3);
        t6 = new $.AnalysisError(null, null, null, 0, 0);
        t6.AnalysisError$con2$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t2, []);
        t4.onError$1(t4, t6);
      }
      node = this.parseExpressionWithoutCascade$0();
      t2 = $.ASTNode__hashCodeGenerator;
      if (typeof t2 !== "number")
        return this.parseCascadeSection$0$bailout(9, 0, t1, 0, token, 0, 0, 0, node, 0, t2, expression);
      ++t2;
      $.ASTNode__hashCodeGenerator = t2;
      expression0 = new $.AssignmentExpression(null, null, null, null, null, null, null, null, null, t2);
      if (t1)
        $.set$parent$x(expression, expression0);
      expression0._leftHandSide = expression;
      expression0._operator = token;
      if (node != null)
        $.set$parent$x(node, expression0);
      expression0._rightHandSide = node;
      expression = expression0;
    }
    return expression;
  },
  "+parseCascadeSection:0:0": 0,
  parseCascadeSection$0$bailout: function(state0, rightBracket, t1, period, token, index, t4, t3, node, functionName, t2, expression, node0) {
    switch (state0) {
      case 0:
        period = this.expect2$1($.get$TokenType_PERIOD_PERIOD());
        t1 = this._currentToken;
        t2 = $.get$TokenType_IDENTIFIER();
        t3 = $.getInterceptor$x(t1);
        if (t3.get$type(t1) !== t2) {
          t2 = $.get$TokenType_KEYWORD();
          if (t3.get$type(t1) === t2) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
          } else
            t1 = false;
        } else
          t1 = true;
      default:
        if (state0 === 0 && t1) {
          functionName = this.parseSimpleIdentifier$0();
          expression = null;
        } else
          switch (state0) {
            case 0:
            default:
              if (state0 === 1 || state0 === 0 && $.get$type$x(this._currentToken) === $.get$TokenType_OPEN_SQUARE_BRACKET())
                switch (state0) {
                  case 0:
                    token = this._currentToken;
                    this._currentToken = token.get$next();
                    index = this.parseExpression2$0();
                    rightBracket = this.expect2$1($.get$TokenType_CLOSE_SQUARE_BRACKET());
                    t1 = $.ASTNode__hashCodeGenerator;
                  case 1:
                    state0 = 0;
                    t1 = $.$add$ns(t1, 1);
                    $.ASTNode__hashCodeGenerator = t1;
                    expression = new $.IndexExpression(null, null, null, null, null, null, null, null, null, null, null, t1);
                    expression._period = period;
                    expression._leftBracket = token;
                    if (index != null)
                      $.set$parent$x(index, expression);
                    expression._liblib4$_index = index;
                    expression._rightBracket = rightBracket;
                    period = null;
                    functionName = null;
                }
              else
                switch (state0) {
                  case 0:
                    t1 = $.get$ParserErrorCode_MISSING_IDENTIFIER();
                    t2 = this._currentToken;
                    t3 = t2.get$lexeme();
                    t4 = this._errorListener;
                    t5 = $.getInterceptor$x(t2);
                    t6 = new $.AnalysisError(null, null, null, 0, 0);
                    t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t2), t5.get$length(t2), t1, [t3]);
                    t4.onError$1(t4, t6);
                    t6 = $.get$TokenType_IDENTIFIER();
                    t4 = $.get$offset$x(this._currentToken);
                    t3 = new $.StringToken(null, null, 0, null, null);
                    t3._liblib9$_type = t6;
                    t3._liblib9$_offset = t4;
                    t3._value2 = $.StringUtilities_intern("");
                    t4 = $.ASTNode__hashCodeGenerator;
                  case 2:
                    state0 = 0;
                    t4 = $.$add$ns(t4, 1);
                    $.ASTNode__hashCodeGenerator = t4;
                    functionName = new $.SimpleIdentifier(null, null, null, null, null, null, null, t4);
                    functionName._liblib4$_token = t3;
                    expression = null;
                }
          }
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && $.get$type$x(this._currentToken) === $.get$TokenType_OPEN_PAREN())
          switch (state0) {
            case 0:
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!($.get$type$x(this._currentToken) === $.get$TokenType_OPEN_PAREN()))
                        break L0;
                      t1 = functionName != null;
                    default:
                      if (state0 === 3 || state0 === 0 && t1)
                        switch (state0) {
                          case 0:
                            node = this.parseArgumentList$0();
                            t2 = $.ASTNode__hashCodeGenerator;
                          case 3:
                            state0 = 0;
                            t2 = $.$add$ns(t2, 1);
                            $.ASTNode__hashCodeGenerator = t2;
                            expression0 = new $.MethodInvocation(null, null, null, null, null, null, null, null, t2);
                            if (expression != null)
                              expression.set$parent(expression, expression0);
                            expression0._liblib4$_target = expression;
                            expression0._period = period;
                            if (t1)
                              functionName.set$parent(functionName, expression0);
                            expression0._methodName = functionName;
                            node.set$parent(node, expression0);
                            expression0._argumentList = node;
                            expression = expression0;
                            period = null;
                            functionName = null;
                        }
                      else
                        switch (state0) {
                          case 0:
                            t1 = expression == null;
                          default:
                            if (state0 === 5 || state0 === 4 || state0 === 0 && t1)
                              switch (state0) {
                                case 0:
                                  t2 = $.get$TokenType_IDENTIFIER();
                                  t3 = $.get$offset$x(this._currentToken);
                                  t4 = new $.StringToken(null, null, 0, null, null);
                                  t4._liblib9$_type = t2;
                                  t4._liblib9$_offset = t3;
                                  t4._value2 = $.StringUtilities_intern("");
                                  t3 = $.ASTNode__hashCodeGenerator;
                                case 4:
                                  state0 = 0;
                                  t3 = $.$add$ns(t3, 1);
                                  $.ASTNode__hashCodeGenerator = t3;
                                  node = new $.SimpleIdentifier(null, null, null, null, null, null, null, t3);
                                  node._liblib4$_token = t4;
                                  node0 = this.parseArgumentList$0();
                                  t4 = $.ASTNode__hashCodeGenerator;
                                case 5:
                                  state0 = 0;
                                  t4 = $.$add$ns(t4, 1);
                                  $.ASTNode__hashCodeGenerator = t4;
                                  expression0 = new $.MethodInvocation(null, null, null, null, null, null, null, null, t4);
                                  if (!t1)
                                    expression.set$parent(expression, expression0);
                                  expression0._liblib4$_target = expression;
                                  expression0._period = period;
                                  node.set$parent(node, expression0);
                                  expression0._methodName = node;
                                  node0.set$parent(node0, expression0);
                                  expression0._argumentList = node0;
                                  expression = expression0;
                              }
                            else
                              switch (state0) {
                                case 0:
                                  node = this.parseArgumentList$0();
                                  t2 = $.ASTNode__hashCodeGenerator;
                                case 6:
                                  state0 = 0;
                                  t2 = $.$add$ns(t2, 1);
                                  $.ASTNode__hashCodeGenerator = t2;
                                  expression0 = new $.FunctionExpressionInvocation(null, null, null, null, null, null, null, null, t2);
                                  if (!t1)
                                    expression.set$parent(expression, expression0);
                                  expression0._function = expression;
                                  node.set$parent(node, expression0);
                                  expression0._argumentList = node;
                                  expression = expression0;
                              }
                        }
                  }
          }
        else
          switch (state0) {
            case 0:
              t1 = functionName != null;
            case 7:
              if (state0 === 7 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t2 = $.ASTNode__hashCodeGenerator;
                  case 7:
                    state0 = 0;
                    t2 = $.$add$ns(t2, 1);
                    $.ASTNode__hashCodeGenerator = t2;
                    expression0 = new $.PropertyAccess(null, null, null, null, null, null, null, t2);
                    if (expression != null)
                      expression.set$parent(expression, expression0);
                    expression0._liblib4$_target = expression;
                    expression0._operator = period;
                    if (t1)
                      functionName.set$parent(functionName, expression0);
                    expression0._propertyName = functionName;
                    expression = expression0;
                }
          }
        progress = true;
      case 8:
        L1:
          while (true)
            switch (state0) {
              case 0:
                if (!progress)
                  break L1;
                selector = this.parseAssignableSelector$2(expression, true);
              case 8:
                if (state0 === 8 || state0 === 0 && !$.$eq(selector, expression))
                  switch (state0) {
                    case 0:
                      expression = selector;
                    case 8:
                      L2:
                        while (true)
                          switch (state0) {
                            case 0:
                              if (!($.get$type$x(this._currentToken) === $.get$TokenType_OPEN_PAREN()))
                                break L2;
                              node = this.parseArgumentList$0();
                              t1 = $.ASTNode__hashCodeGenerator;
                            case 8:
                              state0 = 0;
                              t1 = $.$add$ns(t1, 1);
                              $.ASTNode__hashCodeGenerator = t1;
                              expression0 = new $.FunctionExpressionInvocation(null, null, null, null, null, null, null, null, t1);
                              if (expression != null)
                                $.set$parent$x(expression, expression0);
                              expression0._function = expression;
                              node.set$parent(node, expression0);
                              expression0._argumentList = node;
                              expression = expression0;
                          }
                      progress = true;
                  }
                else
                  progress = false;
            }
      case 9:
        var t5, t6, expression0, progress, selector;
        if (state0 === 9 || state0 === 0 && $.get$type$x(this._currentToken).isAssignmentOperator$0() === true)
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = expression != null;
              if (t1 && expression.isAssignable$0() !== true) {
                t2 = $.get$ParserErrorCode_ILLEGAL_ASSIGNMENT_TO_NON_ASSIGNABLE();
                t3 = this._currentToken;
                t4 = this._errorListener;
                t5 = $.getInterceptor$x(t3);
                t6 = new $.AnalysisError(null, null, null, 0, 0);
                t6.AnalysisError$con2$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t2, []);
                t4.onError$1(t4, t6);
              }
              node = this.parseExpressionWithoutCascade$0();
              t2 = $.ASTNode__hashCodeGenerator;
            case 9:
              state0 = 0;
              t2 = $.$add$ns(t2, 1);
              $.ASTNode__hashCodeGenerator = t2;
              expression0 = new $.AssignmentExpression(null, null, null, null, null, null, null, null, null, t2);
              if (t1)
                $.set$parent$x(expression, expression0);
              expression0._leftHandSide = expression;
              expression0._operator = token;
              if (node != null)
                $.set$parent$x(node, expression0);
              expression0._rightHandSide = node;
              expression = expression0;
          }
        return expression;
    }
  },
  parseClassDeclaration$2: function(commentAndMetadata, abstractKeyword) {
    var keyword, $name, className, typeParameters, extendsClause, withClause, implementsClause, foundClause, t1, t2, keyword0, superclass, t3, t4, t5, leftBracket, members, rightBracket;
    keyword = this.expect$1($.get$Keyword_CLASS());
    $name = this.parseSimpleIdentifier$0();
    className = $name._liblib4$_token.get$lexeme();
    typeParameters = this.matches5$1($.get$TokenType_LT()) ? this.parseTypeParameterList$0() : null;
    for (extendsClause = null, withClause = null, implementsClause = null, foundClause = true; foundClause;) {
      t1 = $.get$Keyword_EXTENDS();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1)
        if (extendsClause == null) {
          keyword0 = this.expect$1($.get$Keyword_EXTENDS());
          superclass = this.parseTypeName$0();
          t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t1;
          extendsClause = new $.ExtendsClause(null, null, null, null, t1);
          extendsClause._keyword = keyword0;
          superclass.set$parent(superclass, extendsClause);
          extendsClause._superclass = superclass;
          if (withClause != null) {
            t1 = $.get$ParserErrorCode_WITH_BEFORE_EXTENDS();
            withClause.get$withKeyword;
            t2 = withClause._withKeyword;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
          } else if (implementsClause != null) {
            t1 = $.get$ParserErrorCode_IMPLEMENTS_BEFORE_EXTENDS();
            implementsClause.get$keyword;
            t2 = implementsClause._keyword;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
          }
        } else {
          t1 = $.get$ParserErrorCode_MULTIPLE_EXTENDS_CLAUSES();
          extendsClause.get$keyword;
          t2 = extendsClause._keyword;
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
          keyword0 = this.expect$1($.get$Keyword_EXTENDS());
          superclass = this.parseTypeName$0();
          t5 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t5;
          t5 = new $.ExtendsClause(null, null, null, null, t5);
          t5._keyword = keyword0;
          superclass.set$parent(superclass, t5);
          t5._superclass = superclass;
        }
      else {
        t1 = $.get$Keyword_WITH();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1)
          if (withClause == null) {
            withClause = this.parseWithClause$0();
            if (implementsClause != null) {
              t1 = $.get$ParserErrorCode_IMPLEMENTS_BEFORE_WITH();
              implementsClause.get$keyword;
              t2 = implementsClause._keyword;
              t3 = this._errorListener;
              t4 = $.getInterceptor$x(t2);
              t5 = new $.AnalysisError(null, null, null, 0, 0);
              t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
              t3.onError$1(t3, t5);
            }
          } else {
            t1 = $.get$ParserErrorCode_MULTIPLE_WITH_CLAUSES();
            withClause.get$withKeyword;
            t2 = withClause._withKeyword;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
            this.parseWithClause$0();
          }
        else {
          t1 = $.get$Keyword_IMPLEMENTS();
          t2 = this._currentToken;
          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t2, "$isKeywordToken");
            t2.get$keyword;
            t1 = t2._liblib9$_keyword === t1;
          } else
            t1 = false;
          if (t1)
            if (implementsClause == null)
              implementsClause = this.parseImplementsClause$0();
            else {
              t1 = $.get$ParserErrorCode_MULTIPLE_IMPLEMENTS_CLAUSES();
              implementsClause.get$keyword;
              t2 = implementsClause._keyword;
              t3 = this._errorListener;
              t4 = $.getInterceptor$x(t2);
              t5 = new $.AnalysisError(null, null, null, 0, 0);
              t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
              t3.onError$1(t3, t5);
              this.parseImplementsClause$0();
            }
          else
            foundClause = false;
        }
      }
    }
    if (withClause != null && extendsClause == null) {
      t1 = $.get$ParserErrorCode_WITH_WITHOUT_EXTENDS();
      withClause.get$withKeyword;
      t2 = withClause._withKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    t1 = $.Parser__NATIVE;
    if ($.get$type$x(this._currentToken) === $.get$TokenType_IDENTIFIER() && $.$eq(this._currentToken.get$lexeme(), t1)) {
      t1 = this._currentToken.get$next();
      t2 = $.get$TokenType_STRING();
      t2 = $.get$type$x(t1) === t2;
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      this._currentToken = this._currentToken.get$next();
      this._currentToken = this._currentToken.get$next();
    }
    if (this.matches5$1($.get$TokenType_OPEN_CURLY_BRACKET())) {
      leftBracket = this.expect2$1($.get$TokenType_OPEN_CURLY_BRACKET());
      members = this.parseClassMembers$2(className, this.getEndToken$1(leftBracket));
      rightBracket = this.expect2$1($.get$TokenType_CLOSE_CURLY_BRACKET());
    } else {
      t1 = $.get$TokenType_OPEN_CURLY_BRACKET();
      t2 = $.get$offset$x(this._currentToken);
      leftBracket = new $.StringToken(null, null, 0, null, null);
      leftBracket._liblib9$_type = t1;
      leftBracket._liblib9$_offset = t2;
      leftBracket._value2 = "";
      t2 = $.get$TokenType_CLOSE_CURLY_BRACKET();
      t1 = $.get$offset$x(this._currentToken);
      rightBracket = new $.StringToken(null, null, 0, null, null);
      rightBracket._liblib9$_type = t2;
      rightBracket._liblib9$_offset = t1;
      rightBracket._value2 = "";
      t1 = $.get$ParserErrorCode_MISSING_CLASS_BODY();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
      members = null;
    }
    return $.ClassDeclaration$full(commentAndMetadata._liblib14$_comment, commentAndMetadata._liblib14$_metadata, abstractKeyword, keyword, $name, typeParameters, extendsClause, withClause, implementsClause, leftBracket, members, rightBracket);
  },
  "+parseClassDeclaration:2:0": 0,
  parseClassMember$1: function(className) {
    var commentAndMetadata, modifiers, t1, t2, returnType, t3, methodName, parameters, fieldList, node, t4, t5, t6, t7, t8, token, type;
    commentAndMetadata = this.parseCommentAndMetadata$0();
    modifiers = this.parseModifiers$0();
    t1 = $.get$Keyword_VOID();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      returnType = this.parseReturnType$0();
      t1 = $.get$Keyword_GET();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1) {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_IDENTIFIER();
        t3 = $.getInterceptor$x(t1);
        if (t3.get$type(t1) !== t2) {
          t2 = $.get$TokenType_KEYWORD();
          if (t3.get$type(t1) === t2) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
          } else
            t1 = false;
        } else
          t1 = true;
      } else
        t1 = false;
      if (t1) {
        this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
        return this.parseGetter$4(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, returnType);
      } else {
        t1 = $.get$Keyword_SET();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_IDENTIFIER();
          t3 = $.getInterceptor$x(t1);
          if (t3.get$type(t1) !== t2) {
            t2 = $.get$TokenType_KEYWORD();
            if (t3.get$type(t1) === t2) {
              $.propertyTypeCast(t1, "$isKeywordToken");
              t1.get$keyword;
              t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
            } else
              t1 = false;
          } else
            t1 = true;
        } else
          t1 = false;
        if (t1) {
          this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
          return this.parseSetter$4(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, returnType);
        } else {
          t1 = $.get$Keyword_OPERATOR();
          t2 = this._currentToken;
          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t2, "$isKeywordToken");
            t2.get$keyword;
            t1 = t2._liblib9$_keyword === t1;
          } else
            t1 = false;
          if (t1 && this.isOperator$1(this._currentToken.get$next())) {
            this.validateModifiersForOperator$1(modifiers);
            return this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, returnType);
          } else {
            t1 = this._currentToken;
            t2 = $.get$TokenType_IDENTIFIER();
            t3 = $.getInterceptor$x(t1);
            if (t3.get$type(t1) !== t2) {
              t2 = $.get$TokenType_KEYWORD();
              if (t3.get$type(t1) === t2) {
                $.propertyTypeCast(t1, "$isKeywordToken");
                t1.get$keyword;
                t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
              } else
                t1 = false;
            } else
              t1 = true;
            if (t1 && this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_OPEN_PAREN(), $.get$TokenType_OPEN_CURLY_BRACKET(), $.get$TokenType_FUNCTION()])) {
              this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
              t1 = modifiers._externalKeyword;
              t2 = modifiers._staticKeyword;
              methodName = this.parseSimpleIdentifier$0();
              parameters = this.parseFormalParameterList$0();
              this.validateFormalParameterList$1(parameters);
              return this.parseMethodDeclaration2$6(commentAndMetadata, t1, t2, returnType, methodName, parameters);
            } else {
              t1 = this._currentToken;
              t2 = $.get$TokenType_IDENTIFIER();
              t3 = $.getInterceptor$x(t1);
              if (t3.get$type(t1) !== t2) {
                t2 = $.get$TokenType_KEYWORD();
                if (t3.get$type(t1) === t2) {
                  $.propertyTypeCast(t1, "$isKeywordToken");
                  t1.get$keyword;
                  t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                } else
                  t1 = false;
              } else
                t1 = true;
              if (t1)
                if (this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_EQ(), $.get$TokenType_COMMA(), $.get$TokenType_SEMICOLON()])) {
                  t1 = $.get$ParserErrorCode_VOID_VARIABLE();
                  t2 = this._errorListener;
                  t3 = new $.AnalysisError(null, null, null, 0, 0);
                  t3._jtd_constructor_132_impl$5(this._liblib14$_source, returnType.get$offset(returnType), returnType.get$length(returnType), t1, []);
                  t2.onError$1(t2, t3);
                  t3 = modifiers._staticKeyword;
                  fieldList = this.parseVariableDeclarationList2$3(null, this.validateModifiersForField$1(modifiers), returnType);
                  node = commentAndMetadata._liblib14$_comment;
                  t2 = commentAndMetadata._liblib14$_metadata;
                  t1 = this.expect2$1($.get$TokenType_SEMICOLON());
                  t4 = $.ASTNode__hashCodeGenerator;
                  if (typeof t4 !== "number")
                    return this.parseClassMember$1$bailout(1, t4, t3, node, t2, t1, fieldList);
                  ++t4;
                  $.ASTNode__hashCodeGenerator = t4;
                  t4 = new $.FieldDeclaration(null, null, null, null, null, null, null, t4);
                  t5 = $.Annotation;
                  t6 = $.List_List($, t5);
                  $.setRuntimeTypeInfo(t6, [t5]);
                  t7 = t5;
                  t8 = $.List_List($, t7);
                  $.setRuntimeTypeInfo(t8, [t7]);
                  t8 = new $.NodeList(t4, t6, t8);
                  $.setRuntimeTypeInfo(t8, [t5]);
                  t4._metadata = t8;
                  if (node != null)
                    node.set$parent(node, t4);
                  t4._comment = node;
                  t5 = t4._metadata;
                  t5.addAll$1(t5, t2);
                  t4._keyword = t3;
                  fieldList.set$parent(fieldList, t4);
                  t4._fieldList = fieldList;
                  t4._semicolon = t1;
                  return t4;
                }
              if (this.isOperator$1(this._currentToken.get$next())) {
                this.validateModifiersForOperator$1(modifiers);
                return this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, returnType);
              }
              t1 = $.get$ParserErrorCode_EXPECTED_EXECUTABLE();
              t2 = this._currentToken;
              t3 = this._errorListener;
              t4 = $.getInterceptor$x(t2);
              t5 = new $.AnalysisError(null, null, null, 0, 0);
              t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
              t3.onError$1(t3, t5);
              return;
            }
          }
        }
      }
    } else {
      t1 = $.get$Keyword_GET();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1) {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_IDENTIFIER();
        t3 = $.getInterceptor$x(t1);
        if (t3.get$type(t1) !== t2) {
          t2 = $.get$TokenType_KEYWORD();
          if (t3.get$type(t1) === t2) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
          } else
            t1 = false;
        } else
          t1 = true;
      } else
        t1 = false;
      if (t1) {
        this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
        return this.parseGetter$4(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, null);
      } else {
        t1 = $.get$Keyword_SET();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_IDENTIFIER();
          t3 = $.getInterceptor$x(t1);
          if (t3.get$type(t1) !== t2) {
            t2 = $.get$TokenType_KEYWORD();
            if (t3.get$type(t1) === t2) {
              $.propertyTypeCast(t1, "$isKeywordToken");
              t1.get$keyword;
              t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
            } else
              t1 = false;
          } else
            t1 = true;
        } else
          t1 = false;
        if (t1) {
          this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
          return this.parseSetter$4(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, null);
        } else {
          t1 = $.get$Keyword_OPERATOR();
          t2 = this._currentToken;
          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t2, "$isKeywordToken");
            t2.get$keyword;
            t1 = t2._liblib9$_keyword === t1;
          } else
            t1 = false;
          if (t1 && this.isOperator$1(this._currentToken.get$next())) {
            this.validateModifiersForOperator$1(modifiers);
            return this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, null);
          } else {
            t1 = this._currentToken;
            t2 = $.get$TokenType_IDENTIFIER();
            t3 = $.getInterceptor$x(t1);
            if (t3.get$type(t1) !== t2) {
              t2 = $.get$TokenType_KEYWORD();
              if (t3.get$type(t1) === t2) {
                $.propertyTypeCast(t1, "$isKeywordToken");
                t1.get$keyword;
                t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
              } else
                t1 = false;
            } else
              t1 = true;
            if (!t1) {
              if (this.isOperator$1(this._currentToken.get$next())) {
                this.validateModifiersForOperator$1(modifiers);
                return this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, null);
              }
              t1 = $.get$ParserErrorCode_EXPECTED_CLASS_MEMBER();
              t2 = this._currentToken;
              t3 = this._errorListener;
              t4 = $.getInterceptor$x(t2);
              t5 = new $.AnalysisError(null, null, null, 0, 0);
              t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
              t3.onError$1(t3, t5);
              return;
            } else {
              t1 = this._currentToken.get$next();
              t2 = $.get$TokenType_PERIOD();
              if ($.get$type$x(t1) === t2) {
                t1 = this.peek2$1(2);
                t2 = $.get$TokenType_IDENTIFIER();
                t3 = $.getInterceptor$x(t1);
                if (t3.get$type(t1) !== t2) {
                  t2 = $.get$TokenType_KEYWORD();
                  if (t3.get$type(t1) === t2) {
                    $.propertyTypeCast(t1, "$isKeywordToken");
                    t1.get$keyword;
                    t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                  } else
                    t1 = false;
                } else
                  t1 = true;
                if (t1) {
                  t1 = this.peek2$1(3);
                  t2 = $.get$TokenType_OPEN_PAREN();
                  t2 = $.get$type$x(t1) === t2;
                  t1 = t2;
                } else
                  t1 = false;
              } else
                t1 = false;
              if (t1) {
                t1 = modifiers._externalKeyword;
                t2 = this.validateModifiersForConstructor$1(modifiers);
                t3 = modifiers._liblib14$_factoryKeyword;
                t4 = this.parseSimpleIdentifier$0();
                token = this._currentToken;
                this._currentToken = token.get$next();
                return this.parseConstructor$8(commentAndMetadata, t1, t2, t3, t4, token, this.parseSimpleIdentifier$0(), this.parseFormalParameterList$0());
              } else {
                t1 = this._currentToken.get$next();
                t2 = $.get$TokenType_OPEN_PAREN();
                if ($.get$type$x(t1) === t2) {
                  methodName = this.parseSimpleIdentifier$0();
                  parameters = this.parseFormalParameterList$0();
                  if (this.matches5$1($.get$TokenType_COLON()) || modifiers._liblib14$_factoryKeyword != null || $.$eq(methodName._liblib4$_token.get$lexeme(), className))
                    return this.parseConstructor$8(commentAndMetadata, modifiers._externalKeyword, this.validateModifiersForConstructor$1(modifiers), modifiers._liblib14$_factoryKeyword, methodName, null, null, parameters);
                  this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
                  this.validateFormalParameterList$1(parameters);
                  return this.parseMethodDeclaration2$6(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, null, methodName, parameters);
                } else if (this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_EQ(), $.get$TokenType_COMMA(), $.get$TokenType_SEMICOLON()])) {
                  if (modifiers._constKeyword == null && modifiers._finalKeyword == null && modifiers._varKeyword == null) {
                    t1 = $.get$ParserErrorCode_MISSING_CONST_FINAL_VAR_OR_TYPE();
                    t2 = this._currentToken;
                    t3 = this._errorListener;
                    t4 = $.getInterceptor$x(t2);
                    t5 = new $.AnalysisError(null, null, null, 0, 0);
                    t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                    t3.onError$1(t3, t5);
                  }
                  t1 = modifiers._staticKeyword;
                  fieldList = this.parseVariableDeclarationList2$3(null, this.validateModifiersForField$1(modifiers), null);
                  node = commentAndMetadata._liblib14$_comment;
                  t2 = commentAndMetadata._liblib14$_metadata;
                  t3 = this.expect2$1($.get$TokenType_SEMICOLON());
                  t4 = $.ASTNode__hashCodeGenerator;
                  if (typeof t4 !== "number")
                    return this.parseClassMember$1$bailout(2, t4, t3, node, t2, t1, fieldList);
                  ++t4;
                  $.ASTNode__hashCodeGenerator = t4;
                  t4 = new $.FieldDeclaration(null, null, null, null, null, null, null, t4);
                  t5 = $.Annotation;
                  t6 = $.List_List($, t5);
                  $.setRuntimeTypeInfo(t6, [t5]);
                  t7 = t5;
                  t8 = $.List_List($, t7);
                  $.setRuntimeTypeInfo(t8, [t7]);
                  t8 = new $.NodeList(t4, t6, t8);
                  $.setRuntimeTypeInfo(t8, [t5]);
                  t4._metadata = t8;
                  if (node != null)
                    node.set$parent(node, t4);
                  t4._comment = node;
                  t5 = t4._metadata;
                  t5.addAll$1(t5, t2);
                  t4._keyword = t1;
                  fieldList.set$parent(fieldList, t4);
                  t4._fieldList = fieldList;
                  t4._semicolon = t3;
                  return t4;
                }
              }
            }
          }
        }
      }
    }
    type = this.parseTypeName$0();
    t1 = $.get$Keyword_GET();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      t1 = this._currentToken.get$next();
      t2 = $.get$TokenType_IDENTIFIER();
      t3 = $.getInterceptor$x(t1);
      if (t3.get$type(t1) !== t2) {
        t2 = $.get$TokenType_KEYWORD();
        if (t3.get$type(t1) === t2) {
          $.propertyTypeCast(t1, "$isKeywordToken");
          t1.get$keyword;
          t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
        } else
          t1 = false;
      } else
        t1 = true;
    } else
      t1 = false;
    if (t1) {
      this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
      return this.parseGetter$4(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, type);
    } else {
      t1 = $.get$Keyword_SET();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1) {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_IDENTIFIER();
        t3 = $.getInterceptor$x(t1);
        if (t3.get$type(t1) !== t2) {
          t2 = $.get$TokenType_KEYWORD();
          if (t3.get$type(t1) === t2) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
          } else
            t1 = false;
        } else
          t1 = true;
      } else
        t1 = false;
      if (t1) {
        this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
        return this.parseSetter$4(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, type);
      } else {
        t1 = $.get$Keyword_OPERATOR();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1 && this.isOperator$1(this._currentToken.get$next())) {
          this.validateModifiersForOperator$1(modifiers);
          return this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, type);
        } else {
          t1 = this._currentToken;
          t2 = $.get$TokenType_IDENTIFIER();
          t3 = $.getInterceptor$x(t1);
          if (t3.get$type(t1) !== t2) {
            t2 = $.get$TokenType_KEYWORD();
            if (t3.get$type(t1) === t2) {
              $.propertyTypeCast(t1, "$isKeywordToken");
              t1.get$keyword;
              t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
            } else
              t1 = false;
          } else
            t1 = true;
          if (!t1) {
            if (this.matches5$1($.get$TokenType_CLOSE_CURLY_BRACKET())) {
              t1 = modifiers._staticKeyword;
              fieldList = this.parseVariableDeclarationList2$3(null, this.validateModifiersForField$1(modifiers), type);
              node = commentAndMetadata._liblib14$_comment;
              t2 = commentAndMetadata._liblib14$_metadata;
              t3 = this.expect2$1($.get$TokenType_SEMICOLON());
              t4 = $.ASTNode__hashCodeGenerator;
              if (typeof t4 !== "number")
                return this.parseClassMember$1$bailout(3, t4, t3, node, t2, t1, fieldList);
              ++t4;
              $.ASTNode__hashCodeGenerator = t4;
              t4 = new $.FieldDeclaration(null, null, null, null, null, null, null, t4);
              t5 = $.Annotation;
              t6 = $.List_List($, t5);
              $.setRuntimeTypeInfo(t6, [t5]);
              t7 = t5;
              t8 = $.List_List($, t7);
              $.setRuntimeTypeInfo(t8, [t7]);
              t8 = new $.NodeList(t4, t6, t8);
              $.setRuntimeTypeInfo(t8, [t5]);
              t4._metadata = t8;
              if (node != null)
                node.set$parent(node, t4);
              t4._comment = node;
              t5 = t4._metadata;
              t5.addAll$1(t5, t2);
              t4._keyword = t1;
              fieldList.set$parent(fieldList, t4);
              t4._fieldList = fieldList;
              t4._semicolon = t3;
              return t4;
            }
            if (this.isOperator$1(this._currentToken.get$next())) {
              this.validateModifiersForOperator$1(modifiers);
              return this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, type);
            }
            t1 = $.get$ParserErrorCode_EXPECTED_CLASS_MEMBER();
            t2 = this._currentToken;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
            return;
          } else {
            t1 = this._currentToken.get$next();
            t2 = $.get$TokenType_OPEN_PAREN();
            if ($.get$type$x(t1) === t2) {
              methodName = this.parseSimpleIdentifier$0();
              parameters = this.parseFormalParameterList$0();
              if ($.$eq(methodName._liblib4$_token.get$lexeme(), className)) {
                t1 = $.get$ParserErrorCode_CONSTRUCTOR_WITH_RETURN_TYPE();
                t2 = this._errorListener;
                t3 = new $.AnalysisError(null, null, null, 0, 0);
                t3._jtd_constructor_132_impl$5(this._liblib14$_source, type.get$offset(type), type.get$length(type), t1, []);
                t2.onError$1(t2, t3);
                return this.parseConstructor$8(commentAndMetadata, modifiers._externalKeyword, this.validateModifiersForConstructor$1(modifiers), modifiers._liblib14$_factoryKeyword, methodName, null, null, parameters);
              }
              this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
              this.validateFormalParameterList$1(parameters);
              return this.parseMethodDeclaration2$6(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, type, methodName, parameters);
            }
          }
        }
      }
    }
    t1 = modifiers._staticKeyword;
    fieldList = this.parseVariableDeclarationList2$3(null, this.validateModifiersForField$1(modifiers), type);
    node = commentAndMetadata._liblib14$_comment;
    t2 = commentAndMetadata._liblib14$_metadata;
    t3 = this.expect2$1($.get$TokenType_SEMICOLON());
    t4 = $.ASTNode__hashCodeGenerator;
    if (typeof t4 !== "number")
      return this.parseClassMember$1$bailout(4, t4, t3, node, t2, t1, fieldList);
    ++t4;
    $.ASTNode__hashCodeGenerator = t4;
    t4 = new $.FieldDeclaration(null, null, null, null, null, null, null, t4);
    t5 = $.Annotation;
    t6 = $.List_List($, t5);
    $.setRuntimeTypeInfo(t6, [t5]);
    t7 = t5;
    t8 = $.List_List($, t7);
    $.setRuntimeTypeInfo(t8, [t7]);
    t8 = new $.NodeList(t4, t6, t8);
    $.setRuntimeTypeInfo(t8, [t5]);
    t4._metadata = t8;
    if (node != null)
      node.set$parent(node, t4);
    t4._comment = node;
    t5 = t4._metadata;
    t5.addAll$1(t5, t2);
    t4._keyword = t1;
    fieldList.set$parent(fieldList, t4);
    t4._fieldList = fieldList;
    t4._semicolon = t3;
    return t4;
  },
  "+parseClassMember:1:0": 0,
  parseClassMember$1$bailout: function(state0, t4, t3, node, t2, t1, fieldList) {
    switch (state0) {
      case 0:
        commentAndMetadata = this.parseCommentAndMetadata$0();
        modifiers = this.parseModifiers$0();
        t1 = $.get$Keyword_VOID();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
      default:
        if (state0 === 1 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              returnType = this.parseReturnType$0();
              t1 = $.get$Keyword_GET();
              t2 = this._currentToken;
              if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t2, "$isKeywordToken");
                t2.get$keyword;
                t1 = t2._liblib9$_keyword === t1;
              } else
                t1 = false;
              if (t1) {
                t1 = this._currentToken.get$next();
                t2 = $.get$TokenType_IDENTIFIER();
                t3 = $.getInterceptor$x(t1);
                if (t3.get$type(t1) !== t2) {
                  t2 = $.get$TokenType_KEYWORD();
                  if (t3.get$type(t1) === t2) {
                    $.propertyTypeCast(t1, "$isKeywordToken");
                    t1.get$keyword;
                    t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                  } else
                    t1 = false;
                } else
                  t1 = true;
              } else
                t1 = false;
            case 1:
              if (state0 === 0 && t1) {
                this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
                return this.parseGetter$4(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, returnType);
              } else
                switch (state0) {
                  case 0:
                    t1 = $.get$Keyword_SET();
                    t2 = this._currentToken;
                    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                      $.propertyTypeCast(t2, "$isKeywordToken");
                      t2.get$keyword;
                      t1 = t2._liblib9$_keyword === t1;
                    } else
                      t1 = false;
                    if (t1) {
                      t1 = this._currentToken.get$next();
                      t2 = $.get$TokenType_IDENTIFIER();
                      t3 = $.getInterceptor$x(t1);
                      if (t3.get$type(t1) !== t2) {
                        t2 = $.get$TokenType_KEYWORD();
                        if (t3.get$type(t1) === t2) {
                          $.propertyTypeCast(t1, "$isKeywordToken");
                          t1.get$keyword;
                          t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                        } else
                          t1 = false;
                      } else
                        t1 = true;
                    } else
                      t1 = false;
                  case 1:
                    if (state0 === 0 && t1) {
                      this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
                      return this.parseSetter$4(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, returnType);
                    } else
                      switch (state0) {
                        case 0:
                          t1 = $.get$Keyword_OPERATOR();
                          t2 = this._currentToken;
                          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                            $.propertyTypeCast(t2, "$isKeywordToken");
                            t2.get$keyword;
                            t1 = t2._liblib9$_keyword === t1;
                          } else
                            t1 = false;
                        case 1:
                          if (state0 === 0 && t1 && this.isOperator$1(this._currentToken.get$next())) {
                            this.validateModifiersForOperator$1(modifiers);
                            return this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, returnType);
                          } else
                            switch (state0) {
                              case 0:
                                t1 = this._currentToken;
                                t2 = $.get$TokenType_IDENTIFIER();
                                t3 = $.getInterceptor$x(t1);
                                if (t3.get$type(t1) !== t2) {
                                  t2 = $.get$TokenType_KEYWORD();
                                  if (t3.get$type(t1) === t2) {
                                    $.propertyTypeCast(t1, "$isKeywordToken");
                                    t1.get$keyword;
                                    t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                                  } else
                                    t1 = false;
                                } else
                                  t1 = true;
                              case 1:
                                if (state0 === 0 && t1 && this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_OPEN_PAREN(), $.get$TokenType_OPEN_CURLY_BRACKET(), $.get$TokenType_FUNCTION()])) {
                                  this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
                                  t1 = modifiers._externalKeyword;
                                  t2 = modifiers._staticKeyword;
                                  methodName = this.parseSimpleIdentifier$0();
                                  parameters = this.parseFormalParameterList$0();
                                  this.validateFormalParameterList$1(parameters);
                                  return this.parseMethodDeclaration2$6(commentAndMetadata, t1, t2, returnType, methodName, parameters);
                                } else
                                  switch (state0) {
                                    case 0:
                                      t1 = this._currentToken;
                                      t2 = $.get$TokenType_IDENTIFIER();
                                      t3 = $.getInterceptor$x(t1);
                                      if (t3.get$type(t1) !== t2) {
                                        t2 = $.get$TokenType_KEYWORD();
                                        if (t3.get$type(t1) === t2) {
                                          $.propertyTypeCast(t1, "$isKeywordToken");
                                          t1.get$keyword;
                                          t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                                        } else
                                          t1 = false;
                                      } else
                                        t1 = true;
                                    case 1:
                                      if (state0 === 1 || state0 === 0 && t1)
                                        switch (state0) {
                                          case 0:
                                          case 1:
                                            if (state0 === 1 || state0 === 0 && this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_EQ(), $.get$TokenType_COMMA(), $.get$TokenType_SEMICOLON()]))
                                              switch (state0) {
                                                case 0:
                                                  t1 = $.get$ParserErrorCode_VOID_VARIABLE();
                                                  t2 = this._errorListener;
                                                  t3 = new $.AnalysisError(null, null, null, 0, 0);
                                                  t3._jtd_constructor_132_impl$5(this._liblib14$_source, returnType.get$offset(returnType), returnType.get$length(returnType), t1, []);
                                                  t2.onError$1(t2, t3);
                                                  t3 = modifiers._staticKeyword;
                                                  fieldList = this.parseVariableDeclarationList2$3(null, this.validateModifiersForField$1(modifiers), returnType);
                                                  node = commentAndMetadata._liblib14$_comment;
                                                  t2 = commentAndMetadata._liblib14$_metadata;
                                                  t1 = this.expect2$1($.get$TokenType_SEMICOLON());
                                                  t4 = $.ASTNode__hashCodeGenerator;
                                                case 1:
                                                  state0 = 0;
                                                  t4 = $.$add$ns(t4, 1);
                                                  $.ASTNode__hashCodeGenerator = t4;
                                                  t4 = new $.FieldDeclaration(null, null, null, null, null, null, null, t4);
                                                  t5 = $.Annotation;
                                                  t6 = $.List_List($, t5);
                                                  $.setRuntimeTypeInfo(t6, [t5]);
                                                  t7 = t5;
                                                  t8 = $.List_List($, t7);
                                                  $.setRuntimeTypeInfo(t8, [t7]);
                                                  t8 = new $.NodeList(t4, t6, t8);
                                                  $.setRuntimeTypeInfo(t8, [t5]);
                                                  t4._metadata = t8;
                                                  if (node != null)
                                                    node.set$parent(node, t4);
                                                  t4._comment = node;
                                                  t5 = t4._metadata;
                                                  t5.addAll$1(t5, t2);
                                                  t4._keyword = t3;
                                                  fieldList.set$parent(fieldList, t4);
                                                  t4._fieldList = fieldList;
                                                  t4._semicolon = t1;
                                                  return t4;
                                              }
                                        }
                                      if (this.isOperator$1(this._currentToken.get$next())) {
                                        this.validateModifiersForOperator$1(modifiers);
                                        return this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, returnType);
                                      }
                                      t1 = $.get$ParserErrorCode_EXPECTED_EXECUTABLE();
                                      t2 = this._currentToken;
                                      t3 = this._errorListener;
                                      t4 = $.getInterceptor$x(t2);
                                      t5 = new $.AnalysisError(null, null, null, 0, 0);
                                      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                                      t3.onError$1(t3, t5);
                                      return;
                                  }
                            }
                      }
                }
          }
        else
          switch (state0) {
            case 0:
              t1 = $.get$Keyword_GET();
              t2 = this._currentToken;
              if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t2, "$isKeywordToken");
                t2.get$keyword;
                t1 = t2._liblib9$_keyword === t1;
              } else
                t1 = false;
              if (t1) {
                t1 = this._currentToken.get$next();
                t2 = $.get$TokenType_IDENTIFIER();
                t3 = $.getInterceptor$x(t1);
                if (t3.get$type(t1) !== t2) {
                  t2 = $.get$TokenType_KEYWORD();
                  if (t3.get$type(t1) === t2) {
                    $.propertyTypeCast(t1, "$isKeywordToken");
                    t1.get$keyword;
                    t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                  } else
                    t1 = false;
                } else
                  t1 = true;
              } else
                t1 = false;
            case 2:
              if (state0 === 0 && t1) {
                this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
                return this.parseGetter$4(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, null);
              } else
                switch (state0) {
                  case 0:
                    t1 = $.get$Keyword_SET();
                    t2 = this._currentToken;
                    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                      $.propertyTypeCast(t2, "$isKeywordToken");
                      t2.get$keyword;
                      t1 = t2._liblib9$_keyword === t1;
                    } else
                      t1 = false;
                    if (t1) {
                      t1 = this._currentToken.get$next();
                      t2 = $.get$TokenType_IDENTIFIER();
                      t3 = $.getInterceptor$x(t1);
                      if (t3.get$type(t1) !== t2) {
                        t2 = $.get$TokenType_KEYWORD();
                        if (t3.get$type(t1) === t2) {
                          $.propertyTypeCast(t1, "$isKeywordToken");
                          t1.get$keyword;
                          t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                        } else
                          t1 = false;
                      } else
                        t1 = true;
                    } else
                      t1 = false;
                  case 2:
                    if (state0 === 0 && t1) {
                      this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
                      return this.parseSetter$4(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, null);
                    } else
                      switch (state0) {
                        case 0:
                          t1 = $.get$Keyword_OPERATOR();
                          t2 = this._currentToken;
                          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                            $.propertyTypeCast(t2, "$isKeywordToken");
                            t2.get$keyword;
                            t1 = t2._liblib9$_keyword === t1;
                          } else
                            t1 = false;
                        case 2:
                          if (state0 === 0 && t1 && this.isOperator$1(this._currentToken.get$next())) {
                            this.validateModifiersForOperator$1(modifiers);
                            return this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, null);
                          } else
                            switch (state0) {
                              case 0:
                                t1 = this._currentToken;
                                t2 = $.get$TokenType_IDENTIFIER();
                                t3 = $.getInterceptor$x(t1);
                                if (t3.get$type(t1) !== t2) {
                                  t2 = $.get$TokenType_KEYWORD();
                                  if (t3.get$type(t1) === t2) {
                                    $.propertyTypeCast(t1, "$isKeywordToken");
                                    t1.get$keyword;
                                    t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                                  } else
                                    t1 = false;
                                } else
                                  t1 = true;
                              case 2:
                                if (state0 === 0 && !t1) {
                                  if (this.isOperator$1(this._currentToken.get$next())) {
                                    this.validateModifiersForOperator$1(modifiers);
                                    return this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, null);
                                  }
                                  t1 = $.get$ParserErrorCode_EXPECTED_CLASS_MEMBER();
                                  t2 = this._currentToken;
                                  t3 = this._errorListener;
                                  t4 = $.getInterceptor$x(t2);
                                  t5 = new $.AnalysisError(null, null, null, 0, 0);
                                  t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                                  t3.onError$1(t3, t5);
                                  return;
                                } else
                                  switch (state0) {
                                    case 0:
                                      t1 = this._currentToken.get$next();
                                      t2 = $.get$TokenType_PERIOD();
                                      if ($.get$type$x(t1) === t2) {
                                        t1 = this.peek2$1(2);
                                        t2 = $.get$TokenType_IDENTIFIER();
                                        t3 = $.getInterceptor$x(t1);
                                        if (t3.get$type(t1) !== t2) {
                                          t2 = $.get$TokenType_KEYWORD();
                                          if (t3.get$type(t1) === t2) {
                                            $.propertyTypeCast(t1, "$isKeywordToken");
                                            t1.get$keyword;
                                            t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                                          } else
                                            t1 = false;
                                        } else
                                          t1 = true;
                                        if (t1) {
                                          t1 = this.peek2$1(3);
                                          t2 = $.get$TokenType_OPEN_PAREN();
                                          t2 = $.get$type$x(t1) === t2;
                                          t1 = t2;
                                        } else
                                          t1 = false;
                                      } else
                                        t1 = false;
                                    case 2:
                                      if (state0 === 0 && t1) {
                                        t1 = modifiers._externalKeyword;
                                        t2 = this.validateModifiersForConstructor$1(modifiers);
                                        t3 = modifiers._liblib14$_factoryKeyword;
                                        t4 = this.parseSimpleIdentifier$0();
                                        token = this._currentToken;
                                        this._currentToken = token.get$next();
                                        return this.parseConstructor$8(commentAndMetadata, t1, t2, t3, t4, token, this.parseSimpleIdentifier$0(), this.parseFormalParameterList$0());
                                      } else
                                        switch (state0) {
                                          case 0:
                                            t1 = this._currentToken.get$next();
                                            t2 = $.get$TokenType_OPEN_PAREN();
                                          case 2:
                                            if (state0 === 0 && $.get$type$x(t1) === t2) {
                                              methodName = this.parseSimpleIdentifier$0();
                                              parameters = this.parseFormalParameterList$0();
                                              if (this.matches5$1($.get$TokenType_COLON()) || modifiers._liblib14$_factoryKeyword != null || $.$eq(methodName._liblib4$_token.get$lexeme(), className))
                                                return this.parseConstructor$8(commentAndMetadata, modifiers._externalKeyword, this.validateModifiersForConstructor$1(modifiers), modifiers._liblib14$_factoryKeyword, methodName, null, null, parameters);
                                              this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
                                              this.validateFormalParameterList$1(parameters);
                                              return this.parseMethodDeclaration2$6(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, null, methodName, parameters);
                                            } else
                                              switch (state0) {
                                                case 0:
                                                case 2:
                                                  if (state0 === 2 || state0 === 0 && this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_EQ(), $.get$TokenType_COMMA(), $.get$TokenType_SEMICOLON()]))
                                                    switch (state0) {
                                                      case 0:
                                                        if (modifiers._constKeyword == null && modifiers._finalKeyword == null && modifiers._varKeyword == null) {
                                                          t1 = $.get$ParserErrorCode_MISSING_CONST_FINAL_VAR_OR_TYPE();
                                                          t2 = this._currentToken;
                                                          t3 = this._errorListener;
                                                          t4 = $.getInterceptor$x(t2);
                                                          t5 = new $.AnalysisError(null, null, null, 0, 0);
                                                          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                                                          t3.onError$1(t3, t5);
                                                        }
                                                        t1 = modifiers._staticKeyword;
                                                        fieldList = this.parseVariableDeclarationList2$3(null, this.validateModifiersForField$1(modifiers), null);
                                                        node = commentAndMetadata._liblib14$_comment;
                                                        t2 = commentAndMetadata._liblib14$_metadata;
                                                        t3 = this.expect2$1($.get$TokenType_SEMICOLON());
                                                        t4 = $.ASTNode__hashCodeGenerator;
                                                      case 2:
                                                        state0 = 0;
                                                        t4 = $.$add$ns(t4, 1);
                                                        $.ASTNode__hashCodeGenerator = t4;
                                                        t4 = new $.FieldDeclaration(null, null, null, null, null, null, null, t4);
                                                        t5 = $.Annotation;
                                                        t6 = $.List_List($, t5);
                                                        $.setRuntimeTypeInfo(t6, [t5]);
                                                        t7 = t5;
                                                        t8 = $.List_List($, t7);
                                                        $.setRuntimeTypeInfo(t8, [t7]);
                                                        t8 = new $.NodeList(t4, t6, t8);
                                                        $.setRuntimeTypeInfo(t8, [t5]);
                                                        t4._metadata = t8;
                                                        if (node != null)
                                                          node.set$parent(node, t4);
                                                        t4._comment = node;
                                                        t5 = t4._metadata;
                                                        t5.addAll$1(t5, t2);
                                                        t4._keyword = t1;
                                                        fieldList.set$parent(fieldList, t4);
                                                        t4._fieldList = fieldList;
                                                        t4._semicolon = t3;
                                                        return t4;
                                                    }
                                              }
                                        }
                                  }
                            }
                      }
                }
          }
        type = this.parseTypeName$0();
        t1 = $.get$Keyword_GET();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_IDENTIFIER();
          t3 = $.getInterceptor$x(t1);
          if (t3.get$type(t1) !== t2) {
            t2 = $.get$TokenType_KEYWORD();
            if (t3.get$type(t1) === t2) {
              $.propertyTypeCast(t1, "$isKeywordToken");
              t1.get$keyword;
              t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
            } else
              t1 = false;
          } else
            t1 = true;
        } else
          t1 = false;
      case 3:
        if (state0 === 0 && t1) {
          this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
          return this.parseGetter$4(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, type);
        } else
          switch (state0) {
            case 0:
              t1 = $.get$Keyword_SET();
              t2 = this._currentToken;
              if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t2, "$isKeywordToken");
                t2.get$keyword;
                t1 = t2._liblib9$_keyword === t1;
              } else
                t1 = false;
              if (t1) {
                t1 = this._currentToken.get$next();
                t2 = $.get$TokenType_IDENTIFIER();
                t3 = $.getInterceptor$x(t1);
                if (t3.get$type(t1) !== t2) {
                  t2 = $.get$TokenType_KEYWORD();
                  if (t3.get$type(t1) === t2) {
                    $.propertyTypeCast(t1, "$isKeywordToken");
                    t1.get$keyword;
                    t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                  } else
                    t1 = false;
                } else
                  t1 = true;
              } else
                t1 = false;
            case 3:
              if (state0 === 0 && t1) {
                this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
                return this.parseSetter$4(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, type);
              } else
                switch (state0) {
                  case 0:
                    t1 = $.get$Keyword_OPERATOR();
                    t2 = this._currentToken;
                    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                      $.propertyTypeCast(t2, "$isKeywordToken");
                      t2.get$keyword;
                      t1 = t2._liblib9$_keyword === t1;
                    } else
                      t1 = false;
                  case 3:
                    if (state0 === 0 && t1 && this.isOperator$1(this._currentToken.get$next())) {
                      this.validateModifiersForOperator$1(modifiers);
                      return this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, type);
                    } else
                      switch (state0) {
                        case 0:
                          t1 = this._currentToken;
                          t2 = $.get$TokenType_IDENTIFIER();
                          t3 = $.getInterceptor$x(t1);
                          if (t3.get$type(t1) !== t2) {
                            t2 = $.get$TokenType_KEYWORD();
                            if (t3.get$type(t1) === t2) {
                              $.propertyTypeCast(t1, "$isKeywordToken");
                              t1.get$keyword;
                              t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                            } else
                              t1 = false;
                          } else
                            t1 = true;
                        case 3:
                          if (state0 === 3 || state0 === 0 && !t1)
                            switch (state0) {
                              case 0:
                              case 3:
                                if (state0 === 3 || state0 === 0 && this.matches5$1($.get$TokenType_CLOSE_CURLY_BRACKET()))
                                  switch (state0) {
                                    case 0:
                                      t1 = modifiers._staticKeyword;
                                      fieldList = this.parseVariableDeclarationList2$3(null, this.validateModifiersForField$1(modifiers), type);
                                      node = commentAndMetadata._liblib14$_comment;
                                      t2 = commentAndMetadata._liblib14$_metadata;
                                      t3 = this.expect2$1($.get$TokenType_SEMICOLON());
                                      t4 = $.ASTNode__hashCodeGenerator;
                                    case 3:
                                      state0 = 0;
                                      t4 = $.$add$ns(t4, 1);
                                      $.ASTNode__hashCodeGenerator = t4;
                                      t4 = new $.FieldDeclaration(null, null, null, null, null, null, null, t4);
                                      t5 = $.Annotation;
                                      t6 = $.List_List($, t5);
                                      $.setRuntimeTypeInfo(t6, [t5]);
                                      t7 = t5;
                                      t8 = $.List_List($, t7);
                                      $.setRuntimeTypeInfo(t8, [t7]);
                                      t8 = new $.NodeList(t4, t6, t8);
                                      $.setRuntimeTypeInfo(t8, [t5]);
                                      t4._metadata = t8;
                                      if (node != null)
                                        node.set$parent(node, t4);
                                      t4._comment = node;
                                      t5 = t4._metadata;
                                      t5.addAll$1(t5, t2);
                                      t4._keyword = t1;
                                      fieldList.set$parent(fieldList, t4);
                                      t4._fieldList = fieldList;
                                      t4._semicolon = t3;
                                      return t4;
                                  }
                                if (this.isOperator$1(this._currentToken.get$next())) {
                                  this.validateModifiersForOperator$1(modifiers);
                                  return this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, type);
                                }
                                t1 = $.get$ParserErrorCode_EXPECTED_CLASS_MEMBER();
                                t2 = this._currentToken;
                                t3 = this._errorListener;
                                t4 = $.getInterceptor$x(t2);
                                t5 = new $.AnalysisError(null, null, null, 0, 0);
                                t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                                t3.onError$1(t3, t5);
                                return;
                            }
                          else {
                            t1 = this._currentToken.get$next();
                            t2 = $.get$TokenType_OPEN_PAREN();
                            if ($.get$type$x(t1) === t2) {
                              methodName = this.parseSimpleIdentifier$0();
                              parameters = this.parseFormalParameterList$0();
                              if ($.$eq(methodName._liblib4$_token.get$lexeme(), className)) {
                                t1 = $.get$ParserErrorCode_CONSTRUCTOR_WITH_RETURN_TYPE();
                                t2 = this._errorListener;
                                t3 = new $.AnalysisError(null, null, null, 0, 0);
                                t3._jtd_constructor_132_impl$5(this._liblib14$_source, type.get$offset(type), type.get$length(type), t1, []);
                                t2.onError$1(t2, t3);
                                return this.parseConstructor$8(commentAndMetadata, modifiers._externalKeyword, this.validateModifiersForConstructor$1(modifiers), modifiers._liblib14$_factoryKeyword, methodName, null, null, parameters);
                              }
                              this.validateModifiersForGetterOrSetterOrMethod$1(modifiers);
                              this.validateFormalParameterList$1(parameters);
                              return this.parseMethodDeclaration2$6(commentAndMetadata, modifiers._externalKeyword, modifiers._staticKeyword, type, methodName, parameters);
                            }
                          }
                      }
                }
          }
        t1 = modifiers._staticKeyword;
        fieldList = this.parseVariableDeclarationList2$3(null, this.validateModifiersForField$1(modifiers), type);
        node = commentAndMetadata._liblib14$_comment;
        t2 = commentAndMetadata._liblib14$_metadata;
        t3 = this.expect2$1($.get$TokenType_SEMICOLON());
        t4 = $.ASTNode__hashCodeGenerator;
      case 4:
        var commentAndMetadata, modifiers, returnType, methodName, parameters, t5, t6, t7, t8, token, type;
        state0 = 0;
        t4 = $.$add$ns(t4, 1);
        $.ASTNode__hashCodeGenerator = t4;
        t4 = new $.FieldDeclaration(null, null, null, null, null, null, null, t4);
        t5 = $.Annotation;
        t6 = $.List_List($, t5);
        $.setRuntimeTypeInfo(t6, [t5]);
        t7 = t5;
        t8 = $.List_List($, t7);
        $.setRuntimeTypeInfo(t8, [t7]);
        t8 = new $.NodeList(t4, t6, t8);
        $.setRuntimeTypeInfo(t8, [t5]);
        t4._metadata = t8;
        if (node != null)
          node.set$parent(node, t4);
        t4._comment = node;
        t5 = t4._metadata;
        t5.addAll$1(t5, t2);
        t4._keyword = t1;
        fieldList.set$parent(fieldList, t4);
        t4._fieldList = fieldList;
        t4._semicolon = t3;
        return t4;
    }
  },
  parseClassMembers$2: function(className, closingBracket) {
    var members, memberStart, t1, t2, t3, t4, t5, t6, t7, member;
    members = $.List_List($, $.ClassMember);
    members.$builtinTypeInfo = [$.ClassMember];
    memberStart = this._currentToken;
    t1 = closingBracket == null;
    while (true) {
      if (!this.matches5$1($.get$TokenType_EOF()))
        if (!this.matches5$1($.get$TokenType_CLOSE_CURLY_BRACKET()))
          if (t1) {
            t2 = $.get$Keyword_CLASS();
            t3 = this._currentToken;
            if ($.get$type$x(t3) === $.get$TokenType_KEYWORD()) {
              $.propertyTypeCast(t3, "$isKeywordToken");
              t3.get$keyword;
              t2 = t3._liblib9$_keyword === t2;
            } else
              t2 = false;
            if (!t2) {
              t2 = $.get$Keyword_TYPEDEF();
              t3 = this._currentToken;
              if ($.get$type$x(t3) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t3, "$isKeywordToken");
                t3.get$keyword;
                t2 = t3._liblib9$_keyword === t2;
              } else
                t2 = false;
              t2 = !t2;
            } else
              t2 = false;
          } else
            t2 = true;
        else
          t2 = false;
      else
        t2 = false;
      if (!t2)
        break;
      if (this.matches5$1($.get$TokenType_SEMICOLON())) {
        t2 = $.get$ParserErrorCode_UNEXPECTED_TOKEN();
        t3 = this._currentToken;
        t4 = t3.get$lexeme();
        t5 = this._errorListener;
        t6 = $.getInterceptor$x(t3);
        t7 = new $.AnalysisError(null, null, null, 0, 0);
        t7._jtd_constructor_132_impl$5(this._liblib14$_source, t6.get$offset(t3), t6.get$length(t3), t2, [t4]);
        t5.onError$1(t5, t7);
        this._currentToken = this._currentToken.get$next();
      } else {
        member = this.parseClassMember$1(className);
        if (member != null)
          members.push(member);
      }
      t2 = this._currentToken;
      if (t2 == null ? memberStart == null : t2 === memberStart) {
        t2 = $.get$ParserErrorCode_UNEXPECTED_TOKEN();
        t3 = this._currentToken;
        t4 = t3.get$lexeme();
        t5 = this._errorListener;
        t6 = $.getInterceptor$x(t3);
        t7 = new $.AnalysisError(null, null, null, 0, 0);
        t7._jtd_constructor_132_impl$5(this._liblib14$_source, t6.get$offset(t3), t6.get$length(t3), t2, [t4]);
        t5.onError$1(t5, t7);
        this._currentToken = this._currentToken.get$next();
      }
      memberStart = this._currentToken;
    }
    return members;
  },
  "+parseClassMembers:2:0": 0,
  parseClassTypeAlias$2: function(commentAndMetadata, keyword) {
    var className, typeParameters, equals, t1, t2, token, abstractKeyword, superclass, withClause, implementsClause, semicolon, t3, t4, t5, t6;
    className = this.parseSimpleIdentifier$0();
    typeParameters = this.matches5$1($.get$TokenType_LT()) ? this.parseTypeParameterList$0() : null;
    equals = this.expect2$1($.get$TokenType_EQ());
    t1 = $.get$Keyword_ABSTRACT();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      abstractKeyword = token;
    } else
      abstractKeyword = null;
    superclass = this.parseTypeName$0();
    t1 = $.get$Keyword_WITH();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    withClause = t1 ? this.parseWithClause$0() : null;
    t1 = $.get$Keyword_IMPLEMENTS();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    implementsClause = t1 ? this.parseImplementsClause$0() : null;
    if (this.matches5$1($.get$TokenType_SEMICOLON())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      semicolon = token;
    } else {
      if (this.matches5$1($.get$TokenType_OPEN_CURLY_BRACKET())) {
        t1 = $.get$ParserErrorCode_EXPECTED_TOKEN();
        t2 = $.get$TokenType_SEMICOLON()._lexeme;
        t3 = this._currentToken;
        t4 = this._errorListener;
        t5 = $.getInterceptor$x(t3);
        t6 = new $.AnalysisError(null, null, null, 0, 0);
        t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
        t4.onError$1(t4, t6);
        token = this._currentToken;
        this._currentToken = token.get$next();
        this.parseClassMembers$2(className._liblib4$_token.get$lexeme(), this.getEndToken$1(token));
        this.expect2$1($.get$TokenType_CLOSE_CURLY_BRACKET());
      } else {
        t1 = $.get$ParserErrorCode_EXPECTED_TOKEN();
        t2 = this._currentToken.get$previous();
        t3 = $.get$TokenType_SEMICOLON()._lexeme;
        t4 = this._errorListener;
        t5 = $.getInterceptor$x(t2);
        t6 = new $.AnalysisError(null, null, null, 0, 0);
        t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t2), t5.get$length(t2), t1, [t3]);
        t4.onError$1(t4, t6);
      }
      t1 = $.get$TokenType_SEMICOLON();
      t2 = $.get$offset$x(this._currentToken);
      semicolon = new $.StringToken(null, null, 0, null, null);
      semicolon._liblib9$_type = t1;
      semicolon._liblib9$_offset = t2;
      semicolon._value2 = "";
    }
    return $.ClassTypeAlias$full(commentAndMetadata._liblib14$_comment, commentAndMetadata._liblib14$_metadata, keyword, className, typeParameters, equals, abstractKeyword, superclass, withClause, implementsClause, semicolon);
  },
  "+parseClassTypeAlias:2:0": 0,
  parseCombinators$0: function() {
    var combinators, t1, keyword, shownNames, t2, t3, t4, t5, hiddenNames;
    combinators = $.List_List($, $.Combinator);
    combinators.$builtinTypeInfo = [$.Combinator];
    while (true) {
      t1 = $.Parser__SHOW;
      if (!($.get$type$x(this._currentToken) === $.get$TokenType_IDENTIFIER() && $.$eq(this._currentToken.get$lexeme(), t1))) {
        t1 = $.Parser__HIDE;
        t1 = $.get$type$x(this._currentToken) === $.get$TokenType_IDENTIFIER() && $.$eq(this._currentToken.get$lexeme(), t1);
      } else
        t1 = true;
      if (!t1)
        break;
      keyword = this.expect2$1($.get$TokenType_IDENTIFIER());
      if ($.$eq(keyword.get$lexeme(), $.Parser__SHOW)) {
        shownNames = this.parseIdentifierList$0();
        t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.ShowCombinator(null, null, null, null, t1);
        t1._keyword = keyword;
        t2 = $.SimpleIdentifier;
        t3 = $.List_List($, t2);
        t3.$builtinTypeInfo = [t2];
        t4 = t2;
        t5 = $.List_List($, t4);
        t5.$builtinTypeInfo = [t4];
        t3 = new $.NodeList(t1, t3, t5);
        t3.$builtinTypeInfo = [t2];
        t1._shownNames = t3;
        t2 = t1._shownNames;
        t2.addAll$1(t2, shownNames);
        combinators.push(t1);
      } else {
        hiddenNames = this.parseIdentifierList$0();
        t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.HideCombinator(null, null, null, null, t1);
        t1._keyword = keyword;
        t2 = $.SimpleIdentifier;
        t3 = $.List_List($, t2);
        t3.$builtinTypeInfo = [t2];
        t4 = t2;
        t5 = $.List_List($, t4);
        t5.$builtinTypeInfo = [t4];
        t3 = new $.NodeList(t1, t3, t5);
        t3.$builtinTypeInfo = [t2];
        t1._hiddenNames = t3;
        t2 = t1._hiddenNames;
        t2.addAll$1(t2, hiddenNames);
        combinators.push(t1);
      }
    }
    return combinators;
  },
  "+parseCombinators:0:0": 0,
  parseCommentAndMetadata$0: function() {
    var comment, metadata, optionalComment, t1;
    comment = this.parseDocumentationComment$0();
    metadata = $.List_List($, $.Annotation);
    metadata.$builtinTypeInfo = [$.Annotation];
    for (; this.matches5$1($.get$TokenType_AT());) {
      metadata.push(this.parseAnnotation$0());
      optionalComment = this.parseDocumentationComment$0();
      if (optionalComment != null)
        comment = optionalComment;
    }
    t1 = new $.CommentAndMetadata(null, null);
    t1._liblib14$_comment = comment;
    t1._liblib14$_metadata = metadata;
    return t1;
  },
  "+parseCommentAndMetadata:0:0": 0,
  parseCommentReference$2: function(referenceSource, sourceOffset) {
    var errorFound, listener, scanner, firstToken, newKeyword, secondToken, thirdToken, nextToken, identifier, t1, t2, t3, scanner0, t4, node, node0, identifier0, exception;
    if ($.$eq($.get$length$asx(referenceSource), 0))
      return;
    try {
      errorFound = [false];
      listener = new $.AnalysisErrorListener_12(errorFound);
      t1 = referenceSource;
      t2 = $.List_List($, $.JSInt);
      t2.$builtinTypeInfo = [$.JSInt];
      t3 = $.List_List($, $.BeginToken);
      t3.$builtinTypeInfo = [$.BeginToken];
      scanner0 = new $.StringScanner(0, null, 0, 0, null, null, null, null, null, null, 0, t2, t3, false);
      scanner0.AbstractScanner$2(null, listener);
      scanner0._offsetDelta = 0;
      scanner0._string = t1;
      scanner0._stringLength = $.get$length$asx(t1);
      scanner0._charOffset = -1;
      scanner = scanner0;
      scanner.setSourceStart$3(1, 1, sourceOffset);
      firstToken = scanner.tokenize$0();
      if ($.$index$asx(errorFound, 0) === true)
        return;
      newKeyword = null;
      t1 = firstToken;
      t2 = $.get$Keyword_NEW();
      if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t1, "$isKeywordToken");
        t1.get$keyword;
        t1 = t1._liblib9$_keyword;
        t1 = t1 === t2;
      } else
        t1 = false;
      if (t1) {
        newKeyword = firstToken;
        firstToken = firstToken.get$next();
      }
      t1 = firstToken;
      t2 = $.get$TokenType_IDENTIFIER();
      t3 = $.getInterceptor$x(t1);
      t4 = t3.get$type(t1);
      if (t4 !== t2) {
        t2 = $.get$TokenType_KEYWORD();
        t3 = t3.get$type(t1);
        if (t3 === t2) {
          $.propertyTypeCast(t1, "$isKeywordToken");
          t1.get$keyword;
          t1 = t1._liblib9$_keyword;
          t1 = t1.isPseudoKeyword$0() === true;
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1) {
        secondToken = firstToken.get$next();
        thirdToken = secondToken.get$next();
        nextToken = null;
        identifier = null;
        t1 = $.get$TokenType_PERIOD();
        t2 = $.get$type$x(secondToken);
        if (t2 === t1) {
          t1 = thirdToken;
          t2 = $.get$TokenType_IDENTIFIER();
          t3 = $.getInterceptor$x(t1);
          t4 = t3.get$type(t1);
          if (t4 !== t2) {
            t2 = $.get$TokenType_KEYWORD();
            t3 = t3.get$type(t1);
            if (t3 === t2) {
              $.propertyTypeCast(t1, "$isKeywordToken");
              t1.get$keyword;
              t1 = t1._liblib9$_keyword;
              t1 = t1.isPseudoKeyword$0() === true;
            } else
              t1 = false;
          } else
            t1 = true;
        } else
          t1 = false;
        t2 = $.ASTNode__hashCodeGenerator;
        if (t1) {
          t1 = $.$add$ns(t2, 1);
          $.ASTNode__hashCodeGenerator = t1;
          node = new $.SimpleIdentifier(null, null, null, null, null, null, null, t1);
          node._liblib4$_token = firstToken;
          t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t1;
          node0 = new $.SimpleIdentifier(null, null, null, null, null, null, null, t1);
          node0._liblib4$_token = thirdToken;
          t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t1;
          identifier0 = new $.PrefixedIdentifier(null, null, null, null, null, null, null, t1);
          node.set$parent(node, identifier0);
          identifier0._prefix = node;
          identifier0._period = secondToken;
          node0.set$parent(node0, identifier0);
          identifier0._identifier = node0;
          identifier = identifier0;
          nextToken = thirdToken.get$next();
        } else {
          t1 = $.$add$ns(t2, 1);
          $.ASTNode__hashCodeGenerator = t1;
          identifier0 = new $.SimpleIdentifier(null, null, null, null, null, null, null, t1);
          identifier0._liblib4$_token = firstToken;
          identifier = identifier0;
          nextToken = firstToken.get$next();
        }
        if (!$.$eq($.get$type$x(nextToken), $.get$TokenType_EOF()))
          return;
        node = identifier;
        t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.CommentReference(null, null, null, null, t1);
        t1._newKeyword = newKeyword;
        if (node != null)
          $.set$parent$x(node, t1);
        t1._identifier = node;
        return t1;
      } else {
        t1 = firstToken;
        t2 = $.get$Keyword_THIS();
        if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t1, "$isKeywordToken");
          t1.get$keyword;
          t1 = t1._liblib9$_keyword;
          t1 = t1 === t2;
        } else
          t1 = false;
        if (!t1) {
          t1 = firstToken;
          t2 = $.get$Keyword_NULL();
          if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword;
            t1 = t1 === t2;
          } else
            t1 = false;
          if (!t1) {
            t1 = firstToken;
            t2 = $.get$Keyword_TRUE();
            if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
              $.propertyTypeCast(t1, "$isKeywordToken");
              t1.get$keyword;
              t1 = t1._liblib9$_keyword;
              t1 = t1 === t2;
            } else
              t1 = false;
            if (!t1) {
              t1 = firstToken;
              t2 = $.get$Keyword_FALSE();
              if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t1, "$isKeywordToken");
                t1.get$keyword;
                t1 = t1._liblib9$_keyword;
                t1 = t1 === t2;
              } else
                t1 = false;
            } else
              t1 = true;
          } else
            t1 = true;
        } else
          t1 = true;
        if (t1)
          return;
      }
    } catch (exception) {
      $.unwrapException(exception);
    }

    return;
  },
  "+parseCommentReference:2:0": 0,
  parseCommentReferences$1: function(tokens) {
    var references, t1, t2, token, comment, length2, codeBlockRanges, leftIndex, t3, t4, range, rightIndex, firstChar, t5, reference;
    references = $.List_List($, $.CommentReference);
    references.$builtinTypeInfo = [$.CommentReference];
    t1 = $.getRuntimeTypeArgument(tokens, tokens.$asJSArray, 0);
    t2 = new $.ListIterator(tokens, tokens.length, 0, null);
    t2.$builtinTypeInfo = [t1];
    for (; t2.moveNext$0();) {
      token = t2._liblib$_current;
      comment = token.get$lexeme();
      t1 = $.getInterceptor$asx(comment);
      length2 = t1.get$length(comment);
      if (typeof length2 !== "number")
        return this.parseCommentReferences$1$bailout(1, length2, t1, t2, references, comment, token);
      codeBlockRanges = this.getCodeBlockRanges$1(comment);
      leftIndex = t1.indexOf$1(comment, "[");
      if (typeof leftIndex !== "number")
        return this.parseCommentReferences$1$bailout(2, length2, t1, t2, references, comment, token, codeBlockRanges, leftIndex);
      t3 = $.getInterceptor$x(token);
      while (true) {
        t4 = $.getInterceptor$n(leftIndex);
        if (!(t4.$ge(leftIndex, 0) === true && $.$lt$n(t4.$add(leftIndex, 1), length2) === true))
          break;
        range = this.findRange$2(codeBlockRanges, leftIndex);
        if (range == null) {
          rightIndex = t1.indexOf$2(comment, "]", leftIndex);
          if ($.$ge$n(rightIndex, 0) === true) {
            firstChar = t1.codeUnitAt$1(comment, t4.$add(leftIndex, 1));
            t5 = $.getInterceptor(firstChar);
            if (!t5.$eq(firstChar, 39) && !t5.$eq(firstChar, 34))
              if (this.isLinkText$2(comment, rightIndex))
                ;
              else {
                reference = this.parseCommentReference$2(t1.substring$2(comment, t4.$add(leftIndex, 1), rightIndex), $.$add$ns($.$add$ns(t3.get$offset(token), leftIndex), 1));
                if (reference != null)
                  references.push(reference);
              }
          } else
            rightIndex = t4.$add(leftIndex, 1);
          leftIndex = t1.indexOf$2(comment, "[", rightIndex);
        } else
          leftIndex = t1.indexOf$2(comment, "[", $.$add$ns($.$index$asx(range, 1), 1));
      }
    }
    return references;
  },
  "+parseCommentReferences:1:0": 0,
  parseCommentReferences$1$bailout: function(state0, length2, t1, t2, references, comment, token, codeBlockRanges, leftIndex) {
    switch (state0) {
      case 0:
        references = $.List_List($, $.CommentReference);
        references.$builtinTypeInfo = [$.CommentReference];
        t1 = $.getRuntimeTypeArgument(tokens, tokens.$asJSArray, 0);
        t2 = new $.ListIterator(tokens, tokens.length, 0, null);
        t2.$builtinTypeInfo = [t1];
      default:
        var t3, t4, range, rightIndex, firstChar, t5, reference;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!t2.moveNext$0())
                  break L0;
                token = t2._liblib$_current;
                comment = token.get$lexeme();
                t1 = $.getInterceptor$asx(comment);
                length2 = t1.get$length(comment);
              case 1:
                state0 = 0;
                codeBlockRanges = this.getCodeBlockRanges$1(comment);
                leftIndex = t1.indexOf$1(comment, "[");
              case 2:
                state0 = 0;
                t3 = $.getInterceptor$x(token);
                while (true) {
                  t4 = $.getInterceptor$n(leftIndex);
                  if (!(t4.$ge(leftIndex, 0) === true && $.$lt$n(t4.$add(leftIndex, 1), length2) === true))
                    break;
                  range = this.findRange$2(codeBlockRanges, leftIndex);
                  if (range == null) {
                    rightIndex = t1.indexOf$2(comment, "]", leftIndex);
                    if ($.$ge$n(rightIndex, 0) === true) {
                      firstChar = t1.codeUnitAt$1(comment, t4.$add(leftIndex, 1));
                      t5 = $.getInterceptor(firstChar);
                      if (!t5.$eq(firstChar, 39) && !t5.$eq(firstChar, 34))
                        if (this.isLinkText$2(comment, rightIndex))
                          ;
                        else {
                          reference = this.parseCommentReference$2(t1.substring$2(comment, t4.$add(leftIndex, 1), rightIndex), $.$add$ns($.$add$ns(t3.get$offset(token), leftIndex), 1));
                          if (reference != null)
                            references.push(reference);
                        }
                    } else
                      rightIndex = t4.$add(leftIndex, 1);
                    leftIndex = t1.indexOf$2(comment, "[", rightIndex);
                  } else
                    leftIndex = t1.indexOf$2(comment, "[", $.$add$ns($.$index$asx(range, 1), 1));
                }
            }
        return references;
    }
  },
  parseCompilationUnit2$0: function() {
    var firstToken, token, t1, scriptTag, directives, declarations, memberStart, libraryDirectiveFound, partOfDirectiveFound, partDirectiveFound, directiveFoundAfterDeclaration, commentAndMetadata, t2, directive, t3, t4, t5, preceedingDirective, t6, member;
    firstToken = this._currentToken;
    if (this.matches5$1($.get$TokenType_SCRIPT_TAG())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t1;
      scriptTag = new $.ScriptTag(null, null, null, t1);
      scriptTag._scriptTag = token;
    } else
      scriptTag = null;
    directives = $.List_List($, $.Directive);
    directives.$builtinTypeInfo = [$.Directive];
    declarations = $.List_List($, $.CompilationUnitMember);
    declarations.$builtinTypeInfo = [$.CompilationUnitMember];
    memberStart = this._currentToken;
    for (libraryDirectiveFound = false, partOfDirectiveFound = false, partDirectiveFound = false, directiveFoundAfterDeclaration = false; !this.matches5$1($.get$TokenType_EOF());) {
      commentAndMetadata = this.parseCommentAndMetadata$0();
      t1 = $.get$Keyword_IMPORT();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (!t1) {
        t1 = $.get$Keyword_EXPORT();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (!t1) {
          t1 = $.get$Keyword_LIBRARY();
          t2 = this._currentToken;
          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t2, "$isKeywordToken");
            t2.get$keyword;
            t1 = t2._liblib9$_keyword === t1;
          } else
            t1 = false;
          if (!t1) {
            t1 = $.get$Keyword_PART();
            t2 = this._currentToken;
            if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
              $.propertyTypeCast(t2, "$isKeywordToken");
              t2.get$keyword;
              t1 = t2._liblib9$_keyword === t1;
            } else
              t1 = false;
          } else
            t1 = true;
        } else
          t1 = true;
      } else
        t1 = true;
      if (t1) {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_PERIOD();
        if ($.get$type$x(t1) !== t2) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_LT();
          t2 = $.get$type$x(t1) !== t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
      if (t1) {
        directive = this.parseDirective$1(commentAndMetadata);
        if (declarations.length > 0 && !directiveFoundAfterDeclaration) {
          t1 = $.get$ParserErrorCode_DIRECTIVE_AFTER_DECLARATION();
          t2 = this._currentToken;
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
          directiveFoundAfterDeclaration = true;
        }
        if (!!$.getInterceptor(directive).$isLibraryDirective)
          if (libraryDirectiveFound) {
            t1 = $.get$ParserErrorCode_MULTIPLE_LIBRARY_DIRECTIVES();
            t2 = this._currentToken;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
          } else {
            if (directives.length > 0) {
              t1 = $.get$ParserErrorCode_LIBRARY_DIRECTIVE_NOT_FIRST();
              t2 = this._currentToken;
              t3 = this._errorListener;
              t4 = $.getInterceptor$x(t2);
              t5 = new $.AnalysisError(null, null, null, 0, 0);
              t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
              t3.onError$1(t3, t5);
            }
            libraryDirectiveFound = true;
          }
        else if (!!$.getInterceptor(directive).$isPartDirective)
          partDirectiveFound = true;
        else if (partDirectiveFound)
          if (!!$.getInterceptor(directive).$isExportDirective) {
            t1 = $.get$ParserErrorCode_EXPORT_DIRECTIVE_AFTER_PART_DIRECTIVE();
            t2 = directive._keyword;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
          } else if (!!$.getInterceptor(directive).$isImportDirective) {
            t1 = $.get$ParserErrorCode_IMPORT_DIRECTIVE_AFTER_PART_DIRECTIVE();
            t2 = directive._keyword;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
          }
        if (!!$.getInterceptor(directive).$isPartOfDirective) {
          if (partOfDirectiveFound) {
            t1 = $.get$ParserErrorCode_MULTIPLE_PART_OF_DIRECTIVES();
            t2 = this._currentToken;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
          } else {
            t1 = $.getRuntimeTypeArgument(directives, directives.$asJSArray, 0);
            t2 = new $.ListIterator(directives, directives.length, 0, null);
            t2.$builtinTypeInfo = [t1];
            for (; t2.moveNext$0();) {
              preceedingDirective = t2._liblib$_current;
              t1 = $.get$ParserErrorCode_NON_PART_OF_DIRECTIVE_IN_PART();
              t3 = preceedingDirective.get$keyword();
              t4 = this._errorListener;
              t5 = $.getInterceptor$x(t3);
              t6 = new $.AnalysisError(null, null, null, 0, 0);
              t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, []);
              t4.onError$1(t4, t6);
            }
            partOfDirectiveFound = true;
          }
          directive = directive;
        } else if (partOfDirectiveFound) {
          t1 = $.get$ParserErrorCode_NON_PART_OF_DIRECTIVE_IN_PART();
          t2 = directive.get$keyword();
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
        }
        directives.push(directive);
      } else if (this.matches5$1($.get$TokenType_SEMICOLON())) {
        t1 = $.get$ParserErrorCode_UNEXPECTED_TOKEN();
        t2 = this._currentToken;
        t3 = t2.get$lexeme();
        t4 = this._errorListener;
        t5 = $.getInterceptor$x(t2);
        t6 = new $.AnalysisError(null, null, null, 0, 0);
        t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t2), t5.get$length(t2), t1, [t3]);
        t4.onError$1(t4, t6);
        this._currentToken = this._currentToken.get$next();
      } else {
        member = this.parseCompilationUnitMember$1(commentAndMetadata);
        if (member != null)
          declarations.push(member);
      }
      t1 = this._currentToken;
      if (t1 == null ? memberStart == null : t1 === memberStart) {
        t1 = $.get$ParserErrorCode_UNEXPECTED_TOKEN();
        t2 = this._currentToken;
        t3 = t2.get$lexeme();
        t4 = this._errorListener;
        t5 = $.getInterceptor$x(t2);
        t6 = new $.AnalysisError(null, null, null, 0, 0);
        t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t2), t5.get$length(t2), t1, [t3]);
        t4.onError$1(t4, t6);
        this._currentToken = this._currentToken.get$next();
        while (true) {
          if (!(!this.matches5$1($.get$TokenType_EOF()) && !this.couldBeStartOfCompilationUnitMember$0()))
            break;
          this._currentToken = this._currentToken.get$next();
        }
      }
      memberStart = this._currentToken;
    }
    return $.CompilationUnit$full(firstToken, scriptTag, directives, declarations, this._currentToken);
  },
  "+parseCompilationUnit2:0:0": 0,
  parseCompilationUnitMember$1: function(commentAndMetadata) {
    var modifiers, t1, t2, returnType, t3, t4, t5, t6, t7, node, node0;
    modifiers = this.parseModifiers$0();
    t1 = $.get$Keyword_CLASS();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1)
      return this.parseClassDeclaration$2(commentAndMetadata, this.validateModifiersForClass$1(modifiers));
    else {
      t1 = $.get$Keyword_TYPEDEF();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1) {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_PERIOD();
        if ($.get$type$x(t1) !== t2) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_LT();
          t2 = $.get$type$x(t1) !== t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
      if (t1) {
        this.validateModifiersForTypedef$1(modifiers);
        return this.parseTypeAlias$1(commentAndMetadata);
      }
    }
    t1 = $.get$Keyword_VOID();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      returnType = this.parseReturnType$0();
      t1 = $.get$Keyword_GET();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (!t1) {
        t1 = $.get$Keyword_SET();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1) {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_IDENTIFIER();
        t3 = $.getInterceptor$x(t1);
        if (t3.get$type(t1) !== t2) {
          t2 = $.get$TokenType_KEYWORD();
          if (t3.get$type(t1) === t2) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
          } else
            t1 = false;
        } else
          t1 = true;
      } else
        t1 = false;
      if (t1) {
        this.validateModifiersForTopLevelFunction$1(modifiers);
        return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers._externalKeyword, null);
      } else {
        t1 = $.get$Keyword_OPERATOR();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1 && this.isOperator$1(this._currentToken.get$next())) {
          t1 = $.get$ParserErrorCode_TOP_LEVEL_OPERATOR();
          t2 = this._currentToken;
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
          t5 = this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, returnType);
          t3 = t5._comment;
          t1 = t5._metadata;
          t2 = t5._liblib4$_externalKeyword;
          t4 = t5._returnType;
          t6 = t5._propertyKeyword;
          t7 = t5._liblib4$_name;
          node = t5._parameters;
          node0 = t5._body;
          t5 = $.ASTNode__hashCodeGenerator;
          if (typeof t5 !== "number")
            return this.parseCompilationUnitMember$1$bailout(1, t2, t4, t6, t7, node, node0, t5, t3, t1);
          ++t5;
          $.ASTNode__hashCodeGenerator = t5;
          t5 = new $.FunctionExpression(null, null, null, null, null, null, null, t5);
          if (node != null)
            $.set$parent$x(node, t5);
          t5._parameters = node;
          if (node0 != null)
            $.set$parent$x(node0, t5);
          t5._body = node0;
          return $.FunctionDeclaration$full(t3, t1, t2, t4, t6, t7, t5);
        } else {
          t1 = this._currentToken;
          t2 = $.get$TokenType_IDENTIFIER();
          t3 = $.getInterceptor$x(t1);
          if (t3.get$type(t1) !== t2) {
            t2 = $.get$TokenType_KEYWORD();
            if (t3.get$type(t1) === t2) {
              $.propertyTypeCast(t1, "$isKeywordToken");
              t1.get$keyword;
              t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
            } else
              t1 = false;
          } else
            t1 = true;
          if (t1 && this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_OPEN_PAREN(), $.get$TokenType_OPEN_CURLY_BRACKET(), $.get$TokenType_FUNCTION()])) {
            this.validateModifiersForTopLevelFunction$1(modifiers);
            return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers._externalKeyword, returnType);
          } else {
            t1 = this._currentToken;
            t2 = $.get$TokenType_IDENTIFIER();
            t3 = $.getInterceptor$x(t1);
            if (t3.get$type(t1) !== t2) {
              t2 = $.get$TokenType_KEYWORD();
              if (t3.get$type(t1) === t2) {
                $.propertyTypeCast(t1, "$isKeywordToken");
                t1.get$keyword;
                t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
              } else
                t1 = false;
            } else
              t1 = true;
            if (t1)
              if (this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_EQ(), $.get$TokenType_COMMA(), $.get$TokenType_SEMICOLON()])) {
                t1 = $.get$ParserErrorCode_VOID_VARIABLE();
                t2 = this._errorListener;
                t3 = new $.AnalysisError(null, null, null, 0, 0);
                t3._jtd_constructor_132_impl$5(this._liblib14$_source, returnType.get$offset(returnType), returnType.get$length(returnType), t1, []);
                t2.onError$1(t2, t3);
                node = commentAndMetadata._liblib14$_comment;
                t3 = commentAndMetadata._liblib14$_metadata;
                node0 = this.parseVariableDeclarationList2$3(null, this.validateModifiersForTopLevelVariable$1(modifiers), null);
                t2 = this.expect2$1($.get$TokenType_SEMICOLON());
                t1 = $.ASTNode__hashCodeGenerator;
                if (typeof t1 !== "number")
                  return this.parseCompilationUnitMember$1$bailout(2, t2, 0, 0, 0, node, node0, 0, t3, t1);
                ++t1;
                $.ASTNode__hashCodeGenerator = t1;
                t1 = new $.TopLevelVariableDeclaration(null, null, null, null, null, null, t1);
                t4 = $.Annotation;
                t5 = $.List_List($, t4);
                t5.$builtinTypeInfo = [t4];
                t6 = t4;
                t7 = $.List_List($, t6);
                t7.$builtinTypeInfo = [t6];
                t5 = new $.NodeList(t1, t5, t7);
                t5.$builtinTypeInfo = [t4];
                t1._metadata = t5;
                if (node != null)
                  node.set$parent(node, t1);
                t1._comment = node;
                t4 = t1._metadata;
                t4.addAll$1(t4, t3);
                node0.set$parent(node0, t1);
                t1._variableList = node0;
                t1._semicolon = t2;
                return t1;
              }
            t1 = $.get$ParserErrorCode_EXPECTED_EXECUTABLE();
            t2 = this._currentToken;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
            return;
          }
        }
      }
    } else {
      t1 = $.get$Keyword_GET();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (!t1) {
        t1 = $.get$Keyword_SET();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1) {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_IDENTIFIER();
        t3 = $.getInterceptor$x(t1);
        if (t3.get$type(t1) !== t2) {
          t2 = $.get$TokenType_KEYWORD();
          if (t3.get$type(t1) === t2) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
          } else
            t1 = false;
        } else
          t1 = true;
      } else
        t1 = false;
      if (t1) {
        this.validateModifiersForTopLevelFunction$1(modifiers);
        return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers._externalKeyword, null);
      } else {
        t1 = $.get$Keyword_OPERATOR();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1 && this.isOperator$1(this._currentToken.get$next())) {
          t1 = $.get$ParserErrorCode_TOP_LEVEL_OPERATOR();
          t2 = this._currentToken;
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
          t5 = this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, null);
          t3 = t5._comment;
          t1 = t5._metadata;
          t2 = t5._liblib4$_externalKeyword;
          t4 = t5._returnType;
          t6 = t5._propertyKeyword;
          t7 = t5._liblib4$_name;
          node = t5._parameters;
          node0 = t5._body;
          t5 = $.ASTNode__hashCodeGenerator;
          if (typeof t5 !== "number")
            return this.parseCompilationUnitMember$1$bailout(3, t2, t4, t6, t7, node, node0, t5, t3, t1);
          ++t5;
          $.ASTNode__hashCodeGenerator = t5;
          t5 = new $.FunctionExpression(null, null, null, null, null, null, null, t5);
          if (node != null)
            $.set$parent$x(node, t5);
          t5._parameters = node;
          if (node0 != null)
            $.set$parent$x(node0, t5);
          t5._body = node0;
          return $.FunctionDeclaration$full(t3, t1, t2, t4, t6, t7, t5);
        } else {
          t1 = this._currentToken;
          t2 = $.get$TokenType_IDENTIFIER();
          t3 = $.getInterceptor$x(t1);
          if (t3.get$type(t1) !== t2) {
            t2 = $.get$TokenType_KEYWORD();
            if (t3.get$type(t1) === t2) {
              $.propertyTypeCast(t1, "$isKeywordToken");
              t1.get$keyword;
              t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
            } else
              t1 = false;
          } else
            t1 = true;
          if (!t1) {
            t1 = $.get$ParserErrorCode_EXPECTED_EXECUTABLE();
            t2 = this._currentToken;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
            return;
          } else {
            t1 = this._currentToken.get$next();
            t2 = $.get$TokenType_OPEN_PAREN();
            if ($.get$type$x(t1) === t2) {
              this.validateModifiersForTopLevelFunction$1(modifiers);
              return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers._externalKeyword, null);
            } else if (this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_EQ(), $.get$TokenType_COMMA(), $.get$TokenType_SEMICOLON()])) {
              if (modifiers._constKeyword == null && modifiers._finalKeyword == null && modifiers._varKeyword == null) {
                t1 = $.get$ParserErrorCode_MISSING_CONST_FINAL_VAR_OR_TYPE();
                t2 = this._currentToken;
                t3 = this._errorListener;
                t4 = $.getInterceptor$x(t2);
                t5 = new $.AnalysisError(null, null, null, 0, 0);
                t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                t3.onError$1(t3, t5);
              }
              node = commentAndMetadata._liblib14$_comment;
              t1 = commentAndMetadata._liblib14$_metadata;
              node0 = this.parseVariableDeclarationList2$3(null, this.validateModifiersForTopLevelVariable$1(modifiers), null);
              t2 = this.expect2$1($.get$TokenType_SEMICOLON());
              t3 = $.ASTNode__hashCodeGenerator;
              if (typeof t3 !== "number")
                return this.parseCompilationUnitMember$1$bailout(4, t2, 0, 0, 0, node, node0, 0, t3, t1);
              ++t3;
              $.ASTNode__hashCodeGenerator = t3;
              t3 = new $.TopLevelVariableDeclaration(null, null, null, null, null, null, t3);
              t4 = $.Annotation;
              t5 = $.List_List($, t4);
              t5.$builtinTypeInfo = [t4];
              t6 = t4;
              t7 = $.List_List($, t6);
              t7.$builtinTypeInfo = [t6];
              t5 = new $.NodeList(t3, t5, t7);
              t5.$builtinTypeInfo = [t4];
              t3._metadata = t5;
              if (node != null)
                node.set$parent(node, t3);
              t3._comment = node;
              t4 = t3._metadata;
              t4.addAll$1(t4, t1);
              node0.set$parent(node0, t3);
              t3._variableList = node0;
              t3._semicolon = t2;
              return t3;
            }
          }
        }
      }
    }
    returnType = this.parseReturnType$0();
    t1 = $.get$Keyword_GET();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (!t1) {
      t1 = $.get$Keyword_SET();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
    } else
      t1 = true;
    if (t1) {
      this.validateModifiersForTopLevelFunction$1(modifiers);
      return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers._externalKeyword, returnType);
    } else {
      t1 = $.get$Keyword_OPERATOR();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1 && this.isOperator$1(this._currentToken.get$next())) {
        t1 = $.get$ParserErrorCode_TOP_LEVEL_OPERATOR();
        t2 = this._currentToken;
        t3 = this._errorListener;
        t4 = $.getInterceptor$x(t2);
        t5 = new $.AnalysisError(null, null, null, 0, 0);
        t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
        t3.onError$1(t3, t5);
        t5 = this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, returnType);
        t3 = t5._comment;
        t1 = t5._metadata;
        t2 = t5._liblib4$_externalKeyword;
        t4 = t5._returnType;
        t6 = t5._propertyKeyword;
        t7 = t5._liblib4$_name;
        node = t5._parameters;
        node0 = t5._body;
        t5 = $.ASTNode__hashCodeGenerator;
        if (typeof t5 !== "number")
          return this.parseCompilationUnitMember$1$bailout(5, t2, t4, t6, t7, node, node0, t5, t3, t1);
        ++t5;
        $.ASTNode__hashCodeGenerator = t5;
        t5 = new $.FunctionExpression(null, null, null, null, null, null, null, t5);
        if (node != null)
          $.set$parent$x(node, t5);
        t5._parameters = node;
        if (node0 != null)
          $.set$parent$x(node0, t5);
        t5._body = node0;
        return $.FunctionDeclaration$full(t3, t1, t2, t4, t6, t7, t5);
      } else {
        t1 = this._currentToken;
        t2 = $.get$TokenType_IDENTIFIER();
        t3 = $.getInterceptor$x(t1);
        if (t3.get$type(t1) !== t2) {
          t2 = $.get$TokenType_KEYWORD();
          if (t3.get$type(t1) === t2) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
          } else
            t1 = false;
        } else
          t1 = true;
        if (!t1) {
          t1 = $.get$ParserErrorCode_EXPECTED_EXECUTABLE();
          t2 = this._currentToken;
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
          return;
        }
      }
    }
    if (this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_OPEN_PAREN(), $.get$TokenType_FUNCTION(), $.get$TokenType_OPEN_CURLY_BRACKET()])) {
      this.validateModifiersForTopLevelFunction$1(modifiers);
      return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers._externalKeyword, returnType);
    }
    node = commentAndMetadata._liblib14$_comment;
    t1 = commentAndMetadata._liblib14$_metadata;
    node0 = this.parseVariableDeclarationList2$3(null, this.validateModifiersForTopLevelVariable$1(modifiers), returnType);
    t2 = this.expect2$1($.get$TokenType_SEMICOLON());
    t3 = $.ASTNode__hashCodeGenerator;
    if (typeof t3 !== "number")
      return this.parseCompilationUnitMember$1$bailout(6, t2, 0, 0, 0, node, node0, 0, t3, t1);
    ++t3;
    $.ASTNode__hashCodeGenerator = t3;
    t3 = new $.TopLevelVariableDeclaration(null, null, null, null, null, null, t3);
    t4 = $.Annotation;
    t5 = $.List_List($, t4);
    t5.$builtinTypeInfo = [t4];
    t6 = t4;
    t7 = $.List_List($, t6);
    t7.$builtinTypeInfo = [t6];
    t5 = new $.NodeList(t3, t5, t7);
    t5.$builtinTypeInfo = [t4];
    t3._metadata = t5;
    if (node != null)
      node.set$parent(node, t3);
    t3._comment = node;
    t4 = t3._metadata;
    t4.addAll$1(t4, t1);
    node0.set$parent(node0, t3);
    t3._variableList = node0;
    t3._semicolon = t2;
    return t3;
  },
  "+parseCompilationUnitMember:1:0": 0,
  parseCompilationUnitMember$1$bailout: function(state0, t2, t4, t6, t7, node, node0, t5, t3, t1) {
    switch (state0) {
      case 0:
        modifiers = this.parseModifiers$0();
        t1 = $.get$Keyword_CLASS();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1)
          return this.parseClassDeclaration$2(commentAndMetadata, this.validateModifiersForClass$1(modifiers));
        else {
          t1 = $.get$Keyword_TYPEDEF();
          t2 = this._currentToken;
          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t2, "$isKeywordToken");
            t2.get$keyword;
            t1 = t2._liblib9$_keyword === t1;
          } else
            t1 = false;
          if (t1) {
            t1 = this._currentToken.get$next();
            t2 = $.get$TokenType_PERIOD();
            if ($.get$type$x(t1) !== t2) {
              t1 = this._currentToken.get$next();
              t2 = $.get$TokenType_LT();
              t2 = $.get$type$x(t1) !== t2;
              t1 = t2;
            } else
              t1 = false;
          } else
            t1 = false;
          if (t1) {
            this.validateModifiersForTypedef$1(modifiers);
            return this.parseTypeAlias$1(commentAndMetadata);
          }
        }
        t1 = $.get$Keyword_VOID();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
      default:
        if (state0 === 2 || state0 === 1 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              returnType = this.parseReturnType$0();
              t1 = $.get$Keyword_GET();
              t2 = this._currentToken;
              if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t2, "$isKeywordToken");
                t2.get$keyword;
                t1 = t2._liblib9$_keyword === t1;
              } else
                t1 = false;
              if (!t1) {
                t1 = $.get$Keyword_SET();
                t2 = this._currentToken;
                if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                  $.propertyTypeCast(t2, "$isKeywordToken");
                  t2.get$keyword;
                  t1 = t2._liblib9$_keyword === t1;
                } else
                  t1 = false;
              } else
                t1 = true;
              if (t1) {
                t1 = this._currentToken.get$next();
                t2 = $.get$TokenType_IDENTIFIER();
                t3 = $.getInterceptor$x(t1);
                if (t3.get$type(t1) !== t2) {
                  t2 = $.get$TokenType_KEYWORD();
                  if (t3.get$type(t1) === t2) {
                    $.propertyTypeCast(t1, "$isKeywordToken");
                    t1.get$keyword;
                    t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                  } else
                    t1 = false;
                } else
                  t1 = true;
              } else
                t1 = false;
            default:
              if (state0 === 0 && t1) {
                this.validateModifiersForTopLevelFunction$1(modifiers);
                return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers._externalKeyword, null);
              } else
                switch (state0) {
                  case 0:
                    t1 = $.get$Keyword_OPERATOR();
                    t2 = this._currentToken;
                    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                      $.propertyTypeCast(t2, "$isKeywordToken");
                      t2.get$keyword;
                      t1 = t2._liblib9$_keyword === t1;
                    } else
                      t1 = false;
                  default:
                    if (state0 === 1 || state0 === 0 && t1 && this.isOperator$1(this._currentToken.get$next()))
                      switch (state0) {
                        case 0:
                          t1 = $.get$ParserErrorCode_TOP_LEVEL_OPERATOR();
                          t2 = this._currentToken;
                          t3 = this._errorListener;
                          t4 = $.getInterceptor$x(t2);
                          t5 = new $.AnalysisError(null, null, null, 0, 0);
                          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                          t3.onError$1(t3, t5);
                          t5 = this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, returnType);
                          t3 = t5._comment;
                          t1 = t5._metadata;
                          t2 = t5._liblib4$_externalKeyword;
                          t4 = t5._returnType;
                          t6 = t5._propertyKeyword;
                          t7 = t5._liblib4$_name;
                          node = t5._parameters;
                          node0 = t5._body;
                          t5 = $.ASTNode__hashCodeGenerator;
                        case 1:
                          state0 = 0;
                          t5 = $.$add$ns(t5, 1);
                          $.ASTNode__hashCodeGenerator = t5;
                          t5 = new $.FunctionExpression(null, null, null, null, null, null, null, t5);
                          if (node != null)
                            $.set$parent$x(node, t5);
                          t5._parameters = node;
                          if (node0 != null)
                            $.set$parent$x(node0, t5);
                          t5._body = node0;
                          return $.FunctionDeclaration$full(t3, t1, t2, t4, t6, t7, t5);
                      }
                    else
                      switch (state0) {
                        case 0:
                          t1 = this._currentToken;
                          t2 = $.get$TokenType_IDENTIFIER();
                          t3 = $.getInterceptor$x(t1);
                          if (t3.get$type(t1) !== t2) {
                            t2 = $.get$TokenType_KEYWORD();
                            if (t3.get$type(t1) === t2) {
                              $.propertyTypeCast(t1, "$isKeywordToken");
                              t1.get$keyword;
                              t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                            } else
                              t1 = false;
                          } else
                            t1 = true;
                        case 2:
                          if (state0 === 0 && t1 && this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_OPEN_PAREN(), $.get$TokenType_OPEN_CURLY_BRACKET(), $.get$TokenType_FUNCTION()])) {
                            this.validateModifiersForTopLevelFunction$1(modifiers);
                            return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers._externalKeyword, returnType);
                          } else
                            switch (state0) {
                              case 0:
                                t1 = this._currentToken;
                                t2 = $.get$TokenType_IDENTIFIER();
                                t3 = $.getInterceptor$x(t1);
                                if (t3.get$type(t1) !== t2) {
                                  t2 = $.get$TokenType_KEYWORD();
                                  if (t3.get$type(t1) === t2) {
                                    $.propertyTypeCast(t1, "$isKeywordToken");
                                    t1.get$keyword;
                                    t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                                  } else
                                    t1 = false;
                                } else
                                  t1 = true;
                              case 2:
                                if (state0 === 2 || state0 === 0 && t1)
                                  switch (state0) {
                                    case 0:
                                    case 2:
                                      if (state0 === 2 || state0 === 0 && this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_EQ(), $.get$TokenType_COMMA(), $.get$TokenType_SEMICOLON()]))
                                        switch (state0) {
                                          case 0:
                                            t1 = $.get$ParserErrorCode_VOID_VARIABLE();
                                            t2 = this._errorListener;
                                            t3 = new $.AnalysisError(null, null, null, 0, 0);
                                            t3._jtd_constructor_132_impl$5(this._liblib14$_source, returnType.get$offset(returnType), returnType.get$length(returnType), t1, []);
                                            t2.onError$1(t2, t3);
                                            node = commentAndMetadata._liblib14$_comment;
                                            t3 = commentAndMetadata._liblib14$_metadata;
                                            node0 = this.parseVariableDeclarationList2$3(null, this.validateModifiersForTopLevelVariable$1(modifiers), null);
                                            t2 = this.expect2$1($.get$TokenType_SEMICOLON());
                                            t1 = $.ASTNode__hashCodeGenerator;
                                          case 2:
                                            state0 = 0;
                                            t1 = $.$add$ns(t1, 1);
                                            $.ASTNode__hashCodeGenerator = t1;
                                            t1 = new $.TopLevelVariableDeclaration(null, null, null, null, null, null, t1);
                                            t4 = $.Annotation;
                                            t5 = $.List_List($, t4);
                                            t5.$builtinTypeInfo = [t4];
                                            t6 = t4;
                                            t7 = $.List_List($, t6);
                                            t7.$builtinTypeInfo = [t6];
                                            t5 = new $.NodeList(t1, t5, t7);
                                            t5.$builtinTypeInfo = [t4];
                                            t1._metadata = t5;
                                            if (node != null)
                                              node.set$parent(node, t1);
                                            t1._comment = node;
                                            t4 = t1._metadata;
                                            t4.addAll$1(t4, t3);
                                            node0.set$parent(node0, t1);
                                            t1._variableList = node0;
                                            t1._semicolon = t2;
                                            return t1;
                                        }
                                  }
                                t1 = $.get$ParserErrorCode_EXPECTED_EXECUTABLE();
                                t2 = this._currentToken;
                                t3 = this._errorListener;
                                t4 = $.getInterceptor$x(t2);
                                t5 = new $.AnalysisError(null, null, null, 0, 0);
                                t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                                t3.onError$1(t3, t5);
                                return;
                            }
                      }
                }
          }
        else
          switch (state0) {
            case 0:
              t1 = $.get$Keyword_GET();
              t2 = this._currentToken;
              if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t2, "$isKeywordToken");
                t2.get$keyword;
                t1 = t2._liblib9$_keyword === t1;
              } else
                t1 = false;
              if (!t1) {
                t1 = $.get$Keyword_SET();
                t2 = this._currentToken;
                if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                  $.propertyTypeCast(t2, "$isKeywordToken");
                  t2.get$keyword;
                  t1 = t2._liblib9$_keyword === t1;
                } else
                  t1 = false;
              } else
                t1 = true;
              if (t1) {
                t1 = this._currentToken.get$next();
                t2 = $.get$TokenType_IDENTIFIER();
                t3 = $.getInterceptor$x(t1);
                if (t3.get$type(t1) !== t2) {
                  t2 = $.get$TokenType_KEYWORD();
                  if (t3.get$type(t1) === t2) {
                    $.propertyTypeCast(t1, "$isKeywordToken");
                    t1.get$keyword;
                    t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                  } else
                    t1 = false;
                } else
                  t1 = true;
              } else
                t1 = false;
            default:
              if (state0 === 0 && t1) {
                this.validateModifiersForTopLevelFunction$1(modifiers);
                return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers._externalKeyword, null);
              } else
                switch (state0) {
                  case 0:
                    t1 = $.get$Keyword_OPERATOR();
                    t2 = this._currentToken;
                    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                      $.propertyTypeCast(t2, "$isKeywordToken");
                      t2.get$keyword;
                      t1 = t2._liblib9$_keyword === t1;
                    } else
                      t1 = false;
                  default:
                    if (state0 === 3 || state0 === 0 && t1 && this.isOperator$1(this._currentToken.get$next()))
                      switch (state0) {
                        case 0:
                          t1 = $.get$ParserErrorCode_TOP_LEVEL_OPERATOR();
                          t2 = this._currentToken;
                          t3 = this._errorListener;
                          t4 = $.getInterceptor$x(t2);
                          t5 = new $.AnalysisError(null, null, null, 0, 0);
                          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                          t3.onError$1(t3, t5);
                          t5 = this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, null);
                          t3 = t5._comment;
                          t1 = t5._metadata;
                          t2 = t5._liblib4$_externalKeyword;
                          t4 = t5._returnType;
                          t6 = t5._propertyKeyword;
                          t7 = t5._liblib4$_name;
                          node = t5._parameters;
                          node0 = t5._body;
                          t5 = $.ASTNode__hashCodeGenerator;
                        case 3:
                          state0 = 0;
                          t5 = $.$add$ns(t5, 1);
                          $.ASTNode__hashCodeGenerator = t5;
                          t5 = new $.FunctionExpression(null, null, null, null, null, null, null, t5);
                          if (node != null)
                            $.set$parent$x(node, t5);
                          t5._parameters = node;
                          if (node0 != null)
                            $.set$parent$x(node0, t5);
                          t5._body = node0;
                          return $.FunctionDeclaration$full(t3, t1, t2, t4, t6, t7, t5);
                      }
                    else
                      switch (state0) {
                        case 0:
                          t1 = this._currentToken;
                          t2 = $.get$TokenType_IDENTIFIER();
                          t3 = $.getInterceptor$x(t1);
                          if (t3.get$type(t1) !== t2) {
                            t2 = $.get$TokenType_KEYWORD();
                            if (t3.get$type(t1) === t2) {
                              $.propertyTypeCast(t1, "$isKeywordToken");
                              t1.get$keyword;
                              t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                            } else
                              t1 = false;
                          } else
                            t1 = true;
                        case 4:
                          if (state0 === 0 && !t1) {
                            t1 = $.get$ParserErrorCode_EXPECTED_EXECUTABLE();
                            t2 = this._currentToken;
                            t3 = this._errorListener;
                            t4 = $.getInterceptor$x(t2);
                            t5 = new $.AnalysisError(null, null, null, 0, 0);
                            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                            t3.onError$1(t3, t5);
                            return;
                          } else
                            switch (state0) {
                              case 0:
                                t1 = this._currentToken.get$next();
                                t2 = $.get$TokenType_OPEN_PAREN();
                              case 4:
                                if (state0 === 0 && $.get$type$x(t1) === t2) {
                                  this.validateModifiersForTopLevelFunction$1(modifiers);
                                  return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers._externalKeyword, null);
                                } else
                                  switch (state0) {
                                    case 0:
                                    case 4:
                                      if (state0 === 4 || state0 === 0 && this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_EQ(), $.get$TokenType_COMMA(), $.get$TokenType_SEMICOLON()]))
                                        switch (state0) {
                                          case 0:
                                            if (modifiers._constKeyword == null && modifiers._finalKeyword == null && modifiers._varKeyword == null) {
                                              t1 = $.get$ParserErrorCode_MISSING_CONST_FINAL_VAR_OR_TYPE();
                                              t2 = this._currentToken;
                                              t3 = this._errorListener;
                                              t4 = $.getInterceptor$x(t2);
                                              t5 = new $.AnalysisError(null, null, null, 0, 0);
                                              t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                                              t3.onError$1(t3, t5);
                                            }
                                            node = commentAndMetadata._liblib14$_comment;
                                            t1 = commentAndMetadata._liblib14$_metadata;
                                            node0 = this.parseVariableDeclarationList2$3(null, this.validateModifiersForTopLevelVariable$1(modifiers), null);
                                            t2 = this.expect2$1($.get$TokenType_SEMICOLON());
                                            t3 = $.ASTNode__hashCodeGenerator;
                                          case 4:
                                            state0 = 0;
                                            t3 = $.$add$ns(t3, 1);
                                            $.ASTNode__hashCodeGenerator = t3;
                                            t3 = new $.TopLevelVariableDeclaration(null, null, null, null, null, null, t3);
                                            t4 = $.Annotation;
                                            t5 = $.List_List($, t4);
                                            t5.$builtinTypeInfo = [t4];
                                            t6 = t4;
                                            t7 = $.List_List($, t6);
                                            t7.$builtinTypeInfo = [t6];
                                            t5 = new $.NodeList(t3, t5, t7);
                                            t5.$builtinTypeInfo = [t4];
                                            t3._metadata = t5;
                                            if (node != null)
                                              node.set$parent(node, t3);
                                            t3._comment = node;
                                            t4 = t3._metadata;
                                            t4.addAll$1(t4, t1);
                                            node0.set$parent(node0, t3);
                                            t3._variableList = node0;
                                            t3._semicolon = t2;
                                            return t3;
                                        }
                                  }
                            }
                      }
                }
          }
        returnType = this.parseReturnType$0();
        t1 = $.get$Keyword_GET();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (!t1) {
          t1 = $.get$Keyword_SET();
          t2 = this._currentToken;
          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t2, "$isKeywordToken");
            t2.get$keyword;
            t1 = t2._liblib9$_keyword === t1;
          } else
            t1 = false;
        } else
          t1 = true;
      case 5:
        if (state0 === 0 && t1) {
          this.validateModifiersForTopLevelFunction$1(modifiers);
          return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers._externalKeyword, returnType);
        } else
          switch (state0) {
            case 0:
              t1 = $.get$Keyword_OPERATOR();
              t2 = this._currentToken;
              if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t2, "$isKeywordToken");
                t2.get$keyword;
                t1 = t2._liblib9$_keyword === t1;
              } else
                t1 = false;
            case 5:
              if (state0 === 5 || state0 === 0 && t1 && this.isOperator$1(this._currentToken.get$next()))
                switch (state0) {
                  case 0:
                    t1 = $.get$ParserErrorCode_TOP_LEVEL_OPERATOR();
                    t2 = this._currentToken;
                    t3 = this._errorListener;
                    t4 = $.getInterceptor$x(t2);
                    t5 = new $.AnalysisError(null, null, null, 0, 0);
                    t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                    t3.onError$1(t3, t5);
                    t5 = this.parseOperator$3(commentAndMetadata, modifiers._externalKeyword, returnType);
                    t3 = t5._comment;
                    t1 = t5._metadata;
                    t2 = t5._liblib4$_externalKeyword;
                    t4 = t5._returnType;
                    t6 = t5._propertyKeyword;
                    t7 = t5._liblib4$_name;
                    node = t5._parameters;
                    node0 = t5._body;
                    t5 = $.ASTNode__hashCodeGenerator;
                  case 5:
                    state0 = 0;
                    t5 = $.$add$ns(t5, 1);
                    $.ASTNode__hashCodeGenerator = t5;
                    t5 = new $.FunctionExpression(null, null, null, null, null, null, null, t5);
                    if (node != null)
                      $.set$parent$x(node, t5);
                    t5._parameters = node;
                    if (node0 != null)
                      $.set$parent$x(node0, t5);
                    t5._body = node0;
                    return $.FunctionDeclaration$full(t3, t1, t2, t4, t6, t7, t5);
                }
              else {
                t1 = this._currentToken;
                t2 = $.get$TokenType_IDENTIFIER();
                t3 = $.getInterceptor$x(t1);
                if (t3.get$type(t1) !== t2) {
                  t2 = $.get$TokenType_KEYWORD();
                  if (t3.get$type(t1) === t2) {
                    $.propertyTypeCast(t1, "$isKeywordToken");
                    t1.get$keyword;
                    t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                  } else
                    t1 = false;
                } else
                  t1 = true;
                if (!t1) {
                  t1 = $.get$ParserErrorCode_EXPECTED_EXECUTABLE();
                  t2 = this._currentToken;
                  t3 = this._errorListener;
                  t4 = $.getInterceptor$x(t2);
                  t5 = new $.AnalysisError(null, null, null, 0, 0);
                  t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                  t3.onError$1(t3, t5);
                  return;
                }
              }
          }
        if (this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_OPEN_PAREN(), $.get$TokenType_FUNCTION(), $.get$TokenType_OPEN_CURLY_BRACKET()])) {
          this.validateModifiersForTopLevelFunction$1(modifiers);
          return this.parseFunctionDeclaration$3(commentAndMetadata, modifiers._externalKeyword, returnType);
        }
        node = commentAndMetadata._liblib14$_comment;
        t1 = commentAndMetadata._liblib14$_metadata;
        node0 = this.parseVariableDeclarationList2$3(null, this.validateModifiersForTopLevelVariable$1(modifiers), returnType);
        t2 = this.expect2$1($.get$TokenType_SEMICOLON());
        t3 = $.ASTNode__hashCodeGenerator;
      case 6:
        var modifiers, returnType;
        state0 = 0;
        t3 = $.$add$ns(t3, 1);
        $.ASTNode__hashCodeGenerator = t3;
        t3 = new $.TopLevelVariableDeclaration(null, null, null, null, null, null, t3);
        t4 = $.Annotation;
        t5 = $.List_List($, t4);
        t5.$builtinTypeInfo = [t4];
        t6 = t4;
        t7 = $.List_List($, t6);
        t7.$builtinTypeInfo = [t6];
        t5 = new $.NodeList(t3, t5, t7);
        t5.$builtinTypeInfo = [t4];
        t3._metadata = t5;
        if (node != null)
          node.set$parent(node, t3);
        t3._comment = node;
        t4 = t3._metadata;
        t4.addAll$1(t4, t1);
        node0.set$parent(node0, t3);
        t3._variableList = node0;
        t3._semicolon = t2;
        return t3;
    }
  },
  parseConditionalExpression$0: function() {
    var condition, token;
    condition = this.parseLogicalOrExpression$0();
    if (!this.matches5$1($.get$TokenType_QUESTION()))
      return condition;
    token = this._currentToken;
    this._currentToken = token.get$next();
    return $.ConditionalExpression$full(condition, token, this.parseExpressionWithoutCascade$0(), this.expect2$1($.get$TokenType_COLON()), this.parseExpressionWithoutCascade$0());
  },
  "+parseConditionalExpression:0:0": 0,
  parseConstExpression$0: function() {
    var keyword, constructorName, argumentList, t1;
    keyword = this.expect$1($.get$Keyword_CONST());
    if (this.matches5$1($.get$TokenType_OPEN_SQUARE_BRACKET()) || this.matches5$1($.get$TokenType_INDEX()))
      return this.parseListLiteral$2(keyword, null);
    else if (this.matches5$1($.get$TokenType_OPEN_CURLY_BRACKET()))
      return this.parseMapLiteral$2(keyword, null);
    else if (this.matches5$1($.get$TokenType_LT()))
      return this.parseListOrMapLiteral$1(keyword);
    constructorName = this.parseConstructorName$0();
    argumentList = this.parseArgumentList$0();
    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.InstanceCreationExpression(null, null, null, null, null, null, null, null, null, t1);
    t1._keyword = keyword;
    constructorName.set$parent(constructorName, t1);
    t1._constructorName = constructorName;
    argumentList.set$parent(argumentList, t1);
    t1._argumentList = argumentList;
    return t1;
  },
  "+parseConstExpression:0:0": 0,
  parseConstructor$8: function(commentAndMetadata, externalKeyword, constKeyword, factoryKeyword, returnType, period, $name, parameters) {
    var bodyAllowed, token, initializers, bodyAllowed0, t1, t2, separator, redirectedConstructor, body, t3, t4;
    bodyAllowed = externalKeyword == null;
    if (this.matches5$1($.get$TokenType_COLON())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      initializers = $.List_List($, $.ConstructorInitializer);
      initializers.$builtinTypeInfo = [$.ConstructorInitializer];
      bodyAllowed0 = bodyAllowed;
      do {
        t1 = $.get$Keyword_THIS();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_OPEN_PAREN();
          if ($.get$type$x(t1) === t2) {
            initializers.push(this.parseRedirectingConstructorInvocation$0());
            bodyAllowed0 = false;
          } else {
            t1 = this._currentToken.get$next();
            t2 = $.get$TokenType_PERIOD();
            if ($.get$type$x(t1) === t2) {
              t1 = this.peek2$1(3);
              t2 = $.get$TokenType_OPEN_PAREN();
              t2 = $.get$type$x(t1) === t2;
              t1 = t2;
            } else
              t1 = false;
            if (t1) {
              initializers.push(this.parseRedirectingConstructorInvocation$0());
              bodyAllowed0 = false;
            } else
              initializers.push(this.parseConstructorFieldInitializer$0());
          }
        } else {
          t1 = $.get$Keyword_SUPER();
          t2 = this._currentToken;
          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t2, "$isKeywordToken");
            t2.get$keyword;
            t1 = t2._liblib9$_keyword === t1;
          } else
            t1 = false;
          if (t1)
            initializers.push(this.parseSuperConstructorInvocation$0());
          else
            initializers.push(this.parseConstructorFieldInitializer$0());
        }
      } while (this.optional$1($.get$TokenType_COMMA()));
      separator = token;
    } else {
      bodyAllowed0 = bodyAllowed;
      separator = null;
      initializers = null;
    }
    if (this.matches5$1($.get$TokenType_EQ())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      redirectedConstructor = this.parseConstructorName$0();
      t1 = this.expect2$1($.get$TokenType_SEMICOLON());
      t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t2;
      body = new $.EmptyFunctionBody(null, null, null, t2);
      body._semicolon = t1;
      separator = token;
    } else {
      body = this.parseFunctionBody$3(true, $.get$ParserErrorCode_MISSING_FUNCTION_BODY(), false);
      t1 = constKeyword != null;
      if (t1 && factoryKeyword != null) {
        t1 = $.get$ParserErrorCode_CONST_FACTORY();
        t2 = this._errorListener;
        t3 = $.getInterceptor$x(factoryKeyword);
        t4 = new $.AnalysisError(null, null, null, 0, 0);
        t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(factoryKeyword), t3.get$length(factoryKeyword), t1, []);
        t2.onError$1(t2, t4);
      } else if (typeof body === "object" && body !== null && !!$.getInterceptor(body).$isEmptyFunctionBody) {
        if (factoryKeyword != null && bodyAllowed) {
          t1 = $.get$ParserErrorCode_FACTORY_WITHOUT_BODY();
          t2 = this._errorListener;
          t3 = $.getInterceptor$x(factoryKeyword);
          t4 = new $.AnalysisError(null, null, null, 0, 0);
          t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(factoryKeyword), t3.get$length(factoryKeyword), t1, []);
          t2.onError$1(t2, t4);
        }
      } else if (t1) {
        t1 = $.get$ParserErrorCode_CONST_CONSTRUCTOR_WITH_BODY();
        t2 = this._errorListener;
        t3 = new $.AnalysisError(null, null, null, 0, 0);
        t3._jtd_constructor_132_impl$5(this._liblib14$_source, body.get$offset(body), body.get$length(body), t1, []);
        t2.onError$1(t2, t3);
      } else if (!bodyAllowed0) {
        t1 = $.get$ParserErrorCode_EXTERNAL_CONSTRUCTOR_WITH_BODY();
        t2 = this._errorListener;
        t3 = new $.AnalysisError(null, null, null, 0, 0);
        t3._jtd_constructor_132_impl$5(this._liblib14$_source, body.get$offset(body), body.get$length(body), t1, []);
        t2.onError$1(t2, t3);
      }
      redirectedConstructor = null;
    }
    return $.ConstructorDeclaration$full(commentAndMetadata._liblib14$_comment, commentAndMetadata._liblib14$_metadata, externalKeyword, constKeyword, factoryKeyword, returnType, period, $name, parameters, separator, initializers, redirectedConstructor, body);
  },
  "+parseConstructor:8:0": 0,
  parseConstructorFieldInitializer$0: function() {
    var t1, t2, token, period, keyword, fieldName, equals, expression, tokenType, cascadeSections, section, expression0, t3, t4;
    t1 = $.get$Keyword_THIS();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      period = this.expect2$1($.get$TokenType_PERIOD());
      keyword = token;
    } else {
      keyword = null;
      period = null;
    }
    fieldName = this.parseSimpleIdentifier$0();
    equals = this.expect2$1($.get$TokenType_EQ());
    expression = this.parseConditionalExpression$0();
    tokenType = $.get$type$x(this._currentToken);
    if (tokenType === $.get$TokenType_PERIOD_PERIOD()) {
      cascadeSections = $.List_List($, $.Expression);
      cascadeSections.$builtinTypeInfo = [$.Expression];
      for (; tokenType === $.get$TokenType_PERIOD_PERIOD();) {
        section = this.parseCascadeSection$0();
        if (section != null)
          cascadeSections.push(section);
        tokenType = $.get$type$x(this._currentToken);
      }
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseConstructorFieldInitializer$0$bailout(1, keyword, period, fieldName, cascadeSections, equals, expression, t1);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression0 = new $.CascadeExpression(null, null, null, null, null, null, t1);
      t1 = $.Expression;
      t2 = $.List_List($, t1);
      t2.$builtinTypeInfo = [t1];
      t3 = t1;
      t4 = $.List_List($, t3);
      t4.$builtinTypeInfo = [t3];
      t2 = new $.NodeList(expression0, t2, t4);
      t2.$builtinTypeInfo = [t1];
      expression0._cascadeSections = t2;
      if (expression != null)
        $.set$parent$x(expression, expression0);
      expression0._liblib4$_target = expression;
      t1 = expression0._cascadeSections;
      t1.addAll$1(t1, cascadeSections);
      expression = expression0;
    }
    return $.ConstructorFieldInitializer$full(keyword, period, fieldName, equals, expression);
  },
  "+parseConstructorFieldInitializer:0:0": 0,
  parseConstructorFieldInitializer$0$bailout: function(state0, keyword, period, fieldName, cascadeSections, equals, expression, t1) {
    switch (state0) {
      case 0:
        t1 = $.get$Keyword_THIS();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1) {
          token = this._currentToken;
          this._currentToken = token.get$next();
          period = this.expect2$1($.get$TokenType_PERIOD());
          keyword = token;
        } else {
          keyword = null;
          period = null;
        }
        fieldName = this.parseSimpleIdentifier$0();
        equals = this.expect2$1($.get$TokenType_EQ());
        expression = this.parseConditionalExpression$0();
        tokenType = $.get$type$x(this._currentToken);
      case 1:
        var t2, token, tokenType, section, expression0, t3, t4;
        if (state0 === 1 || state0 === 0 && tokenType === $.get$TokenType_PERIOD_PERIOD())
          switch (state0) {
            case 0:
              cascadeSections = $.List_List($, $.Expression);
              cascadeSections.$builtinTypeInfo = [$.Expression];
              for (; tokenType === $.get$TokenType_PERIOD_PERIOD();) {
                section = this.parseCascadeSection$0();
                if (section != null)
                  cascadeSections.push(section);
                tokenType = $.get$type$x(this._currentToken);
              }
              t1 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              expression0 = new $.CascadeExpression(null, null, null, null, null, null, t1);
              t1 = $.Expression;
              t2 = $.List_List($, t1);
              t2.$builtinTypeInfo = [t1];
              t3 = t1;
              t4 = $.List_List($, t3);
              t4.$builtinTypeInfo = [t3];
              t2 = new $.NodeList(expression0, t2, t4);
              t2.$builtinTypeInfo = [t1];
              expression0._cascadeSections = t2;
              if (expression != null)
                $.set$parent$x(expression, expression0);
              expression0._liblib4$_target = expression;
              t1 = expression0._cascadeSections;
              t1.addAll$1(t1, cascadeSections);
              expression = expression0;
          }
        return $.ConstructorFieldInitializer$full(keyword, period, fieldName, equals, expression);
    }
  },
  parseConstructorName$0: function() {
    var type, token, $name, period, t1;
    type = this.parseTypeName$0();
    if (this.matches5$1($.get$TokenType_PERIOD())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      $name = this.parseSimpleIdentifier$0();
      period = token;
    } else {
      period = null;
      $name = null;
    }
    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.ConstructorName(null, null, null, null, null, null, null, t1);
    type.set$parent(type, t1);
    t1._liblib4$_type = type;
    t1._period = period;
    if ($name != null)
      $name.set$parent($name, t1);
    t1._liblib4$_name = $name;
    return t1;
  },
  "+parseConstructorName:0:0": 0,
  parseContinueStatement$0: function() {
    var continueKeyword, t1, t2, t3, t4, label, semicolon;
    continueKeyword = this.expect$1($.get$Keyword_CONTINUE());
    if (!this._inLoop && !this._inSwitch) {
      t1 = $.get$ParserErrorCode_CONTINUE_OUTSIDE_OF_LOOP();
      t2 = this._errorListener;
      t3 = $.getInterceptor$x(continueKeyword);
      t4 = new $.AnalysisError(null, null, null, 0, 0);
      t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(continueKeyword), t3.get$length(continueKeyword), t1, []);
      t2.onError$1(t2, t4);
    }
    t1 = this._currentToken;
    t2 = $.get$TokenType_IDENTIFIER();
    t3 = $.getInterceptor$x(t1);
    if (t3.get$type(t1) !== t2) {
      t2 = $.get$TokenType_KEYWORD();
      if (t3.get$type(t1) === t2) {
        $.propertyTypeCast(t1, "$isKeywordToken");
        t1.get$keyword;
        t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
      } else
        t1 = false;
    } else
      t1 = true;
    label = t1 ? this.parseSimpleIdentifier$0() : null;
    if (this._inSwitch && !this._inLoop && label == null) {
      t1 = $.get$ParserErrorCode_CONTINUE_WITHOUT_LABEL_IN_CASE();
      t2 = this._errorListener;
      t3 = $.getInterceptor$x(continueKeyword);
      t4 = new $.AnalysisError(null, null, null, 0, 0);
      t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(continueKeyword), t3.get$length(continueKeyword), t1, []);
      t2.onError$1(t2, t4);
    }
    semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.ContinueStatement(null, null, null, null, null, t1);
    t1._keyword = continueKeyword;
    if (label != null)
      label.set$parent(label, t1);
    t1._label = label;
    t1._semicolon = semicolon;
    return t1;
  },
  "+parseContinueStatement:0:0": 0,
  parseDirective$1: function(commentAndMetadata) {
    var t1, t2;
    t1 = $.get$Keyword_IMPORT();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1)
      return this.parseImportDirective$1(commentAndMetadata);
    else {
      t1 = $.get$Keyword_EXPORT();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1)
        return this.parseExportDirective$1(commentAndMetadata);
      else {
        t1 = $.get$Keyword_LIBRARY();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1)
          return this.parseLibraryDirective$1(commentAndMetadata);
        else {
          t1 = $.get$Keyword_PART();
          t2 = this._currentToken;
          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t2, "$isKeywordToken");
            t2.get$keyword;
            t1 = t2._liblib9$_keyword === t1;
          } else
            t1 = false;
          if (t1)
            return this.parsePartDirective$1(commentAndMetadata);
          else
            throw $.wrapException(new $.IllegalStateException("parseDirective invoked in an invalid state; currentToken = " + $.S(this._currentToken)));
        }
      }
    }
  },
  "+parseDirective:1:0": 0,
  parseDocumentationComment$0: function() {
    var commentTokens, commentToken, t1, tokens, references, t2, t3, t4, t5, t6;
    commentTokens = $.List_List($, $.Token);
    commentTokens.$builtinTypeInfo = [$.Token];
    commentToken = this._currentToken.get$precedingComments();
    for (; commentToken != null;) {
      if ($.get$type$x(commentToken) === $.get$TokenType_SINGLE_LINE_COMMENT()) {
        if ($.startsWith$1$s(commentToken.get$lexeme(), "///") === true) {
          t1 = commentTokens.length;
          if (t1 === 1) {
            if (0 >= t1)
              throw $.ioore(0);
            t1 = $.startsWith$1$s(commentTokens[0].get$lexeme(), "/**") === true;
          } else
            t1 = false;
          if (t1)
            $.JSArray_methods.set$length(commentTokens, 0);
          commentTokens.push(commentToken);
        }
      } else if ($.startsWith$1$s(commentToken.get$lexeme(), "/**") === true) {
        $.JSArray_methods.set$length(commentTokens, 0);
        commentTokens.push(commentToken);
      }
      commentToken = commentToken.get$next();
    }
    if (commentTokens.length === 0)
      return;
    tokens = $.List_List$from(commentTokens, true, null);
    references = this.parseCommentReferences$1(tokens);
    t1 = $.get$CommentType_DOCUMENTATION();
    t2 = $.ASTNode__hashCodeGenerator;
    if (typeof t2 !== "number")
      return this.parseDocumentationComment$0$bailout(1, references, t1, t2, tokens);
    ++t2;
    $.ASTNode__hashCodeGenerator = t2;
    t2 = new $.Comment(null, null, null, null, null, t2);
    t3 = $.CommentReference;
    t4 = $.List_List($, t3);
    $.setRuntimeTypeInfo(t4, [t3]);
    t5 = t3;
    t6 = $.List_List($, t5);
    $.setRuntimeTypeInfo(t6, [t5]);
    t6 = new $.NodeList(t2, t4, t6);
    $.setRuntimeTypeInfo(t6, [t3]);
    t2._references = t6;
    t2._liblib4$_tokens = tokens;
    t2._liblib4$_type = t1;
    t1 = t2._references;
    t1.addAll$1(t1, references);
    return t2;
  },
  "+parseDocumentationComment:0:0": 0,
  parseDocumentationComment$0$bailout: function(state0, references, t1, t2, tokens) {
    var t3, t4, t5, t6;
    t2 = $.$add$ns(t2, 1);
    $.ASTNode__hashCodeGenerator = t2;
    t2 = new $.Comment(null, null, null, null, null, t2);
    t3 = $.CommentReference;
    t4 = $.List_List($, t3);
    $.setRuntimeTypeInfo(t4, [t3]);
    t5 = t3;
    t6 = $.List_List($, t5);
    $.setRuntimeTypeInfo(t6, [t5]);
    t6 = new $.NodeList(t2, t4, t6);
    $.setRuntimeTypeInfo(t6, [t3]);
    t2._references = t6;
    t2._liblib4$_tokens = tokens;
    t2._liblib4$_type = t1;
    t1 = t2._references;
    t1.addAll$1(t1, references);
    return t2;
  },
  parseDoStatement$0: function() {
    var wasInLoop, doKeyword, body, whileKeyword, leftParenthesis, condition, rightParenthesis, semicolon, t1;
    wasInLoop = this._inLoop;
    this._inLoop = true;
    try {
      doKeyword = this.expect$1($.get$Keyword_DO());
      body = this.parseStatement2$0();
      whileKeyword = this.expect$1($.get$Keyword_WHILE());
      leftParenthesis = this.expect2$1($.get$TokenType_OPEN_PAREN());
      condition = this.parseExpression2$0();
      rightParenthesis = this.expect2$1($.get$TokenType_CLOSE_PAREN());
      semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
      t1 = $.DoStatement$full(doKeyword, body, whileKeyword, leftParenthesis, condition, rightParenthesis, semicolon);
      return t1;
    } finally {
      this._inLoop = wasInLoop;
    }
  },
  "+parseDoStatement:0:0": 0,
  parseEqualityExpression$0: function() {
    var t1, t2, token, expression, node, expression0;
    t1 = $.get$Keyword_SUPER();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1 && $.get$type$x(this._currentToken.get$next()).isEqualityOperator$0() === true) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseEqualityExpression$0$bailout(1, token, t1);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression = new $.SuperExpression(null, null, null, null, null, t1);
      expression._keyword = token;
    } else
      expression = this.parseRelationalExpression$0();
    for (; $.get$type$x(this._currentToken).isEqualityOperator$0() === true; expression = expression0) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      node = this.parseRelationalExpression$0();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseEqualityExpression$0$bailout(2, token, t1, node, expression);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
      if (expression != null)
        $.set$parent$x(expression, expression0);
      expression0._leftOperand = expression;
      expression0._operator = token;
      if (node != null)
        $.set$parent$x(node, expression0);
      expression0._rightOperand = node;
    }
    return expression;
  },
  "+parseEqualityExpression:0:0": 0,
  parseEqualityExpression$0$bailout: function(state0, token, t1, node, expression) {
    switch (state0) {
      case 0:
        t1 = $.get$Keyword_SUPER();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
      case 1:
        if (state0 === 1 || state0 === 0 && t1 && $.get$type$x(this._currentToken.get$next()).isEqualityOperator$0() === true)
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              expression = new $.SuperExpression(null, null, null, null, null, t1);
              expression._keyword = token;
          }
        else
          expression = this.parseRelationalExpression$0();
      case 2:
        var t2, expression0;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!($.get$type$x(this._currentToken).isEqualityOperator$0() === true))
                  break L0;
                token = this._currentToken;
                this._currentToken = token.get$next();
                node = this.parseRelationalExpression$0();
                t1 = $.ASTNode__hashCodeGenerator;
              case 2:
                state0 = 0;
                t1 = $.$add$ns(t1, 1);
                $.ASTNode__hashCodeGenerator = t1;
                expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
                if (expression != null)
                  $.set$parent$x(expression, expression0);
                expression0._leftOperand = expression;
                expression0._operator = token;
                if (node != null)
                  $.set$parent$x(node, expression0);
                expression0._rightOperand = node;
                expression = expression0;
            }
        return expression;
    }
  },
  parseExportDirective$1: function(commentAndMetadata) {
    var exportKeyword, libraryUri, combinators, semicolon, node, t1, t2, t3, t4, t5, t6;
    exportKeyword = this.expect$1($.get$Keyword_EXPORT());
    libraryUri = this.parseStringLiteral$0();
    combinators = this.parseCombinators$0();
    semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
    node = commentAndMetadata._liblib14$_comment;
    t1 = commentAndMetadata._liblib14$_metadata;
    t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t2;
    t2 = new $.ExportDirective(null, null, null, null, null, null, null, null, null, t2);
    t3 = $.Annotation;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t5 = t3;
    t6 = $.List_List($, t5);
    t6.$builtinTypeInfo = [t5];
    t4 = new $.NodeList(t2, t4, t6);
    t4.$builtinTypeInfo = [t3];
    t2._metadata = t4;
    if (node != null)
      node.set$parent(node, t2);
    t2._comment = node;
    t3 = t2._metadata;
    t3.addAll$1(t3, t1);
    if (libraryUri != null)
      $.set$parent$x(libraryUri, t2);
    t2._uri = libraryUri;
    t2.NamespaceDirective$full$6(node, t1, exportKeyword, libraryUri, combinators, semicolon);
    return t2;
  },
  "+parseExportDirective:1:0": 0,
  parseExpression2$0: function() {
    var t1, t2, expression, tokenType, cascadeSections, section, t3, t4, t5, token, t6, node;
    t1 = $.get$Keyword_THROW();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1)
      return this.parseThrowExpression$0();
    else {
      t1 = $.get$Keyword_RETHROW();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1) {
        t1 = this.expect$1($.get$Keyword_RETHROW());
        t2 = $.ASTNode__hashCodeGenerator;
        if (typeof t2 !== "number")
          return this.parseExpression2$0$bailout(1, t1, t2);
        ++t2;
        $.ASTNode__hashCodeGenerator = t2;
        t2 = new $.RethrowExpression(null, null, null, null, null, t2);
        t2._keyword = t1;
        return t2;
      }
    }
    expression = this.parseConditionalExpression$0();
    tokenType = $.get$type$x(this._currentToken);
    if (tokenType === $.get$TokenType_PERIOD_PERIOD()) {
      cascadeSections = $.List_List($, $.Expression);
      cascadeSections.$builtinTypeInfo = [$.Expression];
      for (; tokenType === $.get$TokenType_PERIOD_PERIOD();) {
        section = this.parseCascadeSection$0();
        if (section != null)
          cascadeSections.push(section);
        tokenType = $.get$type$x(this._currentToken);
      }
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseExpression2$0$bailout(2, t1, 0, expression, cascadeSections);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.CascadeExpression(null, null, null, null, null, null, t1);
      t2 = $.Expression;
      t3 = $.List_List($, t2);
      t3.$builtinTypeInfo = [t2];
      t4 = t2;
      t5 = $.List_List($, t4);
      t5.$builtinTypeInfo = [t4];
      t3 = new $.NodeList(t1, t3, t5);
      t3.$builtinTypeInfo = [t2];
      t1._cascadeSections = t3;
      if (expression != null)
        $.set$parent$x(expression, t1);
      t1._liblib4$_target = expression;
      t2 = t1._cascadeSections;
      t2.addAll$1(t2, cascadeSections);
      return t1;
    } else if (tokenType.isAssignmentOperator$0() === true) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = expression != null;
      if (t1 && expression.isAssignable$0() !== true) {
        t2 = $.get$ParserErrorCode_ILLEGAL_ASSIGNMENT_TO_NON_ASSIGNABLE();
        t3 = this._currentToken;
        t4 = this._errorListener;
        t5 = $.getInterceptor$x(t3);
        t6 = new $.AnalysisError(null, null, null, 0, 0);
        t6.AnalysisError$con2$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t2, []);
        t4.onError$1(t4, t6);
      }
      node = this.parseExpression2$0();
      t2 = $.ASTNode__hashCodeGenerator;
      if (typeof t2 !== "number")
        return this.parseExpression2$0$bailout(3, t1, t2, expression, 0, node, token);
      ++t2;
      $.ASTNode__hashCodeGenerator = t2;
      t2 = new $.AssignmentExpression(null, null, null, null, null, null, null, null, null, t2);
      if (t1)
        $.set$parent$x(expression, t2);
      t2._leftHandSide = expression;
      t2._operator = token;
      if (node != null)
        $.set$parent$x(node, t2);
      t2._rightHandSide = node;
      return t2;
    }
    return expression;
  },
  "+parseExpression2:0:0": 0,
  parseExpression2$0$bailout: function(state0, t1, t2, expression, cascadeSections, node, token) {
    switch (state0) {
      case 0:
        t1 = $.get$Keyword_THROW();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
      case 1:
        if (state0 === 0 && t1)
          return this.parseThrowExpression$0();
        else
          switch (state0) {
            case 0:
              t1 = $.get$Keyword_RETHROW();
              t2 = this._currentToken;
              if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t2, "$isKeywordToken");
                t2.get$keyword;
                t1 = t2._liblib9$_keyword === t1;
              } else
                t1 = false;
            case 1:
              if (state0 === 1 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t1 = this.expect$1($.get$Keyword_RETHROW());
                    t2 = $.ASTNode__hashCodeGenerator;
                  case 1:
                    state0 = 0;
                    t2 = $.$add$ns(t2, 1);
                    $.ASTNode__hashCodeGenerator = t2;
                    t2 = new $.RethrowExpression(null, null, null, null, null, t2);
                    t2._keyword = t1;
                    return t2;
                }
          }
        expression = this.parseConditionalExpression$0();
        tokenType = $.get$type$x(this._currentToken);
      default:
        var tokenType, section, t3, t4, t5, t6;
        if (state0 === 2 || state0 === 0 && tokenType === $.get$TokenType_PERIOD_PERIOD())
          switch (state0) {
            case 0:
              cascadeSections = $.List_List($, $.Expression);
              cascadeSections.$builtinTypeInfo = [$.Expression];
              for (; tokenType === $.get$TokenType_PERIOD_PERIOD();) {
                section = this.parseCascadeSection$0();
                if (section != null)
                  cascadeSections.push(section);
                tokenType = $.get$type$x(this._currentToken);
              }
              t1 = $.ASTNode__hashCodeGenerator;
            case 2:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              t1 = new $.CascadeExpression(null, null, null, null, null, null, t1);
              t2 = $.Expression;
              t3 = $.List_List($, t2);
              t3.$builtinTypeInfo = [t2];
              t4 = t2;
              t5 = $.List_List($, t4);
              t5.$builtinTypeInfo = [t4];
              t3 = new $.NodeList(t1, t3, t5);
              t3.$builtinTypeInfo = [t2];
              t1._cascadeSections = t3;
              if (expression != null)
                $.set$parent$x(expression, t1);
              t1._liblib4$_target = expression;
              t2 = t1._cascadeSections;
              t2.addAll$1(t2, cascadeSections);
              return t1;
          }
        else
          switch (state0) {
            case 0:
            case 3:
              if (state0 === 3 || state0 === 0 && tokenType.isAssignmentOperator$0() === true)
                switch (state0) {
                  case 0:
                    token = this._currentToken;
                    this._currentToken = token.get$next();
                    t1 = expression != null;
                    if (t1 && expression.isAssignable$0() !== true) {
                      t2 = $.get$ParserErrorCode_ILLEGAL_ASSIGNMENT_TO_NON_ASSIGNABLE();
                      t3 = this._currentToken;
                      t4 = this._errorListener;
                      t5 = $.getInterceptor$x(t3);
                      t6 = new $.AnalysisError(null, null, null, 0, 0);
                      t6.AnalysisError$con2$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t2, []);
                      t4.onError$1(t4, t6);
                    }
                    node = this.parseExpression2$0();
                    t2 = $.ASTNode__hashCodeGenerator;
                  case 3:
                    state0 = 0;
                    t2 = $.$add$ns(t2, 1);
                    $.ASTNode__hashCodeGenerator = t2;
                    t2 = new $.AssignmentExpression(null, null, null, null, null, null, null, null, null, t2);
                    if (t1)
                      $.set$parent$x(expression, t2);
                    t2._leftHandSide = expression;
                    t2._operator = token;
                    if (node != null)
                      $.set$parent$x(node, t2);
                    t2._rightHandSide = node;
                    return t2;
                }
          }
        return expression;
    }
  },
  parseExpressionList$0: function() {
    var expressions = $.List_List($, $.Expression);
    expressions.$builtinTypeInfo = [$.Expression];
    expressions.push(this.parseExpression2$0());
    for (; this.optional$1($.get$TokenType_COMMA());)
      expressions.push(this.parseExpression2$0());
    return expressions;
  },
  "+parseExpressionList:0:0": 0,
  parseExpressionWithoutCascade$0: function() {
    var t1, t2, expression, token, t3, t4, t5, t6, node, expression0;
    t1 = $.get$Keyword_THROW();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1)
      return this.parseThrowExpressionWithoutCascade$0();
    else {
      t1 = $.get$Keyword_RETHROW();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1) {
        t1 = this.expect$1($.get$Keyword_RETHROW());
        t2 = $.ASTNode__hashCodeGenerator;
        if (typeof t2 !== "number")
          return this.parseExpressionWithoutCascade$0$bailout(1, t1, t2);
        ++t2;
        $.ASTNode__hashCodeGenerator = t2;
        t2 = new $.RethrowExpression(null, null, null, null, null, t2);
        t2._keyword = t1;
        return t2;
      }
    }
    expression = this.parseConditionalExpression$0();
    if ($.get$type$x(this._currentToken).isAssignmentOperator$0() === true) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = expression != null;
      if (t1 && expression.isAssignable$0() !== true) {
        t2 = $.get$ParserErrorCode_ILLEGAL_ASSIGNMENT_TO_NON_ASSIGNABLE();
        t3 = this._currentToken;
        t4 = this._errorListener;
        t5 = $.getInterceptor$x(t3);
        t6 = new $.AnalysisError(null, null, null, 0, 0);
        t6.AnalysisError$con2$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t2, []);
        t4.onError$1(t4, t6);
      }
      node = this.parseExpressionWithoutCascade$0();
      t2 = $.ASTNode__hashCodeGenerator;
      if (typeof t2 !== "number")
        return this.parseExpressionWithoutCascade$0$bailout(2, t1, t2, node, token, expression);
      ++t2;
      $.ASTNode__hashCodeGenerator = t2;
      expression0 = new $.AssignmentExpression(null, null, null, null, null, null, null, null, null, t2);
      if (t1)
        $.set$parent$x(expression, expression0);
      expression0._leftHandSide = expression;
      expression0._operator = token;
      if (node != null)
        $.set$parent$x(node, expression0);
      expression0._rightHandSide = node;
      expression = expression0;
    }
    return expression;
  },
  "+parseExpressionWithoutCascade:0:0": 0,
  parseExpressionWithoutCascade$0$bailout: function(state0, t1, t2, node, token, expression) {
    switch (state0) {
      case 0:
        t1 = $.get$Keyword_THROW();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
      case 1:
        if (state0 === 0 && t1)
          return this.parseThrowExpressionWithoutCascade$0();
        else
          switch (state0) {
            case 0:
              t1 = $.get$Keyword_RETHROW();
              t2 = this._currentToken;
              if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t2, "$isKeywordToken");
                t2.get$keyword;
                t1 = t2._liblib9$_keyword === t1;
              } else
                t1 = false;
            case 1:
              if (state0 === 1 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t1 = this.expect$1($.get$Keyword_RETHROW());
                    t2 = $.ASTNode__hashCodeGenerator;
                  case 1:
                    state0 = 0;
                    t2 = $.$add$ns(t2, 1);
                    $.ASTNode__hashCodeGenerator = t2;
                    t2 = new $.RethrowExpression(null, null, null, null, null, t2);
                    t2._keyword = t1;
                    return t2;
                }
          }
        expression = this.parseConditionalExpression$0();
      case 2:
        var t3, t4, t5, t6, expression0;
        if (state0 === 2 || state0 === 0 && $.get$type$x(this._currentToken).isAssignmentOperator$0() === true)
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = expression != null;
              if (t1 && expression.isAssignable$0() !== true) {
                t2 = $.get$ParserErrorCode_ILLEGAL_ASSIGNMENT_TO_NON_ASSIGNABLE();
                t3 = this._currentToken;
                t4 = this._errorListener;
                t5 = $.getInterceptor$x(t3);
                t6 = new $.AnalysisError(null, null, null, 0, 0);
                t6.AnalysisError$con2$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t2, []);
                t4.onError$1(t4, t6);
              }
              node = this.parseExpressionWithoutCascade$0();
              t2 = $.ASTNode__hashCodeGenerator;
            case 2:
              state0 = 0;
              t2 = $.$add$ns(t2, 1);
              $.ASTNode__hashCodeGenerator = t2;
              expression0 = new $.AssignmentExpression(null, null, null, null, null, null, null, null, null, t2);
              if (t1)
                $.set$parent$x(expression, expression0);
              expression0._leftHandSide = expression;
              expression0._operator = token;
              if (node != null)
                $.set$parent$x(node, expression0);
              expression0._rightHandSide = node;
              expression = expression0;
          }
        return expression;
    }
  },
  parseFinalConstVarOrType$1: function(optional) {
    var t1, t2, token, t3, type, keyword, t4, t5;
    t1 = $.get$Keyword_FINAL();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (!t1) {
      t1 = $.get$Keyword_CONST();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
    } else
      t1 = true;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = this._currentToken.get$next();
      t2 = $.get$TokenType_IDENTIFIER();
      t3 = $.getInterceptor$x(t1);
      if (t3.get$type(t1) !== t2) {
        t2 = $.get$TokenType_KEYWORD();
        if (t3.get$type(t1) === t2) {
          $.propertyTypeCast(t1, "$isKeywordToken");
          t1.get$keyword;
          t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
        } else
          t1 = false;
      } else
        t1 = true;
      if (!t1) {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_LT();
        if ($.get$type$x(t1) !== t2) {
          t1 = this._currentToken.get$next();
          t2 = $.get$Keyword_THIS();
          if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword === t2;
          } else
            t1 = false;
          if (!t1) {
            t1 = this._currentToken.get$next();
            t2 = $.get$TokenType_PERIOD();
            if ($.get$type$x(t1) === t2) {
              t1 = this.peek2$1(2);
              t2 = $.get$TokenType_IDENTIFIER();
              t3 = $.getInterceptor$x(t1);
              if (t3.get$type(t1) !== t2) {
                t2 = $.get$TokenType_KEYWORD();
                if (t3.get$type(t1) === t2) {
                  $.propertyTypeCast(t1, "$isKeywordToken");
                  t1.get$keyword;
                  t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                } else
                  t1 = false;
              } else
                t1 = true;
              if (t1) {
                t1 = this.peek2$1(3);
                t2 = $.get$TokenType_IDENTIFIER();
                t3 = $.getInterceptor$x(t1);
                if (t3.get$type(t1) !== t2) {
                  t2 = $.get$TokenType_KEYWORD();
                  if (t3.get$type(t1) === t2) {
                    $.propertyTypeCast(t1, "$isKeywordToken");
                    t1.get$keyword;
                    t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                  } else
                    t1 = false;
                } else
                  t1 = true;
                if (!t1) {
                  t1 = this.peek2$1(3);
                  t2 = $.get$TokenType_LT();
                  if ($.get$type$x(t1) !== t2) {
                    t1 = this.peek2$1(3);
                    t2 = $.get$Keyword_THIS();
                    if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
                      $.propertyTypeCast(t1, "$isKeywordToken");
                      t1.get$keyword;
                      t1 = t1._liblib9$_keyword === t2;
                    } else
                      t1 = false;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = false;
            } else
              t1 = false;
          } else
            t1 = true;
        } else
          t1 = true;
      } else
        t1 = true;
      type = t1 ? this.parseTypeName$0() : null;
      keyword = token;
    } else {
      t1 = $.get$Keyword_VAR();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1) {
        token = this._currentToken;
        this._currentToken = token.get$next();
        keyword = token;
        type = null;
      } else {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_IDENTIFIER();
        t3 = $.getInterceptor$x(t1);
        if (t3.get$type(t1) !== t2) {
          t2 = $.get$TokenType_KEYWORD();
          if (t3.get$type(t1) === t2) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
          } else
            t1 = false;
        } else
          t1 = true;
        if (!t1) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_LT();
          if ($.get$type$x(t1) !== t2) {
            t1 = this._currentToken.get$next();
            t2 = $.get$Keyword_THIS();
            if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
              $.propertyTypeCast(t1, "$isKeywordToken");
              t1.get$keyword;
              t1 = t1._liblib9$_keyword === t2;
            } else
              t1 = false;
            if (!t1) {
              t1 = this._currentToken.get$next();
              t2 = $.get$TokenType_PERIOD();
              if ($.get$type$x(t1) === t2) {
                t1 = this.peek2$1(2);
                t2 = $.get$TokenType_IDENTIFIER();
                t3 = $.getInterceptor$x(t1);
                if (t3.get$type(t1) !== t2) {
                  t2 = $.get$TokenType_KEYWORD();
                  if (t3.get$type(t1) === t2) {
                    $.propertyTypeCast(t1, "$isKeywordToken");
                    t1.get$keyword;
                    t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                  } else
                    t1 = false;
                } else
                  t1 = true;
                if (t1) {
                  t1 = this.peek2$1(3);
                  t2 = $.get$TokenType_IDENTIFIER();
                  t3 = $.getInterceptor$x(t1);
                  if (t3.get$type(t1) !== t2) {
                    t2 = $.get$TokenType_KEYWORD();
                    if (t3.get$type(t1) === t2) {
                      $.propertyTypeCast(t1, "$isKeywordToken");
                      t1.get$keyword;
                      t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                    } else
                      t1 = false;
                  } else
                    t1 = true;
                  if (!t1) {
                    t1 = this.peek2$1(3);
                    t2 = $.get$TokenType_LT();
                    if ($.get$type$x(t1) !== t2) {
                      t1 = this.peek2$1(3);
                      t2 = $.get$Keyword_THIS();
                      if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
                        $.propertyTypeCast(t1, "$isKeywordToken");
                        t1.get$keyword;
                        t1 = t1._liblib9$_keyword === t2;
                      } else
                        t1 = false;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = true;
          } else
            t1 = true;
        } else
          t1 = true;
        if (t1)
          type = this.parseReturnType$0();
        else {
          if (!optional) {
            t1 = $.get$ParserErrorCode_MISSING_CONST_FINAL_VAR_OR_TYPE();
            t2 = this._currentToken;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
          }
          type = null;
        }
        keyword = null;
      }
    }
    t1 = new $.FinalConstVarOrType(null, null);
    t1._liblib14$_keyword = keyword;
    t1._liblib14$_type = type;
    return t1;
  },
  "+parseFinalConstVarOrType:1:0": 0,
  parseFormalParameter$1: function(kind) {
    var parameter, token, defaultValue, t1, t2, t3, t4;
    parameter = this.parseNormalFormalParameter$0();
    if (this.matches5$1($.get$TokenType_EQ())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      defaultValue = this.parseExpression2$0();
      if (kind === $.get$ParameterKind_NAMED()) {
        t1 = $.get$ParserErrorCode_WRONG_SEPARATOR_FOR_NAMED_PARAMETER();
        t2 = this._errorListener;
        t3 = $.getInterceptor$x(token);
        t4 = new $.AnalysisError(null, null, null, 0, 0);
        t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(token), t3.get$length(token), t1, []);
        t2.onError$1(t2, t4);
      } else if (kind === $.get$ParameterKind_REQUIRED()) {
        t1 = $.get$ParserErrorCode_POSITIONAL_PARAMETER_OUTSIDE_GROUP();
        t2 = this._errorListener;
        t3 = new $.AnalysisError(null, null, null, 0, 0);
        t3._jtd_constructor_132_impl$5(this._liblib14$_source, parameter.get$offset(parameter), parameter.get$length(parameter), t1, []);
        t2.onError$1(t2, t3);
      }
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseFormalParameter$1$bailout(1, kind, parameter, token, t1, defaultValue);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.DefaultFormalParameter(null, null, null, null, null, null, t1);
      parameter.set$parent(parameter, t1);
      t1._parameter = parameter;
      t1._kind = kind;
      t1._separator = token;
      if (defaultValue != null)
        $.set$parent$x(defaultValue, t1);
      t1._defaultValue = defaultValue;
      return t1;
    } else if (this.matches5$1($.get$TokenType_COLON())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      defaultValue = this.parseExpression2$0();
      if (kind === $.get$ParameterKind_POSITIONAL()) {
        t1 = $.get$ParserErrorCode_WRONG_SEPARATOR_FOR_POSITIONAL_PARAMETER();
        t2 = this._errorListener;
        t3 = $.getInterceptor$x(token);
        t4 = new $.AnalysisError(null, null, null, 0, 0);
        t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(token), t3.get$length(token), t1, []);
        t2.onError$1(t2, t4);
      } else if (kind === $.get$ParameterKind_REQUIRED()) {
        t1 = $.get$ParserErrorCode_NAMED_PARAMETER_OUTSIDE_GROUP();
        t2 = this._errorListener;
        t3 = new $.AnalysisError(null, null, null, 0, 0);
        t3._jtd_constructor_132_impl$5(this._liblib14$_source, parameter.get$offset(parameter), parameter.get$length(parameter), t1, []);
        t2.onError$1(t2, t3);
      }
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseFormalParameter$1$bailout(2, kind, parameter, token, t1, defaultValue);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.DefaultFormalParameter(null, null, null, null, null, null, t1);
      parameter.set$parent(parameter, t1);
      t1._parameter = parameter;
      t1._kind = kind;
      t1._separator = token;
      if (defaultValue != null)
        $.set$parent$x(defaultValue, t1);
      t1._defaultValue = defaultValue;
      return t1;
    } else if (kind !== $.get$ParameterKind_REQUIRED()) {
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseFormalParameter$1$bailout(3, kind, parameter, 0, t1);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.DefaultFormalParameter(null, null, null, null, null, null, t1);
      parameter.set$parent(parameter, t1);
      t1._parameter = parameter;
      t1._kind = kind;
      t1._separator = null;
      t1._defaultValue = null;
      return t1;
    }
    return parameter;
  },
  "+parseFormalParameter:1:0": 0,
  parseFormalParameter$1$bailout: function(state0, kind, parameter, token, t1, defaultValue) {
    switch (state0) {
      case 0:
        parameter = this.parseNormalFormalParameter$0();
      default:
        var t2, t3, t4;
        if (state0 === 1 || state0 === 0 && this.matches5$1($.get$TokenType_EQ()))
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              defaultValue = this.parseExpression2$0();
              if (kind === $.get$ParameterKind_NAMED()) {
                t1 = $.get$ParserErrorCode_WRONG_SEPARATOR_FOR_NAMED_PARAMETER();
                t2 = this._errorListener;
                t3 = $.getInterceptor$x(token);
                t4 = new $.AnalysisError(null, null, null, 0, 0);
                t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(token), t3.get$length(token), t1, []);
                t2.onError$1(t2, t4);
              } else if (kind === $.get$ParameterKind_REQUIRED()) {
                t1 = $.get$ParserErrorCode_POSITIONAL_PARAMETER_OUTSIDE_GROUP();
                t2 = this._errorListener;
                t3 = new $.AnalysisError(null, null, null, 0, 0);
                t3._jtd_constructor_132_impl$5(this._liblib14$_source, parameter.get$offset(parameter), parameter.get$length(parameter), t1, []);
                t2.onError$1(t2, t3);
              }
              t1 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              t1 = new $.DefaultFormalParameter(null, null, null, null, null, null, t1);
              parameter.set$parent(parameter, t1);
              t1._parameter = parameter;
              t1._kind = kind;
              t1._separator = token;
              if (defaultValue != null)
                $.set$parent$x(defaultValue, t1);
              t1._defaultValue = defaultValue;
              return t1;
          }
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 2 || state0 === 0 && this.matches5$1($.get$TokenType_COLON()))
                switch (state0) {
                  case 0:
                    token = this._currentToken;
                    this._currentToken = token.get$next();
                    defaultValue = this.parseExpression2$0();
                    if (kind === $.get$ParameterKind_POSITIONAL()) {
                      t1 = $.get$ParserErrorCode_WRONG_SEPARATOR_FOR_POSITIONAL_PARAMETER();
                      t2 = this._errorListener;
                      t3 = $.getInterceptor$x(token);
                      t4 = new $.AnalysisError(null, null, null, 0, 0);
                      t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(token), t3.get$length(token), t1, []);
                      t2.onError$1(t2, t4);
                    } else if (kind === $.get$ParameterKind_REQUIRED()) {
                      t1 = $.get$ParserErrorCode_NAMED_PARAMETER_OUTSIDE_GROUP();
                      t2 = this._errorListener;
                      t3 = new $.AnalysisError(null, null, null, 0, 0);
                      t3._jtd_constructor_132_impl$5(this._liblib14$_source, parameter.get$offset(parameter), parameter.get$length(parameter), t1, []);
                      t2.onError$1(t2, t3);
                    }
                    t1 = $.ASTNode__hashCodeGenerator;
                  case 2:
                    state0 = 0;
                    t1 = $.$add$ns(t1, 1);
                    $.ASTNode__hashCodeGenerator = t1;
                    t1 = new $.DefaultFormalParameter(null, null, null, null, null, null, t1);
                    parameter.set$parent(parameter, t1);
                    t1._parameter = parameter;
                    t1._kind = kind;
                    t1._separator = token;
                    if (defaultValue != null)
                      $.set$parent$x(defaultValue, t1);
                    t1._defaultValue = defaultValue;
                    return t1;
                }
              else
                switch (state0) {
                  case 0:
                  case 3:
                    if (state0 === 3 || state0 === 0 && kind !== $.get$ParameterKind_REQUIRED())
                      switch (state0) {
                        case 0:
                          t1 = $.ASTNode__hashCodeGenerator;
                        case 3:
                          state0 = 0;
                          t1 = $.$add$ns(t1, 1);
                          $.ASTNode__hashCodeGenerator = t1;
                          t1 = new $.DefaultFormalParameter(null, null, null, null, null, null, t1);
                          parameter.set$parent(parameter, t1);
                          t1._parameter = parameter;
                          t1._kind = kind;
                          t1._separator = null;
                          t1._defaultValue = null;
                          return t1;
                      }
                }
          }
        return parameter;
    }
  },
  parseFormalParameterList$0: function() {
    var leftParenthesis, token, parameters, normalParameters, positionalParameters, namedParameters, kind, currentParameters, leftSquareBracket, rightSquareBracket, leftCurlyBracket, rightCurlyBracket, firstParameter, reportedMuliplePositionalGroups, reportedMulipleNamedGroups, reportedMixedGroups, t1, t2, t3, t4, t5, t6, initialToken, parameter, rightParenthesis;
    leftParenthesis = this.expect2$1($.get$TokenType_OPEN_PAREN());
    if (this.matches5$1($.get$TokenType_CLOSE_PAREN())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      return $.FormalParameterList$full(leftParenthesis, null, null, null, token);
    }
    parameters = $.List_List($, $.FormalParameter);
    parameters.$builtinTypeInfo = [$.FormalParameter];
    normalParameters = $.List_List($, $.FormalParameter);
    normalParameters.$builtinTypeInfo = [$.FormalParameter];
    positionalParameters = $.List_List($, $.FormalParameter);
    positionalParameters.$builtinTypeInfo = [$.FormalParameter];
    namedParameters = $.List_List($, $.FormalParameter);
    namedParameters.$builtinTypeInfo = [$.FormalParameter];
    kind = $.get$ParameterKind_REQUIRED();
    currentParameters = normalParameters;
    leftSquareBracket = null;
    rightSquareBracket = null;
    leftCurlyBracket = null;
    rightCurlyBracket = null;
    firstParameter = true;
    reportedMuliplePositionalGroups = false;
    reportedMulipleNamedGroups = false;
    reportedMixedGroups = false;
    do {
      if (firstParameter)
        firstParameter = false;
      else if (!this.optional$1($.get$TokenType_COMMA()))
        if (this.getEndToken$1(leftParenthesis) != null) {
          t1 = $.get$ParserErrorCode_EXPECTED_TOKEN();
          t2 = $.get$TokenType_COMMA()._lexeme;
          t3 = this._currentToken;
          t4 = this._errorListener;
          t5 = $.getInterceptor$x(t3);
          t6 = new $.AnalysisError(null, null, null, 0, 0);
          t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
          t4.onError$1(t4, t6);
        } else {
          t1 = $.get$ParserErrorCode_MISSING_CLOSING_PARENTHESIS();
          t2 = this._currentToken.get$previous();
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
          break;
        }
      initialToken = this._currentToken;
      if (this.matches5$1($.get$TokenType_OPEN_SQUARE_BRACKET())) {
        if (leftSquareBracket != null && !reportedMuliplePositionalGroups) {
          t1 = $.get$ParserErrorCode_MULTIPLE_POSITIONAL_PARAMETER_GROUPS();
          t2 = this._currentToken;
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
          reportedMuliplePositionalGroups = true;
        }
        if (leftCurlyBracket != null && !reportedMixedGroups) {
          t1 = $.get$ParserErrorCode_MIXED_PARAMETER_GROUPS();
          t2 = this._currentToken;
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
          reportedMixedGroups = true;
        }
        token = this._currentToken;
        this._currentToken = token.get$next();
        kind = $.get$ParameterKind_POSITIONAL();
        leftSquareBracket = token;
        currentParameters = positionalParameters;
      } else if (this.matches5$1($.get$TokenType_OPEN_CURLY_BRACKET())) {
        if (leftCurlyBracket != null && !reportedMulipleNamedGroups) {
          t1 = $.get$ParserErrorCode_MULTIPLE_NAMED_PARAMETER_GROUPS();
          t2 = this._currentToken;
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
          reportedMulipleNamedGroups = true;
        }
        if (leftSquareBracket != null && !reportedMixedGroups) {
          t1 = $.get$ParserErrorCode_MIXED_PARAMETER_GROUPS();
          t2 = this._currentToken;
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
          reportedMixedGroups = true;
        }
        token = this._currentToken;
        this._currentToken = token.get$next();
        kind = $.get$ParameterKind_NAMED();
        leftCurlyBracket = token;
        currentParameters = namedParameters;
      }
      parameter = this.parseFormalParameter$1(kind);
      parameters.push(parameter);
      currentParameters.push(parameter);
      if (this.matches5$1($.get$TokenType_CLOSE_SQUARE_BRACKET())) {
        token = this._currentToken;
        this._currentToken = token.get$next();
        if (leftSquareBracket == null)
          if (leftCurlyBracket != null) {
            t1 = $.get$ParserErrorCode_WRONG_TERMINATOR_FOR_PARAMETER_GROUP();
            t2 = this._currentToken;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, ["}"]);
            t3.onError$1(t3, t5);
            rightCurlyBracket = token;
            rightSquareBracket = null;
          } else {
            t1 = $.get$ParserErrorCode_UNEXPECTED_TERMINATOR_FOR_PARAMETER_GROUP();
            t2 = this._currentToken;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, ["["]);
            t3.onError$1(t3, t5);
            rightSquareBracket = token;
          }
        else
          rightSquareBracket = token;
        kind = $.get$ParameterKind_REQUIRED();
        currentParameters = normalParameters;
      } else if (this.matches5$1($.get$TokenType_CLOSE_CURLY_BRACKET())) {
        token = this._currentToken;
        this._currentToken = token.get$next();
        if (leftCurlyBracket == null)
          if (leftSquareBracket != null) {
            t1 = $.get$ParserErrorCode_WRONG_TERMINATOR_FOR_PARAMETER_GROUP();
            t2 = this._currentToken;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, ["]"]);
            t3.onError$1(t3, t5);
            rightSquareBracket = token;
            rightCurlyBracket = null;
          } else {
            t1 = $.get$ParserErrorCode_UNEXPECTED_TERMINATOR_FOR_PARAMETER_GROUP();
            t2 = this._currentToken;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, ["{"]);
            t3.onError$1(t3, t5);
            rightCurlyBracket = token;
          }
        else
          rightCurlyBracket = token;
        kind = $.get$ParameterKind_REQUIRED();
        currentParameters = normalParameters;
      }
    } while (!this.matches5$1($.get$TokenType_CLOSE_PAREN()) && !$.$eq(initialToken, this._currentToken));
    rightParenthesis = this.expect2$1($.get$TokenType_CLOSE_PAREN());
    t1 = leftSquareBracket == null;
    if (!t1 && rightSquareBracket == null) {
      t2 = $.get$ParserErrorCode_MISSING_TERMINATOR_FOR_PARAMETER_GROUP();
      t3 = this._currentToken;
      t4 = this._errorListener;
      t5 = $.getInterceptor$x(t3);
      t6 = new $.AnalysisError(null, null, null, 0, 0);
      t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t2, ["]"]);
      t4.onError$1(t4, t6);
    }
    if (leftCurlyBracket != null && rightCurlyBracket == null) {
      t2 = $.get$ParserErrorCode_MISSING_TERMINATOR_FOR_PARAMETER_GROUP();
      t3 = this._currentToken;
      t4 = this._errorListener;
      t5 = $.getInterceptor$x(t3);
      t6 = new $.AnalysisError(null, null, null, 0, 0);
      t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t2, ["}"]);
      t4.onError$1(t4, t6);
    }
    if (t1)
      leftSquareBracket = leftCurlyBracket;
    return $.FormalParameterList$full(leftParenthesis, parameters, leftSquareBracket, rightSquareBracket == null ? rightCurlyBracket : rightSquareBracket, rightParenthesis);
  },
  "+parseFormalParameterList:0:0": 0,
  parseForStatement$0: function() {
    var wasInLoop, forKeyword, leftParenthesis, variableList, initialization, commentAndMetadata, variables, variableName, loopVariable, variables2, variable, inKeyword, iterator, rightParenthesis, body, leftSeparator, condition, rightSeparator, updaters, rightParenthesis0, body0, t1, t2, t3, t4, variables0, node, t5, holder, variableList0, variables20, t6, variable0, node0, node1, loopVariable0;
    wasInLoop = this._inLoop;
    this._inLoop = true;
    try {
      forKeyword = this.expect$1($.get$Keyword_FOR());
      leftParenthesis = this.expect2$1($.get$TokenType_OPEN_PAREN());
      variableList = null;
      initialization = null;
      if (!this.matches5$1($.get$TokenType_SEMICOLON())) {
        commentAndMetadata = this.parseCommentAndMetadata$0();
        t1 = this._currentToken;
        t2 = $.get$TokenType_IDENTIFIER();
        t3 = $.getInterceptor$x(t1);
        t4 = t3.get$type(t1);
        if (t4 !== t2) {
          t2 = $.get$TokenType_KEYWORD();
          t3 = t3.get$type(t1);
          if (t3 === t2) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword;
            t1 = t1.isPseudoKeyword$0() === true;
          } else
            t1 = false;
        } else
          t1 = true;
        if (t1) {
          t1 = this._currentToken.get$next();
          t2 = $.get$Keyword_IN();
          if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword;
            t1 = t1 === t2;
          } else
            t1 = false;
        } else
          t1 = false;
        if (t1) {
          variables0 = $.List_List($, $.VariableDeclaration);
          variables0.$builtinTypeInfo = [$.VariableDeclaration];
          variables = variables0;
          variableName = this.parseSimpleIdentifier$0();
          node = variableName;
          t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t1;
          t1 = new $.VariableDeclaration(null, null, null, null, null, null, null, t1);
          t2 = $.Annotation;
          t3 = $.List_List($, t2);
          t3.$builtinTypeInfo = [t2];
          t4 = t2;
          t5 = $.List_List($, t4);
          t5.$builtinTypeInfo = [t4];
          t3 = new $.NodeList(t1, t3, t5);
          t3.$builtinTypeInfo = [t2];
          t1._metadata = t3;
          t1._comment = null;
          t2 = t1._metadata;
          t2.addAll$1(t2, null);
          if (node != null)
            $.set$parent$x(node, t1);
          t1._liblib4$_name = node;
          t1._equals = null;
          t1._initializer = null;
          $.add$1$ax(variables, t1);
          t1 = commentAndMetadata.get$_liblib14$_comment();
          t2 = commentAndMetadata.get$_liblib14$_metadata();
          variableList = $.VariableDeclarationList$full(t1, t2, null, null, variables);
        } else if (this.isInitializedVariableDeclaration$0()) {
          holder = this.parseFinalConstVarOrType$1(false);
          t1 = holder._liblib14$_keyword;
          t2 = holder._liblib14$_type;
          variableList0 = this.parseVariableDeclarationList2$3(commentAndMetadata, t1, t2);
          variableList = variableList0;
        } else
          initialization = this.parseExpression2$0();
        t1 = $.get$Keyword_IN();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t2 = t2._liblib9$_keyword;
          t1 = t2 === t1;
        } else
          t1 = false;
        if (t1) {
          loopVariable = null;
          if (variableList == null) {
            t1 = $.get$ParserErrorCode_MISSING_VARIABLE_IN_FOR_EACH();
            t2 = this._currentToken;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
          } else {
            t1 = variableList;
            t1.get$variables;
            variables20 = t1.get$_variables();
            variables2 = variables20;
            t1 = variables2;
            t1.get$length;
            t1 = $.get$length$asx($.get$elements$x(t1));
            if (typeof t1 !== "number")
              throw t1.$gt();
            if (t1 > 1) {
              t1 = $.get$ParserErrorCode_MULTIPLE_VARIABLES_IN_FOR_EACH();
              t2 = variables2;
              t2.get$length;
              t2 = $.get$length$asx($.get$elements$x(t2));
              t2 = $.toString$0(t2);
              t3 = this._currentToken;
              t4 = this._errorListener;
              t5 = $.getInterceptor$x(t3);
              t6 = new $.AnalysisError(null, null, null, 0, 0);
              t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
              t4.onError$1(t4, t6);
            }
            t1 = variables2;
            t1.$index;
            variable0 = $.$index$asx($.get$elements$x(t1), 0);
            variable = variable0;
            if (variable.get$initializer() != null) {
              t1 = $.get$ParserErrorCode_INITIALIZED_VARIABLE_IN_FOR_EACH();
              t2 = this._currentToken;
              t3 = this._errorListener;
              t4 = $.getInterceptor$x(t2);
              t5 = new $.AnalysisError(null, null, null, 0, 0);
              t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
              t3.onError$1(t3, t5);
            }
            node = commentAndMetadata.get$_liblib14$_comment();
            t1 = commentAndMetadata.get$_liblib14$_metadata();
            t2 = variableList;
            t2.get$keyword;
            t2 = t2.get$_keyword();
            t3 = variableList;
            t3.get$type;
            node0 = t3.get$_liblib4$_type();
            node1 = $.get$name$x(variable);
            t3 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
            $.ASTNode__hashCodeGenerator = t3;
            loopVariable0 = new $.DeclaredIdentifier(null, null, null, null, null, null, null, t3);
            t3 = $.Annotation;
            t4 = $.List_List($, t3);
            t4.$builtinTypeInfo = [t3];
            t5 = t3;
            t6 = $.List_List($, t5);
            t6.$builtinTypeInfo = [t5];
            t4 = new $.NodeList(loopVariable0, t4, t6);
            t4.$builtinTypeInfo = [t3];
            loopVariable0._metadata = t4;
            if (node != null)
              $.set$parent$x(node, loopVariable0);
            loopVariable0._comment = node;
            t3 = loopVariable0._metadata;
            t3.addAll$1(t3, t1);
            loopVariable0._keyword = t2;
            if (node0 != null)
              $.set$parent$x(node0, loopVariable0);
            loopVariable0._liblib4$_type = node0;
            if (node1 != null)
              $.set$parent$x(node1, loopVariable0);
            loopVariable0._identifier = node1;
            loopVariable = loopVariable0;
          }
          inKeyword = this.expect$1($.get$Keyword_IN());
          iterator = this.parseExpression2$0();
          rightParenthesis = this.expect2$1($.get$TokenType_CLOSE_PAREN());
          body = this.parseStatement2$0();
          t1 = $.ForEachStatement$full(forKeyword, leftParenthesis, loopVariable, inKeyword, iterator, rightParenthesis, body);
          return t1;
        }
      }
      leftSeparator = this.expect2$1($.get$TokenType_SEMICOLON());
      condition = null;
      if (!this.matches5$1($.get$TokenType_SEMICOLON()))
        condition = this.parseExpression2$0();
      rightSeparator = this.expect2$1($.get$TokenType_SEMICOLON());
      updaters = null;
      if (!this.matches5$1($.get$TokenType_CLOSE_PAREN()))
        updaters = this.parseExpressionList$0();
      rightParenthesis0 = this.expect2$1($.get$TokenType_CLOSE_PAREN());
      body0 = this.parseStatement2$0();
      t1 = $.ForStatement$full(forKeyword, leftParenthesis, variableList, initialization, leftSeparator, condition, rightSeparator, updaters, rightParenthesis0, body0);
      return t1;
    } finally {
      this._inLoop = wasInLoop;
    }
  },
  "+parseForStatement:0:0": 0,
  parseFunctionBody$3: function(mayBeEmpty, emptyErrorCode, inExpression) {
    var wasInLoop, wasInSwitch, functionDefinition, expression, semicolon, nativeToken, stringLiteral, t1, t2, t3, t4, token, node;
    wasInLoop = this._inLoop;
    wasInSwitch = this._inSwitch;
    this._inLoop = false;
    this._inSwitch = false;
    try {
      if (this.matches5$1($.get$TokenType_SEMICOLON())) {
        if (mayBeEmpty !== true) {
          t1 = this._currentToken;
          t2 = this._errorListener;
          t3 = $.getInterceptor$x(t1);
          t4 = new $.AnalysisError(null, null, null, 0, 0);
          t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(t1), t3.get$length(t1), emptyErrorCode, []);
          t2.onError$1(t2, t4);
        }
        token = this._currentToken;
        this._currentToken = token.get$next();
        t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.EmptyFunctionBody(null, null, null, t1);
        t1._semicolon = token;
        return t1;
      } else if (this.matches5$1($.get$TokenType_FUNCTION())) {
        token = this._currentToken;
        this._currentToken = token.get$next();
        functionDefinition = token;
        expression = this.parseExpression2$0();
        semicolon = null;
        if (inExpression !== true)
          semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
        node = expression;
        t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.ExpressionFunctionBody(null, null, null, null, null, t1);
        t1._functionDefinition = functionDefinition;
        if (node != null)
          $.set$parent$x(node, t1);
        t1._expression = node;
        t1._semicolon = semicolon;
        return t1;
      } else if (this.matches5$1($.get$TokenType_OPEN_CURLY_BRACKET())) {
        node = this.parseBlock$0();
        t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.BlockFunctionBody(null, null, null, t1);
        node.set$parent(node, t1);
        t1._block = node;
        return t1;
      } else {
        t1 = $.Parser__NATIVE;
        t1 = $.get$type$x(this._currentToken) === $.get$TokenType_IDENTIFIER() && $.$eq(this._currentToken.get$lexeme(), t1);
        token = this._currentToken;
        if (t1) {
          this._currentToken = token.get$next();
          nativeToken = token;
          stringLiteral = null;
          if (this.matches5$1($.get$TokenType_STRING()))
            stringLiteral = this.parseStringLiteral$0();
          node = stringLiteral;
          t1 = this.expect2$1($.get$TokenType_SEMICOLON());
          t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t2;
          t2 = new $.NativeFunctionBody(null, null, null, null, null, t2);
          t2._nativeToken = nativeToken;
          if (node != null)
            $.set$parent$x(node, t2);
          t2._stringLiteral = node;
          t2._semicolon = t1;
          return t2;
        } else {
          t1 = this._errorListener;
          t2 = $.getInterceptor$x(token);
          t3 = new $.AnalysisError(null, null, null, 0, 0);
          t3._jtd_constructor_132_impl$5(this._liblib14$_source, t2.get$offset(token), t2.get$length(token), emptyErrorCode, []);
          t1.onError$1(t1, t3);
          t3 = $.get$TokenType_SEMICOLON();
          t1 = $.get$offset$x(this._currentToken);
          t2 = new $.StringToken(null, null, 0, null, null);
          t2._liblib9$_type = t3;
          t2._liblib9$_offset = t1;
          t2._value2 = "";
          t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t1;
          t1 = new $.EmptyFunctionBody(null, null, null, t1);
          t1._semicolon = t2;
          return t1;
        }
      }
    } finally {
      this._inLoop = wasInLoop;
      this._inSwitch = wasInSwitch;
    }
  },
  "+parseFunctionBody:3:0": 0,
  parseFunctionDeclaration$3: function(commentAndMetadata, externalKeyword, returnType) {
    var t1, t2, token, keyword, isGetter, $name, parameters, t3, t4, t5, body;
    t1 = $.get$Keyword_GET();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      t1 = this._currentToken.get$next();
      t2 = $.get$TokenType_OPEN_PAREN();
      t2 = $.get$type$x(t1) !== t2;
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      keyword = token;
      isGetter = true;
    } else {
      t1 = $.get$Keyword_SET();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1) {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_OPEN_PAREN();
        t2 = $.get$type$x(t1) !== t2;
        t1 = t2;
      } else
        t1 = false;
      if (t1) {
        token = this._currentToken;
        this._currentToken = token.get$next();
        keyword = token;
      } else
        keyword = null;
      isGetter = false;
    }
    $name = this.parseSimpleIdentifier$0();
    if (!isGetter)
      if (this.matches5$1($.get$TokenType_OPEN_PAREN())) {
        parameters = this.parseFormalParameterList$0();
        this.validateFormalParameterList$1(parameters);
      } else {
        t1 = $.get$ParserErrorCode_MISSING_FUNCTION_PARAMETERS();
        t2 = this._currentToken;
        t3 = this._errorListener;
        t4 = $.getInterceptor$x(t2);
        t5 = new $.AnalysisError(null, null, null, 0, 0);
        t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
        t3.onError$1(t3, t5);
        parameters = null;
      }
    else {
      if (this.matches5$1($.get$TokenType_OPEN_PAREN())) {
        t1 = $.get$ParserErrorCode_GETTER_WITH_PARAMETERS();
        t2 = this._currentToken;
        t3 = this._errorListener;
        t4 = $.getInterceptor$x(t2);
        t5 = new $.AnalysisError(null, null, null, 0, 0);
        t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
        t3.onError$1(t3, t5);
        this.parseFormalParameterList$0();
      }
      parameters = null;
    }
    if (externalKeyword == null)
      body = this.parseFunctionBody$3(false, $.get$ParserErrorCode_MISSING_FUNCTION_BODY(), false);
    else {
      t1 = this.expect2$1($.get$TokenType_SEMICOLON());
      t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t2;
      body = new $.EmptyFunctionBody(null, null, null, t2);
      body._semicolon = t1;
    }
    t1 = commentAndMetadata._liblib14$_comment;
    t2 = commentAndMetadata._liblib14$_metadata;
    t3 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t3;
    t3 = new $.FunctionExpression(null, null, null, null, null, null, null, t3);
    if (parameters != null)
      parameters.set$parent(parameters, t3);
    t3._parameters = parameters;
    if (body != null)
      body.set$parent(body, t3);
    t3._body = body;
    return $.FunctionDeclaration$full(t1, t2, externalKeyword, returnType, keyword, $name, t3);
  },
  "+parseFunctionDeclaration:3:0": 0,
  parseFunctionTypeAlias$2: function(commentAndMetadata, keyword) {
    var returnType, $name, typeParameters, t1, t2, t3, t4, t5, parameters, semicolon, t6;
    returnType = this.hasReturnTypeInTypeAlias$0() ? this.parseReturnType$0() : null;
    $name = this.parseSimpleIdentifier$0();
    typeParameters = this.matches5$1($.get$TokenType_LT()) ? this.parseTypeParameterList$0() : null;
    if (this.matches5$1($.get$TokenType_SEMICOLON()) || this.matches5$1($.get$TokenType_EOF())) {
      t1 = $.get$ParserErrorCode_MISSING_TYPEDEF_PARAMETERS();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
      t5 = $.get$TokenType_OPEN_PAREN();
      t3 = $.get$offset$x(this._currentToken);
      t1 = new $.StringToken(null, null, 0, null, null);
      t1._liblib9$_type = t5;
      t1._liblib9$_offset = t3;
      t1._value2 = "";
      t3 = $.get$TokenType_CLOSE_PAREN();
      t5 = $.get$offset$x(this._currentToken);
      t2 = new $.StringToken(null, null, 0, null, null);
      t2._liblib9$_type = t3;
      t2._liblib9$_offset = t5;
      t2._value2 = "";
      parameters = $.FormalParameterList$full(t1, null, null, null, t2);
      semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
      return $.FunctionTypeAlias$full(commentAndMetadata._liblib14$_comment, commentAndMetadata._liblib14$_metadata, keyword, returnType, $name, typeParameters, parameters, semicolon);
    } else if (!this.matches5$1($.get$TokenType_OPEN_PAREN())) {
      t1 = $.get$ParserErrorCode_MISSING_TYPEDEF_PARAMETERS();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
      t5 = commentAndMetadata._liblib14$_comment;
      t3 = commentAndMetadata._liblib14$_metadata;
      t1 = $.get$TokenType_OPEN_PAREN();
      t2 = $.get$offset$x(this._currentToken);
      t4 = new $.StringToken(null, null, 0, null, null);
      t4._liblib9$_type = t1;
      t4._liblib9$_offset = t2;
      t4._value2 = "";
      t2 = $.get$TokenType_CLOSE_PAREN();
      t1 = $.get$offset$x(this._currentToken);
      t6 = new $.StringToken(null, null, 0, null, null);
      t6._liblib9$_type = t2;
      t6._liblib9$_offset = t1;
      t6._value2 = "";
      t6 = $.FormalParameterList$full(t4, null, null, null, t6);
      t4 = $.get$TokenType_SEMICOLON();
      t1 = $.get$offset$x(this._currentToken);
      t2 = new $.StringToken(null, null, 0, null, null);
      t2._liblib9$_type = t4;
      t2._liblib9$_offset = t1;
      t2._value2 = "";
      return $.FunctionTypeAlias$full(t5, t3, keyword, returnType, $name, typeParameters, t6, t2);
    }
    parameters = this.parseFormalParameterList$0();
    this.validateFormalParameterList$1(parameters);
    semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
    return $.FunctionTypeAlias$full(commentAndMetadata._liblib14$_comment, commentAndMetadata._liblib14$_metadata, keyword, returnType, $name, typeParameters, parameters, semicolon);
  },
  "+parseFunctionTypeAlias:2:0": 0,
  parseGetter$4: function(commentAndMetadata, externalKeyword, staticKeyword, returnType) {
    var propertyKeyword, $name, t1, t2, t3, t4, t5, body;
    propertyKeyword = this.expect$1($.get$Keyword_GET());
    $name = this.parseSimpleIdentifier$0();
    if (this.matches5$1($.get$TokenType_OPEN_PAREN())) {
      t1 = this._currentToken.get$next();
      t2 = $.get$TokenType_CLOSE_PAREN();
      t2 = $.get$type$x(t1) === t2;
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      t1 = $.get$ParserErrorCode_GETTER_WITH_PARAMETERS();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
      this._currentToken = this._currentToken.get$next();
      this._currentToken = this._currentToken.get$next();
    }
    t1 = externalKeyword == null;
    t2 = !t1 || staticKeyword == null;
    body = this.parseFunctionBody$3(t2, $.get$ParserErrorCode_STATIC_GETTER_WITHOUT_BODY(), false);
    if (!t1 && (typeof body !== "object" || body === null || !$.getInterceptor(body).$isEmptyFunctionBody)) {
      t1 = $.get$ParserErrorCode_EXTERNAL_GETTER_WITH_BODY();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    return $.MethodDeclaration$full(commentAndMetadata._liblib14$_comment, commentAndMetadata._liblib14$_metadata, externalKeyword, staticKeyword, returnType, propertyKeyword, null, $name, null, body);
  },
  "+parseGetter:4:0": 0,
  parseIdentifierList$0: function() {
    var identifiers = $.List_List($, $.SimpleIdentifier);
    identifiers.$builtinTypeInfo = [$.SimpleIdentifier];
    identifiers.push(this.parseSimpleIdentifier$0());
    for (; this.matches5$1($.get$TokenType_COMMA());) {
      this._currentToken = this._currentToken.get$next();
      identifiers.push(this.parseSimpleIdentifier$0());
    }
    return identifiers;
  },
  "+parseIdentifierList:0:0": 0,
  parseIfStatement$0: function() {
    var ifKeyword, leftParenthesis, condition, rightParenthesis, thenStatement, t1, t2, token, elseStatement, elseKeyword;
    ifKeyword = this.expect$1($.get$Keyword_IF());
    leftParenthesis = this.expect2$1($.get$TokenType_OPEN_PAREN());
    condition = this.parseExpression2$0();
    rightParenthesis = this.expect2$1($.get$TokenType_CLOSE_PAREN());
    thenStatement = this.parseStatement2$0();
    t1 = $.get$Keyword_ELSE();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      elseStatement = this.parseStatement2$0();
      elseKeyword = token;
    } else {
      elseKeyword = null;
      elseStatement = null;
    }
    return $.IfStatement$full(ifKeyword, leftParenthesis, condition, rightParenthesis, thenStatement, elseKeyword, elseStatement);
  },
  "+parseIfStatement:0:0": 0,
  parseImplementsClause$0: function() {
    var keyword, interfaces, t1, t2, t3, t4, t5;
    keyword = this.expect$1($.get$Keyword_IMPLEMENTS());
    interfaces = $.List_List($, $.TypeName);
    interfaces.$builtinTypeInfo = [$.TypeName];
    interfaces.push(this.parseTypeName$0());
    for (; this.optional$1($.get$TokenType_COMMA());)
      interfaces.push(this.parseTypeName$0());
    t1 = $.ASTNode__hashCodeGenerator;
    if (typeof t1 !== "number")
      return this.parseImplementsClause$0$bailout(1, keyword, t1, interfaces);
    ++t1;
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.ImplementsClause(null, null, null, null, t1);
    t2 = $.TypeName;
    t3 = $.List_List($, t2);
    t3.$builtinTypeInfo = [t2];
    t4 = t2;
    t5 = $.List_List($, t4);
    t5.$builtinTypeInfo = [t4];
    t3 = new $.NodeList(t1, t3, t5);
    t3.$builtinTypeInfo = [t2];
    t1._interfaces = t3;
    t1._keyword = keyword;
    t2 = t1._interfaces;
    t2.addAll$1(t2, interfaces);
    return t1;
  },
  "+parseImplementsClause:0:0": 0,
  parseImplementsClause$0$bailout: function(state0, keyword, t1, interfaces) {
    var t2, t3, t4, t5;
    t1 = $.$add$ns(t1, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.ImplementsClause(null, null, null, null, t1);
    t2 = $.TypeName;
    t3 = $.List_List($, t2);
    t3.$builtinTypeInfo = [t2];
    t4 = t2;
    t5 = $.List_List($, t4);
    t5.$builtinTypeInfo = [t4];
    t3 = new $.NodeList(t1, t3, t5);
    t3.$builtinTypeInfo = [t2];
    t1._interfaces = t3;
    t1._keyword = keyword;
    t2 = t1._interfaces;
    t2.addAll$1(t2, interfaces);
    return t1;
  },
  parseImportDirective$1: function(commentAndMetadata) {
    var importKeyword, libraryUri, t1, t2, token, prefix, asToken, combinators, semicolon, node, t3, t4, t5, t6;
    importKeyword = this.expect$1($.get$Keyword_IMPORT());
    libraryUri = this.parseStringLiteral$0();
    t1 = $.get$Keyword_AS();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      prefix = this.parseSimpleIdentifier$0();
      asToken = token;
    } else {
      asToken = null;
      prefix = null;
    }
    combinators = this.parseCombinators$0();
    semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
    node = commentAndMetadata._liblib14$_comment;
    t1 = commentAndMetadata._liblib14$_metadata;
    t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t2;
    t2 = new $.ImportDirective(null, null, null, null, null, null, null, null, null, null, null, t2);
    t3 = $.Annotation;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t5 = t3;
    t6 = $.List_List($, t5);
    t6.$builtinTypeInfo = [t5];
    t4 = new $.NodeList(t2, t4, t6);
    t4.$builtinTypeInfo = [t3];
    t2._metadata = t4;
    if (node != null)
      node.set$parent(node, t2);
    t2._comment = node;
    t3 = t2._metadata;
    t3.addAll$1(t3, t1);
    if (libraryUri != null)
      $.set$parent$x(libraryUri, t2);
    t2._uri = libraryUri;
    t2.NamespaceDirective$full$6(node, t1, importKeyword, libraryUri, combinators, semicolon);
    t2._asToken = asToken;
    if (prefix != null)
      prefix.set$parent(prefix, t2);
    t2._prefix = prefix;
    return t2;
  },
  "+parseImportDirective:1:0": 0,
  parseLibraryDirective$1: function(commentAndMetadata) {
    var keyword, libraryName, semicolon, node, t1, t2, t3, t4, t5, t6;
    keyword = this.expect$1($.get$Keyword_LIBRARY());
    libraryName = this.parseLibraryName$2($.get$ParserErrorCode_MISSING_NAME_IN_LIBRARY_DIRECTIVE(), keyword);
    semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
    node = commentAndMetadata._liblib14$_comment;
    t1 = commentAndMetadata._liblib14$_metadata;
    t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t2;
    t2 = new $.LibraryDirective(null, null, null, null, null, null, null, null, t2);
    t3 = $.Annotation;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t5 = t3;
    t6 = $.List_List($, t5);
    t6.$builtinTypeInfo = [t5];
    t4 = new $.NodeList(t2, t4, t6);
    t4.$builtinTypeInfo = [t3];
    t2._metadata = t4;
    if (node != null)
      node.set$parent(node, t2);
    t2._comment = node;
    t3 = t2._metadata;
    t3.addAll$1(t3, t1);
    t2._liblib4$_libraryToken = keyword;
    libraryName.set$parent(libraryName, t2);
    t2._liblib4$_name = libraryName;
    t2._semicolon = semicolon;
    return t2;
  },
  "+parseLibraryDirective:1:0": 0,
  parseLibraryIdentifier$0: function() {
    var components, t1, t2, t3, t4, t5;
    components = $.List_List($, $.SimpleIdentifier);
    components.$builtinTypeInfo = [$.SimpleIdentifier];
    components.push(this.parseSimpleIdentifier$0());
    for (; this.matches5$1($.get$TokenType_PERIOD());) {
      this._currentToken = this._currentToken.get$next();
      components.push(this.parseSimpleIdentifier$0());
    }
    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.LibraryIdentifier(null, null, null, null, null, t1);
    t2 = $.SimpleIdentifier;
    t3 = $.List_List($, t2);
    t3.$builtinTypeInfo = [t2];
    t4 = t2;
    t5 = $.List_List($, t4);
    t5.$builtinTypeInfo = [t4];
    t3 = new $.NodeList(t1, t3, t5);
    t3.$builtinTypeInfo = [t2];
    t1._components = t3;
    t2 = t1._components;
    t2.addAll$1(t2, components);
    return t1;
  },
  "+parseLibraryIdentifier:0:0": 0,
  parseLibraryName$2: function(missingNameError, missingNameToken) {
    var t1, t2, t3, string, t4, components, t5;
    t1 = this._currentToken;
    t2 = $.get$TokenType_IDENTIFIER();
    t3 = $.getInterceptor$x(t1);
    if (t3.get$type(t1) !== t2) {
      t2 = $.get$TokenType_KEYWORD();
      if (t3.get$type(t1) === t2) {
        $.propertyTypeCast(t1, "$isKeywordToken");
        t1.get$keyword;
        t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
      } else
        t1 = false;
    } else
      t1 = true;
    if (t1)
      return this.parseLibraryIdentifier$0();
    else if (this.matches5$1($.get$TokenType_STRING())) {
      string = this.parseStringLiteral$0();
      t1 = $.get$ParserErrorCode_NON_IDENTIFIER_LIBRARY_NAME();
      t2 = this._errorListener;
      t3 = $.getInterceptor$x(string);
      t4 = new $.AnalysisError(null, null, null, 0, 0);
      t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(string), t3.get$length(string), t1, []);
      t2.onError$1(t2, t4);
    } else {
      t1 = this._errorListener;
      t2 = $.getInterceptor$x(missingNameToken);
      t3 = new $.AnalysisError(null, null, null, 0, 0);
      t3._jtd_constructor_132_impl$5(this._liblib14$_source, t2.get$offset(missingNameToken), t2.get$length(missingNameToken), missingNameError, []);
      t1.onError$1(t1, t3);
    }
    components = $.List_List($, $.SimpleIdentifier);
    components.$builtinTypeInfo = [$.SimpleIdentifier];
    t1 = $.get$TokenType_IDENTIFIER();
    t2 = $.get$offset$x(this._currentToken);
    t3 = new $.StringToken(null, null, 0, null, null);
    t3._liblib9$_type = t1;
    t3._liblib9$_offset = t2;
    t3._value2 = $.StringUtilities_intern("");
    t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t2;
    t2 = new $.SimpleIdentifier(null, null, null, null, null, null, null, t2);
    t2._liblib4$_token = t3;
    components.push(t2);
    t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t2;
    t2 = new $.LibraryIdentifier(null, null, null, null, null, t2);
    t3 = $.SimpleIdentifier;
    t1 = $.List_List($, t3);
    t1.$builtinTypeInfo = [t3];
    t4 = t3;
    t5 = $.List_List($, t4);
    t5.$builtinTypeInfo = [t4];
    t1 = new $.NodeList(t2, t1, t5);
    t1.$builtinTypeInfo = [t3];
    t2._components = t1;
    t1 = t2._components;
    t1.addAll$1(t1, components);
    return t2;
  },
  "+parseLibraryName:2:0": 0,
  parseListLiteral$2: function(modifier, typeArguments) {
    var leftBracket, t1, t2, rightBracket, token, elements;
    if (this.matches5$1($.get$TokenType_INDEX())) {
      leftBracket = $.BeginToken$($.get$TokenType_OPEN_SQUARE_BRACKET(), $.get$offset$x(this._currentToken));
      t1 = $.get$TokenType_CLOSE_SQUARE_BRACKET();
      t2 = $.$add$ns($.get$offset$x(this._currentToken), 1);
      rightBracket = new $.Token(null, 0, null, null);
      rightBracket._liblib9$_type = t1;
      rightBracket._liblib9$_offset = t2;
      leftBracket._liblib9$_endToken = rightBracket;
      t2 = this._currentToken.get$next();
      rightBracket._liblib9$_next = t2;
      t2.set$previous(rightBracket);
      leftBracket._liblib9$_next = rightBracket;
      rightBracket.set$previous(leftBracket);
      this._currentToken.get$previous().setNext$1(leftBracket);
      this._currentToken = this._currentToken.get$next();
      return $.ListLiteral$full(modifier, typeArguments, leftBracket, null, rightBracket);
    }
    leftBracket = this.expect2$1($.get$TokenType_OPEN_SQUARE_BRACKET());
    if (this.matches5$1($.get$TokenType_CLOSE_SQUARE_BRACKET())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      return $.ListLiteral$full(modifier, typeArguments, leftBracket, null, token);
    }
    elements = $.List_List($, $.Expression);
    elements.$builtinTypeInfo = [$.Expression];
    elements.push(this.parseExpression2$0());
    for (; this.optional$1($.get$TokenType_COMMA());) {
      if (this.matches5$1($.get$TokenType_CLOSE_SQUARE_BRACKET())) {
        token = this._currentToken;
        this._currentToken = token.get$next();
        return $.ListLiteral$full(modifier, typeArguments, leftBracket, elements, token);
      }
      elements.push(this.parseExpression2$0());
    }
    return $.ListLiteral$full(modifier, typeArguments, leftBracket, elements, this.expect2$1($.get$TokenType_CLOSE_SQUARE_BRACKET()));
  },
  "+parseListLiteral:2:0": 0,
  parseListOrMapLiteral$1: function(modifier) {
    var typeArguments, t1, t2, t3, t4, t5;
    typeArguments = this.matches5$1($.get$TokenType_LT()) ? this.parseTypeArgumentList$0() : null;
    if (this.matches5$1($.get$TokenType_OPEN_CURLY_BRACKET()))
      return this.parseMapLiteral$2(modifier, typeArguments);
    else if (this.matches5$1($.get$TokenType_OPEN_SQUARE_BRACKET()) || this.matches5$1($.get$TokenType_INDEX()))
      return this.parseListLiteral$2(modifier, typeArguments);
    t1 = $.get$ParserErrorCode_EXPECTED_LIST_OR_MAP_LITERAL();
    t2 = this._currentToken;
    t3 = this._errorListener;
    t4 = $.getInterceptor$x(t2);
    t5 = new $.AnalysisError(null, null, null, 0, 0);
    t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
    t3.onError$1(t3, t5);
    t5 = $.get$TokenType_OPEN_SQUARE_BRACKET();
    t3 = $.get$offset$x(this._currentToken);
    t1 = new $.StringToken(null, null, 0, null, null);
    t1._liblib9$_type = t5;
    t1._liblib9$_offset = t3;
    t1._value2 = "";
    t3 = $.get$TokenType_CLOSE_SQUARE_BRACKET();
    t5 = $.get$offset$x(this._currentToken);
    t2 = new $.StringToken(null, null, 0, null, null);
    t2._liblib9$_type = t3;
    t2._liblib9$_offset = t5;
    t2._value2 = "";
    return $.ListLiteral$full(modifier, typeArguments, t1, null, t2);
  },
  "+parseListOrMapLiteral:1:0": 0,
  parseLogicalAndExpression$0: function() {
    var expression, token, node, t1, expression0;
    expression = this.parseBitwiseOrExpression$0();
    for (; this.matches5$1($.get$TokenType_AMPERSAND_AMPERSAND()); expression = expression0) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      node = this.parseBitwiseOrExpression$0();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseLogicalAndExpression$0$bailout(1, t1, token, expression, node);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
      if (expression != null)
        $.set$parent$x(expression, expression0);
      expression0._leftOperand = expression;
      expression0._operator = token;
      if (node != null)
        $.set$parent$x(node, expression0);
      expression0._rightOperand = node;
    }
    return expression;
  },
  "+parseLogicalAndExpression:0:0": 0,
  parseLogicalAndExpression$0$bailout: function(state0, t1, token, expression, node) {
    switch (state0) {
      case 0:
        expression = this.parseBitwiseOrExpression$0();
      case 1:
        var expression0;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!this.matches5$1($.get$TokenType_AMPERSAND_AMPERSAND()))
                  break L0;
                token = this._currentToken;
                this._currentToken = token.get$next();
                node = this.parseBitwiseOrExpression$0();
                t1 = $.ASTNode__hashCodeGenerator;
              case 1:
                state0 = 0;
                t1 = $.$add$ns(t1, 1);
                $.ASTNode__hashCodeGenerator = t1;
                expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
                if (expression != null)
                  $.set$parent$x(expression, expression0);
                expression0._leftOperand = expression;
                expression0._operator = token;
                if (node != null)
                  $.set$parent$x(node, expression0);
                expression0._rightOperand = node;
                expression = expression0;
            }
        return expression;
    }
  },
  parseLogicalOrExpression$0: function() {
    var expression, token, node, t1, expression0;
    expression = this.parseLogicalAndExpression$0();
    for (; this.matches5$1($.get$TokenType_BAR_BAR()); expression = expression0) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      node = this.parseLogicalAndExpression$0();
      t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t1;
      expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
      if (expression != null)
        $.set$parent$x(expression, expression0);
      expression0._leftOperand = expression;
      expression0._operator = token;
      if (node != null)
        $.set$parent$x(node, expression0);
      expression0._rightOperand = node;
    }
    return expression;
  },
  "+parseLogicalOrExpression:0:0": 0,
  parseMapLiteral$2: function(modifier, typeArguments) {
    var t1, num, t2, t3, leftBracket, entries, token;
    if (typeArguments != null) {
      typeArguments.get$arguments;
      t1 = typeArguments._liblib4$_arguments;
      t1.get$length;
      num = t1.elements.length;
      if (num !== 2) {
        t1 = $.get$ParserErrorCode_EXPECTED_TWO_MAP_TYPE_ARGUMENTS();
        t2 = this._errorListener;
        t3 = new $.AnalysisError(null, null, null, 0, 0);
        t3._jtd_constructor_132_impl$5(this._liblib14$_source, typeArguments.get$offset(typeArguments), typeArguments.get$length(typeArguments), t1, [num]);
        t2.onError$1(t2, t3);
      }
    }
    leftBracket = this.expect2$1($.get$TokenType_OPEN_CURLY_BRACKET());
    entries = $.List_List($, $.MapLiteralEntry);
    entries.$builtinTypeInfo = [$.MapLiteralEntry];
    if (this.matches5$1($.get$TokenType_CLOSE_CURLY_BRACKET())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      return $.MapLiteral$full(modifier, typeArguments, leftBracket, entries, token);
    }
    entries.push(this.parseMapLiteralEntry$0());
    for (; this.optional$1($.get$TokenType_COMMA());) {
      if (this.matches5$1($.get$TokenType_CLOSE_CURLY_BRACKET())) {
        token = this._currentToken;
        this._currentToken = token.get$next();
        return $.MapLiteral$full(modifier, typeArguments, leftBracket, entries, token);
      }
      entries.push(this.parseMapLiteralEntry$0());
    }
    return $.MapLiteral$full(modifier, typeArguments, leftBracket, entries, this.expect2$1($.get$TokenType_CLOSE_CURLY_BRACKET()));
  },
  "+parseMapLiteral:2:0": 0,
  parseMapLiteralEntry$0: function() {
    var key, separator, value, t1;
    key = this.parseExpression2$0();
    separator = this.expect2$1($.get$TokenType_COLON());
    value = this.parseExpression2$0();
    t1 = $.ASTNode__hashCodeGenerator;
    if (typeof t1 !== "number")
      return this.parseMapLiteralEntry$0$bailout(1, key, separator, value, t1);
    ++t1;
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.MapLiteralEntry(null, null, null, null, null, t1);
    if (key != null)
      $.set$parent$x(key, t1);
    t1._liblib4$_key = key;
    t1._separator = separator;
    if (value != null)
      $.set$parent$x(value, t1);
    t1._liblib4$_value = value;
    return t1;
  },
  "+parseMapLiteralEntry:0:0": 0,
  parseMapLiteralEntry$0$bailout: function(state0, key, separator, value, t1) {
    t1 = $.$add$ns(t1, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.MapLiteralEntry(null, null, null, null, null, t1);
    if (key != null)
      $.set$parent$x(key, t1);
    t1._liblib4$_key = key;
    t1._separator = separator;
    if (value != null)
      $.set$parent$x(value, t1);
    t1._liblib4$_value = value;
    return t1;
  },
  parseMethodDeclaration2$6: function(commentAndMetadata, externalKeyword, staticKeyword, returnType, $name, parameters) {
    var t1, t2, body, t3;
    t1 = externalKeyword == null;
    t2 = !t1 || staticKeyword == null;
    body = this.parseFunctionBody$3(t2, $.get$ParserErrorCode_MISSING_FUNCTION_BODY(), false);
    if (!t1) {
      if (typeof body !== "object" || body === null || !$.getInterceptor(body).$isEmptyFunctionBody) {
        t1 = $.get$ParserErrorCode_EXTERNAL_METHOD_WITH_BODY();
        t2 = this._errorListener;
        t3 = new $.AnalysisError(null, null, null, 0, 0);
        t3._jtd_constructor_132_impl$5(this._liblib14$_source, body.get$offset(body), body.get$length(body), t1, []);
        t2.onError$1(t2, t3);
      }
    } else if (staticKeyword != null)
      if (typeof body === "object" && body !== null && !!$.getInterceptor(body).$isEmptyFunctionBody) {
        t1 = $.get$ParserErrorCode_ABSTRACT_STATIC_METHOD();
        t2 = this._errorListener;
        t3 = new $.AnalysisError(null, null, null, 0, 0);
        t3._jtd_constructor_132_impl$5(this._liblib14$_source, body.get$offset(body), body.get$length(body), t1, []);
        t2.onError$1(t2, t3);
      }
    return $.MethodDeclaration$full(commentAndMetadata._liblib14$_comment, commentAndMetadata._liblib14$_metadata, externalKeyword, staticKeyword, returnType, null, null, $name, parameters, body);
  },
  "+parseMethodDeclaration2:6:0": 0,
  parseModifiers$0: function() {
    var modifiers, progress, t1, t2, t3, t4, t5, t6, token;
    modifiers = new $.Modifiers(null, null, null, null, null, null, null);
    for (progress = true; progress;) {
      t1 = $.get$Keyword_ABSTRACT();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1) {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_PERIOD();
        if ($.get$type$x(t1) !== t2) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_LT();
          t2 = $.get$type$x(t1) !== t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
      if (t1)
        if (modifiers._liblib14$_abstractKeyword != null) {
          t1 = $.get$ParserErrorCode_DUPLICATED_MODIFIER();
          t2 = this._currentToken.get$lexeme();
          t3 = this._currentToken;
          t4 = this._errorListener;
          t5 = $.getInterceptor$x(t3);
          t6 = new $.AnalysisError(null, null, null, 0, 0);
          t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
          t4.onError$1(t4, t6);
          this._currentToken = this._currentToken.get$next();
        } else {
          token = this._currentToken;
          this._currentToken = token.get$next();
          modifiers._liblib14$_abstractKeyword = token;
        }
      else {
        t1 = $.get$Keyword_CONST();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1)
          if (modifiers._constKeyword != null) {
            t1 = $.get$ParserErrorCode_DUPLICATED_MODIFIER();
            t2 = this._currentToken.get$lexeme();
            t3 = this._currentToken;
            t4 = this._errorListener;
            t5 = $.getInterceptor$x(t3);
            t6 = new $.AnalysisError(null, null, null, 0, 0);
            t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
            t4.onError$1(t4, t6);
            this._currentToken = this._currentToken.get$next();
          } else {
            token = this._currentToken;
            this._currentToken = token.get$next();
            modifiers._constKeyword = token;
          }
        else {
          t1 = $.get$Keyword_EXTERNAL();
          t2 = this._currentToken;
          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t2, "$isKeywordToken");
            t2.get$keyword;
            t1 = t2._liblib9$_keyword === t1;
          } else
            t1 = false;
          if (t1) {
            t1 = this._currentToken.get$next();
            t2 = $.get$TokenType_PERIOD();
            if ($.get$type$x(t1) !== t2) {
              t1 = this._currentToken.get$next();
              t2 = $.get$TokenType_LT();
              t2 = $.get$type$x(t1) !== t2;
              t1 = t2;
            } else
              t1 = false;
          } else
            t1 = false;
          if (t1)
            if (modifiers._externalKeyword != null) {
              t1 = $.get$ParserErrorCode_DUPLICATED_MODIFIER();
              t2 = this._currentToken.get$lexeme();
              t3 = this._currentToken;
              t4 = this._errorListener;
              t5 = $.getInterceptor$x(t3);
              t6 = new $.AnalysisError(null, null, null, 0, 0);
              t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
              t4.onError$1(t4, t6);
              this._currentToken = this._currentToken.get$next();
            } else {
              token = this._currentToken;
              this._currentToken = token.get$next();
              modifiers._externalKeyword = token;
            }
          else {
            t1 = $.get$Keyword_FACTORY();
            t2 = this._currentToken;
            if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
              $.propertyTypeCast(t2, "$isKeywordToken");
              t2.get$keyword;
              t1 = t2._liblib9$_keyword === t1;
            } else
              t1 = false;
            if (t1) {
              t1 = this._currentToken.get$next();
              t2 = $.get$TokenType_PERIOD();
              if ($.get$type$x(t1) !== t2) {
                t1 = this._currentToken.get$next();
                t2 = $.get$TokenType_LT();
                t2 = $.get$type$x(t1) !== t2;
                t1 = t2;
              } else
                t1 = false;
            } else
              t1 = false;
            if (t1)
              if (modifiers._liblib14$_factoryKeyword != null) {
                t1 = $.get$ParserErrorCode_DUPLICATED_MODIFIER();
                t2 = this._currentToken.get$lexeme();
                t3 = this._currentToken;
                t4 = this._errorListener;
                t5 = $.getInterceptor$x(t3);
                t6 = new $.AnalysisError(null, null, null, 0, 0);
                t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
                t4.onError$1(t4, t6);
                this._currentToken = this._currentToken.get$next();
              } else {
                token = this._currentToken;
                this._currentToken = token.get$next();
                modifiers._liblib14$_factoryKeyword = token;
              }
            else {
              t1 = $.get$Keyword_FINAL();
              t2 = this._currentToken;
              if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t2, "$isKeywordToken");
                t2.get$keyword;
                t1 = t2._liblib9$_keyword === t1;
              } else
                t1 = false;
              if (t1)
                if (modifiers._finalKeyword != null) {
                  t1 = $.get$ParserErrorCode_DUPLICATED_MODIFIER();
                  t2 = this._currentToken.get$lexeme();
                  t3 = this._currentToken;
                  t4 = this._errorListener;
                  t5 = $.getInterceptor$x(t3);
                  t6 = new $.AnalysisError(null, null, null, 0, 0);
                  t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
                  t4.onError$1(t4, t6);
                  this._currentToken = this._currentToken.get$next();
                } else {
                  token = this._currentToken;
                  this._currentToken = token.get$next();
                  modifiers._finalKeyword = token;
                }
              else {
                t1 = $.get$Keyword_STATIC();
                t2 = this._currentToken;
                if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                  $.propertyTypeCast(t2, "$isKeywordToken");
                  t2.get$keyword;
                  t1 = t2._liblib9$_keyword === t1;
                } else
                  t1 = false;
                if (t1) {
                  t1 = this._currentToken.get$next();
                  t2 = $.get$TokenType_PERIOD();
                  if ($.get$type$x(t1) !== t2) {
                    t1 = this._currentToken.get$next();
                    t2 = $.get$TokenType_LT();
                    t2 = $.get$type$x(t1) !== t2;
                    t1 = t2;
                  } else
                    t1 = false;
                } else
                  t1 = false;
                if (t1)
                  if (modifiers._staticKeyword != null) {
                    t1 = $.get$ParserErrorCode_DUPLICATED_MODIFIER();
                    t2 = this._currentToken.get$lexeme();
                    t3 = this._currentToken;
                    t4 = this._errorListener;
                    t5 = $.getInterceptor$x(t3);
                    t6 = new $.AnalysisError(null, null, null, 0, 0);
                    t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
                    t4.onError$1(t4, t6);
                    this._currentToken = this._currentToken.get$next();
                  } else {
                    token = this._currentToken;
                    this._currentToken = token.get$next();
                    modifiers._staticKeyword = token;
                  }
                else {
                  t1 = $.get$Keyword_VAR();
                  t2 = this._currentToken;
                  if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                    $.propertyTypeCast(t2, "$isKeywordToken");
                    t2.get$keyword;
                    t1 = t2._liblib9$_keyword === t1;
                  } else
                    t1 = false;
                  if (t1)
                    if (modifiers._varKeyword != null) {
                      t1 = $.get$ParserErrorCode_DUPLICATED_MODIFIER();
                      t2 = this._currentToken.get$lexeme();
                      t3 = this._currentToken;
                      t4 = this._errorListener;
                      t5 = $.getInterceptor$x(t3);
                      t6 = new $.AnalysisError(null, null, null, 0, 0);
                      t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
                      t4.onError$1(t4, t6);
                      this._currentToken = this._currentToken.get$next();
                    } else {
                      token = this._currentToken;
                      this._currentToken = token.get$next();
                      modifiers._varKeyword = token;
                    }
                  else
                    progress = false;
                }
              }
            }
          }
        }
      }
    }
    return modifiers;
  },
  "+parseModifiers:0:0": 0,
  parseMultiplicativeExpression$0: function() {
    var t1, t2, token, expression, node, expression0;
    t1 = $.get$Keyword_SUPER();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1 && $.get$type$x(this._currentToken.get$next()).isMultiplicativeOperator$0() === true) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseMultiplicativeExpression$0$bailout(1, token, t1);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression = new $.SuperExpression(null, null, null, null, null, t1);
      expression._keyword = token;
    } else
      expression = this.parseUnaryExpression$0();
    for (; $.get$type$x(this._currentToken).isMultiplicativeOperator$0() === true; expression = expression0) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      node = this.parseUnaryExpression$0();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseMultiplicativeExpression$0$bailout(2, token, t1, node, expression);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
      if (expression != null)
        $.set$parent$x(expression, expression0);
      expression0._leftOperand = expression;
      expression0._operator = token;
      if (node != null)
        $.set$parent$x(node, expression0);
      expression0._rightOperand = node;
    }
    return expression;
  },
  "+parseMultiplicativeExpression:0:0": 0,
  parseMultiplicativeExpression$0$bailout: function(state0, token, t1, node, expression) {
    switch (state0) {
      case 0:
        t1 = $.get$Keyword_SUPER();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
      case 1:
        if (state0 === 1 || state0 === 0 && t1 && $.get$type$x(this._currentToken.get$next()).isMultiplicativeOperator$0() === true)
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              expression = new $.SuperExpression(null, null, null, null, null, t1);
              expression._keyword = token;
          }
        else
          expression = this.parseUnaryExpression$0();
      case 2:
        var t2, expression0;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!($.get$type$x(this._currentToken).isMultiplicativeOperator$0() === true))
                  break L0;
                token = this._currentToken;
                this._currentToken = token.get$next();
                node = this.parseUnaryExpression$0();
                t1 = $.ASTNode__hashCodeGenerator;
              case 2:
                state0 = 0;
                t1 = $.$add$ns(t1, 1);
                $.ASTNode__hashCodeGenerator = t1;
                expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
                if (expression != null)
                  $.set$parent$x(expression, expression0);
                expression0._leftOperand = expression;
                expression0._operator = token;
                if (node != null)
                  $.set$parent$x(node, expression0);
                expression0._rightOperand = node;
                expression = expression0;
            }
        return expression;
    }
  },
  parseNonLabeledStatement$0: function() {
    var commentAndMetadata, t1, t2, afterString, node, keyword2, holder, variableList, semicolon, returnType, t3, t4, t5, afterType, token;
    commentAndMetadata = this.parseCommentAndMetadata$0();
    if (this.matches5$1($.get$TokenType_OPEN_CURLY_BRACKET())) {
      t1 = this._currentToken.get$next();
      t2 = $.get$TokenType_STRING();
      if ($.get$type$x(t1) === t2) {
        afterString = this.skipStringLiteral$1(this._currentToken.get$next());
        if (afterString != null && $.get$type$x(afterString) === $.get$TokenType_COLON()) {
          node = this.parseExpression2$0();
          t1 = this.expect2$1($.get$TokenType_SEMICOLON());
          t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t2;
          t2 = new $.ExpressionStatement(null, null, null, null, t2);
          if (node != null)
            $.set$parent$x(node, t2);
          t2._expression = node;
          t2._semicolon = t1;
          return t2;
        }
      }
      return this.parseBlock$0();
    } else {
      if (this.matches5$1($.get$TokenType_KEYWORD())) {
        t1 = $.propertyTypeCast(this._currentToken, "$isKeywordToken");
        t1.get$keyword;
        t1 = t1._liblib9$_keyword.isPseudoKeyword$0() !== true;
      } else
        t1 = false;
      if (t1) {
        t1 = $.propertyTypeCast(this._currentToken, "$isKeywordToken");
        t1.get$keyword;
        keyword2 = t1._liblib9$_keyword;
        if (keyword2 === $.get$Keyword_ASSERT())
          return this.parseAssertStatement$0();
        else if (keyword2 === $.get$Keyword_BREAK())
          return this.parseBreakStatement$0();
        else if (keyword2 === $.get$Keyword_CONTINUE())
          return this.parseContinueStatement$0();
        else if (keyword2 === $.get$Keyword_DO())
          return this.parseDoStatement$0();
        else if (keyword2 === $.get$Keyword_FOR())
          return this.parseForStatement$0();
        else if (keyword2 === $.get$Keyword_IF())
          return this.parseIfStatement$0();
        else if (keyword2 === $.get$Keyword_RETHROW()) {
          t1 = this.expect$1($.get$Keyword_RETHROW());
          t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t2;
          node = new $.RethrowExpression(null, null, null, null, null, t2);
          node._keyword = t1;
          t1 = this.expect2$1($.get$TokenType_SEMICOLON());
          t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t2;
          t2 = new $.ExpressionStatement(null, null, null, null, t2);
          node.set$parent(node, t2);
          t2._expression = node;
          t2._semicolon = t1;
          return t2;
        } else if (keyword2 === $.get$Keyword_RETURN())
          return this.parseReturnStatement$0();
        else if (keyword2 === $.get$Keyword_SWITCH())
          return this.parseSwitchStatement$0();
        else if (keyword2 === $.get$Keyword_THROW()) {
          node = this.parseThrowExpression$0();
          t1 = this.expect2$1($.get$TokenType_SEMICOLON());
          t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t2;
          t2 = new $.ExpressionStatement(null, null, null, null, t2);
          node.set$parent(node, t2);
          t2._expression = node;
          t2._semicolon = t1;
          return t2;
        } else if (keyword2 === $.get$Keyword_TRY())
          return this.parseTryStatement$0();
        else if (keyword2 === $.get$Keyword_WHILE())
          return this.parseWhileStatement$0();
        else if (keyword2 === $.get$Keyword_VAR() || keyword2 === $.get$Keyword_FINAL()) {
          holder = this.parseFinalConstVarOrType$1(false);
          variableList = this.parseVariableDeclarationList2$3(commentAndMetadata, holder._liblib14$_keyword, holder._liblib14$_type);
          semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
          t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t1;
          t1 = new $.VariableDeclarationStatement(null, null, null, null, t1);
          variableList.set$parent(variableList, t1);
          t1._variableList = variableList;
          t1._semicolon = semicolon;
          return t1;
        } else if (keyword2 === $.get$Keyword_VOID()) {
          returnType = this.parseReturnType$0();
          t1 = this._currentToken;
          t2 = $.get$TokenType_IDENTIFIER();
          t3 = $.getInterceptor$x(t1);
          if (t3.get$type(t1) !== t2) {
            t2 = $.get$TokenType_KEYWORD();
            if (t3.get$type(t1) === t2) {
              $.propertyTypeCast(t1, "$isKeywordToken");
              t1.get$keyword;
              t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
            } else
              t1 = false;
          } else
            t1 = true;
          if (t1 && this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_OPEN_PAREN(), $.get$TokenType_OPEN_CURLY_BRACKET(), $.get$TokenType_FUNCTION()])) {
            node = this.parseFunctionDeclaration$3(commentAndMetadata, null, returnType);
            t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
            $.ASTNode__hashCodeGenerator = t1;
            t1 = new $.FunctionDeclarationStatement(null, null, null, t1);
            node.set$parent(node, t1);
            t1._functionDeclaration = node;
            return t1;
          } else {
            t1 = this._currentToken;
            t2 = $.get$TokenType_IDENTIFIER();
            t3 = $.getInterceptor$x(t1);
            if (t3.get$type(t1) !== t2) {
              t2 = $.get$TokenType_KEYWORD();
              if (t3.get$type(t1) === t2) {
                $.propertyTypeCast(t1, "$isKeywordToken");
                t1.get$keyword;
                t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
              } else
                t1 = false;
            } else
              t1 = true;
            if (t1) {
              if (this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_EQ(), $.get$TokenType_COMMA(), $.get$TokenType_SEMICOLON()])) {
                t1 = $.get$ParserErrorCode_VOID_VARIABLE();
                t2 = this._errorListener;
                t3 = new $.AnalysisError(null, null, null, 0, 0);
                t3._jtd_constructor_132_impl$5(this._liblib14$_source, returnType.get$offset(returnType), returnType.get$length(returnType), t1, []);
                t2.onError$1(t2, t3);
                holder = this.parseFinalConstVarOrType$1(false);
                variableList = this.parseVariableDeclarationList2$3(commentAndMetadata, holder._liblib14$_keyword, holder._liblib14$_type);
                semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
                t3 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
                $.ASTNode__hashCodeGenerator = t3;
                t3 = new $.VariableDeclarationStatement(null, null, null, null, t3);
                variableList.set$parent(variableList, t3);
                t3._variableList = variableList;
                t3._semicolon = semicolon;
                return t3;
              }
            } else if (this.matches5$1($.get$TokenType_CLOSE_CURLY_BRACKET())) {
              variableList = this.parseVariableDeclarationList2$3(commentAndMetadata, null, returnType);
              semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
              t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
              $.ASTNode__hashCodeGenerator = t1;
              t1 = new $.VariableDeclarationStatement(null, null, null, null, t1);
              variableList.set$parent(variableList, t1);
              t1._variableList = variableList;
              t1._semicolon = semicolon;
              return t1;
            }
            t1 = $.get$ParserErrorCode_MISSING_STATEMENT();
            t2 = this._currentToken;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
            t5 = $.get$TokenType_SEMICOLON();
            t3 = $.get$offset$x(this._currentToken);
            t1 = new $.StringToken(null, null, 0, null, null);
            t1._liblib9$_type = t5;
            t1._liblib9$_offset = t3;
            t1._value2 = "";
            t3 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
            $.ASTNode__hashCodeGenerator = t3;
            t3 = new $.EmptyStatement(null, null, null, t3);
            t3._semicolon = t1;
            return t3;
          }
        } else if (keyword2 === $.get$Keyword_CONST()) {
          if (this.matchesAny$2(this._currentToken.get$next(), [$.get$TokenType_LT(), $.get$TokenType_OPEN_CURLY_BRACKET(), $.get$TokenType_OPEN_SQUARE_BRACKET(), $.get$TokenType_INDEX()])) {
            node = this.parseExpression2$0();
            t1 = this.expect2$1($.get$TokenType_SEMICOLON());
            t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
            $.ASTNode__hashCodeGenerator = t2;
            t2 = new $.ExpressionStatement(null, null, null, null, t2);
            if (node != null)
              $.set$parent$x(node, t2);
            t2._expression = node;
            t2._semicolon = t1;
            return t2;
          } else {
            t1 = this._currentToken.get$next();
            t2 = $.get$TokenType_IDENTIFIER();
            if ($.get$type$x(t1) === t2) {
              afterType = this.skipTypeName$1(this._currentToken.get$next());
              if (afterType != null) {
                t1 = $.get$TokenType_OPEN_PAREN();
                t2 = $.getInterceptor$x(afterType);
                if (t2.get$type(afterType) !== t1) {
                  t1 = $.get$TokenType_PERIOD();
                  if (t2.get$type(afterType) === t1) {
                    t1 = afterType.get$next();
                    t2 = $.get$TokenType_IDENTIFIER();
                    if ($.get$type$x(t1) === t2) {
                      t1 = afterType.get$next().get$next();
                      t2 = $.get$TokenType_OPEN_PAREN();
                      t2 = $.get$type$x(t1) === t2;
                      t1 = t2;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                } else
                  t1 = true;
                if (t1) {
                  node = this.parseExpression2$0();
                  t1 = this.expect2$1($.get$TokenType_SEMICOLON());
                  t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
                  $.ASTNode__hashCodeGenerator = t2;
                  t2 = new $.ExpressionStatement(null, null, null, null, t2);
                  if (node != null)
                    $.set$parent$x(node, t2);
                  t2._expression = node;
                  t2._semicolon = t1;
                  return t2;
                }
              }
            }
          }
          holder = this.parseFinalConstVarOrType$1(false);
          variableList = this.parseVariableDeclarationList2$3(commentAndMetadata, holder._liblib14$_keyword, holder._liblib14$_type);
          semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
          t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t1;
          t1 = new $.VariableDeclarationStatement(null, null, null, null, t1);
          variableList.set$parent(variableList, t1);
          t1._variableList = variableList;
          t1._semicolon = semicolon;
          return t1;
        } else if (keyword2 === $.get$Keyword_NEW() || keyword2 === $.get$Keyword_TRUE() || keyword2 === $.get$Keyword_FALSE() || keyword2 === $.get$Keyword_NULL() || keyword2 === $.get$Keyword_SUPER() || keyword2 === $.get$Keyword_THIS()) {
          node = this.parseExpression2$0();
          t1 = this.expect2$1($.get$TokenType_SEMICOLON());
          t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t2;
          t2 = new $.ExpressionStatement(null, null, null, null, t2);
          if (node != null)
            $.set$parent$x(node, t2);
          t2._expression = node;
          t2._semicolon = t1;
          return t2;
        } else {
          t1 = $.get$ParserErrorCode_MISSING_STATEMENT();
          t2 = this._currentToken;
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
          t5 = $.get$TokenType_SEMICOLON();
          t3 = $.get$offset$x(this._currentToken);
          t1 = new $.StringToken(null, null, 0, null, null);
          t1._liblib9$_type = t5;
          t1._liblib9$_offset = t3;
          t1._value2 = "";
          t3 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t3;
          t3 = new $.EmptyStatement(null, null, null, t3);
          t3._semicolon = t1;
          return t3;
        }
      } else if (this.matches5$1($.get$TokenType_SEMICOLON())) {
        token = this._currentToken;
        this._currentToken = token.get$next();
        t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.EmptyStatement(null, null, null, t1);
        t1._semicolon = token;
        return t1;
      } else if (this.isInitializedVariableDeclaration$0()) {
        holder = this.parseFinalConstVarOrType$1(false);
        variableList = this.parseVariableDeclarationList2$3(commentAndMetadata, holder._liblib14$_keyword, holder._liblib14$_type);
        semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
        t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.VariableDeclarationStatement(null, null, null, null, t1);
        variableList.set$parent(variableList, t1);
        t1._variableList = variableList;
        t1._semicolon = semicolon;
        return t1;
      } else if (this.isFunctionDeclaration$0()) {
        t1 = this.parseFunctionDeclaration$3(this.parseCommentAndMetadata$0(), null, this.parseOptionalReturnType$0());
        t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
        $.ASTNode__hashCodeGenerator = t2;
        t2 = new $.FunctionDeclarationStatement(null, null, null, t2);
        t2._functionDeclaration = t2.becomeParentOf$1(t1);
        return t2;
      } else if (this.matches5$1($.get$TokenType_CLOSE_CURLY_BRACKET())) {
        t1 = $.get$ParserErrorCode_MISSING_STATEMENT();
        t2 = this._currentToken;
        t3 = this._errorListener;
        t4 = $.getInterceptor$x(t2);
        t5 = new $.AnalysisError(null, null, null, 0, 0);
        t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
        t3.onError$1(t3, t5);
        t5 = $.get$TokenType_SEMICOLON();
        t3 = $.get$offset$x(this._currentToken);
        t1 = new $.StringToken(null, null, 0, null, null);
        t1._liblib9$_type = t5;
        t1._liblib9$_offset = t3;
        t1._value2 = "";
        t3 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
        $.ASTNode__hashCodeGenerator = t3;
        t3 = new $.EmptyStatement(null, null, null, t3);
        t3._semicolon = t1;
        return t3;
      } else {
        node = this.parseExpression2$0();
        t1 = this.expect2$1($.get$TokenType_SEMICOLON());
        t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
        $.ASTNode__hashCodeGenerator = t2;
        t2 = new $.ExpressionStatement(null, null, null, null, t2);
        if (node != null)
          $.set$parent$x(node, t2);
        t2._expression = node;
        t2._semicolon = t1;
        return t2;
      }
    }
  },
  "+parseNonLabeledStatement:0:0": 0,
  parseNormalFormalParameter$0: function() {
    var commentAndMetadata, holder, t1, t2, token, period, thisKeyword, identifier, parameters, node, t3, type2, t4, t5;
    commentAndMetadata = this.parseCommentAndMetadata$0();
    holder = this.parseFinalConstVarOrType$1(true);
    t1 = $.get$Keyword_THIS();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      period = this.expect2$1($.get$TokenType_PERIOD());
      thisKeyword = token;
    } else {
      thisKeyword = null;
      period = null;
    }
    identifier = this.parseSimpleIdentifier$0();
    if (this.matches5$1($.get$TokenType_OPEN_PAREN())) {
      if (thisKeyword != null)
        ;
      parameters = this.parseFormalParameterList$0();
      t1 = commentAndMetadata._liblib14$_comment;
      t2 = commentAndMetadata._liblib14$_metadata;
      node = holder._liblib14$_type;
      t3 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t3;
      t3 = new $.FunctionTypedFormalParameter(null, null, null, null, null, null, null, t3);
      t3.NormalFormalParameter$full$3(t1, t2, identifier);
      if (node != null)
        node.set$parent(node, t3);
      t3._returnType = node;
      parameters.set$parent(parameters, t3);
      t3._parameters = parameters;
      return t3;
    }
    type2 = holder._liblib14$_type;
    if (type2 != null) {
      type2.get$name;
      t1 = type2._liblib4$_name.get$beginToken();
      t2 = $.get$Keyword_VOID();
      if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t1, "$isKeywordToken");
        t1.get$keyword;
        t1 = t1._liblib9$_keyword === t2;
      } else
        t1 = false;
    } else
      t1 = false;
    if (t1) {
      t1 = $.get$ParserErrorCode_VOID_PARAMETER();
      type2.get$name;
      t2 = type2._liblib4$_name.get$beginToken();
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (thisKeyword != null)
      return $.FieldFormalParameter$full(commentAndMetadata._liblib14$_comment, commentAndMetadata._liblib14$_metadata, holder._liblib14$_keyword, holder._liblib14$_type, thisKeyword, period, identifier);
    t1 = commentAndMetadata._liblib14$_comment;
    t2 = commentAndMetadata._liblib14$_metadata;
    t3 = holder._liblib14$_keyword;
    node = holder._liblib14$_type;
    t4 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t4;
    t4 = new $.SimpleFormalParameter(null, null, null, null, null, null, null, t4);
    t4.NormalFormalParameter$full$3(t1, t2, identifier);
    t4._keyword = t3;
    if (node != null)
      node.set$parent(node, t4);
    t4._liblib4$_type = node;
    return t4;
  },
  "+parseNormalFormalParameter:0:0": 0,
  parseOperator$3: function(commentAndMetadata, externalKeyword, returnType) {
    var t1, t2, token, operatorKeyword, t3, t4, t5, t6, $name, previous2, parameters, body;
    t1 = $.get$Keyword_OPERATOR();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      operatorKeyword = token;
    } else {
      t1 = $.get$ParserErrorCode_MISSING_KEYWORD_OPERATOR();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
      t5 = $.get$Keyword_OPERATOR();
      t3 = $.get$offset$x(this._currentToken);
      operatorKeyword = new $.KeywordToken_11(null, null, 0, null, null);
      operatorKeyword._liblib9$_type = $.get$TokenType_KEYWORD();
      operatorKeyword._liblib9$_offset = t3;
      operatorKeyword._liblib9$_keyword = t5;
    }
    if (this._currentToken.isUserDefinableOperator$0() !== true) {
      t1 = $.get$ParserErrorCode_NON_USER_DEFINABLE_OPERATOR();
      t2 = this._currentToken.get$lexeme();
      t3 = this._currentToken;
      t4 = this._errorListener;
      t5 = $.getInterceptor$x(t3);
      t6 = new $.AnalysisError(null, null, null, 0, 0);
      t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
      t4.onError$1(t4, t6);
    }
    token = this._currentToken;
    this._currentToken = token.get$next();
    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t1;
    $name = new $.SimpleIdentifier(null, null, null, null, null, null, null, t1);
    $name._liblib4$_token = token;
    if (this.matches5$1($.get$TokenType_EQ())) {
      previous2 = this._currentToken.get$previous();
      t1 = $.get$TokenType_EQ_EQ();
      t2 = $.getInterceptor$x(previous2);
      if (t2.get$type(previous2) !== t1) {
        t1 = $.get$TokenType_BANG_EQ();
        t1 = t2.get$type(previous2) === t1;
      } else
        t1 = true;
      if (t1 && $.$eq($.get$offset$x(this._currentToken), $.$add$ns(t2.get$offset(previous2), 2))) {
        t1 = $.get$ParserErrorCode_INVALID_OPERATOR();
        t2 = $.S(previous2.get$lexeme()) + $.S(this._currentToken.get$lexeme());
        t3 = this._currentToken;
        t4 = this._errorListener;
        t5 = $.getInterceptor$x(t3);
        t6 = new $.AnalysisError(null, null, null, 0, 0);
        t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
        t4.onError$1(t4, t6);
        this._currentToken = this._currentToken.get$next();
      }
    }
    parameters = this.parseFormalParameterList$0();
    this.validateFormalParameterList$1(parameters);
    body = this.parseFunctionBody$3(true, $.get$ParserErrorCode_MISSING_FUNCTION_BODY(), false);
    if (externalKeyword != null && (typeof body !== "object" || body === null || !$.getInterceptor(body).$isEmptyFunctionBody)) {
      t1 = $.get$ParserErrorCode_EXTERNAL_OPERATOR_WITH_BODY();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    return $.MethodDeclaration$full(commentAndMetadata._liblib14$_comment, commentAndMetadata._liblib14$_metadata, externalKeyword, null, returnType, null, operatorKeyword, $name, parameters, body);
  },
  "+parseOperator:3:0": 0,
  parseOptionalReturnType$0: function() {
    var t1, t2, t3;
    t1 = $.get$Keyword_VOID();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1)
      return this.parseReturnType$0();
    else {
      t1 = this._currentToken;
      t2 = $.get$TokenType_IDENTIFIER();
      t3 = $.getInterceptor$x(t1);
      if (t3.get$type(t1) !== t2) {
        t2 = $.get$TokenType_KEYWORD();
        if (t3.get$type(t1) === t2) {
          $.propertyTypeCast(t1, "$isKeywordToken");
          t1.get$keyword;
          t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1) {
        t1 = $.get$Keyword_GET();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (!t1) {
          t1 = $.get$Keyword_SET();
          t2 = this._currentToken;
          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t2, "$isKeywordToken");
            t2.get$keyword;
            t1 = t2._liblib9$_keyword === t1;
          } else
            t1 = false;
          if (!t1) {
            t1 = $.get$Keyword_OPERATOR();
            t2 = this._currentToken;
            if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
              $.propertyTypeCast(t2, "$isKeywordToken");
              t2.get$keyword;
              t1 = t2._liblib9$_keyword === t1;
            } else
              t1 = false;
            if (!t1) {
              t1 = this._currentToken.get$next();
              t2 = $.get$TokenType_IDENTIFIER();
              t3 = $.getInterceptor$x(t1);
              if (t3.get$type(t1) !== t2) {
                t2 = $.get$TokenType_KEYWORD();
                if (t3.get$type(t1) === t2) {
                  $.propertyTypeCast(t1, "$isKeywordToken");
                  t1.get$keyword;
                  t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                } else
                  t1 = false;
              } else
                t1 = true;
              if (!t1) {
                t1 = this._currentToken.get$next();
                t2 = $.get$TokenType_LT();
                t2 = $.get$type$x(t1) === t2;
                t1 = t2;
              } else
                t1 = true;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      if (t1)
        return this.parseReturnType$0();
      else {
        t1 = this._currentToken;
        t2 = $.get$TokenType_IDENTIFIER();
        t3 = $.getInterceptor$x(t1);
        if (t3.get$type(t1) !== t2) {
          t2 = $.get$TokenType_KEYWORD();
          if (t3.get$type(t1) === t2) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
          } else
            t1 = false;
        } else
          t1 = true;
        if (t1) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_PERIOD();
          if ($.get$type$x(t1) === t2) {
            t1 = this.peek2$1(2);
            t2 = $.get$TokenType_IDENTIFIER();
            t3 = $.getInterceptor$x(t1);
            if (t3.get$type(t1) !== t2) {
              t2 = $.get$TokenType_KEYWORD();
              if (t3.get$type(t1) === t2) {
                $.propertyTypeCast(t1, "$isKeywordToken");
                t1.get$keyword;
                t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
              } else
                t1 = false;
            } else
              t1 = true;
            if (t1) {
              t1 = this.peek2$1(3);
              t2 = $.get$TokenType_IDENTIFIER();
              t3 = $.getInterceptor$x(t1);
              if (t3.get$type(t1) !== t2) {
                t2 = $.get$TokenType_KEYWORD();
                if (t3.get$type(t1) === t2) {
                  $.propertyTypeCast(t1, "$isKeywordToken");
                  t1.get$keyword;
                  t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                } else
                  t1 = false;
              } else
                t1 = true;
              if (!t1) {
                t1 = this.peek2$1(3);
                t2 = $.get$TokenType_LT();
                t2 = $.get$type$x(t1) === t2;
                t1 = t2;
              } else
                t1 = true;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        if (t1)
          return this.parseReturnType$0();
      }
    }
    return;
  },
  "+parseOptionalReturnType:0:0": 0,
  parsePartDirective$1: function(commentAndMetadata) {
    var partKeyword, t1, token, libraryName, semicolon, node, t2, t3, t4, t5, t6, partUri;
    partKeyword = this.expect$1($.get$Keyword_PART());
    t1 = $.Parser__OF;
    if ($.get$type$x(this._currentToken) === $.get$TokenType_IDENTIFIER() && $.$eq(this._currentToken.get$lexeme(), t1)) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      libraryName = this.parseLibraryName$2($.get$ParserErrorCode_MISSING_NAME_IN_PART_OF_DIRECTIVE(), token);
      semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
      node = commentAndMetadata._liblib14$_comment;
      t1 = commentAndMetadata._liblib14$_metadata;
      t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t2;
      t2 = new $.PartOfDirective(null, null, null, null, null, null, null, null, null, t2);
      t3 = $.Annotation;
      t4 = $.List_List($, t3);
      t4.$builtinTypeInfo = [t3];
      t5 = t3;
      t6 = $.List_List($, t5);
      t6.$builtinTypeInfo = [t5];
      t4 = new $.NodeList(t2, t4, t6);
      t4.$builtinTypeInfo = [t3];
      t2._metadata = t4;
      if (node != null)
        node.set$parent(node, t2);
      t2._comment = node;
      t3 = t2._metadata;
      t3.addAll$1(t3, t1);
      t2._partToken = partKeyword;
      t2._ofToken = token;
      libraryName.set$parent(libraryName, t2);
      t2._liblib4$_libraryName = libraryName;
      t2._semicolon = semicolon;
      return t2;
    }
    partUri = this.parseStringLiteral$0();
    semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
    node = commentAndMetadata._liblib14$_comment;
    t1 = commentAndMetadata._liblib14$_metadata;
    t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t2;
    t2 = new $.PartDirective(null, null, null, null, null, null, null, null, t2);
    t3 = $.Annotation;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t5 = t3;
    t6 = $.List_List($, t5);
    t6.$builtinTypeInfo = [t5];
    t4 = new $.NodeList(t2, t4, t6);
    t4.$builtinTypeInfo = [t3];
    t2._metadata = t4;
    if (node != null)
      node.set$parent(node, t2);
    t2._comment = node;
    t3 = t2._metadata;
    t3.addAll$1(t3, t1);
    if (partUri != null)
      $.set$parent$x(partUri, t2);
    t2._uri = partUri;
    t2._partToken = partKeyword;
    t2._semicolon = semicolon;
    return t2;
  },
  "+parsePartDirective:1:0": 0,
  parsePostfixExpression$0: function() {
    var operand, argumentList, t1, node, t2, node0, operand0, t3, t4, t5, token;
    operand = this.parseAssignableExpression$1(true);
    if (this.matches5$1($.get$TokenType_OPEN_SQUARE_BRACKET()) || this.matches5$1($.get$TokenType_PERIOD()) || this.matches5$1($.get$TokenType_OPEN_PAREN())) {
      do
        if (this.matches5$1($.get$TokenType_OPEN_PAREN())) {
          argumentList = this.parseArgumentList$0();
          t1 = $.ASTNode__hashCodeGenerator;
          if (typeof operand === "object" && operand !== null && !!$.getInterceptor(operand).$isPropertyAccess) {
            node = operand._liblib4$_target;
            t2 = operand._operator;
            node0 = operand._propertyName;
            t1 = $.$add$ns(t1, 1);
            $.ASTNode__hashCodeGenerator = t1;
            operand = new $.MethodInvocation(null, null, null, null, null, null, null, null, t1);
            if (node != null)
              $.set$parent$x(node, operand);
            operand._liblib4$_target = node;
            operand._period = t2;
            if (node0 != null)
              $.set$parent$x(node0, operand);
            operand._methodName = node0;
            argumentList.set$parent(argumentList, operand);
            operand._argumentList = argumentList;
          } else {
            t1 = $.$add$ns(t1, 1);
            $.ASTNode__hashCodeGenerator = t1;
            operand0 = new $.FunctionExpressionInvocation(null, null, null, null, null, null, null, null, t1);
            if (operand != null)
              $.set$parent$x(operand, operand0);
            operand0._function = operand;
            argumentList.set$parent(argumentList, operand0);
            operand0._argumentList = argumentList;
            operand = operand0;
          }
        } else
          operand = this.parseAssignableSelector$2(operand, true);
      while (this.matches5$1($.get$TokenType_OPEN_SQUARE_BRACKET()) || this.matches5$1($.get$TokenType_PERIOD()) || this.matches5$1($.get$TokenType_OPEN_PAREN()));
      return operand;
    }
    if ($.get$type$x(this._currentToken).isIncrementOperator$0() !== true)
      return operand;
    if (typeof operand === "object" && operand !== null && !!$.getInterceptor(operand).$isFunctionExpressionInvocation) {
      t1 = $.get$ParserErrorCode_MISSING_ASSIGNABLE_SELECTOR();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    token = this._currentToken;
    this._currentToken = token.get$next();
    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.PostfixExpression(null, null, null, null, null, null, null, null, t1);
    if (operand != null)
      $.set$parent$x(operand, t1);
    t1._operand = operand;
    t1._operator = token;
    return t1;
  },
  "+parsePostfixExpression:0:0": 0,
  parsePrefixedIdentifier$0: function() {
    var qualifier, token, qualified, t1;
    qualifier = this.parseSimpleIdentifier$0();
    if (!this.matches5$1($.get$TokenType_PERIOD()))
      return qualifier;
    token = this._currentToken;
    this._currentToken = token.get$next();
    qualified = this.parseSimpleIdentifier$0();
    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.PrefixedIdentifier(null, null, null, null, null, null, null, t1);
    qualifier.set$parent(qualifier, t1);
    t1._prefix = qualifier;
    t1._period = token;
    qualified.set$parent(qualified, t1);
    t1._identifier = qualified;
    return t1;
  },
  "+parsePrefixedIdentifier:0:0": 0,
  parsePrimaryExpression$0: function() {
    var token, value, token0, value0, token1, value1, t1, t2, exception, t3, constructorName, argumentList, parameters, body, expression, rightParenthesis, question, identifier, t4, t5, t6;
    t1 = $.get$Keyword_THIS();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.ThisExpression(null, null, null, null, null, t1);
      t1._keyword = token;
      return t1;
    } else {
      t1 = $.get$Keyword_SUPER();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1) {
        token = this._currentToken;
        this._currentToken = token.get$next();
        t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.SuperExpression(null, null, null, null, null, t1);
        t1._keyword = token;
        return this.parseAssignableSelector$2(t1, false);
      } else {
        t1 = $.get$Keyword_NULL();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1) {
          token = this._currentToken;
          this._currentToken = token.get$next();
          t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t1;
          t1 = new $.NullLiteral(null, null, null, null, null, t1);
          t1._literal = token;
          return t1;
        } else {
          t1 = $.get$Keyword_FALSE();
          t2 = this._currentToken;
          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t2, "$isKeywordToken");
            t2.get$keyword;
            t1 = t2._liblib9$_keyword === t1;
          } else
            t1 = false;
          if (t1) {
            token = this._currentToken;
            this._currentToken = token.get$next();
            t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
            $.ASTNode__hashCodeGenerator = t1;
            t1 = new $.BooleanLiteral(null, false, null, null, null, null, t1);
            t1._literal = token;
            t1._liblib4$_value = false;
            return t1;
          } else {
            t1 = $.get$Keyword_TRUE();
            t2 = this._currentToken;
            if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
              $.propertyTypeCast(t2, "$isKeywordToken");
              t2.get$keyword;
              t1 = t2._liblib9$_keyword === t1;
            } else
              t1 = false;
            if (t1) {
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
              $.ASTNode__hashCodeGenerator = t1;
              t1 = new $.BooleanLiteral(null, false, null, null, null, null, t1);
              t1._literal = token;
              t1._liblib4$_value = true;
              return t1;
            } else if (this.matches5$1($.get$TokenType_DOUBLE())) {
              token0 = this._currentToken;
              this._currentToken = token0.get$next();
              token = token0;
              value = 0;
              try {
                value0 = $.Primitives_parseDouble(token.get$lexeme(), null);
                value = value0;
              } catch (exception) {
                t1 = $.unwrapException(exception);
                if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFormatException)
                  ;
                else
                  throw exception;
              }

              t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
              $.ASTNode__hashCodeGenerator = t1;
              t1 = new $.DoubleLiteral(null, 0, null, null, null, null, t1);
              t1._literal = token;
              t1._liblib4$_value = value;
              return t1;
            } else if (this.matches5$1($.get$TokenType_HEXADECIMAL())) {
              token = this._currentToken;
              this._currentToken = token.get$next();
              token0 = token;
              value0 = null;
              try {
                value = $.Primitives_parseInt($.substring$1$s(token0.get$lexeme(), 2), 16, null);
                value0 = value;
              } catch (exception) {
                t1 = $.unwrapException(exception);
                if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFormatException)
                  ;
                else
                  throw exception;
              }

              t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
              $.ASTNode__hashCodeGenerator = t1;
              t1 = new $.IntegerLiteral(null, 0, null, null, null, null, t1);
              t1._literal = token0;
              t1._liblib4$_value = value0;
              return t1;
            } else if (this.matches5$1($.get$TokenType_INT())) {
              token = this._currentToken;
              this._currentToken = token.get$next();
              token1 = token;
              value1 = null;
              try {
                value = $.Primitives_parseInt(token1.get$lexeme(), null, null);
                value1 = value;
              } catch (exception) {
                t1 = $.unwrapException(exception);
                if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFormatException)
                  ;
                else
                  throw exception;
              }

              t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
              $.ASTNode__hashCodeGenerator = t1;
              t1 = new $.IntegerLiteral(null, 0, null, null, null, null, t1);
              t1._literal = token1;
              t1._liblib4$_value = value1;
              return t1;
            } else if (this.matches5$1($.get$TokenType_STRING()))
              return this.parseStringLiteral$0();
            else if (this.matches5$1($.get$TokenType_OPEN_CURLY_BRACKET()))
              return this.parseMapLiteral$2(null, null);
            else if (this.matches5$1($.get$TokenType_OPEN_SQUARE_BRACKET()) || this.matches5$1($.get$TokenType_INDEX()))
              return this.parseListLiteral$2(null, null);
            else {
              t1 = this._currentToken;
              t2 = $.get$TokenType_IDENTIFIER();
              t3 = $.getInterceptor$x(t1);
              if (t3.get$type(t1) !== t2) {
                t2 = $.get$TokenType_KEYWORD();
                if (t3.get$type(t1) === t2) {
                  $.propertyTypeCast(t1, "$isKeywordToken");
                  t1.get$keyword;
                  t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                } else
                  t1 = false;
              } else
                t1 = true;
              if (t1)
                return this.parsePrefixedIdentifier$0();
              else {
                t1 = $.get$Keyword_NEW();
                t2 = this._currentToken;
                if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                  $.propertyTypeCast(t2, "$isKeywordToken");
                  t2.get$keyword;
                  t1 = t2._liblib9$_keyword === t1;
                } else
                  t1 = false;
                if (t1) {
                  t1 = this.expect$1($.get$Keyword_NEW());
                  constructorName = this.parseConstructorName$0();
                  argumentList = this.parseArgumentList$0();
                  t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
                  $.ASTNode__hashCodeGenerator = t2;
                  t2 = new $.InstanceCreationExpression(null, null, null, null, null, null, null, null, null, t2);
                  t2._keyword = t1;
                  t2._constructorName = t2.becomeParentOf$1(constructorName);
                  t2._argumentList = t2.becomeParentOf$1(argumentList);
                  return t2;
                } else {
                  t1 = $.get$Keyword_CONST();
                  t2 = this._currentToken;
                  if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                    $.propertyTypeCast(t2, "$isKeywordToken");
                    t2.get$keyword;
                    t1 = t2._liblib9$_keyword === t1;
                  } else
                    t1 = false;
                  if (t1)
                    return this.parseConstExpression$0();
                  else if (this.matches5$1($.get$TokenType_OPEN_PAREN())) {
                    if (this.isFunctionExpression$1(this._currentToken)) {
                      parameters = this.parseFormalParameterList$0();
                      this.validateFormalParameterList$1(parameters);
                      body = this.parseFunctionBody$3(false, $.get$ParserErrorCode_MISSING_FUNCTION_BODY(), true);
                      t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
                      $.ASTNode__hashCodeGenerator = t1;
                      t1 = new $.FunctionExpression(null, null, null, null, null, null, null, t1);
                      parameters.set$parent(parameters, t1);
                      t1._parameters = parameters;
                      if (body != null)
                        body.set$parent(body, t1);
                      t1._body = body;
                      return t1;
                    }
                    token = this._currentToken;
                    this._currentToken = token.get$next();
                    expression = this.parseExpression2$0();
                    rightParenthesis = this.expect2$1($.get$TokenType_CLOSE_PAREN());
                    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
                    $.ASTNode__hashCodeGenerator = t1;
                    t1 = new $.ParenthesizedExpression(null, null, null, null, null, null, null, t1);
                    t1._leftParenthesis = token;
                    if (expression != null)
                      $.set$parent$x(expression, t1);
                    t1._expression = expression;
                    t1._rightParenthesis = rightParenthesis;
                    return t1;
                  } else if (this.matches5$1($.get$TokenType_LT()))
                    return this.parseListOrMapLiteral$1(null);
                  else if (this.matches5$1($.get$TokenType_QUESTION())) {
                    question = this.expect2$1($.get$TokenType_QUESTION());
                    identifier = this.parseSimpleIdentifier$0();
                    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
                    $.ASTNode__hashCodeGenerator = t1;
                    t1 = new $.ArgumentDefinitionTest(null, null, null, null, null, null, t1);
                    t1._question = question;
                    identifier.set$parent(identifier, t1);
                    t1._identifier = identifier;
                    return t1;
                  } else {
                    t1 = $.get$Keyword_VOID();
                    t2 = this._currentToken;
                    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                      $.propertyTypeCast(t2, "$isKeywordToken");
                      t2.get$keyword;
                      t1 = t2._liblib9$_keyword === t1;
                    } else
                      t1 = false;
                    if (t1) {
                      t1 = $.get$ParserErrorCode_UNEXPECTED_TOKEN();
                      t2 = this._currentToken.get$lexeme();
                      t3 = this._currentToken;
                      t4 = this._errorListener;
                      t5 = $.getInterceptor$x(t3);
                      t6 = new $.AnalysisError(null, null, null, 0, 0);
                      t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
                      t4.onError$1(t4, t6);
                      this._currentToken = this._currentToken.get$next();
                      return this.parsePrimaryExpression$0();
                    } else {
                      t1 = $.get$ParserErrorCode_MISSING_IDENTIFIER();
                      t2 = this._currentToken;
                      t3 = this._errorListener;
                      t4 = $.getInterceptor$x(t2);
                      t5 = new $.AnalysisError(null, null, null, 0, 0);
                      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                      t3.onError$1(t3, t5);
                      t5 = $.get$TokenType_IDENTIFIER();
                      t3 = $.get$offset$x(this._currentToken);
                      t1 = new $.StringToken(null, null, 0, null, null);
                      t1._liblib9$_type = t5;
                      t1._liblib9$_offset = t3;
                      t1._value2 = $.StringUtilities_intern("");
                      t3 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
                      $.ASTNode__hashCodeGenerator = t3;
                      t3 = new $.SimpleIdentifier(null, null, null, null, null, null, null, t3);
                      t3._liblib4$_token = t1;
                      return t3;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "+parsePrimaryExpression:0:0": 0,
  parseRedirectingConstructorInvocation$0: function() {
    var keyword, token, constructorName, period, argumentList, t1;
    keyword = this.expect$1($.get$Keyword_THIS());
    if (this.matches5$1($.get$TokenType_PERIOD())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      constructorName = this.parseSimpleIdentifier$0();
      period = token;
    } else {
      period = null;
      constructorName = null;
    }
    argumentList = this.parseArgumentList$0();
    t1 = $.ASTNode__hashCodeGenerator;
    if (typeof t1 !== "number")
      return this.parseRedirectingConstructorInvocation$0$bailout(1, period, constructorName, argumentList, t1, keyword);
    ++t1;
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.RedirectingConstructorInvocation(null, null, null, null, null, null, null, null, t1);
    t1._keyword = keyword;
    t1._period = period;
    if (constructorName != null)
      constructorName.set$parent(constructorName, t1);
    t1._constructorName = constructorName;
    argumentList.set$parent(argumentList, t1);
    t1._argumentList = argumentList;
    return t1;
  },
  "+parseRedirectingConstructorInvocation:0:0": 0,
  parseRedirectingConstructorInvocation$0$bailout: function(state0, period, constructorName, argumentList, t1, keyword) {
    t1 = $.$add$ns(t1, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.RedirectingConstructorInvocation(null, null, null, null, null, null, null, null, t1);
    t1._keyword = keyword;
    t1._period = period;
    if (constructorName != null)
      constructorName.set$parent(constructorName, t1);
    t1._constructorName = constructorName;
    argumentList.set$parent(argumentList, t1);
    t1._argumentList = argumentList;
    return t1;
  },
  parseRelationalExpression$0: function() {
    var t1, t2, token, expression, node, expression0, token0, notOperator;
    t1 = $.get$Keyword_SUPER();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1 && $.get$type$x(this._currentToken.get$next()).isRelationalOperator$0() === true) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseRelationalExpression$0$bailout(1, t1, token);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression = new $.SuperExpression(null, null, null, null, null, t1);
      expression._keyword = token;
      token = this._currentToken;
      this._currentToken = token.get$next();
      node = this.parseShiftExpression$0();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseRelationalExpression$0$bailout(2, t1, token, node, expression);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
      expression.set$parent(expression, expression0);
      expression0._leftOperand = expression;
      expression0._operator = token;
      if (node != null)
        $.set$parent$x(node, expression0);
      expression0._rightOperand = node;
      return expression0;
    }
    expression = this.parseShiftExpression$0();
    t1 = $.get$Keyword_AS();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      node = this.parseTypeName$0();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseRelationalExpression$0$bailout(3, t1, token, node, expression);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      expression0 = new $.AsExpression(null, null, null, null, null, null, null, t1);
      if (expression != null)
        $.set$parent$x(expression, expression0);
      expression0._expression = expression;
      expression0._asOperator = token;
      node.set$parent(node, expression0);
      expression0._liblib4$_type = node;
      expression = expression0;
    } else {
      t1 = $.get$Keyword_IS();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1) {
        token = this._currentToken;
        this._currentToken = token.get$next();
        if (this.matches5$1($.get$TokenType_BANG())) {
          token0 = this._currentToken;
          this._currentToken = token0.get$next();
          notOperator = token0;
        } else
          notOperator = null;
        node = this.parseTypeName$0();
        t1 = $.ASTNode__hashCodeGenerator;
        if (typeof t1 !== "number")
          return this.parseRelationalExpression$0$bailout(4, t1, token, node, expression, notOperator);
        ++t1;
        $.ASTNode__hashCodeGenerator = t1;
        expression0 = new $.IsExpression(null, null, null, null, null, null, null, null, t1);
        if (expression != null)
          $.set$parent$x(expression, expression0);
        expression0._expression = expression;
        expression0._isOperator = token;
        expression0._notOperator = notOperator;
        node.set$parent(node, expression0);
        expression0._liblib4$_type = node;
        expression = expression0;
      } else if ($.get$type$x(this._currentToken).isRelationalOperator$0() === true) {
        token = this._currentToken;
        this._currentToken = token.get$next();
        node = this.parseShiftExpression$0();
        t1 = $.ASTNode__hashCodeGenerator;
        if (typeof t1 !== "number")
          return this.parseRelationalExpression$0$bailout(5, t1, token, node, expression);
        ++t1;
        $.ASTNode__hashCodeGenerator = t1;
        expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
        if (expression != null)
          $.set$parent$x(expression, expression0);
        expression0._leftOperand = expression;
        expression0._operator = token;
        if (node != null)
          $.set$parent$x(node, expression0);
        expression0._rightOperand = node;
        expression = expression0;
      }
    }
    return expression;
  },
  "+parseRelationalExpression:0:0": 0,
  parseRelationalExpression$0$bailout: function(state0, t1, token, node, expression, notOperator) {
    switch (state0) {
      case 0:
        t1 = $.get$Keyword_SUPER();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
      default:
        if (state0 === 2 || state0 === 1 || state0 === 0 && t1 && $.get$type$x(this._currentToken.get$next()).isRelationalOperator$0() === true)
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              expression = new $.SuperExpression(null, null, null, null, null, t1);
              expression._keyword = token;
              token = this._currentToken;
              this._currentToken = token.get$next();
              node = this.parseShiftExpression$0();
              t1 = $.ASTNode__hashCodeGenerator;
            case 2:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
              expression.set$parent(expression, expression0);
              expression0._leftOperand = expression;
              expression0._operator = token;
              if (node != null)
                $.set$parent$x(node, expression0);
              expression0._rightOperand = node;
              return expression0;
          }
        expression = this.parseShiftExpression$0();
        t1 = $.get$Keyword_AS();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
      case 3:
      case 4:
      case 5:
        var t2, expression0, token0;
        if (state0 === 3 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              node = this.parseTypeName$0();
              t1 = $.ASTNode__hashCodeGenerator;
            case 3:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              expression0 = new $.AsExpression(null, null, null, null, null, null, null, t1);
              if (expression != null)
                $.set$parent$x(expression, expression0);
              expression0._expression = expression;
              expression0._asOperator = token;
              node.set$parent(node, expression0);
              expression0._liblib4$_type = node;
              expression = expression0;
          }
        else
          switch (state0) {
            case 0:
              t1 = $.get$Keyword_IS();
              t2 = this._currentToken;
              if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t2, "$isKeywordToken");
                t2.get$keyword;
                t1 = t2._liblib9$_keyword === t1;
              } else
                t1 = false;
            default:
              if (state0 === 4 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    token = this._currentToken;
                    this._currentToken = token.get$next();
                    if (this.matches5$1($.get$TokenType_BANG())) {
                      token0 = this._currentToken;
                      this._currentToken = token0.get$next();
                      notOperator = token0;
                    } else
                      notOperator = null;
                    node = this.parseTypeName$0();
                    t1 = $.ASTNode__hashCodeGenerator;
                  case 4:
                    state0 = 0;
                    t1 = $.$add$ns(t1, 1);
                    $.ASTNode__hashCodeGenerator = t1;
                    expression0 = new $.IsExpression(null, null, null, null, null, null, null, null, t1);
                    if (expression != null)
                      $.set$parent$x(expression, expression0);
                    expression0._expression = expression;
                    expression0._isOperator = token;
                    expression0._notOperator = notOperator;
                    node.set$parent(node, expression0);
                    expression0._liblib4$_type = node;
                    expression = expression0;
                }
              else
                switch (state0) {
                  case 0:
                  case 5:
                    if (state0 === 5 || state0 === 0 && $.get$type$x(this._currentToken).isRelationalOperator$0() === true)
                      switch (state0) {
                        case 0:
                          token = this._currentToken;
                          this._currentToken = token.get$next();
                          node = this.parseShiftExpression$0();
                          t1 = $.ASTNode__hashCodeGenerator;
                        case 5:
                          state0 = 0;
                          t1 = $.$add$ns(t1, 1);
                          $.ASTNode__hashCodeGenerator = t1;
                          expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
                          if (expression != null)
                            $.set$parent$x(expression, expression0);
                          expression0._leftOperand = expression;
                          expression0._operator = token;
                          if (node != null)
                            $.set$parent$x(node, expression0);
                          expression0._rightOperand = node;
                          expression = expression0;
                      }
                }
          }
        return expression;
    }
  },
  parseReturnStatement$0: function() {
    var returnKeyword, token, t1, expression, semicolon;
    returnKeyword = this.expect$1($.get$Keyword_RETURN());
    if (this.matches5$1($.get$TokenType_SEMICOLON())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.ReturnStatement(null, null, null, null, null, t1);
      t1._keyword = returnKeyword;
      t1._expression = null;
      t1._semicolon = token;
      return t1;
    }
    expression = this.parseExpression2$0();
    semicolon = this.expect2$1($.get$TokenType_SEMICOLON());
    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.ReturnStatement(null, null, null, null, null, t1);
    t1._keyword = returnKeyword;
    if (expression != null)
      $.set$parent$x(expression, t1);
    t1._expression = expression;
    t1._semicolon = semicolon;
    return t1;
  },
  "+parseReturnStatement:0:0": 0,
  parseReturnType$0: function() {
    var t1, t2, token, node;
    t1 = $.get$Keyword_VOID();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t1;
      node = new $.SimpleIdentifier(null, null, null, null, null, null, null, t1);
      node._liblib4$_token = token;
      t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.TypeName(null, null, null, null, null, t1);
      node.set$parent(node, t1);
      t1._liblib4$_name = node;
      t1._typeArguments = null;
      return t1;
    } else
      return this.parseTypeName$0();
  },
  "+parseReturnType:0:0": 0,
  parseSetter$4: function(commentAndMetadata, externalKeyword, staticKeyword, returnType) {
    var propertyKeyword, $name, parameters, t1, t2, body, t3, t4, t5;
    propertyKeyword = this.expect$1($.get$Keyword_SET());
    $name = this.parseSimpleIdentifier$0();
    parameters = this.parseFormalParameterList$0();
    this.validateFormalParameterList$1(parameters);
    t1 = externalKeyword == null;
    t2 = !t1 || staticKeyword == null;
    body = this.parseFunctionBody$3(t2, $.get$ParserErrorCode_STATIC_SETTER_WITHOUT_BODY(), false);
    if (!t1 && (typeof body !== "object" || body === null || !$.getInterceptor(body).$isEmptyFunctionBody)) {
      t1 = $.get$ParserErrorCode_EXTERNAL_SETTER_WITH_BODY();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    return $.MethodDeclaration$full(commentAndMetadata._liblib14$_comment, commentAndMetadata._liblib14$_metadata, externalKeyword, staticKeyword, returnType, propertyKeyword, null, $name, parameters, body);
  },
  "+parseSetter:4:0": 0,
  parseShiftExpression$0: function() {
    var t1, t2, token, expression, node, expression0;
    t1 = $.get$Keyword_SUPER();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1 && $.get$type$x(this._currentToken.get$next()).isShiftOperator$0() === true) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t1;
      expression = new $.SuperExpression(null, null, null, null, null, t1);
      expression._keyword = token;
    } else
      expression = this.parseAdditiveExpression$0();
    for (; $.get$type$x(this._currentToken).isShiftOperator$0() === true; expression = expression0) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      node = this.parseAdditiveExpression$0();
      t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t1;
      expression0 = new $.BinaryExpression(null, null, null, null, null, null, null, null, null, t1);
      if (expression != null)
        $.set$parent$x(expression, expression0);
      expression0._leftOperand = expression;
      expression0._operator = token;
      if (node != null)
        $.set$parent$x(node, expression0);
      expression0._rightOperand = node;
    }
    return expression;
  },
  "+parseShiftExpression:0:0": 0,
  parseSimpleIdentifier$0: function() {
    var t1, t2, t3, token, t4, t5;
    t1 = this._currentToken;
    t2 = $.get$TokenType_IDENTIFIER();
    t3 = $.getInterceptor$x(t1);
    if (t3.get$type(t1) !== t2) {
      t2 = $.get$TokenType_KEYWORD();
      if (t3.get$type(t1) === t2) {
        $.propertyTypeCast(t1, "$isKeywordToken");
        t1.get$keyword;
        t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
      } else
        t1 = false;
    } else
      t1 = true;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseSimpleIdentifier$0$bailout(1, t1, token);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.SimpleIdentifier(null, null, null, null, null, null, null, t1);
      t1._liblib4$_token = token;
      return t1;
    }
    t1 = $.get$ParserErrorCode_MISSING_IDENTIFIER();
    t2 = this._currentToken;
    t3 = this._errorListener;
    t4 = $.getInterceptor$x(t2);
    t5 = new $.AnalysisError(null, null, null, 0, 0);
    t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
    t3.onError$1(t3, t5);
    t5 = $.get$TokenType_IDENTIFIER();
    t3 = $.get$offset$x(this._currentToken);
    t1 = new $.StringToken(null, null, 0, null, null);
    t1._liblib9$_type = t5;
    t1._liblib9$_offset = t3;
    t1._value2 = $.StringUtilities_intern("");
    t3 = $.ASTNode__hashCodeGenerator;
    if (typeof t3 !== "number")
      return this.parseSimpleIdentifier$0$bailout(2, t1, 0, t3);
    ++t3;
    $.ASTNode__hashCodeGenerator = t3;
    t3 = new $.SimpleIdentifier(null, null, null, null, null, null, null, t3);
    t3._liblib4$_token = t1;
    return t3;
  },
  "+parseSimpleIdentifier:0:0": 0,
  parseSimpleIdentifier$0$bailout: function(state0, t1, token, t3) {
    switch (state0) {
      case 0:
        t1 = this._currentToken;
        t2 = $.get$TokenType_IDENTIFIER();
        t3 = $.getInterceptor$x(t1);
        if (t3.get$type(t1) !== t2) {
          t2 = $.get$TokenType_KEYWORD();
          if (t3.get$type(t1) === t2) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
          } else
            t1 = false;
        } else
          t1 = true;
      case 1:
        if (state0 === 1 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              t1 = new $.SimpleIdentifier(null, null, null, null, null, null, null, t1);
              t1._liblib4$_token = token;
              return t1;
          }
        t1 = $.get$ParserErrorCode_MISSING_IDENTIFIER();
        t2 = this._currentToken;
        t3 = this._errorListener;
        t4 = $.getInterceptor$x(t2);
        t5 = new $.AnalysisError(null, null, null, 0, 0);
        t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
        t3.onError$1(t3, t5);
        t5 = $.get$TokenType_IDENTIFIER();
        t3 = $.get$offset$x(this._currentToken);
        t1 = new $.StringToken(null, null, 0, null, null);
        t1._liblib9$_type = t5;
        t1._liblib9$_offset = t3;
        t1._value2 = $.StringUtilities_intern("");
        t3 = $.ASTNode__hashCodeGenerator;
      case 2:
        var t2, t4, t5;
        state0 = 0;
        t3 = $.$add$ns(t3, 1);
        $.ASTNode__hashCodeGenerator = t3;
        t3 = new $.SimpleIdentifier(null, null, null, null, null, null, null, t3);
        t3._liblib4$_token = t1;
        return t3;
    }
  },
  parseStatement2$0: function() {
    var labels, t1, t2, t3, label, colon, statement, t4, t5;
    labels = $.List_List($, $.Label);
    labels.$builtinTypeInfo = [$.Label];
    while (true) {
      t1 = this._currentToken;
      t2 = $.get$TokenType_IDENTIFIER();
      t3 = $.getInterceptor$x(t1);
      if (t3.get$type(t1) !== t2) {
        t2 = $.get$TokenType_KEYWORD();
        if (t3.get$type(t1) === t2) {
          $.propertyTypeCast(t1, "$isKeywordToken");
          t1.get$keyword;
          t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1) {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_COLON();
        t2 = $.get$type$x(t1) === t2;
        t1 = t2;
      } else
        t1 = false;
      if (!t1)
        break;
      label = this.parseSimpleIdentifier$0();
      colon = this.expect2$1($.get$TokenType_COLON());
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseStatement2$0$bailout(1, t1, labels, label, colon);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.Label(null, null, null, null, t1);
      label.set$parent(label, t1);
      t1._label = label;
      t1._colon = colon;
      labels.push(t1);
    }
    statement = this.parseNonLabeledStatement$0();
    if (labels.length === 0)
      return statement;
    t1 = $.ASTNode__hashCodeGenerator;
    if (typeof t1 !== "number")
      return this.parseStatement2$0$bailout(2, t1, labels, 0, 0, statement);
    ++t1;
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.LabeledStatement(null, null, null, null, t1);
    t2 = $.Label;
    t3 = $.List_List($, t2);
    t3.$builtinTypeInfo = [t2];
    t4 = t2;
    t5 = $.List_List($, t4);
    t5.$builtinTypeInfo = [t4];
    t3 = new $.NodeList(t1, t3, t5);
    t3.$builtinTypeInfo = [t2];
    t1._labels = t3;
    t2 = t1._labels;
    t2.addAll$1(t2, labels);
    if (statement != null)
      statement.set$parent(statement, t1);
    t1._statement = statement;
    return t1;
  },
  "+parseStatement2:0:0": 0,
  parseStatement2$0$bailout: function(state0, t1, labels, label, colon, statement) {
    switch (state0) {
      case 0:
        labels = $.List_List($, $.Label);
        labels.$builtinTypeInfo = [$.Label];
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this._currentToken;
                t2 = $.get$TokenType_IDENTIFIER();
                t3 = $.getInterceptor$x(t1);
                if (t3.get$type(t1) !== t2) {
                  t2 = $.get$TokenType_KEYWORD();
                  if (t3.get$type(t1) === t2) {
                    $.propertyTypeCast(t1, "$isKeywordToken");
                    t1.get$keyword;
                    t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                  } else
                    t1 = false;
                } else
                  t1 = true;
                if (t1) {
                  t1 = this._currentToken.get$next();
                  t2 = $.get$TokenType_COLON();
                  t2 = $.get$type$x(t1) === t2;
                  t1 = t2;
                } else
                  t1 = false;
                if (!t1)
                  break L0;
                label = this.parseSimpleIdentifier$0();
                colon = this.expect2$1($.get$TokenType_COLON());
                t1 = $.ASTNode__hashCodeGenerator;
              case 1:
                state0 = 0;
                t1 = $.$add$ns(t1, 1);
                $.ASTNode__hashCodeGenerator = t1;
                t1 = new $.Label(null, null, null, null, t1);
                label.set$parent(label, t1);
                t1._label = label;
                t1._colon = colon;
                labels.push(t1);
            }
        statement = this.parseNonLabeledStatement$0();
        if (labels.length === 0)
          return statement;
        t1 = $.ASTNode__hashCodeGenerator;
      case 2:
        var t2, t3, t4, t5;
        state0 = 0;
        t1 = $.$add$ns(t1, 1);
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.LabeledStatement(null, null, null, null, t1);
        t2 = $.Label;
        t3 = $.List_List($, t2);
        t3.$builtinTypeInfo = [t2];
        t4 = t2;
        t5 = $.List_List($, t4);
        t5.$builtinTypeInfo = [t4];
        t3 = new $.NodeList(t1, t3, t5);
        t3.$builtinTypeInfo = [t2];
        t1._labels = t3;
        t2 = t1._labels;
        t2.addAll$1(t2, labels);
        if (statement != null)
          statement.set$parent(statement, t1);
        t1._statement = statement;
        return t1;
    }
  },
  parseStatements2$0: function() {
    var statements, statementStart, t1, t2, t3, t4, t5, t6;
    statements = $.List_List($, $.Statement);
    statements.$builtinTypeInfo = [$.Statement];
    statementStart = this._currentToken;
    while (true) {
      if (!(!this.matches5$1($.get$TokenType_EOF()) && !this.matches5$1($.get$TokenType_CLOSE_CURLY_BRACKET()) && !this.isSwitchMember$0()))
        break;
      statements.push(this.parseStatement2$0());
      t1 = this._currentToken;
      if (t1 == null ? statementStart == null : t1 === statementStart) {
        t1 = $.get$ParserErrorCode_UNEXPECTED_TOKEN();
        t2 = this._currentToken;
        t3 = t2.get$lexeme();
        t4 = this._errorListener;
        t5 = $.getInterceptor$x(t2);
        t6 = new $.AnalysisError(null, null, null, 0, 0);
        t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t2), t5.get$length(t2), t1, [t3]);
        t4.onError$1(t4, t6);
        this._currentToken = this._currentToken.get$next();
      }
      statementStart = this._currentToken;
    }
    return statements;
  },
  "+parseStatements2:0:0": 0,
  parseStringInterpolation$1: function(string) {
    var elements, t1, t2, token, expression, rightBracket, token0, t3, t4, t5;
    elements = $.List_List($, $.InterpolationElement);
    elements.$builtinTypeInfo = [$.InterpolationElement];
    t1 = this.computeStringValue$1(string.get$lexeme());
    t2 = $.ASTNode__hashCodeGenerator;
    if (typeof t2 !== "number")
      return this.parseStringInterpolation$1$bailout(1, string, t1, elements, t2);
    ++t2;
    $.ASTNode__hashCodeGenerator = t2;
    t2 = new $.InterpolationString(null, null, null, null, t2);
    t2._liblib4$_contents = string;
    t2._liblib4$_value = t1;
    elements.push(t2);
    while (true) {
      if (!(this.matches5$1($.get$TokenType_STRING_INTERPOLATION_EXPRESSION()) || this.matches5$1($.get$TokenType_STRING_INTERPOLATION_IDENTIFIER())))
        break;
      t1 = this.matches5$1($.get$TokenType_STRING_INTERPOLATION_EXPRESSION());
      token = this._currentToken;
      if (t1) {
        this._currentToken = token.get$next();
        expression = this.parseExpression2$0();
        rightBracket = this.expect2$1($.get$TokenType_CLOSE_CURLY_BRACKET());
        t1 = $.ASTNode__hashCodeGenerator;
        if (typeof t1 !== "number")
          return this.parseStringInterpolation$1$bailout(2, string, t1, elements, 0, expression, token, rightBracket);
        ++t1;
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.InterpolationExpression(null, null, null, null, null, t1);
        t1._leftBracket = token;
        if (expression != null)
          $.set$parent$x(expression, t1);
        t1._expression = expression;
        t1._rightBracket = rightBracket;
        elements.push(t1);
      } else {
        this._currentToken = token.get$next();
        t1 = $.get$Keyword_THIS();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
        if (t1) {
          token0 = this._currentToken;
          this._currentToken = token0.get$next();
          t1 = $.ASTNode__hashCodeGenerator;
          if (typeof t1 !== "number")
            return this.parseStringInterpolation$1$bailout(3, string, t1, elements, 0, 0, token, 0, token0);
          ++t1;
          $.ASTNode__hashCodeGenerator = t1;
          expression = new $.ThisExpression(null, null, null, null, null, t1);
          expression._keyword = token0;
        } else
          expression = this.parseSimpleIdentifier$0();
        t1 = $.ASTNode__hashCodeGenerator;
        if (typeof t1 !== "number")
          return this.parseStringInterpolation$1$bailout(4, string, t1, elements, 0, expression, token);
        ++t1;
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.InterpolationExpression(null, null, null, null, null, t1);
        t1._leftBracket = token;
        expression.set$parent(expression, t1);
        t1._expression = expression;
        t1._rightBracket = null;
        elements.push(t1);
      }
      if (this.matches5$1($.get$TokenType_STRING())) {
        token = this._currentToken;
        this._currentToken = token.get$next();
        t1 = this.computeStringValue$1(token.get$lexeme());
        t2 = $.ASTNode__hashCodeGenerator;
        if (typeof t2 !== "number")
          return this.parseStringInterpolation$1$bailout(5, 0, t1, elements, t2, 0, token);
        ++t2;
        $.ASTNode__hashCodeGenerator = t2;
        t2 = new $.InterpolationString(null, null, null, null, t2);
        t2._liblib4$_contents = token;
        t2._liblib4$_value = t1;
        elements.push(t2);
        string = token;
      }
    }
    t1 = $.ASTNode__hashCodeGenerator;
    if (typeof t1 !== "number")
      return this.parseStringInterpolation$1$bailout(6, 0, t1, elements);
    ++t1;
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.StringInterpolation(null, null, null, null, null, t1);
    t2 = $.InterpolationElement;
    t3 = $.List_List($, t2);
    t3.$builtinTypeInfo = [t2];
    t4 = t2;
    t5 = $.List_List($, t4);
    t5.$builtinTypeInfo = [t4];
    t3 = new $.NodeList(t1, t3, t5);
    t3.$builtinTypeInfo = [t2];
    t1._liblib4$_elements = t3;
    t2 = t1._liblib4$_elements;
    t2.addAll$1(t2, elements);
    return t1;
  },
  "+parseStringInterpolation:1:0": 0,
  parseStringInterpolation$1$bailout: function(state0, string, t1, elements, t2, expression, token, rightBracket, token0) {
    switch (state0) {
      case 0:
        elements = $.List_List($, $.InterpolationElement);
        elements.$builtinTypeInfo = [$.InterpolationElement];
        t1 = this.computeStringValue$1(string.get$lexeme());
        t2 = $.ASTNode__hashCodeGenerator;
      case 1:
        state0 = 0;
        t2 = $.$add$ns(t2, 1);
        $.ASTNode__hashCodeGenerator = t2;
        t2 = new $.InterpolationString(null, null, null, null, t2);
        t2._liblib4$_contents = string;
        t2._liblib4$_value = t1;
        elements.push(t2);
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(this.matches5$1($.get$TokenType_STRING_INTERPOLATION_EXPRESSION()) || this.matches5$1($.get$TokenType_STRING_INTERPOLATION_IDENTIFIER())))
                  break L0;
                t1 = this.matches5$1($.get$TokenType_STRING_INTERPOLATION_EXPRESSION());
                token = this._currentToken;
              default:
                if (state0 === 2 || state0 === 0 && t1)
                  switch (state0) {
                    case 0:
                      this._currentToken = token.get$next();
                      expression = this.parseExpression2$0();
                      rightBracket = this.expect2$1($.get$TokenType_CLOSE_CURLY_BRACKET());
                      t1 = $.ASTNode__hashCodeGenerator;
                    case 2:
                      state0 = 0;
                      t1 = $.$add$ns(t1, 1);
                      $.ASTNode__hashCodeGenerator = t1;
                      t1 = new $.InterpolationExpression(null, null, null, null, null, t1);
                      t1._leftBracket = token;
                      if (expression != null)
                        $.set$parent$x(expression, t1);
                      t1._expression = expression;
                      t1._rightBracket = rightBracket;
                      elements.push(t1);
                  }
                else
                  switch (state0) {
                    case 0:
                      this._currentToken = token.get$next();
                      t1 = $.get$Keyword_THIS();
                      t2 = this._currentToken;
                      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                        $.propertyTypeCast(t2, "$isKeywordToken");
                        t2.get$keyword;
                        t1 = t2._liblib9$_keyword === t1;
                      } else
                        t1 = false;
                    case 3:
                      if (state0 === 3 || state0 === 0 && t1)
                        switch (state0) {
                          case 0:
                            token0 = this._currentToken;
                            this._currentToken = token0.get$next();
                            t1 = $.ASTNode__hashCodeGenerator;
                          case 3:
                            state0 = 0;
                            t1 = $.$add$ns(t1, 1);
                            $.ASTNode__hashCodeGenerator = t1;
                            expression = new $.ThisExpression(null, null, null, null, null, t1);
                            expression._keyword = token0;
                        }
                      else
                        expression = this.parseSimpleIdentifier$0();
                      t1 = $.ASTNode__hashCodeGenerator;
                    case 4:
                      state0 = 0;
                      t1 = $.$add$ns(t1, 1);
                      $.ASTNode__hashCodeGenerator = t1;
                      t1 = new $.InterpolationExpression(null, null, null, null, null, t1);
                      t1._leftBracket = token;
                      expression.set$parent(expression, t1);
                      t1._expression = expression;
                      t1._rightBracket = null;
                      elements.push(t1);
                  }
              case 5:
                if (state0 === 5 || state0 === 0 && this.matches5$1($.get$TokenType_STRING()))
                  switch (state0) {
                    case 0:
                      token = this._currentToken;
                      this._currentToken = token.get$next();
                      t1 = this.computeStringValue$1(token.get$lexeme());
                      t2 = $.ASTNode__hashCodeGenerator;
                    case 5:
                      state0 = 0;
                      t2 = $.$add$ns(t2, 1);
                      $.ASTNode__hashCodeGenerator = t2;
                      t2 = new $.InterpolationString(null, null, null, null, t2);
                      t2._liblib4$_contents = token;
                      t2._liblib4$_value = t1;
                      elements.push(t2);
                      string = token;
                  }
            }
        t1 = $.ASTNode__hashCodeGenerator;
      case 6:
        var t3, t4, t5;
        state0 = 0;
        t1 = $.$add$ns(t1, 1);
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.StringInterpolation(null, null, null, null, null, t1);
        t2 = $.InterpolationElement;
        t3 = $.List_List($, t2);
        t3.$builtinTypeInfo = [t2];
        t4 = t2;
        t5 = $.List_List($, t4);
        t5.$builtinTypeInfo = [t4];
        t3 = new $.NodeList(t1, t3, t5);
        t3.$builtinTypeInfo = [t2];
        t1._liblib4$_elements = t3;
        t2 = t1._liblib4$_elements;
        t2.addAll$1(t2, elements);
        return t1;
    }
  },
  parseStringLiteral$0: function() {
    var strings, token, t1, t2, t3, t4, t5;
    strings = $.List_List($, $.StringLiteral);
    strings.$builtinTypeInfo = [$.StringLiteral];
    for (; this.matches5$1($.get$TokenType_STRING());) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      if (this.matches5$1($.get$TokenType_STRING_INTERPOLATION_EXPRESSION()) || this.matches5$1($.get$TokenType_STRING_INTERPOLATION_IDENTIFIER()))
        strings.push(this.parseStringInterpolation$1(token));
      else {
        t1 = this.computeStringValue$1(token.get$lexeme());
        t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
        $.ASTNode__hashCodeGenerator = t2;
        t2 = new $.SimpleStringLiteral(null, null, null, null, null, null, t2);
        t2._literal = token;
        t2._liblib4$_value = t1;
        strings.push(t2);
      }
    }
    t1 = strings.length;
    if (t1 < 1) {
      t1 = $.get$ParserErrorCode_EXPECTED_STRING_LITERAL();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
      t5 = $.get$TokenType_STRING();
      t3 = $.get$offset$x(this._currentToken);
      t1 = new $.StringToken(null, null, 0, null, null);
      t1._liblib9$_type = t5;
      t1._liblib9$_offset = t3;
      t1._value2 = $.StringUtilities_intern("");
      t3 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t3;
      t3 = new $.SimpleStringLiteral(null, null, null, null, null, null, t3);
      t3._literal = t1;
      t3._liblib4$_value = "";
      return t3;
    } else if (t1 === 1)
      return strings[0];
    else {
      t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.AdjacentStrings(null, null, null, null, null, t1);
      t2 = $.StringLiteral;
      t3 = $.List_List($, t2);
      t3.$builtinTypeInfo = [t2];
      t4 = t2;
      t5 = $.List_List($, t4);
      t5.$builtinTypeInfo = [t4];
      t3 = new $.NodeList(t1, t3, t5);
      t3.$builtinTypeInfo = [t2];
      t1._liblib4$_strings = t3;
      t2 = t1._liblib4$_strings;
      t2.addAll$1(t2, strings);
      return t1;
    }
  },
  "+parseStringLiteral:0:0": 0,
  parseSuperConstructorInvocation$0: function() {
    var keyword, token, constructorName, period, argumentList, t1;
    keyword = this.expect$1($.get$Keyword_SUPER());
    if (this.matches5$1($.get$TokenType_PERIOD())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      constructorName = this.parseSimpleIdentifier$0();
      period = token;
    } else {
      period = null;
      constructorName = null;
    }
    argumentList = this.parseArgumentList$0();
    t1 = $.ASTNode__hashCodeGenerator;
    if (typeof t1 !== "number")
      return this.parseSuperConstructorInvocation$0$bailout(1, period, constructorName, argumentList, t1, keyword);
    ++t1;
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.SuperConstructorInvocation(null, null, null, null, null, null, null, null, t1);
    t1._keyword = keyword;
    t1._period = period;
    if (constructorName != null)
      constructorName.set$parent(constructorName, t1);
    t1._constructorName = constructorName;
    argumentList.set$parent(argumentList, t1);
    t1._argumentList = argumentList;
    return t1;
  },
  "+parseSuperConstructorInvocation:0:0": 0,
  parseSuperConstructorInvocation$0$bailout: function(state0, period, constructorName, argumentList, t1, keyword) {
    t1 = $.$add$ns(t1, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.SuperConstructorInvocation(null, null, null, null, null, null, null, null, t1);
    t1._keyword = keyword;
    t1._period = period;
    if (constructorName != null)
      constructorName.set$parent(constructorName, t1);
    t1._constructorName = constructorName;
    argumentList.set$parent(argumentList, t1);
    t1._argumentList = argumentList;
    return t1;
  },
  parseSwitchStatement$0: function() {
    var wasInSwitch, definedLabels, keyword, leftParenthesis, expression, rightParenthesis, leftBracket, defaultKeyword, members, labels, identifier, label, colon, caseKeyword, caseExpression, colon0, colon1, rightBracket, definedLabels0, members0, labels0, t1, t2, t3, t4, t5, node, token;
    wasInSwitch = this._inSwitch;
    this._inSwitch = true;
    try {
      definedLabels0 = new $.HashSet(0, null, null, null, null);
      definedLabels0.$builtinTypeInfo = [$.JSString];
      definedLabels = definedLabels0;
      keyword = this.expect$1($.get$Keyword_SWITCH());
      leftParenthesis = this.expect2$1($.get$TokenType_OPEN_PAREN());
      expression = this.parseExpression2$0();
      rightParenthesis = this.expect2$1($.get$TokenType_CLOSE_PAREN());
      leftBracket = this.expect2$1($.get$TokenType_OPEN_CURLY_BRACKET());
      defaultKeyword = null;
      members0 = $.List_List($, $.SwitchMember);
      members0.$builtinTypeInfo = [$.SwitchMember];
      members = members0;
      while (true) {
        if (!(!this.matches5$1($.get$TokenType_EOF()) && !this.matches5$1($.get$TokenType_CLOSE_CURLY_BRACKET())))
          break;
        labels0 = $.List_List($, $.Label);
        labels0.$builtinTypeInfo = [$.Label];
        labels = labels0;
        while (true) {
          t1 = this._currentToken;
          t2 = $.get$TokenType_IDENTIFIER();
          t3 = $.getInterceptor$x(t1);
          t4 = t3.get$type(t1);
          if (t4 !== t2) {
            t2 = $.get$TokenType_KEYWORD();
            t3 = t3.get$type(t1);
            if (t3 === t2) {
              $.propertyTypeCast(t1, "$isKeywordToken");
              t1.get$keyword;
              t1 = t1._liblib9$_keyword;
              t1 = t1.isPseudoKeyword$0() === true;
            } else
              t1 = false;
          } else
            t1 = true;
          if (t1) {
            t1 = this._currentToken.get$next();
            t2 = $.get$TokenType_COLON();
            t2 = $.get$type$x(t1) === t2;
            t1 = t2;
          } else
            t1 = false;
          if (!t1)
            break;
          identifier = this.parseSimpleIdentifier$0();
          t1 = identifier.get$_liblib4$_token();
          label = t1.get$lexeme();
          if ($.contains$1$asx(definedLabels, label) === true) {
            t1 = $.get$ParserErrorCode_DUPLICATE_LABEL_IN_SWITCH_STATEMENT();
            t2 = identifier.get$_liblib4$_token();
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, [label]);
            t3.onError$1(t3, t5);
          } else
            $.javaSetAdd(definedLabels, label);
          colon = this.expect2$1($.get$TokenType_COLON());
          node = identifier;
          t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t1;
          t1 = new $.Label(null, null, null, null, t1);
          if (node != null)
            $.set$parent$x(node, t1);
          t1._label = node;
          t1._colon = colon;
          $.add$1$ax(labels, t1);
        }
        t1 = $.get$Keyword_CASE();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t2 = t2._liblib9$_keyword;
          t1 = t2 === t1;
        } else
          t1 = false;
        if (t1) {
          token = this._currentToken;
          this._currentToken = token.get$next();
          caseKeyword = token;
          caseExpression = this.parseExpression2$0();
          colon0 = this.expect2$1($.get$TokenType_COLON());
          node = caseExpression;
          t1 = this.parseStatements2$0();
          t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
          $.ASTNode__hashCodeGenerator = t2;
          t2 = new $.SwitchCase(null, null, null, null, null, null, null, t2);
          t2.SwitchMember$full$4(labels, caseKeyword, colon0, t1);
          if (node != null)
            $.set$parent$x(node, t2);
          t2._expression = node;
          $.add$1$ax(members, t2);
          if (defaultKeyword != null) {
            t1 = $.get$ParserErrorCode_SWITCH_HAS_CASE_AFTER_DEFAULT_CASE();
            t2 = caseKeyword;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
          }
        } else {
          t1 = $.get$Keyword_DEFAULT();
          t2 = this._currentToken;
          if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t2, "$isKeywordToken");
            t2.get$keyword;
            t2 = t2._liblib9$_keyword;
            t1 = t2 === t1;
          } else
            t1 = false;
          if (t1) {
            if (defaultKeyword != null) {
              t1 = $.get$ParserErrorCode_SWITCH_HAS_MULTIPLE_DEFAULT_CASES();
              t2 = this._currentToken.get$next();
              t3 = this._errorListener;
              t4 = $.getInterceptor$x(t2);
              t5 = new $.AnalysisError(null, null, null, 0, 0);
              t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
              t3.onError$1(t3, t5);
            }
            token = this._currentToken;
            this._currentToken = token.get$next();
            defaultKeyword = token;
            colon1 = this.expect2$1($.get$TokenType_COLON());
            t1 = this.parseStatements2$0();
            t2 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
            $.ASTNode__hashCodeGenerator = t2;
            t2 = new $.SwitchDefault(null, null, null, null, null, null, t2);
            t2.SwitchMember$full$4(labels, defaultKeyword, colon1, t1);
            $.add$1$ax(members, t2);
          } else {
            t1 = $.get$ParserErrorCode_EXPECTED_CASE_OR_DEFAULT();
            t2 = this._currentToken;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
            while (true) {
              if (!this.matches5$1($.get$TokenType_EOF()))
                if (!this.matches5$1($.get$TokenType_CLOSE_CURLY_BRACKET())) {
                  t1 = $.get$Keyword_CASE();
                  t2 = this._currentToken;
                  if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                    $.propertyTypeCast(t2, "$isKeywordToken");
                    t2.get$keyword;
                    t2 = t2._liblib9$_keyword;
                    t1 = t2 === t1;
                  } else
                    t1 = false;
                  if (!t1) {
                    t1 = $.get$Keyword_DEFAULT();
                    t2 = this._currentToken;
                    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                      $.propertyTypeCast(t2, "$isKeywordToken");
                      t2.get$keyword;
                      t2 = t2._liblib9$_keyword;
                      t1 = t2 === t1;
                    } else
                      t1 = false;
                    t1 = !t1;
                  } else
                    t1 = false;
                } else
                  t1 = false;
              else
                t1 = false;
              if (!t1)
                break;
              this._currentToken = this._currentToken.get$next();
            }
          }
        }
      }
      rightBracket = this.expect2$1($.get$TokenType_CLOSE_CURLY_BRACKET());
      t1 = $.SwitchStatement$full(keyword, leftParenthesis, expression, rightParenthesis, leftBracket, members, rightBracket);
      return t1;
    } finally {
      this._inSwitch = wasInSwitch;
    }
  },
  "+parseSwitchStatement:0:0": 0,
  parseThrowExpression$0: function() {
    var keyword, t1, t2, t3, t4, t5, node, expression;
    keyword = this.expect$1($.get$Keyword_THROW());
    if (this.matches5$1($.get$TokenType_SEMICOLON()) || this.matches5$1($.get$TokenType_CLOSE_PAREN())) {
      t1 = $.get$ParserErrorCode_MISSING_EXPRESSION_IN_THROW();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
      t5 = $.get$TokenType_IDENTIFIER();
      t3 = $.get$offset$x(this._currentToken);
      t1 = new $.StringToken(null, null, 0, null, null);
      t1._liblib9$_type = t5;
      t1._liblib9$_offset = t3;
      t1._value2 = $.StringUtilities_intern("");
      t3 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t3;
      node = new $.SimpleIdentifier(null, null, null, null, null, null, null, t3);
      node._liblib4$_token = t1;
      t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.ThrowExpression(null, null, null, null, null, null, t1);
      t1._keyword = keyword;
      node.set$parent(node, t1);
      t1._expression = node;
      return t1;
    }
    expression = this.parseExpression2$0();
    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.ThrowExpression(null, null, null, null, null, null, t1);
    t1._keyword = keyword;
    if (expression != null)
      $.set$parent$x(expression, t1);
    t1._expression = expression;
    return t1;
  },
  "+parseThrowExpression:0:0": 0,
  parseThrowExpressionWithoutCascade$0: function() {
    var keyword, t1, t2, t3, t4, t5, node, expression;
    keyword = this.expect$1($.get$Keyword_THROW());
    if (this.matches5$1($.get$TokenType_SEMICOLON()) || this.matches5$1($.get$TokenType_CLOSE_PAREN())) {
      t1 = $.get$ParserErrorCode_MISSING_EXPRESSION_IN_THROW();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
      t5 = $.get$TokenType_IDENTIFIER();
      t3 = $.get$offset$x(this._currentToken);
      t1 = new $.StringToken(null, null, 0, null, null);
      t1._liblib9$_type = t5;
      t1._liblib9$_offset = t3;
      t1._value2 = $.StringUtilities_intern("");
      t3 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t3;
      node = new $.SimpleIdentifier(null, null, null, null, null, null, null, t3);
      node._liblib4$_token = t1;
      t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.ThrowExpression(null, null, null, null, null, null, t1);
      t1._keyword = keyword;
      node.set$parent(node, t1);
      t1._expression = node;
      return t1;
    }
    expression = this.parseExpressionWithoutCascade$0();
    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.ThrowExpression(null, null, null, null, null, null, t1);
    t1._keyword = keyword;
    if (expression != null)
      $.set$parent$x(expression, t1);
    t1._expression = expression;
    return t1;
  },
  "+parseThrowExpressionWithoutCascade:0:0": 0,
  parseTryStatement$0: function() {
    var tryKeyword, body, catchClauses, t1, t2, token, exceptionType, onKeyword, leftParenthesis, exceptionParameter, token0, stackTraceParameter, comma, rightParenthesis, catchKeyword, finallyClause, finallyKeyword, t3, t4, t5;
    tryKeyword = this.expect$1($.get$Keyword_TRY());
    body = this.parseBlock$0();
    catchClauses = $.List_List($, $.CatchClause);
    catchClauses.$builtinTypeInfo = [$.CatchClause];
    while (true) {
      t1 = $.Parser__ON;
      if (!($.get$type$x(this._currentToken) === $.get$TokenType_IDENTIFIER() && $.$eq(this._currentToken.get$lexeme(), t1))) {
        t1 = $.get$Keyword_CATCH();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
      } else
        t1 = true;
      if (!t1)
        break;
      t1 = $.Parser__ON;
      if ($.get$type$x(this._currentToken) === $.get$TokenType_IDENTIFIER() && $.$eq(this._currentToken.get$lexeme(), t1)) {
        token = this._currentToken;
        this._currentToken = token.get$next();
        exceptionType = this.parseTypeName$0();
        onKeyword = token;
      } else {
        onKeyword = null;
        exceptionType = null;
      }
      t1 = $.get$Keyword_CATCH();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1) {
        token = this._currentToken;
        this._currentToken = token.get$next();
        leftParenthesis = this.expect2$1($.get$TokenType_OPEN_PAREN());
        exceptionParameter = this.parseSimpleIdentifier$0();
        if (this.matches5$1($.get$TokenType_COMMA())) {
          token0 = this._currentToken;
          this._currentToken = token0.get$next();
          stackTraceParameter = this.parseSimpleIdentifier$0();
          comma = token0;
        } else {
          comma = null;
          stackTraceParameter = null;
        }
        rightParenthesis = this.expect2$1($.get$TokenType_CLOSE_PAREN());
        catchKeyword = token;
      } else {
        catchKeyword = null;
        leftParenthesis = null;
        exceptionParameter = null;
        comma = null;
        stackTraceParameter = null;
        rightParenthesis = null;
      }
      catchClauses.push($.CatchClause$full(onKeyword, exceptionType, catchKeyword, leftParenthesis, exceptionParameter, comma, stackTraceParameter, rightParenthesis, this.parseBlock$0()));
    }
    t1 = $.get$Keyword_FINALLY();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      finallyClause = this.parseBlock$0();
      finallyKeyword = token;
    } else {
      if (catchClauses.length === 0) {
        t1 = $.get$ParserErrorCode_MISSING_CATCH_OR_FINALLY();
        t2 = this._currentToken;
        t3 = this._errorListener;
        t4 = $.getInterceptor$x(t2);
        t5 = new $.AnalysisError(null, null, null, 0, 0);
        t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
        t3.onError$1(t3, t5);
      }
      finallyClause = null;
      finallyKeyword = null;
    }
    return $.TryStatement$full(tryKeyword, body, catchClauses, finallyKeyword, finallyClause);
  },
  "+parseTryStatement:0:0": 0,
  parseTypeAlias$1: function(commentAndMetadata) {
    var keyword, t1, t2, t3, next;
    keyword = this.expect$1($.get$Keyword_TYPEDEF());
    t1 = this._currentToken;
    t2 = $.get$TokenType_IDENTIFIER();
    t3 = $.getInterceptor$x(t1);
    if (t3.get$type(t1) !== t2) {
      t2 = $.get$TokenType_KEYWORD();
      if (t3.get$type(t1) === t2) {
        $.propertyTypeCast(t1, "$isKeywordToken");
        t1.get$keyword;
        t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
      } else
        t1 = false;
    } else
      t1 = true;
    if (t1) {
      next = this._currentToken.get$next();
      t1 = $.get$TokenType_LT();
      t2 = $.getInterceptor$x(next);
      if (t2.get$type(next) === t1) {
        next = this.skipTypeParameterList$1(next);
        if (next != null) {
          t1 = $.get$TokenType_EQ();
          t1 = $.get$type$x(next) === t1;
        } else
          t1 = false;
        if (t1)
          return this.parseClassTypeAlias$2(commentAndMetadata, keyword);
      } else {
        t1 = $.get$TokenType_EQ();
        if (t2.get$type(next) === t1)
          return this.parseClassTypeAlias$2(commentAndMetadata, keyword);
      }
    }
    return this.parseFunctionTypeAlias$2(commentAndMetadata, keyword);
  },
  "+parseTypeAlias:1:0": 0,
  parseTypeArgumentList$0: function() {
    var leftBracket, $arguments, rightBracket, t1, t2, t3, t4, t5;
    leftBracket = this.expect2$1($.get$TokenType_LT());
    $arguments = $.List_List($, $.TypeName);
    $arguments.$builtinTypeInfo = [$.TypeName];
    $arguments.push(this.parseTypeName$0());
    for (; this.optional$1($.get$TokenType_COMMA());)
      $arguments.push(this.parseTypeName$0());
    rightBracket = this.expect2$1($.get$TokenType_GT());
    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.TypeArgumentList(null, null, null, null, null, t1);
    t2 = $.TypeName;
    t3 = $.List_List($, t2);
    t3.$builtinTypeInfo = [t2];
    t4 = t2;
    t5 = $.List_List($, t4);
    t5.$builtinTypeInfo = [t4];
    t3 = new $.NodeList(t1, t3, t5);
    t3.$builtinTypeInfo = [t2];
    t1._liblib4$_arguments = t3;
    t1._leftBracket = leftBracket;
    t2 = t1._liblib4$_arguments;
    t2.addAll$1(t2, $arguments);
    t1._rightBracket = rightBracket;
    return t1;
  },
  "+parseTypeArgumentList:0:0": 0,
  parseTypeName$0: function() {
    var t1, t2, t3, t4, t5, token, typeName, typeArguments;
    t1 = $.get$Keyword_VAR();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      t1 = $.get$ParserErrorCode_VAR_AS_TYPE_NAME();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
      token = this._currentToken;
      this._currentToken = token.get$next();
      t5 = $.ASTNode__hashCodeGenerator;
      if (typeof t5 !== "number")
        return this.parseTypeName$0$bailout(1, t5, token);
      ++t5;
      $.ASTNode__hashCodeGenerator = t5;
      typeName = new $.SimpleIdentifier(null, null, null, null, null, null, null, t5);
      typeName._liblib4$_token = token;
    } else {
      t1 = this._currentToken;
      t2 = $.get$TokenType_IDENTIFIER();
      t3 = $.getInterceptor$x(t1);
      if (t3.get$type(t1) !== t2) {
        t2 = $.get$TokenType_KEYWORD();
        if (t3.get$type(t1) === t2) {
          $.propertyTypeCast(t1, "$isKeywordToken");
          t1.get$keyword;
          t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1)
        typeName = this.parsePrefixedIdentifier$0();
      else {
        t1 = $.get$TokenType_IDENTIFIER();
        t2 = $.get$offset$x(this._currentToken);
        t3 = new $.StringToken(null, null, 0, null, null);
        t3._liblib9$_type = t1;
        t3._liblib9$_offset = t2;
        t3._value2 = $.StringUtilities_intern("");
        t2 = $.ASTNode__hashCodeGenerator;
        if (typeof t2 !== "number")
          return this.parseTypeName$0$bailout(2, 0, 0, t2, t3);
        ++t2;
        $.ASTNode__hashCodeGenerator = t2;
        typeName = new $.SimpleIdentifier(null, null, null, null, null, null, null, t2);
        typeName._liblib4$_token = t3;
        t3 = $.get$ParserErrorCode_EXPECTED_TYPE_NAME();
        t2 = this._currentToken;
        t1 = this._errorListener;
        t4 = $.getInterceptor$x(t2);
        t5 = new $.AnalysisError(null, null, null, 0, 0);
        t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t3, []);
        t1.onError$1(t1, t5);
      }
    }
    typeArguments = this.matches5$1($.get$TokenType_LT()) ? this.parseTypeArgumentList$0() : null;
    t1 = $.ASTNode__hashCodeGenerator;
    if (typeof t1 !== "number")
      return this.parseTypeName$0$bailout(3, 0, 0, 0, 0, typeArguments, t1, typeName);
    ++t1;
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.TypeName(null, null, null, null, null, t1);
    typeName.set$parent(typeName, t1);
    t1._liblib4$_name = typeName;
    if (typeArguments != null)
      typeArguments.set$parent(typeArguments, t1);
    t1._typeArguments = typeArguments;
    return t1;
  },
  "+parseTypeName:0:0": 0,
  parseTypeName$0$bailout: function(state0, t5, token, t2, t3, typeArguments, t1, typeName) {
    switch (state0) {
      case 0:
        t1 = $.get$Keyword_VAR();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
      default:
        if (state0 === 1 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              t1 = $.get$ParserErrorCode_VAR_AS_TYPE_NAME();
              t2 = this._currentToken;
              t3 = this._errorListener;
              t4 = $.getInterceptor$x(t2);
              t5 = new $.AnalysisError(null, null, null, 0, 0);
              t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
              t3.onError$1(t3, t5);
              token = this._currentToken;
              this._currentToken = token.get$next();
              t5 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t5 = $.$add$ns(t5, 1);
              $.ASTNode__hashCodeGenerator = t5;
              typeName = new $.SimpleIdentifier(null, null, null, null, null, null, null, t5);
              typeName._liblib4$_token = token;
          }
        else
          switch (state0) {
            case 0:
              t1 = this._currentToken;
              t2 = $.get$TokenType_IDENTIFIER();
              t3 = $.getInterceptor$x(t1);
              if (t3.get$type(t1) !== t2) {
                t2 = $.get$TokenType_KEYWORD();
                if (t3.get$type(t1) === t2) {
                  $.propertyTypeCast(t1, "$isKeywordToken");
                  t1.get$keyword;
                  t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                } else
                  t1 = false;
              } else
                t1 = true;
            case 2:
              if (state0 === 0 && t1)
                typeName = this.parsePrefixedIdentifier$0();
              else
                switch (state0) {
                  case 0:
                    t1 = $.get$TokenType_IDENTIFIER();
                    t2 = $.get$offset$x(this._currentToken);
                    t3 = new $.StringToken(null, null, 0, null, null);
                    t3._liblib9$_type = t1;
                    t3._liblib9$_offset = t2;
                    t3._value2 = $.StringUtilities_intern("");
                    t2 = $.ASTNode__hashCodeGenerator;
                  case 2:
                    state0 = 0;
                    t2 = $.$add$ns(t2, 1);
                    $.ASTNode__hashCodeGenerator = t2;
                    typeName = new $.SimpleIdentifier(null, null, null, null, null, null, null, t2);
                    typeName._liblib4$_token = t3;
                    t3 = $.get$ParserErrorCode_EXPECTED_TYPE_NAME();
                    t2 = this._currentToken;
                    t1 = this._errorListener;
                    t4 = $.getInterceptor$x(t2);
                    t5 = new $.AnalysisError(null, null, null, 0, 0);
                    t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t3, []);
                    t1.onError$1(t1, t5);
                }
          }
        typeArguments = this.matches5$1($.get$TokenType_LT()) ? this.parseTypeArgumentList$0() : null;
        t1 = $.ASTNode__hashCodeGenerator;
      case 3:
        var t4;
        state0 = 0;
        t1 = $.$add$ns(t1, 1);
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.TypeName(null, null, null, null, null, t1);
        typeName.set$parent(typeName, t1);
        t1._liblib4$_name = typeName;
        if (typeArguments != null)
          typeArguments.set$parent(typeArguments, t1);
        t1._typeArguments = typeArguments;
        return t1;
    }
  },
  parseTypeParameter$0: function() {
    var commentAndMetadata, $name, t1, t2, token, bound, node, t3, t4, t5, t6;
    commentAndMetadata = this.parseCommentAndMetadata$0();
    $name = this.parseSimpleIdentifier$0();
    t1 = $.get$Keyword_EXTENDS();
    t2 = this._currentToken;
    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(t2, "$isKeywordToken");
      t2.get$keyword;
      t1 = t2._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      bound = this.parseTypeName$0();
      node = commentAndMetadata._liblib14$_comment;
      t1 = commentAndMetadata._liblib14$_metadata;
      t2 = $.ASTNode__hashCodeGenerator;
      if (typeof t2 !== "number")
        return this.parseTypeParameter$0$bailout(1, node, t2, $name, t1, token, bound);
      ++t2;
      $.ASTNode__hashCodeGenerator = t2;
      t2 = new $.TypeParameter(null, null, null, null, null, null, null, t2);
      t3 = $.Annotation;
      t4 = $.List_List($, t3);
      t4.$builtinTypeInfo = [t3];
      t5 = t3;
      t6 = $.List_List($, t5);
      t6.$builtinTypeInfo = [t5];
      t4 = new $.NodeList(t2, t4, t6);
      t4.$builtinTypeInfo = [t3];
      t2._metadata = t4;
      if (node != null)
        node.set$parent(node, t2);
      t2._comment = node;
      t3 = t2._metadata;
      t3.addAll$1(t3, t1);
      $name.set$parent($name, t2);
      t2._liblib4$_name = $name;
      t2._keyword = token;
      bound.set$parent(bound, t2);
      t2._bound = bound;
      return t2;
    }
    node = commentAndMetadata._liblib14$_comment;
    t1 = commentAndMetadata._liblib14$_metadata;
    t2 = $.ASTNode__hashCodeGenerator;
    if (typeof t2 !== "number")
      return this.parseTypeParameter$0$bailout(2, node, t2, $name, t1);
    ++t2;
    $.ASTNode__hashCodeGenerator = t2;
    t2 = new $.TypeParameter(null, null, null, null, null, null, null, t2);
    t3 = $.Annotation;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t5 = t3;
    t6 = $.List_List($, t5);
    t6.$builtinTypeInfo = [t5];
    t4 = new $.NodeList(t2, t4, t6);
    t4.$builtinTypeInfo = [t3];
    t2._metadata = t4;
    if (node != null)
      node.set$parent(node, t2);
    t2._comment = node;
    t3 = t2._metadata;
    t3.addAll$1(t3, t1);
    $name.set$parent($name, t2);
    t2._liblib4$_name = $name;
    t2._keyword = null;
    t2._bound = null;
    return t2;
  },
  "+parseTypeParameter:0:0": 0,
  parseTypeParameter$0$bailout: function(state0, node, t2, $name, t1, token, bound) {
    switch (state0) {
      case 0:
        commentAndMetadata = this.parseCommentAndMetadata$0();
        $name = this.parseSimpleIdentifier$0();
        t1 = $.get$Keyword_EXTENDS();
        t2 = this._currentToken;
        if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
          $.propertyTypeCast(t2, "$isKeywordToken");
          t2.get$keyword;
          t1 = t2._liblib9$_keyword === t1;
        } else
          t1 = false;
      case 1:
        if (state0 === 1 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              bound = this.parseTypeName$0();
              node = commentAndMetadata._liblib14$_comment;
              t1 = commentAndMetadata._liblib14$_metadata;
              t2 = $.ASTNode__hashCodeGenerator;
            case 1:
              state0 = 0;
              t2 = $.$add$ns(t2, 1);
              $.ASTNode__hashCodeGenerator = t2;
              t2 = new $.TypeParameter(null, null, null, null, null, null, null, t2);
              t3 = $.Annotation;
              t4 = $.List_List($, t3);
              t4.$builtinTypeInfo = [t3];
              t5 = t3;
              t6 = $.List_List($, t5);
              t6.$builtinTypeInfo = [t5];
              t4 = new $.NodeList(t2, t4, t6);
              t4.$builtinTypeInfo = [t3];
              t2._metadata = t4;
              if (node != null)
                node.set$parent(node, t2);
              t2._comment = node;
              t3 = t2._metadata;
              t3.addAll$1(t3, t1);
              $name.set$parent($name, t2);
              t2._liblib4$_name = $name;
              t2._keyword = token;
              bound.set$parent(bound, t2);
              t2._bound = bound;
              return t2;
          }
        node = commentAndMetadata._liblib14$_comment;
        t1 = commentAndMetadata._liblib14$_metadata;
        t2 = $.ASTNode__hashCodeGenerator;
      case 2:
        var commentAndMetadata, t3, t4, t5, t6;
        state0 = 0;
        t2 = $.$add$ns(t2, 1);
        $.ASTNode__hashCodeGenerator = t2;
        t2 = new $.TypeParameter(null, null, null, null, null, null, null, t2);
        t3 = $.Annotation;
        t4 = $.List_List($, t3);
        t4.$builtinTypeInfo = [t3];
        t5 = t3;
        t6 = $.List_List($, t5);
        t6.$builtinTypeInfo = [t5];
        t4 = new $.NodeList(t2, t4, t6);
        t4.$builtinTypeInfo = [t3];
        t2._metadata = t4;
        if (node != null)
          node.set$parent(node, t2);
        t2._comment = node;
        t3 = t2._metadata;
        t3.addAll$1(t3, t1);
        $name.set$parent($name, t2);
        t2._liblib4$_name = $name;
        t2._keyword = null;
        t2._bound = null;
        return t2;
    }
  },
  parseTypeParameterList$0: function() {
    var leftBracket, typeParameters, rightBracket, t1, t2, t3, t4, t5;
    leftBracket = this.expect2$1($.get$TokenType_LT());
    typeParameters = $.List_List($, $.TypeParameter);
    typeParameters.$builtinTypeInfo = [$.TypeParameter];
    typeParameters.push(this.parseTypeParameter$0());
    for (; this.optional$1($.get$TokenType_COMMA());)
      typeParameters.push(this.parseTypeParameter$0());
    rightBracket = this.expect2$1($.get$TokenType_GT());
    t1 = $.$add$ns($.ASTNode__hashCodeGenerator, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.TypeParameterList(null, null, null, null, null, t1);
    t2 = $.TypeParameter;
    t3 = $.List_List($, t2);
    t3.$builtinTypeInfo = [t2];
    t4 = t2;
    t5 = $.List_List($, t4);
    t5.$builtinTypeInfo = [t4];
    t3 = new $.NodeList(t1, t3, t5);
    t3.$builtinTypeInfo = [t2];
    t1._typeParameters = t3;
    t1._leftBracket = leftBracket;
    t2 = t1._typeParameters;
    t2.addAll$1(t2, typeParameters);
    t1._rightBracket = rightBracket;
    return t1;
  },
  "+parseTypeParameterList:0:0": 0,
  parseUnaryExpression$0: function() {
    var token, t1, t2, node, token0, offset2, firstOperator, secondOperator, node0, t3, t4, t5, t6;
    if (this.matches5$1($.get$TokenType_MINUS()) || this.matches5$1($.get$TokenType_BANG()) || this.matches5$1($.get$TokenType_TILDE())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.get$Keyword_SUPER();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1) {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_OPEN_SQUARE_BRACKET();
        if ($.get$type$x(t1) !== t2) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_PERIOD();
          t2 = $.get$type$x(t1) === t2;
          t1 = t2;
        } else
          t1 = true;
        if (t1) {
          node = this.parseUnaryExpression$0();
          t1 = $.ASTNode__hashCodeGenerator;
          if (typeof t1 !== "number")
            return this.parseUnaryExpression$0$bailout(1, node, token, t1);
          ++t1;
          $.ASTNode__hashCodeGenerator = t1;
          t1 = new $.PrefixExpression(null, null, null, null, null, null, null, null, t1);
          t1._operator = token;
          if (node != null)
            $.set$parent$x(node, t1);
          t1._operand = node;
          return t1;
        }
        token0 = this._currentToken;
        this._currentToken = token0.get$next();
        t1 = $.ASTNode__hashCodeGenerator;
        if (typeof t1 !== "number")
          return this.parseUnaryExpression$0$bailout(2, 0, token, t1, token0);
        ++t1;
        $.ASTNode__hashCodeGenerator = t1;
        node = new $.SuperExpression(null, null, null, null, null, t1);
        node._keyword = token0;
        t1 = $.ASTNode__hashCodeGenerator;
        if (typeof t1 !== "number")
          return this.parseUnaryExpression$0$bailout(3, node, token, t1);
        ++t1;
        $.ASTNode__hashCodeGenerator = t1;
        t1 = new $.PrefixExpression(null, null, null, null, null, null, null, null, t1);
        t1._operator = token;
        node.set$parent(node, t1);
        t1._operand = node;
        return t1;
      }
      node = this.parseUnaryExpression$0();
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseUnaryExpression$0$bailout(4, node, token, t1);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.PrefixExpression(null, null, null, null, null, null, null, null, t1);
      t1._operator = token;
      if (node != null)
        $.set$parent$x(node, t1);
      t1._operand = node;
      return t1;
    } else if ($.get$type$x(this._currentToken).isIncrementOperator$0() === true) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      t1 = $.get$Keyword_SUPER();
      t2 = this._currentToken;
      if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(t2, "$isKeywordToken");
        t2.get$keyword;
        t1 = t2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1) {
        t1 = this._currentToken.get$next();
        t2 = $.get$TokenType_OPEN_SQUARE_BRACKET();
        if ($.get$type$x(t1) !== t2) {
          t1 = this._currentToken.get$next();
          t2 = $.get$TokenType_PERIOD();
          t2 = $.get$type$x(t1) === t2;
          t1 = t2;
        } else
          t1 = true;
        if (t1) {
          node = this.parseUnaryExpression$0();
          t1 = $.ASTNode__hashCodeGenerator;
          if (typeof t1 !== "number")
            return this.parseUnaryExpression$0$bailout(5, node, token, t1);
          ++t1;
          $.ASTNode__hashCodeGenerator = t1;
          t1 = new $.PrefixExpression(null, null, null, null, null, null, null, null, t1);
          t1._operator = token;
          if (node != null)
            $.set$parent$x(node, t1);
          t1._operand = node;
          return t1;
        }
        t1 = $.getInterceptor$x(token);
        if (t1.get$type(token) === $.get$TokenType_MINUS_MINUS()) {
          offset2 = t1.get$offset(token);
          if (typeof offset2 !== "number")
            return this.parseUnaryExpression$0$bailout(6, 0, token, 0, 0, offset2);
          firstOperator = new $.Token(null, 0, null, null);
          firstOperator._liblib9$_type = $.get$TokenType_MINUS();
          firstOperator._liblib9$_offset = offset2;
          secondOperator = new $.Token(null, 0, null, null);
          secondOperator._liblib9$_type = $.get$TokenType_MINUS();
          secondOperator._liblib9$_offset = offset2 + 1;
          offset2 = this._currentToken;
          secondOperator._liblib9$_next = offset2;
          offset2.set$previous(secondOperator);
          firstOperator._liblib9$_next = secondOperator;
          secondOperator.set$previous(firstOperator);
          token.get$previous().setNext$1(firstOperator);
          token = this._currentToken;
          this._currentToken = token.get$next();
          offset2 = $.ASTNode__hashCodeGenerator;
          if (typeof offset2 !== "number")
            return this.parseUnaryExpression$0$bailout(7, 0, token, 0, 0, offset2, firstOperator, secondOperator);
          ++offset2;
          $.ASTNode__hashCodeGenerator = offset2;
          node = new $.SuperExpression(null, null, null, null, null, offset2);
          node._keyword = token;
          offset2 = $.ASTNode__hashCodeGenerator;
          if (typeof offset2 !== "number")
            return this.parseUnaryExpression$0$bailout(8, node, 0, 0, 0, offset2, firstOperator, secondOperator);
          ++offset2;
          $.ASTNode__hashCodeGenerator = offset2;
          node0 = new $.PrefixExpression(null, null, null, null, null, null, null, null, offset2);
          node0._operator = secondOperator;
          node.set$parent(node, node0);
          node0._operand = node;
          t1 = $.ASTNode__hashCodeGenerator;
          if (typeof t1 !== "number")
            return this.parseUnaryExpression$0$bailout(9, 0, 0, t1, 0, 0, firstOperator, 0, node0);
          ++t1;
          $.ASTNode__hashCodeGenerator = t1;
          t1 = new $.PrefixExpression(null, null, null, null, null, null, null, null, t1);
          t1._operator = firstOperator;
          node0.set$parent(node0, t1);
          t1._operand = node0;
          return t1;
        } else {
          t1 = $.get$ParserErrorCode_INVALID_OPERATOR_FOR_SUPER();
          t2 = token.get$lexeme();
          t3 = this._currentToken;
          t4 = this._errorListener;
          t5 = $.getInterceptor$x(t3);
          t6 = new $.AnalysisError(null, null, null, 0, 0);
          t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
          t4.onError$1(t4, t6);
          token0 = this._currentToken;
          this._currentToken = token0.get$next();
          t6 = $.ASTNode__hashCodeGenerator;
          if (typeof t6 !== "number")
            return this.parseUnaryExpression$0$bailout(10, 0, token, 0, token0, 0, 0, 0, 0, t6);
          ++t6;
          $.ASTNode__hashCodeGenerator = t6;
          node = new $.SuperExpression(null, null, null, null, null, t6);
          node._keyword = token0;
          t6 = $.ASTNode__hashCodeGenerator;
          if (typeof t6 !== "number")
            return this.parseUnaryExpression$0$bailout(11, node, token, 0, 0, 0, 0, 0, 0, t6);
          ++t6;
          $.ASTNode__hashCodeGenerator = t6;
          t6 = new $.PrefixExpression(null, null, null, null, null, null, null, null, t6);
          t6._operator = token;
          node.set$parent(node, t6);
          t6._operand = node;
          return t6;
        }
      }
      node = this.parseAssignableExpression$1(false);
      t1 = $.ASTNode__hashCodeGenerator;
      if (typeof t1 !== "number")
        return this.parseUnaryExpression$0$bailout(12, node, token, t1);
      ++t1;
      $.ASTNode__hashCodeGenerator = t1;
      t1 = new $.PrefixExpression(null, null, null, null, null, null, null, null, t1);
      t1._operator = token;
      if (node != null)
        $.set$parent$x(node, t1);
      t1._operand = node;
      return t1;
    } else if (this.matches5$1($.get$TokenType_PLUS())) {
      t1 = $.get$ParserErrorCode_MISSING_IDENTIFIER();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
      t5 = $.get$TokenType_IDENTIFIER();
      t3 = $.get$offset$x(this._currentToken);
      t1 = new $.StringToken(null, null, 0, null, null);
      t1._liblib9$_type = t5;
      t1._liblib9$_offset = t3;
      t1._value2 = $.StringUtilities_intern("");
      t3 = $.ASTNode__hashCodeGenerator;
      if (typeof t3 !== "number")
        return this.parseUnaryExpression$0$bailout(13, 0, 0, t1, 0, 0, 0, 0, 0, 0, t3);
      ++t3;
      $.ASTNode__hashCodeGenerator = t3;
      t3 = new $.SimpleIdentifier(null, null, null, null, null, null, null, t3);
      t3._liblib4$_token = t1;
      return t3;
    }
    return this.parsePostfixExpression$0();
  },
  "+parseUnaryExpression:0:0": 0,
  parseUnaryExpression$0$bailout: function(state0, node, token, t1, token0, offset2, firstOperator, secondOperator, node0, t6, t3) {
    switch (state0) {
      case 0:
      default:
        var t2, t4, t5;
        if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && (this.matches5$1($.get$TokenType_MINUS()) || this.matches5$1($.get$TokenType_BANG()) || this.matches5$1($.get$TokenType_TILDE())))
          switch (state0) {
            case 0:
              token = this._currentToken;
              this._currentToken = token.get$next();
              t1 = $.get$Keyword_SUPER();
              t2 = this._currentToken;
              if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(t2, "$isKeywordToken");
                t2.get$keyword;
                t1 = t2._liblib9$_keyword === t1;
              } else
                t1 = false;
            default:
              if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t1 = this._currentToken.get$next();
                    t2 = $.get$TokenType_OPEN_SQUARE_BRACKET();
                    if ($.get$type$x(t1) !== t2) {
                      t1 = this._currentToken.get$next();
                      t2 = $.get$TokenType_PERIOD();
                      t2 = $.get$type$x(t1) === t2;
                      t1 = t2;
                    } else
                      t1 = true;
                  case 1:
                    if (state0 === 1 || state0 === 0 && t1)
                      switch (state0) {
                        case 0:
                          node = this.parseUnaryExpression$0();
                          t1 = $.ASTNode__hashCodeGenerator;
                        case 1:
                          state0 = 0;
                          t1 = $.$add$ns(t1, 1);
                          $.ASTNode__hashCodeGenerator = t1;
                          t1 = new $.PrefixExpression(null, null, null, null, null, null, null, null, t1);
                          t1._operator = token;
                          if (node != null)
                            $.set$parent$x(node, t1);
                          t1._operand = node;
                          return t1;
                      }
                    token0 = this._currentToken;
                    this._currentToken = token0.get$next();
                    t1 = $.ASTNode__hashCodeGenerator;
                  case 2:
                    state0 = 0;
                    t1 = $.$add$ns(t1, 1);
                    $.ASTNode__hashCodeGenerator = t1;
                    node = new $.SuperExpression(null, null, null, null, null, t1);
                    node._keyword = token0;
                    t1 = $.ASTNode__hashCodeGenerator;
                  case 3:
                    state0 = 0;
                    t1 = $.$add$ns(t1, 1);
                    $.ASTNode__hashCodeGenerator = t1;
                    t1 = new $.PrefixExpression(null, null, null, null, null, null, null, null, t1);
                    t1._operator = token;
                    node.set$parent(node, t1);
                    t1._operand = node;
                    return t1;
                }
              node = this.parseUnaryExpression$0();
              t1 = $.ASTNode__hashCodeGenerator;
            case 4:
              state0 = 0;
              t1 = $.$add$ns(t1, 1);
              $.ASTNode__hashCodeGenerator = t1;
              t1 = new $.PrefixExpression(null, null, null, null, null, null, null, null, t1);
              t1._operator = token;
              if (node != null)
                $.set$parent$x(node, t1);
              t1._operand = node;
              return t1;
          }
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && $.get$type$x(this._currentToken).isIncrementOperator$0() === true)
                switch (state0) {
                  case 0:
                    token = this._currentToken;
                    this._currentToken = token.get$next();
                    t1 = $.get$Keyword_SUPER();
                    t2 = this._currentToken;
                    if ($.get$type$x(t2) === $.get$TokenType_KEYWORD()) {
                      $.propertyTypeCast(t2, "$isKeywordToken");
                      t2.get$keyword;
                      t1 = t2._liblib9$_keyword === t1;
                    } else
                      t1 = false;
                  default:
                    if (state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && t1)
                      switch (state0) {
                        case 0:
                          t1 = this._currentToken.get$next();
                          t2 = $.get$TokenType_OPEN_SQUARE_BRACKET();
                          if ($.get$type$x(t1) !== t2) {
                            t1 = this._currentToken.get$next();
                            t2 = $.get$TokenType_PERIOD();
                            t2 = $.get$type$x(t1) === t2;
                            t1 = t2;
                          } else
                            t1 = true;
                        case 5:
                          if (state0 === 5 || state0 === 0 && t1)
                            switch (state0) {
                              case 0:
                                node = this.parseUnaryExpression$0();
                                t1 = $.ASTNode__hashCodeGenerator;
                              case 5:
                                state0 = 0;
                                t1 = $.$add$ns(t1, 1);
                                $.ASTNode__hashCodeGenerator = t1;
                                t1 = new $.PrefixExpression(null, null, null, null, null, null, null, null, t1);
                                t1._operator = token;
                                if (node != null)
                                  $.set$parent$x(node, t1);
                                t1._operand = node;
                                return t1;
                            }
                          t1 = $.getInterceptor$x(token);
                        default:
                          if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 0 && t1.get$type(token) === $.get$TokenType_MINUS_MINUS())
                            switch (state0) {
                              case 0:
                                offset2 = t1.get$offset(token);
                              case 6:
                                state0 = 0;
                                firstOperator = new $.Token(null, 0, null, null);
                                firstOperator._liblib9$_type = $.get$TokenType_MINUS();
                                firstOperator._liblib9$_offset = offset2;
                                t1 = $.get$TokenType_MINUS();
                                offset2 = $.$add$ns(offset2, 1);
                                secondOperator = new $.Token(null, 0, null, null);
                                secondOperator._liblib9$_type = t1;
                                secondOperator._liblib9$_offset = offset2;
                                offset2 = this._currentToken;
                                secondOperator._liblib9$_next = offset2;
                                offset2.set$previous(secondOperator);
                                firstOperator._liblib9$_next = secondOperator;
                                secondOperator.set$previous(firstOperator);
                                token.get$previous().setNext$1(firstOperator);
                                token = this._currentToken;
                                this._currentToken = token.get$next();
                                offset2 = $.ASTNode__hashCodeGenerator;
                              case 7:
                                state0 = 0;
                                offset2 = $.$add$ns(offset2, 1);
                                $.ASTNode__hashCodeGenerator = offset2;
                                node = new $.SuperExpression(null, null, null, null, null, offset2);
                                node._keyword = token;
                                offset2 = $.ASTNode__hashCodeGenerator;
                              case 8:
                                state0 = 0;
                                offset2 = $.$add$ns(offset2, 1);
                                $.ASTNode__hashCodeGenerator = offset2;
                                node0 = new $.PrefixExpression(null, null, null, null, null, null, null, null, offset2);
                                node0._operator = secondOperator;
                                node.set$parent(node, node0);
                                node0._operand = node;
                                t1 = $.ASTNode__hashCodeGenerator;
                              case 9:
                                state0 = 0;
                                t1 = $.$add$ns(t1, 1);
                                $.ASTNode__hashCodeGenerator = t1;
                                t1 = new $.PrefixExpression(null, null, null, null, null, null, null, null, t1);
                                t1._operator = firstOperator;
                                node0.set$parent(node0, t1);
                                t1._operand = node0;
                                return t1;
                            }
                          else
                            switch (state0) {
                              case 0:
                                t1 = $.get$ParserErrorCode_INVALID_OPERATOR_FOR_SUPER();
                                t2 = token.get$lexeme();
                                t3 = this._currentToken;
                                t4 = this._errorListener;
                                t5 = $.getInterceptor$x(t3);
                                t6 = new $.AnalysisError(null, null, null, 0, 0);
                                t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, [t2]);
                                t4.onError$1(t4, t6);
                                token0 = this._currentToken;
                                this._currentToken = token0.get$next();
                                t6 = $.ASTNode__hashCodeGenerator;
                              case 10:
                                state0 = 0;
                                t6 = $.$add$ns(t6, 1);
                                $.ASTNode__hashCodeGenerator = t6;
                                node = new $.SuperExpression(null, null, null, null, null, t6);
                                node._keyword = token0;
                                t6 = $.ASTNode__hashCodeGenerator;
                              case 11:
                                state0 = 0;
                                t6 = $.$add$ns(t6, 1);
                                $.ASTNode__hashCodeGenerator = t6;
                                t6 = new $.PrefixExpression(null, null, null, null, null, null, null, null, t6);
                                t6._operator = token;
                                node.set$parent(node, t6);
                                t6._operand = node;
                                return t6;
                            }
                      }
                    node = this.parseAssignableExpression$1(false);
                    t1 = $.ASTNode__hashCodeGenerator;
                  case 12:
                    state0 = 0;
                    t1 = $.$add$ns(t1, 1);
                    $.ASTNode__hashCodeGenerator = t1;
                    t1 = new $.PrefixExpression(null, null, null, null, null, null, null, null, t1);
                    t1._operator = token;
                    if (node != null)
                      $.set$parent$x(node, t1);
                    t1._operand = node;
                    return t1;
                }
              else
                switch (state0) {
                  case 0:
                  case 13:
                    if (state0 === 13 || state0 === 0 && this.matches5$1($.get$TokenType_PLUS()))
                      switch (state0) {
                        case 0:
                          t1 = $.get$ParserErrorCode_MISSING_IDENTIFIER();
                          t2 = this._currentToken;
                          t3 = this._errorListener;
                          t4 = $.getInterceptor$x(t2);
                          t5 = new $.AnalysisError(null, null, null, 0, 0);
                          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                          t3.onError$1(t3, t5);
                          t5 = $.get$TokenType_IDENTIFIER();
                          t3 = $.get$offset$x(this._currentToken);
                          t1 = new $.StringToken(null, null, 0, null, null);
                          t1._liblib9$_type = t5;
                          t1._liblib9$_offset = t3;
                          t1._value2 = $.StringUtilities_intern("");
                          t3 = $.ASTNode__hashCodeGenerator;
                        case 13:
                          state0 = 0;
                          t3 = $.$add$ns(t3, 1);
                          $.ASTNode__hashCodeGenerator = t3;
                          t3 = new $.SimpleIdentifier(null, null, null, null, null, null, null, t3);
                          t3._liblib4$_token = t1;
                          return t3;
                      }
                }
          }
        return this.parsePostfixExpression$0();
    }
  },
  parseVariableDeclaration$0: function() {
    var commentAndMetadata, $name, token, initializer, equals, node, t1, t2, t3, t4, t5, t6;
    commentAndMetadata = this.parseCommentAndMetadata$0();
    $name = this.parseSimpleIdentifier$0();
    if (this.matches5$1($.get$TokenType_EQ())) {
      token = this._currentToken;
      this._currentToken = token.get$next();
      initializer = this.parseExpression2$0();
      equals = token;
    } else {
      equals = null;
      initializer = null;
    }
    node = commentAndMetadata._liblib14$_comment;
    t1 = commentAndMetadata._liblib14$_metadata;
    t2 = $.ASTNode__hashCodeGenerator;
    if (typeof t2 !== "number")
      return this.parseVariableDeclaration$0$bailout(1, equals, initializer, $name, t1, t2, node);
    ++t2;
    $.ASTNode__hashCodeGenerator = t2;
    t2 = new $.VariableDeclaration(null, null, null, null, null, null, null, t2);
    t3 = $.Annotation;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t5 = t3;
    t6 = $.List_List($, t5);
    t6.$builtinTypeInfo = [t5];
    t4 = new $.NodeList(t2, t4, t6);
    t4.$builtinTypeInfo = [t3];
    t2._metadata = t4;
    if (node != null)
      node.set$parent(node, t2);
    t2._comment = node;
    t3 = t2._metadata;
    t3.addAll$1(t3, t1);
    $name.set$parent($name, t2);
    t2._liblib4$_name = $name;
    t2._equals = equals;
    if (initializer != null)
      $.set$parent$x(initializer, t2);
    t2._initializer = initializer;
    return t2;
  },
  "+parseVariableDeclaration:0:0": 0,
  parseVariableDeclaration$0$bailout: function(state0, equals, initializer, $name, t1, t2, node) {
    var t3, t4, t5, t6;
    t2 = $.$add$ns(t2, 1);
    $.ASTNode__hashCodeGenerator = t2;
    t2 = new $.VariableDeclaration(null, null, null, null, null, null, null, t2);
    t3 = $.Annotation;
    t4 = $.List_List($, t3);
    t4.$builtinTypeInfo = [t3];
    t5 = t3;
    t6 = $.List_List($, t5);
    t6.$builtinTypeInfo = [t5];
    t4 = new $.NodeList(t2, t4, t6);
    t4.$builtinTypeInfo = [t3];
    t2._metadata = t4;
    if (node != null)
      node.set$parent(node, t2);
    t2._comment = node;
    t3 = t2._metadata;
    t3.addAll$1(t3, t1);
    $name.set$parent($name, t2);
    t2._liblib4$_name = $name;
    t2._equals = equals;
    if (initializer != null)
      $.set$parent$x(initializer, t2);
    t2._initializer = initializer;
    return t2;
  },
  parseVariableDeclarationList2$3: function(commentAndMetadata, keyword, type) {
    var variables, t1, t2;
    variables = $.List_List($, $.VariableDeclaration);
    variables.$builtinTypeInfo = [$.VariableDeclaration];
    variables.push(this.parseVariableDeclaration$0());
    for (; this.matches5$1($.get$TokenType_COMMA());) {
      this._currentToken = this._currentToken.get$next();
      variables.push(this.parseVariableDeclaration$0());
    }
    t1 = commentAndMetadata != null;
    if (t1) {
      commentAndMetadata.get$comment;
      t2 = commentAndMetadata._liblib14$_comment;
    } else
      t2 = null;
    if (t1) {
      commentAndMetadata.get$metadata;
      t1 = commentAndMetadata._liblib14$_metadata;
    } else
      t1 = null;
    return $.VariableDeclarationList$full(t2, t1, keyword, type, variables);
  },
  "+parseVariableDeclarationList2:3:0": 0,
  parseWhileStatement$0: function() {
    var wasInLoop, keyword, leftParenthesis, condition, rightParenthesis, body, t1;
    wasInLoop = this._inLoop;
    this._inLoop = true;
    try {
      keyword = this.expect$1($.get$Keyword_WHILE());
      leftParenthesis = this.expect2$1($.get$TokenType_OPEN_PAREN());
      condition = this.parseExpression2$0();
      rightParenthesis = this.expect2$1($.get$TokenType_CLOSE_PAREN());
      body = this.parseStatement2$0();
      t1 = $.WhileStatement$full(keyword, leftParenthesis, condition, rightParenthesis, body);
      return t1;
    } finally {
      this._inLoop = wasInLoop;
    }
  },
  "+parseWhileStatement:0:0": 0,
  parseWithClause$0: function() {
    var with2, types, t1, t2, t3, t4, t5;
    with2 = this.expect$1($.get$Keyword_WITH());
    types = $.List_List($, $.TypeName);
    types.$builtinTypeInfo = [$.TypeName];
    types.push(this.parseTypeName$0());
    for (; this.optional$1($.get$TokenType_COMMA());)
      types.push(this.parseTypeName$0());
    t1 = $.ASTNode__hashCodeGenerator;
    if (typeof t1 !== "number")
      return this.parseWithClause$0$bailout(1, with2, t1, types);
    ++t1;
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.WithClause(null, null, null, null, t1);
    t2 = $.TypeName;
    t3 = $.List_List($, t2);
    t3.$builtinTypeInfo = [t2];
    t4 = t2;
    t5 = $.List_List($, t4);
    t5.$builtinTypeInfo = [t4];
    t3 = new $.NodeList(t1, t3, t5);
    t3.$builtinTypeInfo = [t2];
    t1._mixinTypes = t3;
    t1._withKeyword = with2;
    t2 = t1._mixinTypes;
    t2.addAll$1(t2, types);
    return t1;
  },
  "+parseWithClause:0:0": 0,
  parseWithClause$0$bailout: function(state0, with2, t1, types) {
    var t2, t3, t4, t5;
    t1 = $.$add$ns(t1, 1);
    $.ASTNode__hashCodeGenerator = t1;
    t1 = new $.WithClause(null, null, null, null, t1);
    t2 = $.TypeName;
    t3 = $.List_List($, t2);
    t3.$builtinTypeInfo = [t2];
    t4 = t2;
    t5 = $.List_List($, t4);
    t5.$builtinTypeInfo = [t4];
    t3 = new $.NodeList(t1, t3, t5);
    t3.$builtinTypeInfo = [t2];
    t1._mixinTypes = t3;
    t1._withKeyword = with2;
    t2 = t1._mixinTypes;
    t2.addAll$1(t2, types);
    return t1;
  },
  peek2$1: function(distance) {
    var token, i;
    token = this._currentToken;
    for (i = 0; i < distance; ++i)
      token = token.get$next();
    return token;
  },
  "+peek2:1:0": 0,
  skipFinalConstVarOrType$1: function(startToken) {
    var t1, t2, next2, t3, next3;
    t1 = $.get$Keyword_FINAL();
    t2 = $.getInterceptor$x(startToken);
    if (t2.get$type(startToken) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(startToken, "$isKeywordToken");
      startToken.get$keyword;
      t1 = startToken._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (!t1) {
      t1 = $.get$Keyword_CONST();
      if (t2.get$type(startToken) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(startToken, "$isKeywordToken");
        startToken.get$keyword;
        t1 = startToken._liblib9$_keyword === t1;
      } else
        t1 = false;
    } else
      t1 = true;
    if (t1) {
      next2 = startToken.get$next();
      t1 = next2.get$next();
      t2 = $.get$TokenType_IDENTIFIER();
      t3 = $.getInterceptor$x(t1);
      if (t3.get$type(t1) !== t2) {
        t2 = $.get$TokenType_KEYWORD();
        if (t3.get$type(t1) === t2) {
          $.propertyTypeCast(t1, "$isKeywordToken");
          t1.get$keyword;
          t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
        } else
          t1 = false;
      } else
        t1 = true;
      if (!t1) {
        t1 = next2.get$next();
        t2 = $.get$TokenType_LT();
        if ($.get$type$x(t1) !== t2) {
          t1 = next2.get$next();
          t2 = $.get$Keyword_THIS();
          if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
            $.propertyTypeCast(t1, "$isKeywordToken");
            t1.get$keyword;
            t1 = t1._liblib9$_keyword === t2;
          } else
            t1 = false;
        } else
          t1 = true;
      } else
        t1 = true;
      if (t1)
        return this.skipTypeName$1(next2);
    } else {
      t1 = $.get$Keyword_VAR();
      if (t2.get$type(startToken) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(startToken, "$isKeywordToken");
        startToken.get$keyword;
        t1 = startToken._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (t1)
        return startToken.get$next();
      else {
        t1 = $.get$TokenType_IDENTIFIER();
        if (t2.get$type(startToken) !== t1) {
          t1 = $.get$TokenType_KEYWORD();
          if (t2.get$type(startToken) === t1) {
            $.propertyTypeCast(startToken, "$isKeywordToken");
            startToken.get$keyword;
            t1 = startToken._liblib9$_keyword.isPseudoKeyword$0() === true;
          } else
            t1 = false;
        } else
          t1 = true;
        if (t1) {
          next3 = startToken.get$next();
          t1 = $.get$TokenType_IDENTIFIER();
          t2 = $.getInterceptor$x(next3);
          if (t2.get$type(next3) !== t1) {
            t1 = $.get$TokenType_KEYWORD();
            if (t2.get$type(next3) === t1) {
              $.propertyTypeCast(next3, "$isKeywordToken");
              next3.get$keyword;
              t1 = next3._liblib9$_keyword.isPseudoKeyword$0() === true;
            } else
              t1 = false;
          } else
            t1 = true;
          if (!t1) {
            t1 = $.get$TokenType_LT();
            if (t2.get$type(next3) !== t1) {
              t1 = $.get$Keyword_THIS();
              if (t2.get$type(next3) === $.get$TokenType_KEYWORD()) {
                $.propertyTypeCast(next3, "$isKeywordToken");
                next3.get$keyword;
                t1 = next3._liblib9$_keyword === t1;
              } else
                t1 = false;
              if (!t1) {
                t1 = $.get$TokenType_PERIOD();
                if (t2.get$type(next3) === t1) {
                  t1 = next3.get$next();
                  t2 = $.get$TokenType_IDENTIFIER();
                  t3 = $.getInterceptor$x(t1);
                  if (t3.get$type(t1) !== t2) {
                    t2 = $.get$TokenType_KEYWORD();
                    if (t3.get$type(t1) === t2) {
                      $.propertyTypeCast(t1, "$isKeywordToken");
                      t1.get$keyword;
                      t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                    } else
                      t1 = false;
                  } else
                    t1 = true;
                  if (t1) {
                    t1 = next3.get$next().get$next();
                    t2 = $.get$TokenType_IDENTIFIER();
                    t3 = $.getInterceptor$x(t1);
                    if (t3.get$type(t1) !== t2) {
                      t2 = $.get$TokenType_KEYWORD();
                      if (t3.get$type(t1) === t2) {
                        $.propertyTypeCast(t1, "$isKeywordToken");
                        t1.get$keyword;
                        t1 = t1._liblib9$_keyword.isPseudoKeyword$0() === true;
                      } else
                        t1 = false;
                    } else
                      t1 = true;
                    if (!t1) {
                      t1 = next3.get$next().get$next();
                      t2 = $.get$TokenType_LT();
                      if ($.get$type$x(t1) !== t2) {
                        t1 = next3.get$next().get$next();
                        t2 = $.get$Keyword_THIS();
                        if ($.get$type$x(t1) === $.get$TokenType_KEYWORD()) {
                          $.propertyTypeCast(t1, "$isKeywordToken");
                          t1.get$keyword;
                          t1 = t1._liblib9$_keyword === t2;
                        } else
                          t1 = false;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = false;
                } else
                  t1 = false;
              } else
                t1 = true;
            } else
              t1 = true;
          } else
            t1 = true;
          if (t1)
            return this.skipReturnType$1(startToken);
        }
      }
    }
    return;
  },
  "+skipFinalConstVarOrType:1:0": 0,
  skipFormalParameterList$1: function(startToken) {
    var t1, next2, t2, afterParameters, afterType;
    t1 = $.get$TokenType_OPEN_PAREN();
    if ($.get$type$x(startToken) !== t1)
      return;
    next2 = startToken.get$next();
    t1 = $.get$TokenType_CLOSE_PAREN();
    t2 = $.getInterceptor$x(next2);
    if (t2.get$type(next2) === t1)
      return next2.get$next();
    if (!this.matchesAny$2(next2, [$.get$TokenType_AT(), $.get$TokenType_OPEN_SQUARE_BRACKET(), $.get$TokenType_OPEN_CURLY_BRACKET()])) {
      t1 = $.get$Keyword_VOID();
      if (t2.get$type(next2) === $.get$TokenType_KEYWORD()) {
        $.propertyTypeCast(next2, "$isKeywordToken");
        next2.get$keyword;
        t1 = next2._liblib9$_keyword === t1;
      } else
        t1 = false;
      if (!t1) {
        t1 = $.get$TokenType_IDENTIFIER();
        if (t2.get$type(next2) !== t1) {
          t1 = $.get$TokenType_KEYWORD();
          if (t2.get$type(next2) === t1) {
            $.propertyTypeCast(next2, "$isKeywordToken");
            next2.get$keyword;
            t1 = next2._liblib9$_keyword.isPseudoKeyword$0() === true;
          } else
            t1 = false;
        } else
          t1 = true;
        t1 = t1 && this.matchesAny$2(next2.get$next(), [$.get$TokenType_COMMA(), $.get$TokenType_CLOSE_PAREN()]);
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1)
      return this.skipPastMatchingToken$1(startToken);
    t1 = $.get$TokenType_IDENTIFIER();
    if (t2.get$type(next2) !== t1) {
      t1 = $.get$TokenType_KEYWORD();
      if (t2.get$type(next2) === t1) {
        $.propertyTypeCast(next2, "$isKeywordToken");
        next2.get$keyword;
        t1 = next2._liblib9$_keyword.isPseudoKeyword$0() === true;
      } else
        t1 = false;
    } else
      t1 = true;
    if (t1) {
      t1 = next2.get$next();
      t2 = $.get$TokenType_OPEN_PAREN();
      t2 = $.get$type$x(t1) === t2;
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      afterParameters = this.skipFormalParameterList$1(next2.get$next());
      if (afterParameters != null && this.matchesAny$2(afterParameters, [$.get$TokenType_COMMA(), $.get$TokenType_CLOSE_PAREN()]))
        return this.skipPastMatchingToken$1(startToken);
    }
    afterType = this.skipFinalConstVarOrType$1(next2);
    if (afterType == null)
      return;
    if (this.skipSimpleIdentifier$1(afterType) == null)
      return;
    return this.skipPastMatchingToken$1(startToken);
  },
  "+skipFormalParameterList:1:0": 0,
  skipPastMatchingToken$1: function(startToken) {
    var closeParen;
    if (typeof startToken !== "object" || startToken === null || !$.getInterceptor(startToken).$isBeginToken)
      return;
    closeParen = startToken._liblib9$_endToken;
    if (closeParen == null)
      return;
    closeParen.get$next;
    return closeParen._liblib9$_next;
  },
  "+skipPastMatchingToken:1:0": 0,
  skipPrefixedIdentifier$1: function(startToken) {
    var token, t1;
    token = this.skipSimpleIdentifier$1(startToken);
    if (token == null)
      return;
    else {
      t1 = $.get$TokenType_PERIOD();
      if ($.get$type$x(token) !== t1)
        return token;
    }
    return this.skipSimpleIdentifier$1(token.get$next());
  },
  "+skipPrefixedIdentifier:1:0": 0,
  skipReturnType$1: function(startToken) {
    var t1 = $.get$Keyword_VOID();
    if ($.get$type$x(startToken) === $.get$TokenType_KEYWORD()) {
      $.propertyTypeCast(startToken, "$isKeywordToken");
      startToken.get$keyword;
      t1 = startToken._liblib9$_keyword === t1;
    } else
      t1 = false;
    if (t1)
      return startToken.get$next();
    else
      return this.skipTypeName$1(startToken);
  },
  "+skipReturnType:1:0": 0,
  skipSimpleIdentifier$1: function(startToken) {
    var t1, t2;
    t1 = $.get$TokenType_IDENTIFIER();
    t2 = $.getInterceptor$x(startToken);
    if (t2.get$type(startToken) !== t1) {
      t1 = $.get$TokenType_KEYWORD();
      if (t2.get$type(startToken) === t1) {
        $.propertyTypeCast(startToken, "$isKeywordToken");
        startToken.get$keyword;
        t1 = startToken._liblib9$_keyword.isPseudoKeyword$0() === true;
      } else
        t1 = false;
    } else
      t1 = true;
    if (t1)
      return startToken.get$next();
    return;
  },
  "+skipSimpleIdentifier:1:0": 0,
  skipStringInterpolation$1: function(startToken) {
    var type2, token, bracketNestingLevel;
    type2 = $.get$type$x(startToken);
    token = startToken;
    while (true) {
      if (!(type2 === $.get$TokenType_STRING_INTERPOLATION_EXPRESSION() || type2 === $.get$TokenType_STRING_INTERPOLATION_IDENTIFIER()))
        break;
      if (type2 === $.get$TokenType_STRING_INTERPOLATION_EXPRESSION()) {
        token = token.get$next();
        type2 = $.get$type$x(token);
        for (bracketNestingLevel = 1; bracketNestingLevel > 0;) {
          if (type2 === $.get$TokenType_EOF())
            return;
          else if (type2 === $.get$TokenType_OPEN_CURLY_BRACKET())
            ++bracketNestingLevel;
          else if (type2 === $.get$TokenType_CLOSE_CURLY_BRACKET())
            --bracketNestingLevel;
          else if (type2 === $.get$TokenType_STRING()) {
            token = this.skipStringLiteral$1(token);
            if (token == null)
              return;
          } else
            token = token.get$next();
          type2 = $.get$type$x(token);
        }
        token = token.get$next();
        $.get$type$x(token);
      } else {
        token = token.get$next();
        if (!$.$eq($.get$type$x(token), $.get$TokenType_IDENTIFIER()))
          return;
        token = token.get$next();
      }
      type2 = $.get$type$x(token);
      if (type2 === $.get$TokenType_STRING()) {
        token = token.get$next();
        type2 = $.get$type$x(token);
      }
    }
    return token;
  },
  "+skipStringInterpolation:1:0": 0,
  skipStringLiteral$1: function(startToken) {
    var token, t1, type2;
    token = startToken;
    while (true) {
      if (token != null) {
        t1 = $.get$TokenType_STRING();
        t1 = $.get$type$x(token) === t1;
      } else
        t1 = false;
      if (!t1)
        break;
      token = token.get$next();
      type2 = $.get$type$x(token);
      if (type2 === $.get$TokenType_STRING_INTERPOLATION_EXPRESSION() || type2 === $.get$TokenType_STRING_INTERPOLATION_IDENTIFIER())
        token = this.skipStringInterpolation$1(token);
    }
    if (token == null ? startToken == null : token === startToken)
      return;
    return token;
  },
  "+skipStringLiteral:1:0": 0,
  skipTypeArgumentList$1: function(startToken) {
    var t1, token, t2, second;
    t1 = $.get$TokenType_LT();
    if ($.get$type$x(startToken) !== t1)
      return;
    token = this.skipTypeName$1(startToken.get$next());
    if (token == null)
      return;
    for (; t1 = $.get$TokenType_COMMA(), t2 = $.getInterceptor$x(token), t2.get$type(token) === t1;) {
      token = this.skipTypeName$1(token.get$next());
      if (token == null)
        return;
    }
    if (t2.get$type(token) === $.get$TokenType_GT())
      return token.get$next();
    else if (t2.get$type(token) === $.get$TokenType_GT_GT()) {
      t1 = $.get$TokenType_GT();
      t2 = $.$add$ns(t2.get$offset(token), 1);
      second = new $.Token(null, 0, null, null);
      second._liblib9$_type = t1;
      second._liblib9$_offset = t2;
      second._liblib9$_next = token.get$next();
      return second;
    }
    return;
  },
  "+skipTypeArgumentList:1:0": 0,
  skipTypeName$1: function(startToken) {
    var token, t1;
    token = this.skipPrefixedIdentifier$1(startToken);
    if (token == null)
      return;
    t1 = $.get$TokenType_LT();
    return $.get$type$x(token) === t1 ? this.skipTypeArgumentList$1(token) : token;
  },
  "+skipTypeName:1:0": 0,
  skipTypeParameterList$1: function(startToken) {
    var t1, next2, depth, t2, fakeEquals;
    t1 = $.get$TokenType_LT();
    if ($.get$type$x(startToken) !== t1)
      return;
    next2 = startToken.get$next();
    for (depth = 1; depth > 0;) {
      t1 = $.get$TokenType_EOF();
      t2 = $.getInterceptor$x(next2);
      if (t2.get$type(next2) === t1)
        return;
      else {
        t1 = $.get$TokenType_LT();
        if (t2.get$type(next2) === t1)
          ++depth;
        else {
          t1 = $.get$TokenType_GT();
          if (t2.get$type(next2) === t1)
            --depth;
          else {
            t1 = $.get$TokenType_GT_EQ();
            if (t2.get$type(next2) === t1) {
              if (depth === 1) {
                t1 = $.get$TokenType_EQ();
                t2 = $.$add$ns(t2.get$offset(next2), 2);
                fakeEquals = new $.Token(null, 0, null, null);
                fakeEquals._liblib9$_type = t1;
                fakeEquals._liblib9$_offset = t2;
                fakeEquals._liblib9$_next = next2.get$next();
                return fakeEquals;
              }
              --depth;
            } else {
              t1 = $.get$TokenType_GT_GT();
              if (t2.get$type(next2) === t1)
                depth -= 2;
              else {
                t1 = $.get$TokenType_GT_GT_EQ();
                if (t2.get$type(next2) === t1) {
                  if (depth < 2)
                    return;
                  else if (depth === 2) {
                    t1 = $.get$TokenType_EQ();
                    t2 = $.$add$ns(t2.get$offset(next2), 2);
                    fakeEquals = new $.Token(null, 0, null, null);
                    fakeEquals._liblib9$_type = t1;
                    fakeEquals._liblib9$_offset = t2;
                    fakeEquals._liblib9$_next = next2.get$next();
                    return fakeEquals;
                  }
                  depth -= 2;
                }
              }
            }
          }
        }
      }
      next2 = next2.get$next();
    }
    return next2;
  },
  "+skipTypeParameterList:1:0": 0,
  translateCharacter$3: function(builder, lexeme, index) {
    var t1, currentChar, charCodes, t2, length2, currentIndex, t3, t4, t5, firstDigit, secondDigit, digitCount, value, t6, thirdDigit, fourthDigit;
    if (typeof index !== "number")
      return this.translateCharacter$3$bailout(1, builder, lexeme, index);
    t1 = $.getInterceptor$s(lexeme);
    currentChar = t1.codeUnitAt$1(lexeme, index);
    if (typeof currentChar !== "number")
      return this.translateCharacter$3$bailout(2, builder, lexeme, index, t1, currentChar);
    if (currentChar !== 92) {
      t1 = builder.sb;
      charCodes = $.List_List$filled(1, currentChar, $.JSInt);
      charCodes.$builtinTypeInfo = [$.JSInt];
      t2 = $.Primitives_stringFromCharCodes(charCodes);
      t1._contents = t1._contents + t2;
      return index + 1;
    }
    length2 = t1.get$length(lexeme);
    if (typeof length2 !== "number")
      return this.translateCharacter$3$bailout(4, builder, lexeme, index, t1, 0, 0, length2);
    currentIndex = index + 1;
    if (currentIndex >= length2)
      return length2;
    currentChar = t1.codeUnitAt$1(lexeme, currentIndex);
    if (typeof currentChar !== "number")
      return this.translateCharacter$3$bailout(5, builder, lexeme, index, t1, currentChar, 0, length2, $.JSNumber_methods, currentIndex);
    if (currentChar === 110) {
      t1 = builder.sb;
      charCodes = $.List_List$filled(1, 10, $.JSInt);
      charCodes.$builtinTypeInfo = [$.JSInt];
      t2 = $.Primitives_stringFromCharCodes(charCodes);
      t1._contents = t1._contents + t2;
    } else if (currentChar === 114) {
      t1 = builder.sb;
      charCodes = $.List_List$filled(1, 13, $.JSInt);
      charCodes.$builtinTypeInfo = [$.JSInt];
      t2 = $.Primitives_stringFromCharCodes(charCodes);
      t1._contents = t1._contents + t2;
    } else if (currentChar === 102) {
      t1 = builder.sb;
      charCodes = $.List_List$filled(1, 12, $.JSInt);
      charCodes.$builtinTypeInfo = [$.JSInt];
      t2 = $.Primitives_stringFromCharCodes(charCodes);
      t1._contents = t1._contents + t2;
    } else if (currentChar === 98) {
      t1 = builder.sb;
      charCodes = $.List_List$filled(1, 8, $.JSInt);
      charCodes.$builtinTypeInfo = [$.JSInt];
      t2 = $.Primitives_stringFromCharCodes(charCodes);
      t1._contents = t1._contents + t2;
    } else if (currentChar === 116) {
      t1 = builder.sb;
      charCodes = $.List_List$filled(1, 9, $.JSInt);
      charCodes.$builtinTypeInfo = [$.JSInt];
      t2 = $.Primitives_stringFromCharCodes(charCodes);
      t1._contents = t1._contents + t2;
    } else if (currentChar === 118) {
      t1 = builder.sb;
      charCodes = $.List_List$filled(1, 11, $.JSInt);
      charCodes.$builtinTypeInfo = [$.JSInt];
      t2 = $.Primitives_stringFromCharCodes(charCodes);
      t1._contents = t1._contents + t2;
    } else if (currentChar === 120) {
      t2 = currentIndex + 2;
      if (t2 >= length2) {
        t1 = $.get$ParserErrorCode_INVALID_HEX_ESCAPE();
        t2 = this._currentToken;
        t3 = this._errorListener;
        t4 = $.getInterceptor$x(t2);
        t5 = new $.AnalysisError(null, null, null, 0, 0);
        t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
        t3.onError$1(t3, t5);
        return length2;
      }
      firstDigit = t1.codeUnitAt$1(lexeme, currentIndex + 1);
      secondDigit = t1.codeUnitAt$1(lexeme, t2);
      if (!this.isHexDigit$1(firstDigit) || !this.isHexDigit$1(secondDigit)) {
        t1 = $.get$ParserErrorCode_INVALID_HEX_ESCAPE();
        t2 = this._currentToken;
        t3 = this._errorListener;
        t4 = $.getInterceptor$x(t2);
        t5 = new $.AnalysisError(null, null, null, 0, 0);
        t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
        t3.onError$1(t3, t5);
      } else {
        t1 = $.Character_digit(firstDigit, 16);
        if (typeof t1 !== "number")
          return this.translateCharacter$3$bailout(12, builder, 0, 0, t1, 0, 0, 0, $.JSNumber_methods, currentIndex, secondDigit);
        t2 = $.Character_digit(secondDigit, 16);
        if (typeof t2 !== "number")
          throw $.iae(t2);
        t2 = $.intTypeCast((t1 << 4 >>> 0) + t2);
        t1 = builder.sb;
        charCodes = $.List_List$filled(1, t2, $.JSInt);
        charCodes.$builtinTypeInfo = [$.JSInt];
        t2 = $.Primitives_stringFromCharCodes(charCodes);
        t1._contents = t1._contents + t2;
      }
      return currentIndex + 3;
    } else if (currentChar === 117) {
      ++currentIndex;
      if (currentIndex >= length2) {
        t1 = $.get$ParserErrorCode_INVALID_UNICODE_ESCAPE();
        t2 = this._currentToken;
        t3 = this._errorListener;
        t4 = $.getInterceptor$x(t2);
        t5 = new $.AnalysisError(null, null, null, 0, 0);
        t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
        t3.onError$1(t3, t5);
        return length2;
      }
      currentChar = t1.codeUnitAt$1(lexeme, currentIndex);
      if (typeof currentChar !== "number")
        return this.translateCharacter$3$bailout(14, builder, lexeme, index, t1, currentChar, 0, length2, $.JSNumber_methods, currentIndex);
      if (currentChar === 123) {
        ++currentIndex;
        if (currentIndex >= length2) {
          t1 = $.get$ParserErrorCode_INVALID_UNICODE_ESCAPE();
          t2 = this._currentToken;
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
          return length2;
        }
        currentChar = t1.codeUnitAt$1(lexeme, currentIndex);
        if (typeof currentChar !== "number")
          return this.translateCharacter$3$bailout(15, builder, lexeme, index, t1, currentChar, 0, length2, 0, currentIndex);
        for (digitCount = 0, value = 0; currentChar !== 125;) {
          if (!this.isHexDigit$1(currentChar)) {
            t2 = $.get$ParserErrorCode_INVALID_UNICODE_ESCAPE();
            t3 = this._currentToken;
            t4 = this._errorListener;
            t5 = $.getInterceptor$x(t3);
            t6 = new $.AnalysisError(null, null, null, 0, 0);
            t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t2, []);
            t4.onError$1(t4, t6);
            ++currentIndex;
            while (true) {
              if (currentIndex < length2) {
                t2 = t1.codeUnitAt$1(lexeme, currentIndex);
                if (typeof t2 !== "number")
                  return this.translateCharacter$3$bailout(16, builder, lexeme, index, t1, 0, 0, length2, $.JSNumber_methods, currentIndex, 0, t2);
                t2 = t2 !== 125;
              } else
                t2 = false;
              ++currentIndex;
              if (!t2)
                break;
            }
            return currentIndex;
          }
          ++digitCount;
          t2 = $.Character_digit(currentChar, 16);
          if (typeof t2 !== "number")
            throw $.iae(t2);
          value = (value << 4 >>> 0) + t2;
          ++currentIndex;
          if (currentIndex >= length2) {
            t1 = $.get$ParserErrorCode_INVALID_UNICODE_ESCAPE();
            t2 = this._currentToken;
            t3 = this._errorListener;
            t4 = $.getInterceptor$x(t2);
            t5 = new $.AnalysisError(null, null, null, 0, 0);
            t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
            t3.onError$1(t3, t5);
            return length2;
          }
          currentChar = t1.codeUnitAt$1(lexeme, currentIndex);
          if (typeof currentChar !== "number")
            return this.translateCharacter$3$bailout(17, builder, lexeme, index, t1, currentChar, 0, length2, 0, currentIndex, 0, 0, value, digitCount);
        }
        if (digitCount < 1 || digitCount > 6) {
          t2 = $.get$ParserErrorCode_INVALID_UNICODE_ESCAPE();
          t3 = this._currentToken;
          t4 = this._errorListener;
          t5 = $.getInterceptor$x(t3);
          t6 = new $.AnalysisError(null, null, null, 0, 0);
          t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t2, []);
          t4.onError$1(t4, t6);
        }
        t2 = currentIndex + 1;
        this.appendScalarValue$5(builder, t1.substring$2(lexeme, index, t2), value, index, currentIndex);
        return t2;
      } else {
        t2 = currentIndex + 3;
        if (t2 >= length2) {
          t1 = $.get$ParserErrorCode_INVALID_UNICODE_ESCAPE();
          t2 = this._currentToken;
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
          return length2;
        }
        t3 = currentIndex + 1;
        secondDigit = t1.codeUnitAt$1(lexeme, t3);
        thirdDigit = t1.codeUnitAt$1(lexeme, currentIndex + 2);
        fourthDigit = t1.codeUnitAt$1(lexeme, t2);
        if (!this.isHexDigit$1(currentChar) || !this.isHexDigit$1(secondDigit) || !this.isHexDigit$1(thirdDigit) || !this.isHexDigit$1(fourthDigit)) {
          t1 = $.get$ParserErrorCode_INVALID_UNICODE_ESCAPE();
          t2 = this._currentToken;
          t3 = this._errorListener;
          t4 = $.getInterceptor$x(t2);
          t5 = new $.AnalysisError(null, null, null, 0, 0);
          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
          t3.onError$1(t3, t5);
        } else {
          t1 = t1.substring$2(lexeme, index, t3);
          t3 = $.Character_digit(currentChar, 16);
          if (typeof t3 !== "number")
            return this.translateCharacter$3$bailout(18, builder, 0, index, t1, 0, 0, 0, $.JSNumber_methods, currentIndex, secondDigit, t3, 0, 0, thirdDigit, fourthDigit);
          t4 = $.Character_digit(secondDigit, 16);
          if (typeof t4 !== "number")
            throw $.iae(t4);
          t5 = $.Character_digit(thirdDigit, 16);
          if (typeof t5 !== "number")
            throw $.iae(t5);
          t6 = $.Character_digit(fourthDigit, 16);
          if (typeof t6 !== "number")
            throw $.iae(t6);
          this.appendScalarValue$5(builder, t1, (((t3 << 4 >>> 0) + t4 << 4 >>> 0) + t5 << 4 >>> 0) + t6, index, t2);
        }
        return currentIndex + 4;
      }
    } else {
      t1 = builder.sb;
      charCodes = $.List_List$filled(1, currentChar, $.JSInt);
      charCodes.$builtinTypeInfo = [$.JSInt];
      t2 = $.Primitives_stringFromCharCodes(charCodes);
      t1._contents = t1._contents + t2;
    }
    return currentIndex + 1;
  },
  "+translateCharacter:3:0": 0,
  translateCharacter$3$bailout: function(state0, builder, lexeme, index, t1, currentChar, charCodes, length2, t2, currentIndex, secondDigit, t3, value, digitCount, thirdDigit, fourthDigit) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$s(lexeme);
        currentChar = t1.codeUnitAt$1(lexeme, index);
      case 2:
        state0 = 0;
      case 3:
        if (state0 === 3 || state0 === 0 && !$.$eq(currentChar, 92))
          switch (state0) {
            case 0:
              t1 = builder.sb;
              charCodes = $.List_List$filled(1, currentChar, $.JSInt);
              charCodes.$builtinTypeInfo = [$.JSInt];
              t2 = $.Primitives_stringFromCharCodes(charCodes);
              t1._contents = t1._contents + t2;
              return $.$add$ns(index, 1);
          }
        length2 = t1.get$length(lexeme);
      case 4:
        state0 = 0;
        currentIndex = $.$add$ns(index, 1);
        t2 = $.getInterceptor$n(currentIndex);
        if (t2.$ge(currentIndex, length2) === true)
          return length2;
        currentChar = t1.codeUnitAt$1(lexeme, currentIndex);
      case 5:
        state0 = 0;
        t3 = $.getInterceptor(currentChar);
      default:
        var t4, t5, firstDigit, t6;
        if (state0 === 6 || state0 === 0 && t3.$eq(currentChar, 110))
          switch (state0) {
            case 0:
              t1 = builder.sb;
              charCodes = $.List_List$filled(1, 10, $.JSInt);
              charCodes.$builtinTypeInfo = [$.JSInt];
              t3 = $.Primitives_stringFromCharCodes(charCodes);
              t1._contents = t1._contents + t3;
          }
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 7 || state0 === 0 && t3.$eq(currentChar, 114))
                switch (state0) {
                  case 0:
                    t1 = builder.sb;
                    charCodes = $.List_List$filled(1, 13, $.JSInt);
                    charCodes.$builtinTypeInfo = [$.JSInt];
                    t3 = $.Primitives_stringFromCharCodes(charCodes);
                    t1._contents = t1._contents + t3;
                }
              else
                switch (state0) {
                  case 0:
                  default:
                    if (state0 === 8 || state0 === 0 && t3.$eq(currentChar, 102))
                      switch (state0) {
                        case 0:
                          t1 = builder.sb;
                          charCodes = $.List_List$filled(1, 12, $.JSInt);
                          charCodes.$builtinTypeInfo = [$.JSInt];
                          t3 = $.Primitives_stringFromCharCodes(charCodes);
                          t1._contents = t1._contents + t3;
                      }
                    else
                      switch (state0) {
                        case 0:
                        default:
                          if (state0 === 9 || state0 === 0 && t3.$eq(currentChar, 98))
                            switch (state0) {
                              case 0:
                                t1 = builder.sb;
                                charCodes = $.List_List$filled(1, 8, $.JSInt);
                                charCodes.$builtinTypeInfo = [$.JSInt];
                                t3 = $.Primitives_stringFromCharCodes(charCodes);
                                t1._contents = t1._contents + t3;
                            }
                          else
                            switch (state0) {
                              case 0:
                              default:
                                if (state0 === 10 || state0 === 0 && t3.$eq(currentChar, 116))
                                  switch (state0) {
                                    case 0:
                                      t1 = builder.sb;
                                      charCodes = $.List_List$filled(1, 9, $.JSInt);
                                      charCodes.$builtinTypeInfo = [$.JSInt];
                                      t3 = $.Primitives_stringFromCharCodes(charCodes);
                                      t1._contents = t1._contents + t3;
                                  }
                                else
                                  switch (state0) {
                                    case 0:
                                    default:
                                      if (state0 === 11 || state0 === 0 && t3.$eq(currentChar, 118))
                                        switch (state0) {
                                          case 0:
                                            t1 = builder.sb;
                                            charCodes = $.List_List$filled(1, 11, $.JSInt);
                                            charCodes.$builtinTypeInfo = [$.JSInt];
                                            t3 = $.Primitives_stringFromCharCodes(charCodes);
                                            t1._contents = t1._contents + t3;
                                        }
                                      else
                                        switch (state0) {
                                          case 0:
                                          default:
                                            if (state0 === 13 || state0 === 12 || state0 === 0 && t3.$eq(currentChar, 120))
                                              switch (state0) {
                                                case 0:
                                                  if ($.$ge$n(t2.$add(currentIndex, 2), length2) === true) {
                                                    t1 = $.get$ParserErrorCode_INVALID_HEX_ESCAPE();
                                                    t2 = this._currentToken;
                                                    t3 = this._errorListener;
                                                    t4 = $.getInterceptor$x(t2);
                                                    t5 = new $.AnalysisError(null, null, null, 0, 0);
                                                    t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                                                    t3.onError$1(t3, t5);
                                                    return length2;
                                                  }
                                                  firstDigit = t1.codeUnitAt$1(lexeme, t2.$add(currentIndex, 1));
                                                  secondDigit = t1.codeUnitAt$1(lexeme, t2.$add(currentIndex, 2));
                                                default:
                                                  if (state0 === 0 && (!this.isHexDigit$1(firstDigit) || !this.isHexDigit$1(secondDigit))) {
                                                    t1 = $.get$ParserErrorCode_INVALID_HEX_ESCAPE();
                                                    t3 = this._currentToken;
                                                    t4 = this._errorListener;
                                                    t5 = $.getInterceptor$x(t3);
                                                    t6 = new $.AnalysisError(null, null, null, 0, 0);
                                                    t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, []);
                                                    t4.onError$1(t4, t6);
                                                  } else
                                                    switch (state0) {
                                                      case 0:
                                                        t1 = $.Character_digit(firstDigit, 16);
                                                      case 12:
                                                        state0 = 0;
                                                        t1 = $.$shl$n(t1, 4);
                                                        t3 = $.Character_digit(secondDigit, 16);
                                                        if (typeof t3 !== "number")
                                                          throw $.iae(t3);
                                                        t3 = $.intTypeCast($.$add$ns(t1, t3));
                                                        t1 = builder.sb;
                                                        charCodes = $.List_List$filled(1, t3, $.JSInt);
                                                        charCodes.$builtinTypeInfo = [$.JSInt];
                                                        t3 = $.Primitives_stringFromCharCodes(charCodes);
                                                        t1._contents = t1._contents + t3;
                                                    }
                                                  return t2.$add(currentIndex, 3);
                                              }
                                            else
                                              switch (state0) {
                                                case 0:
                                                default:
                                                  if (state0 === 18 || state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 0 && t3.$eq(currentChar, 117))
                                                    switch (state0) {
                                                      case 0:
                                                        currentIndex = t2.$add(currentIndex, 1);
                                                        t2 = $.getInterceptor$n(currentIndex);
                                                        if (t2.$ge(currentIndex, length2) === true) {
                                                          t1 = $.get$ParserErrorCode_INVALID_UNICODE_ESCAPE();
                                                          t2 = this._currentToken;
                                                          t3 = this._errorListener;
                                                          t4 = $.getInterceptor$x(t2);
                                                          t5 = new $.AnalysisError(null, null, null, 0, 0);
                                                          t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                                                          t3.onError$1(t3, t5);
                                                          return length2;
                                                        }
                                                        currentChar = t1.codeUnitAt$1(lexeme, currentIndex);
                                                      case 14:
                                                        state0 = 0;
                                                      default:
                                                        if (state0 === 17 || state0 === 16 || state0 === 15 || state0 === 0 && $.$eq(currentChar, 123))
                                                          switch (state0) {
                                                            case 0:
                                                              currentIndex = t2.$add(currentIndex, 1);
                                                              if ($.$ge$n(currentIndex, length2) === true) {
                                                                t1 = $.get$ParserErrorCode_INVALID_UNICODE_ESCAPE();
                                                                t2 = this._currentToken;
                                                                t3 = this._errorListener;
                                                                t4 = $.getInterceptor$x(t2);
                                                                t5 = new $.AnalysisError(null, null, null, 0, 0);
                                                                t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                                                                t3.onError$1(t3, t5);
                                                                return length2;
                                                              }
                                                              currentChar = t1.codeUnitAt$1(lexeme, currentIndex);
                                                            case 15:
                                                              state0 = 0;
                                                              digitCount = 0;
                                                              value = 0;
                                                            default:
                                                              L0:
                                                                while (true)
                                                                  switch (state0) {
                                                                    case 0:
                                                                      if (!!$.$eq(currentChar, 125))
                                                                        break L0;
                                                                    case 16:
                                                                      if (state0 === 16 || state0 === 0 && !this.isHexDigit$1(currentChar))
                                                                        switch (state0) {
                                                                          case 0:
                                                                            t2 = $.get$ParserErrorCode_INVALID_UNICODE_ESCAPE();
                                                                            t3 = this._currentToken;
                                                                            t4 = this._errorListener;
                                                                            t5 = $.getInterceptor$x(t3);
                                                                            t6 = new $.AnalysisError(null, null, null, 0, 0);
                                                                            t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t2, []);
                                                                            t4.onError$1(t4, t6);
                                                                            currentIndex = $.$add$ns(currentIndex, 1);
                                                                          case 16:
                                                                            L1:
                                                                              while (true)
                                                                                switch (state0) {
                                                                                  case 0:
                                                                                    t2 = $.getInterceptor$n(currentIndex);
                                                                                  case 16:
                                                                                    if (state0 === 16 || state0 === 0 && t2.$lt(currentIndex, length2) === true)
                                                                                      switch (state0) {
                                                                                        case 0:
                                                                                          t3 = t1.codeUnitAt$1(lexeme, currentIndex);
                                                                                        case 16:
                                                                                          state0 = 0;
                                                                                          t3 = !$.$eq(t3, 125);
                                                                                      }
                                                                                    else
                                                                                      t3 = false;
                                                                                    if (!t3)
                                                                                      break L1;
                                                                                    currentIndex = t2.$add(currentIndex, 1);
                                                                                }
                                                                            return t2.$add(currentIndex, 1);
                                                                        }
                                                                      ++digitCount;
                                                                      t2 = $.Character_digit(currentChar, 16);
                                                                      if (typeof t2 !== "number")
                                                                        throw $.iae(t2);
                                                                      value = (value << 4 >>> 0) + t2;
                                                                      currentIndex = $.$add$ns(currentIndex, 1);
                                                                      if ($.$ge$n(currentIndex, length2) === true) {
                                                                        t1 = $.get$ParserErrorCode_INVALID_UNICODE_ESCAPE();
                                                                        t2 = this._currentToken;
                                                                        t3 = this._errorListener;
                                                                        t4 = $.getInterceptor$x(t2);
                                                                        t5 = new $.AnalysisError(null, null, null, 0, 0);
                                                                        t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                                                                        t3.onError$1(t3, t5);
                                                                        return length2;
                                                                      }
                                                                      currentChar = t1.codeUnitAt$1(lexeme, currentIndex);
                                                                    case 17:
                                                                      state0 = 0;
                                                                  }
                                                              if (digitCount < 1 || digitCount > 6) {
                                                                t2 = $.get$ParserErrorCode_INVALID_UNICODE_ESCAPE();
                                                                t3 = this._currentToken;
                                                                t4 = this._errorListener;
                                                                t5 = $.getInterceptor$x(t3);
                                                                t6 = new $.AnalysisError(null, null, null, 0, 0);
                                                                t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t2, []);
                                                                t4.onError$1(t4, t6);
                                                              }
                                                              t2 = $.getInterceptor$ns(currentIndex);
                                                              this.appendScalarValue$5(builder, t1.substring$2(lexeme, index, t2.$add(currentIndex, 1)), value, index, currentIndex);
                                                              return t2.$add(currentIndex, 1);
                                                          }
                                                        else
                                                          switch (state0) {
                                                            case 0:
                                                              if ($.$ge$n(t2.$add(currentIndex, 3), length2) === true) {
                                                                t1 = $.get$ParserErrorCode_INVALID_UNICODE_ESCAPE();
                                                                t2 = this._currentToken;
                                                                t3 = this._errorListener;
                                                                t4 = $.getInterceptor$x(t2);
                                                                t5 = new $.AnalysisError(null, null, null, 0, 0);
                                                                t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
                                                                t3.onError$1(t3, t5);
                                                                return length2;
                                                              }
                                                              secondDigit = t1.codeUnitAt$1(lexeme, t2.$add(currentIndex, 1));
                                                              thirdDigit = t1.codeUnitAt$1(lexeme, t2.$add(currentIndex, 2));
                                                              fourthDigit = t1.codeUnitAt$1(lexeme, t2.$add(currentIndex, 3));
                                                            case 18:
                                                              if (state0 === 0 && (!this.isHexDigit$1(currentChar) || !this.isHexDigit$1(secondDigit) || !this.isHexDigit$1(thirdDigit) || !this.isHexDigit$1(fourthDigit))) {
                                                                t1 = $.get$ParserErrorCode_INVALID_UNICODE_ESCAPE();
                                                                t3 = this._currentToken;
                                                                t4 = this._errorListener;
                                                                t5 = $.getInterceptor$x(t3);
                                                                t6 = new $.AnalysisError(null, null, null, 0, 0);
                                                                t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t1, []);
                                                                t4.onError$1(t4, t6);
                                                              } else
                                                                switch (state0) {
                                                                  case 0:
                                                                    t1 = t1.substring$2(lexeme, index, t2.$add(currentIndex, 1));
                                                                    t3 = $.Character_digit(currentChar, 16);
                                                                  case 18:
                                                                    state0 = 0;
                                                                    t3 = $.$shl$n(t3, 4);
                                                                    t4 = $.Character_digit(secondDigit, 16);
                                                                    if (typeof t4 !== "number")
                                                                      throw $.iae(t4);
                                                                    t4 = $.$shl$n($.$add$ns(t3, t4), 4);
                                                                    t3 = $.Character_digit(thirdDigit, 16);
                                                                    if (typeof t3 !== "number")
                                                                      throw $.iae(t3);
                                                                    t3 = $.$shl$n($.$add$ns(t4, t3), 4);
                                                                    t4 = $.Character_digit(fourthDigit, 16);
                                                                    if (typeof t4 !== "number")
                                                                      throw $.iae(t4);
                                                                    this.appendScalarValue$5(builder, t1, $.$add$ns(t3, t4), index, t2.$add(currentIndex, 3));
                                                                }
                                                              return t2.$add(currentIndex, 4);
                                                          }
                                                    }
                                                  else
                                                    switch (state0) {
                                                      case 0:
                                                        t1 = builder.sb;
                                                        charCodes = $.List_List$filled(1, currentChar, $.JSInt);
                                                        charCodes.$builtinTypeInfo = [$.JSInt];
                                                        t3 = $.Primitives_stringFromCharCodes(charCodes);
                                                        t1._contents = t1._contents + t3;
                                                    }
                                              }
                                        }
                                  }
                            }
                      }
                }
          }
        return t2.$add(currentIndex, 1);
    }
  },
  validateFormalParameterList$1: function(parameterList) {
    var t1, t2, parameter, t3, t4, t5, t6;
    t1 = parameterList._parameters;
    t1.get$iterator;
    t1 = t1.elements;
    t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();) {
      parameter = t1._liblib$_current;
      if (typeof parameter === "object" && parameter !== null && !!$.getInterceptor(parameter).$isFieldFormalParameter) {
        t2 = $.get$ParserErrorCode_FIELD_INITIALIZER_OUTSIDE_CONSTRUCTOR();
        t3 = parameter._identifier;
        t4 = this._errorListener;
        t5 = $.getInterceptor$x(t3);
        t6 = new $.AnalysisError(null, null, null, 0, 0);
        t6._jtd_constructor_132_impl$5(this._liblib14$_source, t5.get$offset(t3), t5.get$length(t3), t2, []);
        t4.onError$1(t4, t6);
      }
    }
  },
  "+validateFormalParameterList:1:0": 0,
  validateModifiersForClass$1: function(modifiers) {
    var t1, t2, t3, t4, t5;
    this.validateModifiersForTopLevelDeclaration$1(modifiers);
    if (modifiers._constKeyword != null) {
      t1 = $.get$ParserErrorCode_CONST_CLASS();
      t2 = modifiers._constKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._externalKeyword != null) {
      t1 = $.get$ParserErrorCode_EXTERNAL_CLASS();
      t2 = modifiers._externalKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._finalKeyword != null) {
      t1 = $.get$ParserErrorCode_FINAL_CLASS();
      t2 = modifiers._finalKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._varKeyword != null) {
      t1 = $.get$ParserErrorCode_VAR_CLASS();
      t2 = modifiers._varKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    return modifiers._liblib14$_abstractKeyword;
  },
  "+validateModifiersForClass:1:0": 0,
  validateModifiersForConstructor$1: function(modifiers) {
    var t1, t2, t3, t4, t5, externalKeyword2, constKeyword2, factoryKeyword2;
    if (modifiers._liblib14$_abstractKeyword != null) {
      t1 = $.get$ParserErrorCode_ABSTRACT_CLASS_MEMBER();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._finalKeyword != null) {
      t1 = $.get$ParserErrorCode_FINAL_CONSTRUCTOR();
      t2 = modifiers._finalKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._staticKeyword != null) {
      t1 = $.get$ParserErrorCode_STATIC_CONSTRUCTOR();
      t2 = modifiers._staticKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._varKeyword != null) {
      t1 = $.get$ParserErrorCode_CONSTRUCTOR_WITH_RETURN_TYPE();
      t2 = modifiers._varKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    externalKeyword2 = modifiers._externalKeyword;
    constKeyword2 = modifiers._constKeyword;
    factoryKeyword2 = modifiers._liblib14$_factoryKeyword;
    t1 = externalKeyword2 != null;
    if (t1 && constKeyword2 != null && $.$lt$n($.get$offset$x(constKeyword2), $.get$offset$x(externalKeyword2)) === true) {
      t2 = $.get$ParserErrorCode_EXTERNAL_AFTER_CONST();
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(externalKeyword2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(externalKeyword2), t4.get$length(externalKeyword2), t2, []);
      t3.onError$1(t3, t5);
    }
    if (t1 && factoryKeyword2 != null && $.$lt$n($.get$offset$x(factoryKeyword2), $.get$offset$x(externalKeyword2)) === true) {
      t1 = $.get$ParserErrorCode_EXTERNAL_AFTER_FACTORY();
      t2 = this._errorListener;
      t3 = $.getInterceptor$x(externalKeyword2);
      t4 = new $.AnalysisError(null, null, null, 0, 0);
      t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(externalKeyword2), t3.get$length(externalKeyword2), t1, []);
      t2.onError$1(t2, t4);
    }
    return constKeyword2;
  },
  "+validateModifiersForConstructor:1:0": 0,
  validateModifiersForField$1: function(modifiers) {
    var t1, t2, t3, t4, t5, staticKeyword2, constKeyword2, finalKeyword2, varKeyword2;
    if (modifiers._liblib14$_abstractKeyword != null) {
      t1 = $.get$ParserErrorCode_ABSTRACT_CLASS_MEMBER();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._externalKeyword != null) {
      t1 = $.get$ParserErrorCode_EXTERNAL_FIELD();
      t2 = modifiers._externalKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._liblib14$_factoryKeyword != null) {
      t1 = $.get$ParserErrorCode_NON_CONSTRUCTOR_FACTORY();
      t2 = modifiers._liblib14$_factoryKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    staticKeyword2 = modifiers._staticKeyword;
    constKeyword2 = modifiers._constKeyword;
    finalKeyword2 = modifiers._finalKeyword;
    varKeyword2 = modifiers._varKeyword;
    if (constKeyword2 != null) {
      if (finalKeyword2 != null) {
        t1 = $.get$ParserErrorCode_CONST_AND_FINAL();
        t2 = this._errorListener;
        t3 = $.getInterceptor$x(finalKeyword2);
        t4 = new $.AnalysisError(null, null, null, 0, 0);
        t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(finalKeyword2), t3.get$length(finalKeyword2), t1, []);
        t2.onError$1(t2, t4);
      }
      if (varKeyword2 != null) {
        t1 = $.get$ParserErrorCode_CONST_AND_VAR();
        t2 = this._errorListener;
        t3 = $.getInterceptor$x(varKeyword2);
        t4 = new $.AnalysisError(null, null, null, 0, 0);
        t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(varKeyword2), t3.get$length(varKeyword2), t1, []);
        t2.onError$1(t2, t4);
      }
      if (staticKeyword2 != null && $.$lt$n($.get$offset$x(constKeyword2), $.get$offset$x(staticKeyword2)) === true) {
        t1 = $.get$ParserErrorCode_STATIC_AFTER_CONST();
        t2 = this._errorListener;
        t3 = $.getInterceptor$x(staticKeyword2);
        t4 = new $.AnalysisError(null, null, null, 0, 0);
        t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(staticKeyword2), t3.get$length(staticKeyword2), t1, []);
        t2.onError$1(t2, t4);
      }
    } else if (finalKeyword2 != null) {
      if (varKeyword2 != null) {
        t1 = $.get$ParserErrorCode_FINAL_AND_VAR();
        t2 = this._errorListener;
        t3 = $.getInterceptor$x(varKeyword2);
        t4 = new $.AnalysisError(null, null, null, 0, 0);
        t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(varKeyword2), t3.get$length(varKeyword2), t1, []);
        t2.onError$1(t2, t4);
      }
      if (staticKeyword2 != null && $.$lt$n($.get$offset$x(finalKeyword2), $.get$offset$x(staticKeyword2)) === true) {
        t1 = $.get$ParserErrorCode_STATIC_AFTER_FINAL();
        t2 = this._errorListener;
        t3 = $.getInterceptor$x(staticKeyword2);
        t4 = new $.AnalysisError(null, null, null, 0, 0);
        t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(staticKeyword2), t3.get$length(staticKeyword2), t1, []);
        t2.onError$1(t2, t4);
      }
    } else if (varKeyword2 != null && staticKeyword2 != null && $.$lt$n($.get$offset$x(varKeyword2), $.get$offset$x(staticKeyword2)) === true) {
      t1 = $.get$ParserErrorCode_STATIC_AFTER_VAR();
      t2 = this._errorListener;
      t3 = $.getInterceptor$x(staticKeyword2);
      t4 = new $.AnalysisError(null, null, null, 0, 0);
      t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(staticKeyword2), t3.get$length(staticKeyword2), t1, []);
      t2.onError$1(t2, t4);
    }
    return this.lexicallyFirst$1([constKeyword2, finalKeyword2, varKeyword2]);
  },
  "+validateModifiersForField:1:0": 0,
  validateModifiersForGetterOrSetterOrMethod$1: function(modifiers) {
    var t1, t2, t3, t4, t5, externalKeyword2, staticKeyword2;
    if (modifiers._liblib14$_abstractKeyword != null) {
      t1 = $.get$ParserErrorCode_ABSTRACT_CLASS_MEMBER();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._constKeyword != null) {
      t1 = $.get$ParserErrorCode_CONST_METHOD();
      t2 = modifiers._constKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._liblib14$_factoryKeyword != null) {
      t1 = $.get$ParserErrorCode_NON_CONSTRUCTOR_FACTORY();
      t2 = modifiers._liblib14$_factoryKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._finalKeyword != null) {
      t1 = $.get$ParserErrorCode_FINAL_METHOD();
      t2 = modifiers._finalKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._varKeyword != null) {
      t1 = $.get$ParserErrorCode_VAR_RETURN_TYPE();
      t2 = modifiers._varKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    externalKeyword2 = modifiers._externalKeyword;
    staticKeyword2 = modifiers._staticKeyword;
    if (externalKeyword2 != null && staticKeyword2 != null && $.$lt$n($.get$offset$x(staticKeyword2), $.get$offset$x(externalKeyword2)) === true) {
      t1 = $.get$ParserErrorCode_EXTERNAL_AFTER_STATIC();
      t2 = this._errorListener;
      t3 = $.getInterceptor$x(externalKeyword2);
      t4 = new $.AnalysisError(null, null, null, 0, 0);
      t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(externalKeyword2), t3.get$length(externalKeyword2), t1, []);
      t2.onError$1(t2, t4);
    }
  },
  "+validateModifiersForGetterOrSetterOrMethod:1:0": 0,
  validateModifiersForOperator$1: function(modifiers) {
    var t1, t2, t3, t4, t5;
    if (modifiers._liblib14$_abstractKeyword != null) {
      t1 = $.get$ParserErrorCode_ABSTRACT_CLASS_MEMBER();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._constKeyword != null) {
      t1 = $.get$ParserErrorCode_CONST_METHOD();
      t2 = modifiers._constKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._liblib14$_factoryKeyword != null) {
      t1 = $.get$ParserErrorCode_NON_CONSTRUCTOR_FACTORY();
      t2 = modifiers._liblib14$_factoryKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._finalKeyword != null) {
      t1 = $.get$ParserErrorCode_FINAL_METHOD();
      t2 = modifiers._finalKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._staticKeyword != null) {
      t1 = $.get$ParserErrorCode_STATIC_OPERATOR();
      t2 = modifiers._staticKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._varKeyword != null) {
      t1 = $.get$ParserErrorCode_VAR_RETURN_TYPE();
      t2 = modifiers._varKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
  },
  "+validateModifiersForOperator:1:0": 0,
  validateModifiersForTopLevelDeclaration$1: function(modifiers) {
    var t1, t2, t3, t4, t5;
    if (modifiers._liblib14$_factoryKeyword != null) {
      t1 = $.get$ParserErrorCode_FACTORY_TOP_LEVEL_DECLARATION();
      t2 = modifiers._liblib14$_factoryKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._staticKeyword != null) {
      t1 = $.get$ParserErrorCode_STATIC_TOP_LEVEL_DECLARATION();
      t2 = modifiers._staticKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
  },
  "+validateModifiersForTopLevelDeclaration:1:0": 0,
  validateModifiersForTopLevelFunction$1: function(modifiers) {
    var t1, t2, t3, t4, t5;
    this.validateModifiersForTopLevelDeclaration$1(modifiers);
    if (modifiers._liblib14$_abstractKeyword != null) {
      t1 = $.get$ParserErrorCode_ABSTRACT_TOP_LEVEL_FUNCTION();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._constKeyword != null) {
      t1 = $.get$ParserErrorCode_CONST_CLASS();
      t2 = modifiers._constKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._finalKeyword != null) {
      t1 = $.get$ParserErrorCode_FINAL_CLASS();
      t2 = modifiers._finalKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._varKeyword != null) {
      t1 = $.get$ParserErrorCode_VAR_RETURN_TYPE();
      t2 = modifiers._varKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
  },
  "+validateModifiersForTopLevelFunction:1:0": 0,
  validateModifiersForTopLevelVariable$1: function(modifiers) {
    var t1, t2, t3, t4, t5, constKeyword2, finalKeyword2, varKeyword2;
    this.validateModifiersForTopLevelDeclaration$1(modifiers);
    if (modifiers._liblib14$_abstractKeyword != null) {
      t1 = $.get$ParserErrorCode_ABSTRACT_TOP_LEVEL_VARIABLE();
      t2 = this._currentToken;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._externalKeyword != null) {
      t1 = $.get$ParserErrorCode_EXTERNAL_FIELD();
      t2 = modifiers._externalKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    constKeyword2 = modifiers._constKeyword;
    finalKeyword2 = modifiers._finalKeyword;
    varKeyword2 = modifiers._varKeyword;
    if (constKeyword2 != null) {
      if (finalKeyword2 != null) {
        t1 = $.get$ParserErrorCode_CONST_AND_FINAL();
        t2 = this._errorListener;
        t3 = $.getInterceptor$x(finalKeyword2);
        t4 = new $.AnalysisError(null, null, null, 0, 0);
        t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(finalKeyword2), t3.get$length(finalKeyword2), t1, []);
        t2.onError$1(t2, t4);
      }
      if (varKeyword2 != null) {
        t1 = $.get$ParserErrorCode_CONST_AND_VAR();
        t2 = this._errorListener;
        t3 = $.getInterceptor$x(varKeyword2);
        t4 = new $.AnalysisError(null, null, null, 0, 0);
        t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(varKeyword2), t3.get$length(varKeyword2), t1, []);
        t2.onError$1(t2, t4);
      }
    } else if (finalKeyword2 != null)
      if (varKeyword2 != null) {
        t1 = $.get$ParserErrorCode_FINAL_AND_VAR();
        t2 = this._errorListener;
        t3 = $.getInterceptor$x(varKeyword2);
        t4 = new $.AnalysisError(null, null, null, 0, 0);
        t4._jtd_constructor_132_impl$5(this._liblib14$_source, t3.get$offset(varKeyword2), t3.get$length(varKeyword2), t1, []);
        t2.onError$1(t2, t4);
      }
    return this.lexicallyFirst$1([constKeyword2, finalKeyword2, varKeyword2]);
  },
  "+validateModifiersForTopLevelVariable:1:0": 0,
  validateModifiersForTypedef$1: function(modifiers) {
    var t1, t2, t3, t4, t5;
    this.validateModifiersForTopLevelDeclaration$1(modifiers);
    if (modifiers._liblib14$_abstractKeyword != null) {
      t1 = $.get$ParserErrorCode_ABSTRACT_TYPEDEF();
      t2 = modifiers._liblib14$_abstractKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._constKeyword != null) {
      t1 = $.get$ParserErrorCode_CONST_TYPEDEF();
      t2 = modifiers._constKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._externalKeyword != null) {
      t1 = $.get$ParserErrorCode_EXTERNAL_TYPEDEF();
      t2 = modifiers._externalKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._finalKeyword != null) {
      t1 = $.get$ParserErrorCode_FINAL_TYPEDEF();
      t2 = modifiers._finalKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
    if (modifiers._varKeyword != null) {
      t1 = $.get$ParserErrorCode_VAR_TYPEDEF();
      t2 = modifiers._varKeyword;
      t3 = this._errorListener;
      t4 = $.getInterceptor$x(t2);
      t5 = new $.AnalysisError(null, null, null, 0, 0);
      t5._jtd_constructor_132_impl$5(this._liblib14$_source, t4.get$offset(t2), t4.get$length(t2), t1, []);
      t3.onError$1(t3, t5);
    }
  },
  "+validateModifiersForTypedef:1:0": 0
},

"+Parser": 0,

KeywordToken_11: {
  "": function KeywordToken_11(_liblib9$_keyword, _liblib9$_type, _liblib9$_offset, _liblib9$_previous, _liblib9$_next) {
    this._liblib9$_keyword = _liblib9$_keyword;
    this._liblib9$_type = _liblib9$_type;
    this._liblib9$_offset = _liblib9$_offset;
    this._liblib9$_previous = _liblib9$_previous;
    this._liblib9$_next = _liblib9$_next;
  },
  "super": "KeywordToken",
  get$length: function(_) {
    return 0;
  }
},

"+KeywordToken_11": 0,

AnalysisErrorListener_12: {
  "": function AnalysisErrorListener_12(errorFound) {
    this.errorFound = errorFound;
  },
  "super": "Object",
  get$errorFound: function() {
    return this.errorFound;
  },
  set$errorFound: function(v) {
    this.errorFound = v;
  },
  onError$1: function(_, error) {
    var t1 = this.errorFound;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = true;
  }
},

"+AnalysisErrorListener_12": 0,

ParserErrorCode: {
  "": function ParserErrorCode(name, ordinal, _liblib14$_severity, _liblib14$_message) {
    this.name = name;
    this.ordinal = ordinal;
    this._liblib14$_severity = _liblib14$_severity;
    this._liblib14$_message = _liblib14$_message;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  get$ordinal: function() {
    return this.ordinal;
  },
  get$_liblib14$_severity: function() {
    return this._liblib14$_severity;
  },
  set$_liblib14$_severity: function(v) {
    this._liblib14$_severity = v;
  },
  get$_liblib14$_message: function() {
    return this._liblib14$_message;
  },
  set$_liblib14$_message: function(v) {
    this._liblib14$_message = v;
  },
  get$message: function(_) {
    return this._liblib14$_message;
  },
  get$type: function(_) {
    return $.get$ErrorType_SYNTACTIC_ERROR();
  },
  compareTo$1: function(_, other) {
    var t1 = other.get$ordinal();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this.ordinal - t1;
  },
  toString$0: function(_) {
    return this.name;
  }
},

"+ParserErrorCode": 0}],
["engine.resolver", "../packages/analyzer_experimental/src/generated/resolver.dart", , {
Namespace: {
  "": function Namespace(_definedNames) {
    this._definedNames = _definedNames;
  },
  "super": "Object",
  get$_definedNames: function() {
    return this._definedNames;
  },
  set$_definedNames: function(v) {
    this._definedNames = v;
  },
  $isNamespace: true
},

"+Namespace": 0}],
["engine.scanner", "../packages/analyzer_experimental/src/generated/scanner.dart", , {
KeywordState: {
  "": function KeywordState(_liblib9$_table, _keyword2) {
    this._liblib9$_table = _liblib9$_table;
    this._keyword2 = _keyword2;
  },
  "super": "Object",
  get$_liblib9$_table: function() {
    return this._liblib9$_table;
  },
  set$_liblib9$_table: function(v) {
    this._liblib9$_table = v;
  },
  get$_keyword2: function() {
    return this._keyword2;
  },
  set$_keyword2: function(v) {
    this._keyword2 = v;
  },
  keyword$0: function() {
    return this._keyword2;
  },
  get$keyword: function() {
    return new $.BoundClosure$0(this, "keyword$0", null);
  },
  next$1: function(c) {
    var t1, t2;
    if (c !== (c | 0))
      return this.next$1$bailout(1, c);
    t1 = this._liblib9$_table;
    t2 = c - 97;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  next$1$bailout: function(state0, c) {
    var t1, t2;
    t1 = this._liblib9$_table;
    t2 = $.$sub$n(c, 97);
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  get$next: function() {
    return new $.BoundClosure$1(this, "next$1", null);
  }
},

"+KeywordState": 0,

ScannerErrorCode: {
  "": function ScannerErrorCode(name, ordinal, _liblib9$_message) {
    this.name = name;
    this.ordinal = ordinal;
    this._liblib9$_message = _liblib9$_message;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  get$ordinal: function() {
    return this.ordinal;
  },
  get$_liblib9$_message: function() {
    return this._liblib9$_message;
  },
  set$_liblib9$_message: function(v) {
    this._liblib9$_message = v;
  },
  get$message: function(_) {
    return this._liblib9$_message;
  },
  get$type: function(_) {
    return $.get$ErrorType_SYNTACTIC_ERROR();
  },
  compareTo$1: function(_, other) {
    var t1 = other.get$ordinal();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this.ordinal - t1;
  },
  toString$0: function(_) {
    return this.name;
  }
},

"+ScannerErrorCode": 0,

StringTokenWithComment: {
  "": function StringTokenWithComment(_precedingComment, _value2, _liblib9$_type, _liblib9$_offset, _liblib9$_previous, _liblib9$_next) {
    this._precedingComment = _precedingComment;
    this._value2 = _value2;
    this._liblib9$_type = _liblib9$_type;
    this._liblib9$_offset = _liblib9$_offset;
    this._liblib9$_previous = _liblib9$_previous;
    this._liblib9$_next = _liblib9$_next;
  },
  "super": "StringToken",
  get$_precedingComment: function() {
    return this._precedingComment;
  },
  set$_precedingComment: function(v) {
    this._precedingComment = v;
  },
  get$precedingComments: function() {
    return this._precedingComment;
  }
},

"+StringTokenWithComment": 0,

Keyword: {
  "": function Keyword(name, ordinal, _syntax, _isPseudoKeyword2) {
    this.name = name;
    this.ordinal = ordinal;
    this._syntax = _syntax;
    this._isPseudoKeyword2 = _isPseudoKeyword2;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  get$ordinal: function() {
    return this.ordinal;
  },
  get$_syntax: function() {
    return this._syntax;
  },
  set$_syntax: function(v) {
    this._syntax = v;
  },
  get$_isPseudoKeyword2: function() {
    return this._isPseudoKeyword2;
  },
  set$_isPseudoKeyword2: function(v) {
    this._isPseudoKeyword2 = v;
  },
  get$syntax: function(_) {
    return this._syntax;
  },
  isPseudoKeyword$0: function() {
    return this._isPseudoKeyword2;
  },
  compareTo$1: function(_, other) {
    var t1 = other.get$ordinal();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this.ordinal - t1;
  },
  toString$0: function(_) {
    return this.name;
  }
},

"+Keyword": 0,

AbstractScanner: {
  "": function AbstractScanner(_liblib9$_source, _liblib9$_errorListener, _tokens, _liblib9$_tail, _firstComment, _lastComment, _tokenStart, _liblib9$_lineStarts, _groupingStack, _hasUnmatchedGroups2) {
    this._liblib9$_source = _liblib9$_source;
    this._liblib9$_errorListener = _liblib9$_errorListener;
    this._tokens = _tokens;
    this._liblib9$_tail = _liblib9$_tail;
    this._firstComment = _firstComment;
    this._lastComment = _lastComment;
    this._tokenStart = _tokenStart;
    this._liblib9$_lineStarts = _liblib9$_lineStarts;
    this._groupingStack = _groupingStack;
    this._hasUnmatchedGroups2 = _hasUnmatchedGroups2;
  },
  "super": "Object",
  get$_liblib9$_source: function() {
    return this._liblib9$_source;
  },
  set$_liblib9$_source: function(v) {
    this._liblib9$_source = v;
  },
  get$_liblib9$_errorListener: function() {
    return this._liblib9$_errorListener;
  },
  set$_liblib9$_errorListener: function(v) {
    this._liblib9$_errorListener = v;
  },
  get$_tokens: function() {
    return this._tokens;
  },
  set$_tokens: function(v) {
    this._tokens = v;
  },
  get$_liblib9$_tail: function() {
    return this._liblib9$_tail;
  },
  set$_liblib9$_tail: function(v) {
    this._liblib9$_tail = v;
  },
  get$_firstComment: function() {
    return this._firstComment;
  },
  set$_firstComment: function(v) {
    this._firstComment = v;
  },
  get$_lastComment: function() {
    return this._lastComment;
  },
  set$_lastComment: function(v) {
    this._lastComment = v;
  },
  get$_tokenStart: function() {
    return this._tokenStart;
  },
  set$_tokenStart: function(v) {
    this._tokenStart = v;
  },
  get$_liblib9$_lineStarts: function() {
    return this._liblib9$_lineStarts;
  },
  set$_liblib9$_lineStarts: function(v) {
    this._liblib9$_lineStarts = v;
  },
  get$_groupingStack: function() {
    return this._groupingStack;
  },
  set$_groupingStack: function(v) {
    this._groupingStack = v;
  },
  get$_hasUnmatchedGroups2: function() {
    return this._hasUnmatchedGroups2;
  },
  set$_hasUnmatchedGroups2: function(v) {
    this._hasUnmatchedGroups2 = v;
  },
  tokenize$0: function() {
    var instrumentation, tokenCounter, next, t1;
    $.get$Instrumentation__CURRENT_LOGGER();
    instrumentation = $.get$Instrumentation__NULL_INSTRUMENTATION_BUILDER();
    tokenCounter = 0;
    try {
      next = this.advance$0();
      for (; !$.$eq(next, -1);) {
        t1 = tokenCounter;
        if (typeof t1 !== "number")
          throw t1.$add();
        tokenCounter = t1 + 1;
        next = this.bigSwitch$1(next);
      }
      this.appendEofToken$0();
      t1 = this._tokens._liblib9$_next;
      return t1;
    } finally {
    }
  },
  appendBeginToken$1: function(type) {
    var t1, t2, token;
    t1 = this._firstComment;
    t2 = this._tokenStart;
    if (t1 == null)
      token = $.BeginToken$(type, t2);
    else {
      token = new $.BeginTokenWithComment(null, null, null, 0, null, null);
      token._liblib9$_type = type;
      token._liblib9$_offset = t2;
      token.BeginToken$2(type, t2);
      token._precedingComment = t1;
      this._firstComment = null;
      this._lastComment = null;
    }
    this._liblib9$_tail = this._liblib9$_tail.setNext$1(token);
    this._groupingStack.push(token);
  },
  appendCommentToken$2: function(type, value) {
    var t1, t2, t3;
    t1 = this._firstComment;
    t2 = this._tokenStart;
    if (t1 == null) {
      t1 = new $.StringToken(null, null, 0, null, null);
      t1._liblib9$_type = type;
      t1._liblib9$_offset = t2;
      t1._value2 = value;
      this._firstComment = t1;
      this._lastComment = this._firstComment;
    } else {
      t1 = this._lastComment;
      t3 = new $.StringToken(null, null, 0, null, null);
      t3._liblib9$_type = type;
      t3._liblib9$_offset = t2;
      t3._value2 = value;
      this._lastComment = t1.setNext$1(t3);
    }
  },
  appendEndToken$2: function(type2, beginType) {
    var t1, t2, token, last, begin;
    t1 = this._firstComment;
    t2 = this._tokenStart;
    if (t1 == null) {
      token = new $.Token(null, 0, null, null);
      token._liblib9$_type = type2;
      token._liblib9$_offset = t2;
    } else {
      token = new $.TokenWithComment(null, null, 0, null, null);
      token._liblib9$_type = type2;
      token._liblib9$_offset = t2;
      token._precedingComment = t1;
      this._firstComment = null;
      this._lastComment = null;
    }
    this._liblib9$_tail = this._liblib9$_tail.setNext$1(token);
    t1 = this._groupingStack;
    last = t1.length - 1;
    if (last >= 0) {
      begin = t1[last];
      if (begin.get$type(begin) === beginType) {
        begin.set$endToken(token);
        $.JSArray_methods.removeAt$1(t1, last);
      }
    }
  },
  appendEofToken$0: function() {
    var t1, t2, eofToken, t3;
    if (this._firstComment == null) {
      t1 = $.get$TokenType_EOF();
      t2 = $.$add$ns(this.get$offset(this), 1);
      eofToken = new $.Token(null, 0, null, null);
      eofToken._liblib9$_type = t1;
      eofToken._liblib9$_offset = t2;
    } else {
      t1 = $.get$TokenType_EOF();
      t2 = $.$add$ns(this.get$offset(this), 1);
      t3 = this._firstComment;
      eofToken = new $.TokenWithComment(null, null, 0, null, null);
      eofToken._liblib9$_type = t1;
      eofToken._liblib9$_offset = t2;
      eofToken._precedingComment = t3;
      this._firstComment = null;
      this._lastComment = null;
    }
    eofToken._liblib9$_next = eofToken;
    eofToken.set$previous(eofToken);
    this._liblib9$_tail = this._liblib9$_tail.setNext$1(eofToken);
    if (this._groupingStack.length !== 0)
      this._hasUnmatchedGroups2 = true;
  },
  appendKeywordToken$1: function(keyword) {
    var t1, t2, t3, t4;
    t1 = this._firstComment;
    t2 = this._liblib9$_tail;
    t3 = this._tokenStart;
    if (t1 == null) {
      t1 = new $.KeywordToken(null, null, 0, null, null);
      t1._liblib9$_type = $.get$TokenType_KEYWORD();
      t1._liblib9$_offset = t3;
      t1._liblib9$_keyword = keyword;
      this._liblib9$_tail = t2.setNext$1(t1);
    } else {
      t4 = new $.KeywordTokenWithComment(null, null, null, 0, null, null);
      t4._liblib9$_type = $.get$TokenType_KEYWORD();
      t4._liblib9$_offset = t3;
      t4._liblib9$_keyword = keyword;
      t4._precedingComment = t1;
      this._liblib9$_tail = t2.setNext$1(t4);
      this._firstComment = null;
      this._lastComment = null;
    }
  },
  appendStringToken$2: function(type, value) {
    var t1, t2, t3, t4;
    t1 = this._firstComment;
    t2 = this._liblib9$_tail;
    t3 = this._tokenStart;
    if (t1 == null) {
      t1 = new $.StringToken(null, null, 0, null, null);
      t1._liblib9$_type = type;
      t1._liblib9$_offset = t3;
      t1._value2 = value;
      this._liblib9$_tail = t2.setNext$1(t1);
    } else {
      t4 = new $.StringTokenWithComment(null, null, null, 0, null, null);
      t4._liblib9$_type = type;
      t4._liblib9$_offset = t3;
      t4._value2 = value;
      t4._precedingComment = t1;
      this._liblib9$_tail = t2.setNext$1(t4);
      this._firstComment = null;
      this._lastComment = null;
    }
  },
  appendStringToken2$3: function(type, value, offset) {
    var t1, t2, t3, t4;
    t1 = this._firstComment;
    t2 = this._liblib9$_tail;
    t3 = this._tokenStart;
    if (t1 == null) {
      t1 = $.$add$ns(t3, offset);
      t3 = new $.StringToken(null, null, 0, null, null);
      t3._liblib9$_type = type;
      t3._liblib9$_offset = t1;
      t3._value2 = value;
      this._liblib9$_tail = t2.setNext$1(t3);
    } else {
      t1 = $.$add$ns(t3, offset);
      t3 = this._firstComment;
      t4 = new $.StringTokenWithComment(null, null, null, 0, null, null);
      t4._liblib9$_type = type;
      t4._liblib9$_offset = t1;
      t4._value2 = value;
      t4._precedingComment = t3;
      this._liblib9$_tail = t2.setNext$1(t4);
      this._firstComment = null;
      this._lastComment = null;
    }
  },
  appendToken$1: function(type) {
    var t1, t2, t3, t4;
    t1 = this._firstComment;
    t2 = this._liblib9$_tail;
    t3 = this._tokenStart;
    if (t1 == null) {
      t1 = new $.Token(null, 0, null, null);
      t1._liblib9$_type = type;
      t1._liblib9$_offset = t3;
      this._liblib9$_tail = t2.setNext$1(t1);
    } else {
      t4 = new $.TokenWithComment(null, null, 0, null, null);
      t4._liblib9$_type = type;
      t4._liblib9$_offset = t3;
      t4._precedingComment = t1;
      this._liblib9$_tail = t2.setNext$1(t4);
      this._firstComment = null;
      this._lastComment = null;
    }
  },
  appendToken2$2: function(type, offset) {
    var t1, t2, t3;
    t1 = this._firstComment;
    t2 = this._liblib9$_tail;
    if (t1 == null) {
      t1 = new $.Token(null, 0, null, null);
      t1._liblib9$_type = type;
      t1._liblib9$_offset = offset;
      this._liblib9$_tail = t2.setNext$1(t1);
    } else {
      t3 = new $.TokenWithComment(null, null, 0, null, null);
      t3._liblib9$_type = type;
      t3._liblib9$_offset = offset;
      t3._precedingComment = t1;
      this._liblib9$_tail = t2.setNext$1(t3);
      this._firstComment = null;
      this._lastComment = null;
    }
  },
  beginToken$0: function() {
    this._tokenStart = this.get$offset(this);
  },
  "+beginToken:0:0": 0,
  get$beginToken: function() {
    return new $.BoundClosure$0(this, "beginToken$0", null);
  },
  bigSwitch$1: function(next) {
    var peek2, start, t1, t2, t3;
    if (typeof next !== "number")
      return this.bigSwitch$1$bailout(1, next);
    this._tokenStart = this.get$offset(this);
    if (next === 13) {
      next = this.advance$0();
      if (typeof next !== "number")
        return this.bigSwitch$1$bailout(2, next);
      if (next === 10) {
        next = this.advance$0();
        if (typeof next !== "number")
          return this.bigSwitch$1$bailout(3, next);
      }
      this._liblib9$_lineStarts.push(this.get$offset(this));
      return next;
    } else if (next === 10) {
      next = this.advance$0();
      this._liblib9$_lineStarts.push(this.get$offset(this));
      return next;
    } else if (next === 9 || next === 32)
      return this.advance$0();
    if (next === 114) {
      peek2 = this.peek$0();
      if (typeof peek2 !== "number")
        return this.bigSwitch$1$bailout(4, next, peek2);
      if (peek2 === 34 || peek2 === 39) {
        start = this.get$offset(this);
        return this.tokenizeString$3(this.advance$0(), start, true);
      }
    }
    if (97 <= next && next <= 122)
      return this.tokenizeKeywordOrIdentifier$2(next, true);
    if (65 <= next && next <= 90 || next === 95 || next === 36)
      return this.tokenizeIdentifier$3(next, this.get$offset(this), true);
    if (next === 60)
      return this.tokenizeLessThan$1(next);
    if (next === 62)
      return this.tokenizeGreaterThan$1(next);
    if (next === 61)
      return this.tokenizeEquals$1(next);
    if (next === 33)
      return this.tokenizeExclamation$1(next);
    if (next === 43)
      return this.tokenizePlus$1(next);
    if (next === 45)
      return this.tokenizeMinus$1(next);
    if (next === 42)
      return this.select$3(this, 61, $.get$TokenType_STAR_EQ(), $.get$TokenType_STAR());
    if (next === 37)
      return this.select$3(this, 61, $.get$TokenType_PERCENT_EQ(), $.get$TokenType_PERCENT());
    if (next === 38)
      return this.tokenizeAmpersand$1(next);
    if (next === 124)
      return this.tokenizeBar$1(next);
    if (next === 94)
      return this.select$3(this, 61, $.get$TokenType_CARET_EQ(), $.get$TokenType_CARET());
    if (next === 91)
      return this.tokenizeOpenSquareBracket$1(next);
    if (next === 126)
      return this.tokenizeTilde$1(next);
    if (next === 92) {
      this.appendToken$1($.get$TokenType_BACKSLASH());
      return this.advance$0();
    }
    if (next === 35)
      return this.tokenizeTag$1(next);
    if (next === 40) {
      this.appendBeginToken$1($.get$TokenType_OPEN_PAREN());
      return this.advance$0();
    }
    if (next === 41) {
      this.appendEndToken$2($.get$TokenType_CLOSE_PAREN(), $.get$TokenType_OPEN_PAREN());
      return this.advance$0();
    }
    if (next === 44) {
      this.appendToken$1($.get$TokenType_COMMA());
      return this.advance$0();
    }
    if (next === 58) {
      this.appendToken$1($.get$TokenType_COLON());
      return this.advance$0();
    }
    if (next === 59) {
      this.appendToken$1($.get$TokenType_SEMICOLON());
      return this.advance$0();
    }
    if (next === 63) {
      this.appendToken$1($.get$TokenType_QUESTION());
      return this.advance$0();
    }
    if (next === 93) {
      this.appendEndToken$2($.get$TokenType_CLOSE_SQUARE_BRACKET(), $.get$TokenType_OPEN_SQUARE_BRACKET());
      return this.advance$0();
    }
    if (next === 96) {
      this.appendToken$1($.get$TokenType_BACKPING());
      return this.advance$0();
    }
    if (next === 123) {
      this.appendBeginToken$1($.get$TokenType_OPEN_CURLY_BRACKET());
      return this.advance$0();
    }
    if (next === 125) {
      this.appendEndToken$2($.get$TokenType_CLOSE_CURLY_BRACKET(), $.get$TokenType_OPEN_CURLY_BRACKET());
      return this.advance$0();
    }
    if (next === 47)
      return this.tokenizeSlashOrComment$1(next);
    if (next === 64) {
      this.appendToken$1($.get$TokenType_AT());
      return this.advance$0();
    }
    if (next === 34 || next === 39)
      return this.tokenizeString$3(next, this.get$offset(this), false);
    if (next === 46)
      return this.tokenizeDotOrNumber$1(next);
    if (next === 48)
      return this.tokenizeHexOrNumber$1(next);
    if (49 <= next && next <= 57)
      return this.tokenizeNumber$1(next);
    if (next === -1)
      return -1;
    if (!(next >= 65 && next <= 90))
      t1 = next >= 97 && next <= 122;
    else
      t1 = true;
    if (t1)
      return this.tokenizeIdentifier$3(next, this.get$offset(this), true);
    if (next === $.AbstractScanner__$NBSP)
      return this.advance$0();
    t1 = $.get$ScannerErrorCode_ILLEGAL_CHARACTER();
    t2 = this._liblib9$_errorListener;
    t3 = new $.AnalysisError(null, null, null, 0, 0);
    t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, [next]);
    t2.onError$1(t2, t3);
    return this.advance$0();
  },
  bigSwitch$1$bailout: function(state0, next, peek2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        this._tokenStart = this.get$offset(this);
        t1 = $.getInterceptor(next);
      default:
        if (state0 === 3 || state0 === 2 || state0 === 0 && t1.$eq(next, 13))
          switch (state0) {
            case 0:
              next = this.advance$0();
            case 2:
              state0 = 0;
            case 3:
              if (state0 === 3 || state0 === 0 && $.$eq(next, 10))
                switch (state0) {
                  case 0:
                    next = this.advance$0();
                  case 3:
                    state0 = 0;
                }
              this._liblib9$_lineStarts.push(this.get$offset(this));
              return next;
          }
        else if (t1.$eq(next, 10)) {
          next = this.advance$0();
          this._liblib9$_lineStarts.push(this.get$offset(this));
          return next;
        } else if (t1.$eq(next, 9) || t1.$eq(next, 32))
          return this.advance$0();
      case 4:
        var t1, start, t2, t3;
        if (state0 === 4 || state0 === 0 && t1.$eq(next, 114))
          switch (state0) {
            case 0:
              peek2 = this.peek$0();
            case 4:
              state0 = 0;
              t1 = $.getInterceptor(peek2);
              if (t1.$eq(peek2, 34) || t1.$eq(peek2, 39)) {
                start = this.get$offset(this);
                return this.tokenizeString$3(this.advance$0(), start, true);
              }
          }
        if (typeof next !== "number")
          throw $.iae(next);
        if (97 <= next && next <= 122)
          return this.tokenizeKeywordOrIdentifier$2(next, true);
        if (65 <= next && next <= 90 || next === 95 || next === 36)
          return this.tokenizeIdentifier$3(next, this.get$offset(this), true);
        if (next === 60)
          return this.tokenizeLessThan$1(next);
        if (next === 62)
          return this.tokenizeGreaterThan$1(next);
        if (next === 61)
          return this.tokenizeEquals$1(next);
        if (next === 33)
          return this.tokenizeExclamation$1(next);
        if (next === 43)
          return this.tokenizePlus$1(next);
        if (next === 45)
          return this.tokenizeMinus$1(next);
        if (next === 42)
          return this.select$3(this, 61, $.get$TokenType_STAR_EQ(), $.get$TokenType_STAR());
        if (next === 37)
          return this.select$3(this, 61, $.get$TokenType_PERCENT_EQ(), $.get$TokenType_PERCENT());
        if (next === 38)
          return this.tokenizeAmpersand$1(next);
        if (next === 124)
          return this.tokenizeBar$1(next);
        if (next === 94)
          return this.select$3(this, 61, $.get$TokenType_CARET_EQ(), $.get$TokenType_CARET());
        if (next === 91)
          return this.tokenizeOpenSquareBracket$1(next);
        if (next === 126)
          return this.tokenizeTilde$1(next);
        if (next === 92) {
          this.appendToken$1($.get$TokenType_BACKSLASH());
          return this.advance$0();
        }
        if (next === 35)
          return this.tokenizeTag$1(next);
        if (next === 40) {
          this.appendBeginToken$1($.get$TokenType_OPEN_PAREN());
          return this.advance$0();
        }
        if (next === 41) {
          this.appendEndToken$2($.get$TokenType_CLOSE_PAREN(), $.get$TokenType_OPEN_PAREN());
          return this.advance$0();
        }
        if (next === 44) {
          this.appendToken$1($.get$TokenType_COMMA());
          return this.advance$0();
        }
        if (next === 58) {
          this.appendToken$1($.get$TokenType_COLON());
          return this.advance$0();
        }
        if (next === 59) {
          this.appendToken$1($.get$TokenType_SEMICOLON());
          return this.advance$0();
        }
        if (next === 63) {
          this.appendToken$1($.get$TokenType_QUESTION());
          return this.advance$0();
        }
        if (next === 93) {
          this.appendEndToken$2($.get$TokenType_CLOSE_SQUARE_BRACKET(), $.get$TokenType_OPEN_SQUARE_BRACKET());
          return this.advance$0();
        }
        if (next === 96) {
          this.appendToken$1($.get$TokenType_BACKPING());
          return this.advance$0();
        }
        if (next === 123) {
          this.appendBeginToken$1($.get$TokenType_OPEN_CURLY_BRACKET());
          return this.advance$0();
        }
        if (next === 125) {
          this.appendEndToken$2($.get$TokenType_CLOSE_CURLY_BRACKET(), $.get$TokenType_OPEN_CURLY_BRACKET());
          return this.advance$0();
        }
        if (next === 47)
          return this.tokenizeSlashOrComment$1(next);
        if (next === 64) {
          this.appendToken$1($.get$TokenType_AT());
          return this.advance$0();
        }
        if (next === 34 || next === 39)
          return this.tokenizeString$3(next, this.get$offset(this), false);
        if (next === 46)
          return this.tokenizeDotOrNumber$1(next);
        if (next === 48)
          return this.tokenizeHexOrNumber$1(next);
        if (49 <= next && next <= 57)
          return this.tokenizeNumber$1(next);
        if (next === -1)
          return -1;
        if (!(next >= 65 && next <= 90))
          t1 = next >= 97 && next <= 122;
        else
          t1 = true;
        if (t1)
          return this.tokenizeIdentifier$3(next, this.get$offset(this), true);
        if (next === $.AbstractScanner__$NBSP)
          return this.advance$0();
        t1 = $.get$ScannerErrorCode_ILLEGAL_CHARACTER();
        t2 = this._liblib9$_errorListener;
        t3 = new $.AnalysisError(null, null, null, 0, 0);
        t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, [next]);
        t2.onError$1(t2, t3);
        return this.advance$0();
    }
  },
  findTokenMatchingClosingBraceInInterpolationExpression$0: function() {
    var t1, last, begin;
    t1 = this._groupingStack;
    last = t1.length - 1;
    for (; last >= 0;) {
      if (last >= t1.length)
        throw $.ioore(last);
      begin = t1[last];
      if (begin.get$type(begin) === $.get$TokenType_OPEN_CURLY_BRACKET() || begin.get$type(begin) === $.get$TokenType_STRING_INTERPOLATION_EXPRESSION())
        return begin;
      this._hasUnmatchedGroups2 = true;
      $.JSArray_methods.removeAt$1(t1, last);
      --last;
    }
    return;
  },
  get$source: function(_) {
    return this._liblib9$_source;
  },
  select$3: function(_, choice, yesType, noType) {
    var next = this.advance$0();
    if ($.$eq(next, choice)) {
      this.appendToken$1(yesType);
      return this.advance$0();
    } else {
      this.appendToken$1(noType);
      return next;
    }
  },
  select4$4: function(choice, yesType, noType, offset) {
    var next = this.advance$0();
    if ($.$eq(next, choice)) {
      this.appendToken2$2(yesType, offset);
      return this.advance$0();
    } else {
      this.appendToken2$2(noType, offset);
      return next;
    }
  },
  tokenizeAmpersand$1: function(next) {
    var t1;
    next = this.advance$0();
    t1 = $.getInterceptor(next);
    if (t1.$eq(next, 38)) {
      this.appendToken$1($.get$TokenType_AMPERSAND_AMPERSAND());
      return this.advance$0();
    } else if (t1.$eq(next, 61)) {
      this.appendToken$1($.get$TokenType_AMPERSAND_EQ());
      return this.advance$0();
    } else {
      this.appendToken$1($.get$TokenType_AMPERSAND());
      return next;
    }
  },
  tokenizeBar$1: function(next) {
    var t1;
    next = this.advance$0();
    t1 = $.getInterceptor(next);
    if (t1.$eq(next, 124)) {
      this.appendToken$1($.get$TokenType_BAR_BAR());
      return this.advance$0();
    } else if (t1.$eq(next, 61)) {
      this.appendToken$1($.get$TokenType_BAR_EQ());
      return this.advance$0();
    } else {
      this.appendToken$1($.get$TokenType_BAR());
      return next;
    }
  },
  tokenizeDotOrNumber$1: function(next) {
    var start = this.get$offset(this);
    next = this.advance$0();
    if (typeof next !== "number")
      throw $.iae(next);
    if (48 <= next && next <= 57)
      return this.tokenizeFractionPart$2(next, start);
    else if (46 === next)
      return this.select$3(this, 46, $.get$TokenType_PERIOD_PERIOD_PERIOD(), $.get$TokenType_PERIOD_PERIOD());
    else {
      this.appendToken$1($.get$TokenType_PERIOD());
      return next;
    }
  },
  tokenizeEquals$1: function(next) {
    var t1;
    next = this.advance$0();
    t1 = $.getInterceptor(next);
    if (t1.$eq(next, 61)) {
      this.appendToken$1($.get$TokenType_EQ_EQ());
      return this.advance$0();
    } else if (t1.$eq(next, 62)) {
      this.appendToken$1($.get$TokenType_FUNCTION());
      return this.advance$0();
    }
    this.appendToken$1($.get$TokenType_EQ());
    return next;
  },
  tokenizeExclamation$1: function(next) {
    next = this.advance$0();
    if ($.$eq(next, 61)) {
      this.appendToken$1($.get$TokenType_BANG_EQ());
      return this.advance$0();
    }
    this.appendToken$1($.get$TokenType_BANG());
    return next;
  },
  tokenizeExponent$1: function(next) {
    var hasDigits, t1, t2, t3;
    if (typeof next !== "number")
      return this.tokenizeExponent$1$bailout(1, next);
    if (next === 43 || next === 45) {
      next = this.advance$0();
      if (typeof next !== "number")
        return this.tokenizeExponent$1$bailout(2, next);
    }
    for (hasDigits = false; true; hasDigits = true) {
      if (48 <= next && next <= 57)
        ;
      else {
        if (!hasDigits) {
          t1 = $.get$ScannerErrorCode_MISSING_DIGIT();
          t2 = this._liblib9$_errorListener;
          t3 = new $.AnalysisError(null, null, null, 0, 0);
          t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
          t2.onError$1(t2, t3);
        }
        return next;
      }
      next = this.advance$0();
      if (typeof next !== "number")
        return this.tokenizeExponent$1$bailout(3, next);
    }
  },
  tokenizeExponent$1$bailout: function(state0, next) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(next);
      case 2:
        if (state0 === 2 || state0 === 0 && (t1.$eq(next, 43) || t1.$eq(next, 45)))
          switch (state0) {
            case 0:
              next = this.advance$0();
            case 2:
              state0 = 0;
          }
        hasDigits = false;
      case 3:
        var t1, hasDigits, t2, t3;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                if (typeof next !== "number")
                  throw $.iae(next);
                if (48 <= next && next <= 57)
                  ;
                else {
                  if (!hasDigits) {
                    t1 = $.get$ScannerErrorCode_MISSING_DIGIT();
                    t2 = this._liblib9$_errorListener;
                    t3 = new $.AnalysisError(null, null, null, 0, 0);
                    t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
                    t2.onError$1(t2, t3);
                  }
                  return next;
                }
                next = this.advance$0();
              case 3:
                state0 = 0;
                hasDigits = true;
            }
    }
  },
  tokenizeFractionPart$2: function(next, start) {
    var done, hasDigit, t1, t2, t3;
    if (typeof next !== "number")
      return this.tokenizeFractionPart$2$bailout(1, next, start);
    $LOOP$0:
      for (done = false, hasDigit = false; !done;) {
        if (48 <= next && next <= 57)
          ;
        else if (101 === next || 69 === next) {
          next = this.tokenizeExponent$1(this.advance$0());
          if (typeof next !== "number")
            return this.tokenizeFractionPart$2$bailout(3, next, start);
          done = true;
          hasDigit = true;
          continue $LOOP$0;
        } else {
          done = true;
          continue $LOOP$0;
        }
        next = this.advance$0();
        if (typeof next !== "number")
          return this.tokenizeFractionPart$2$bailout(2, next, start, done);
        hasDigit = true;
      }
    if (!hasDigit) {
      this.appendStringToken$2($.get$TokenType_INT(), this.getString$2(this, start, -2));
      if (46 === next) {
        t1 = $.get$TokenType_PERIOD_PERIOD_PERIOD();
        t2 = $.get$TokenType_PERIOD_PERIOD();
        t3 = this.get$offset(this);
        if (typeof t3 !== "number")
          return this.tokenizeFractionPart$2$bailout(4, 0, 0, 0, t1, t2, t3);
        return this.select4$4(46, t1, t2, t3 - 1);
      }
      t1 = $.get$TokenType_PERIOD();
      t2 = this.get$offset(this);
      if (typeof t2 !== "number")
        return this.tokenizeFractionPart$2$bailout(5, next, 0, 0, t1, t2);
      this.appendToken2$2(t1, t2 - 1);
      return this.bigSwitch$1(next);
    }
    if (next === 100 || next === 68) {
      next = this.advance$0();
      if (typeof next !== "number")
        return this.tokenizeFractionPart$2$bailout(6, next, start);
    }
    t1 = $.get$TokenType_DOUBLE();
    this.appendStringToken$2(t1, this.getString$2(this, start, next < 0 ? 0 : -1));
    return next;
  },
  tokenizeFractionPart$2$bailout: function(state0, next, start, done, t1, t2, t3) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        done = false;
        hasDigit = false;
      default:
        $LOOP$0:
          L0:
            while (true)
              switch (state0) {
                case 0:
                  if (!!done)
                    break L0;
                default:
                  c$0:
                    c$LOOP$0: {
                      switch (state0) {
                        case 0:
                          if (typeof next !== "number")
                            throw $.iae(next);
                        case 3:
                          if (state0 === 0 && 48 <= next && next <= 57)
                            ;
                          else
                            switch (state0) {
                              case 0:
                              case 3:
                                if (state0 === 3 || state0 === 0 && (101 === next || 69 === next))
                                  switch (state0) {
                                    case 0:
                                      next = this.tokenizeExponent$1(this.advance$0());
                                    case 3:
                                      state0 = 0;
                                      done = true;
                                      hasDigit = true;
                                      break c$LOOP$0;
                                  }
                                else {
                                  done = true;
                                  break c$LOOP$0;
                                }
                            }
                          next = this.advance$0();
                        case 2:
                          state0 = 0;
                          hasDigit = true;
                      }
                    }
              }
      case 4:
      case 5:
        if (state0 === 5 || state0 === 4 || state0 === 0 && !hasDigit)
          switch (state0) {
            case 0:
              this.appendStringToken$2($.get$TokenType_INT(), this.getString$2(this, start, -2));
            case 4:
              if (state0 === 4 || state0 === 0 && 46 === next)
                switch (state0) {
                  case 0:
                    t1 = $.get$TokenType_PERIOD_PERIOD_PERIOD();
                    t2 = $.get$TokenType_PERIOD_PERIOD();
                    t3 = this.get$offset(this);
                  case 4:
                    state0 = 0;
                    return this.select4$4(46, t1, t2, $.$sub$n(t3, 1));
                }
              t1 = $.get$TokenType_PERIOD();
              t2 = this.get$offset(this);
            case 5:
              state0 = 0;
              this.appendToken2$2(t1, $.$sub$n(t2, 1));
              return this.bigSwitch$1(next);
          }
        t1 = $.getInterceptor(next);
      case 6:
        var hasDigit;
        if (state0 === 6 || state0 === 0 && (t1.$eq(next, 100) || t1.$eq(next, 68)))
          switch (state0) {
            case 0:
              next = this.advance$0();
            case 6:
              state0 = 0;
          }
        t1 = $.get$TokenType_DOUBLE();
        this.appendStringToken$2(t1, this.getString$2(this, start, $.$lt$n(next, 0) === true ? 0 : -1));
        return next;
    }
  },
  tokenizeGreaterThan$1: function(next) {
    next = this.advance$0();
    if (61 === next) {
      this.appendToken$1($.get$TokenType_GT_EQ());
      return this.advance$0();
    } else if (62 === next) {
      next = this.advance$0();
      if (61 === next) {
        this.appendToken$1($.get$TokenType_GT_GT_EQ());
        return this.advance$0();
      } else {
        this.appendToken$1($.get$TokenType_GT_GT());
        return next;
      }
    } else {
      this.appendToken$1($.get$TokenType_GT());
      return next;
    }
  },
  tokenizeHex$1: function(next) {
    var start, hasDigits, t1, t2, t3;
    start = $.$sub$n(this.get$offset(this), 1);
    for (hasDigits = false; true; hasDigits = true) {
      next = this.advance$0();
      if (typeof next !== "number")
        throw $.iae(next);
      if (!(48 <= next && next <= 57))
        if (!(65 <= next && next <= 70))
          t1 = 97 <= next && next <= 102;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        ;
      else {
        if (!hasDigits) {
          t1 = $.get$ScannerErrorCode_MISSING_HEX_DIGIT();
          t2 = this._liblib9$_errorListener;
          t3 = new $.AnalysisError(null, null, null, 0, 0);
          t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
          t2.onError$1(t2, t3);
        }
        t1 = $.get$TokenType_HEXADECIMAL();
        this.appendStringToken$2(t1, this.getString$2(this, start, next < 0 ? 0 : -1));
        return next;
      }
    }
  },
  tokenizeHexOrNumber$1: function(next) {
    var x, t1;
    x = this.peek$0();
    t1 = $.getInterceptor(x);
    if (t1.$eq(x, 120) || t1.$eq(x, 88)) {
      this.advance$0();
      return this.tokenizeHex$1(x);
    }
    return this.tokenizeNumber$1(next);
  },
  tokenizeIdentifier$3: function(next, start, allowDollar) {
    var t1;
    while (true) {
      if (typeof next !== "number")
        throw $.iae(next);
      if (!(97 <= next && next <= 122))
        if (!(65 <= next && next <= 90))
          if (!(48 <= next && next <= 57))
            if (next !== 95)
              if (!(next === 36 && allowDollar)) {
                if (!(next >= 65 && next <= 90))
                  t1 = next >= 97 && next <= 122;
                else
                  t1 = true;
                if (!t1)
                  t1 = next >= 48 && next <= 57;
                else
                  t1 = true;
              } else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      if (!t1)
        break;
      next = this.advance$0();
    }
    t1 = $.get$TokenType_IDENTIFIER();
    this.appendStringToken$2(t1, this.getString$2(this, start, next < 0 ? 0 : -1));
    return next;
  },
  tokenizeInterpolatedExpression$2: function(next, start) {
    var t1, begin;
    this.appendBeginToken$1($.get$TokenType_STRING_INTERPOLATION_EXPRESSION());
    next = this.advance$0();
    if (typeof next !== "number")
      return this.tokenizeInterpolatedExpression$2$bailout(1, next);
    for (; t1 = $.getInterceptor(next), !t1.$eq(next, -1);)
      if (t1.$eq(next, 125)) {
        begin = this.findTokenMatchingClosingBraceInInterpolationExpression$0();
        if (begin == null) {
          this._tokenStart = this.get$offset(this);
          this.appendToken$1($.get$TokenType_CLOSE_CURLY_BRACKET());
          next = this.advance$0();
          this._tokenStart = this.get$offset(this);
          return next;
        } else {
          t1 = $.getInterceptor$x(begin);
          if (t1.get$type(begin) === $.get$TokenType_OPEN_CURLY_BRACKET()) {
            this._tokenStart = this.get$offset(this);
            this.appendEndToken$2($.get$TokenType_CLOSE_CURLY_BRACKET(), $.get$TokenType_OPEN_CURLY_BRACKET());
            next = this.advance$0();
            this._tokenStart = this.get$offset(this);
          } else if (t1.get$type(begin) === $.get$TokenType_STRING_INTERPOLATION_EXPRESSION()) {
            this._tokenStart = this.get$offset(this);
            this.appendEndToken$2($.get$TokenType_CLOSE_CURLY_BRACKET(), $.get$TokenType_STRING_INTERPOLATION_EXPRESSION());
            next = this.advance$0();
            this._tokenStart = this.get$offset(this);
            return next;
          }
        }
      } else
        next = this.bigSwitch$1(next);
    if (t1.$eq(next, -1))
      return next;
    next = this.advance$0();
    this._tokenStart = this.get$offset(this);
    return next;
  },
  tokenizeInterpolatedExpression$2$bailout: function(state0, next) {
    var t1, begin;
    for (; t1 = $.getInterceptor(next), !t1.$eq(next, -1);)
      if (t1.$eq(next, 125)) {
        begin = this.findTokenMatchingClosingBraceInInterpolationExpression$0();
        if (begin == null) {
          this._tokenStart = this.get$offset(this);
          this.appendToken$1($.get$TokenType_CLOSE_CURLY_BRACKET());
          next = this.advance$0();
          this._tokenStart = this.get$offset(this);
          return next;
        } else {
          t1 = $.getInterceptor$x(begin);
          if (t1.get$type(begin) === $.get$TokenType_OPEN_CURLY_BRACKET()) {
            this._tokenStart = this.get$offset(this);
            this.appendEndToken$2($.get$TokenType_CLOSE_CURLY_BRACKET(), $.get$TokenType_OPEN_CURLY_BRACKET());
            next = this.advance$0();
            this._tokenStart = this.get$offset(this);
          } else if (t1.get$type(begin) === $.get$TokenType_STRING_INTERPOLATION_EXPRESSION()) {
            this._tokenStart = this.get$offset(this);
            this.appendEndToken$2($.get$TokenType_CLOSE_CURLY_BRACKET(), $.get$TokenType_STRING_INTERPOLATION_EXPRESSION());
            next = this.advance$0();
            this._tokenStart = this.get$offset(this);
            return next;
          }
        }
      } else
        next = this.bigSwitch$1(next);
    if (t1.$eq(next, -1))
      return next;
    next = this.advance$0();
    this._tokenStart = this.get$offset(this);
    return next;
  },
  tokenizeInterpolatedIdentifier$2: function(next, start) {
    var t1;
    this.appendStringToken2$3($.get$TokenType_STRING_INTERPOLATION_IDENTIFIER(), "$", 0);
    if (typeof next !== "number")
      throw $.iae(next);
    if (!(65 <= next && next <= 90))
      t1 = 97 <= next && next <= 122 || next === 95;
    else
      t1 = true;
    if (t1) {
      this._tokenStart = this.get$offset(this);
      next = this.tokenizeKeywordOrIdentifier$2(next, false);
    }
    this._tokenStart = this.get$offset(this);
    return next;
  },
  tokenizeKeywordOrIdentifier$2: function(next2, allowDollar) {
    var state, start, t1, t2;
    state = $.get$KeywordState_KEYWORD_STATE();
    start = this.get$offset(this);
    while (true) {
      t1 = state != null;
      if (t1) {
        if (typeof next2 !== "number")
          throw $.iae(next2);
        t2 = 97 <= next2 && next2 <= 122;
      } else
        t2 = false;
      if (!t2)
        break;
      state = state.next$1($.intTypeCast(next2));
      next2 = this.advance$0();
    }
    if (state == null || state.keyword$0() == null)
      return this.tokenizeIdentifier$3(next2, start, allowDollar);
    if (typeof next2 !== "number")
      throw $.iae(next2);
    if (!(65 <= next2 && next2 <= 90))
      t1 = 48 <= next2 && next2 <= 57 || next2 === 95 || next2 === 36;
    else
      t1 = true;
    if (t1)
      return this.tokenizeIdentifier$3(next2, start, allowDollar);
    else if (next2 < 128) {
      this.appendKeywordToken$1(state.keyword$0());
      return next2;
    } else
      return this.tokenizeIdentifier$3(next2, start, allowDollar);
  },
  tokenizeLessThan$1: function(next) {
    next = this.advance$0();
    if (61 === next) {
      this.appendToken$1($.get$TokenType_LT_EQ());
      return this.advance$0();
    } else if (60 === next)
      return this.select$3(this, 61, $.get$TokenType_LT_LT_EQ(), $.get$TokenType_LT_LT());
    else {
      this.appendToken$1($.get$TokenType_LT());
      return next;
    }
  },
  tokenizeMinus$1: function(next) {
    var t1;
    next = this.advance$0();
    t1 = $.getInterceptor(next);
    if (t1.$eq(next, 45)) {
      this.appendToken$1($.get$TokenType_MINUS_MINUS());
      return this.advance$0();
    } else if (t1.$eq(next, 61)) {
      this.appendToken$1($.get$TokenType_MINUS_EQ());
      return this.advance$0();
    } else {
      this.appendToken$1($.get$TokenType_MINUS());
      return next;
    }
  },
  tokenizeMultiLineComment$1: function(next) {
    var t1, nesting, t2, t3;
    next = this.advance$0();
    if (typeof next !== "number")
      return this.tokenizeMultiLineComment$1$bailout(1, next);
    for (t1 = this._liblib9$_lineStarts, nesting = 1; true;)
      if (-1 === next) {
        t1 = $.get$ScannerErrorCode_UNTERMINATED_MULTI_LINE_COMMENT();
        t2 = this._liblib9$_errorListener;
        t3 = new $.AnalysisError(null, null, null, 0, 0);
        t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
        t2.onError$1(t2, t3);
        this.appendCommentToken$2($.get$TokenType_MULTI_LINE_COMMENT(), this.getString$2(this, this._tokenStart, 0));
        return next;
      } else if (42 === next) {
        next = this.advance$0();
        if (47 === next) {
          --nesting;
          if (0 === nesting) {
            this.appendCommentToken$2($.get$TokenType_MULTI_LINE_COMMENT(), this.getString$2(this, this._tokenStart, 0));
            return this.advance$0();
          } else
            next = this.advance$0();
        }
      } else if (47 === next) {
        next = this.advance$0();
        if (42 === next) {
          next = this.advance$0();
          ++nesting;
        }
      } else {
        t2 = $.getInterceptor(next);
        if (t2.$eq(next, 13)) {
          next = this.advance$0();
          if ($.$eq(next, 10))
            next = this.advance$0();
          t1.push(this.get$offset(this));
        } else if (t2.$eq(next, 10)) {
          t1.push(this.get$offset(this));
          next = this.advance$0();
        } else
          next = this.advance$0();
      }
  },
  tokenizeMultiLineComment$1$bailout: function(state0, next) {
    var t1, nesting, t2, t3;
    for (t1 = this._liblib9$_lineStarts, nesting = 1; true;)
      if (-1 === next) {
        t1 = $.get$ScannerErrorCode_UNTERMINATED_MULTI_LINE_COMMENT();
        t2 = this._liblib9$_errorListener;
        t3 = new $.AnalysisError(null, null, null, 0, 0);
        t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
        t2.onError$1(t2, t3);
        this.appendCommentToken$2($.get$TokenType_MULTI_LINE_COMMENT(), this.getString$2(this, this._tokenStart, 0));
        return next;
      } else if (42 === next) {
        next = this.advance$0();
        if (47 === next) {
          --nesting;
          if (0 === nesting) {
            this.appendCommentToken$2($.get$TokenType_MULTI_LINE_COMMENT(), this.getString$2(this, this._tokenStart, 0));
            return this.advance$0();
          } else
            next = this.advance$0();
        }
      } else if (47 === next) {
        next = this.advance$0();
        if (42 === next) {
          next = this.advance$0();
          ++nesting;
        }
      } else {
        t2 = $.getInterceptor(next);
        if (t2.$eq(next, 13)) {
          next = this.advance$0();
          if ($.$eq(next, 10))
            next = this.advance$0();
          t1.push(this.get$offset(this));
        } else if (t2.$eq(next, 10)) {
          t1.push(this.get$offset(this));
          next = this.advance$0();
        } else
          next = this.advance$0();
      }
  },
  tokenizeMultiLineRawString$2: function(quoteChar, start) {
    var next, t1, t2, t3;
    next = this.advance$0();
    if (typeof next !== "number")
      return this.tokenizeMultiLineRawString$2$bailout(1, quoteChar, start, next);
    $outer$0:
      for (; !$.$eq(next, -1);) {
        for (; !$.$eq(next, quoteChar);) {
          next = this.advance$0();
          if ($.$eq(next, -1))
            break $outer$0;
        }
        next = this.advance$0();
        if ($.$eq(next, quoteChar)) {
          next = this.advance$0();
          if ($.$eq(next, quoteChar)) {
            this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
            return this.advance$0();
          }
        }
      }
    t1 = $.get$ScannerErrorCode_UNTERMINATED_STRING_LITERAL();
    t2 = this._liblib9$_errorListener;
    t3 = new $.AnalysisError(null, null, null, 0, 0);
    t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
    t2.onError$1(t2, t3);
    this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
    return this.advance$0();
  },
  tokenizeMultiLineRawString$2$bailout: function(state0, quoteChar, start, next) {
    var t1, t2, t3;
    $outer$0:
      for (; !$.$eq(next, -1);) {
        for (; !$.$eq(next, quoteChar);) {
          next = this.advance$0();
          if ($.$eq(next, -1))
            break $outer$0;
        }
        next = this.advance$0();
        if ($.$eq(next, quoteChar)) {
          next = this.advance$0();
          if ($.$eq(next, quoteChar)) {
            this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
            return this.advance$0();
          }
        }
      }
    t1 = $.get$ScannerErrorCode_UNTERMINATED_STRING_LITERAL();
    t2 = this._liblib9$_errorListener;
    t3 = new $.AnalysisError(null, null, null, 0, 0);
    t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
    t2.onError$1(t2, t3);
    this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
    return this.advance$0();
  },
  tokenizeMultiLineString$3: function(quoteChar, start, raw) {
    var next, t1, t2, t3;
    if (raw)
      return this.tokenizeMultiLineRawString$2(quoteChar, start);
    next = this.advance$0();
    if (typeof next !== "number")
      return this.tokenizeMultiLineString$3$bailout(1, quoteChar, start, next);
    for (; t1 = $.getInterceptor(next), !t1.$eq(next, -1);) {
      if (t1.$eq(next, 36)) {
        this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, -1));
        this._tokenStart = this.get$offset(this);
        next = this.tokenizeStringInterpolation$1(start);
        start = this.get$offset(this);
        continue;
      }
      if (t1.$eq(next, quoteChar)) {
        next = this.advance$0();
        if ($.$eq(next, quoteChar)) {
          next = this.advance$0();
          if ($.$eq(next, quoteChar)) {
            this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
            return this.advance$0();
          }
        }
        continue;
      }
      if (t1.$eq(next, 92))
        if ($.$eq(this.advance$0(), -1))
          break;
      next = this.advance$0();
    }
    t1 = $.get$ScannerErrorCode_UNTERMINATED_STRING_LITERAL();
    t2 = this._liblib9$_errorListener;
    t3 = new $.AnalysisError(null, null, null, 0, 0);
    t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
    t2.onError$1(t2, t3);
    this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
    return this.advance$0();
  },
  tokenizeMultiLineString$3$bailout: function(state0, quoteChar, start, next) {
    var t1, t2, t3;
    for (; t1 = $.getInterceptor(next), !t1.$eq(next, -1);) {
      if (t1.$eq(next, 36)) {
        this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, -1));
        this._tokenStart = this.get$offset(this);
        next = this.tokenizeStringInterpolation$1(start);
        start = this.get$offset(this);
        continue;
      }
      if (t1.$eq(next, quoteChar)) {
        next = this.advance$0();
        if ($.$eq(next, quoteChar)) {
          next = this.advance$0();
          if ($.$eq(next, quoteChar)) {
            this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
            return this.advance$0();
          }
        }
        continue;
      }
      if (t1.$eq(next, 92))
        if ($.$eq(this.advance$0(), -1))
          break;
      next = this.advance$0();
    }
    t1 = $.get$ScannerErrorCode_UNTERMINATED_STRING_LITERAL();
    t2 = this._liblib9$_errorListener;
    t3 = new $.AnalysisError(null, null, null, 0, 0);
    t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
    t2.onError$1(t2, t3);
    this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
    return this.advance$0();
  },
  tokenizeNumber$1: function(next) {
    var start, t1;
    start = this.get$offset(this);
    for (; true;) {
      next = this.advance$0();
      if (typeof next !== "number")
        throw $.iae(next);
      if (48 <= next && next <= 57)
        continue;
      else if (next === 46)
        return this.tokenizeFractionPart$2(this.advance$0(), start);
      else if (next === 100 || next === 68) {
        this.appendStringToken$2($.get$TokenType_DOUBLE(), this.getString$2(this, start, 0));
        return this.advance$0();
      } else if (next === 101 || next === 69)
        return this.tokenizeFractionPart$2(next, start);
      else {
        t1 = $.get$TokenType_INT();
        this.appendStringToken$2(t1, this.getString$2(this, start, next < 0 ? 0 : -1));
        return next;
      }
    }
  },
  tokenizeOpenSquareBracket$1: function(next) {
    next = this.advance$0();
    if ($.$eq(next, 93))
      return this.select$3(this, 61, $.get$TokenType_INDEX_EQ(), $.get$TokenType_INDEX());
    else {
      this.appendBeginToken$1($.get$TokenType_OPEN_SQUARE_BRACKET());
      return next;
    }
  },
  tokenizePlus$1: function(next) {
    next = this.advance$0();
    if (43 === next) {
      this.appendToken$1($.get$TokenType_PLUS_PLUS());
      return this.advance$0();
    } else if (61 === next) {
      this.appendToken$1($.get$TokenType_PLUS_EQ());
      return this.advance$0();
    } else {
      this.appendToken$1($.get$TokenType_PLUS());
      return next;
    }
  },
  tokenizeSingleLineComment$1: function(next) {
    for (; true;) {
      next = this.advance$0();
      if (10 === next || 13 === next || -1 === next) {
        this.appendCommentToken$2($.get$TokenType_SINGLE_LINE_COMMENT(), this.getString$2(this, this._tokenStart, 0));
        return next;
      }
    }
  },
  tokenizeSingleLineRawString$3: function(next, quoteChar, start) {
    var t1, t2, t3;
    next = this.advance$0();
    if (typeof next !== "number")
      return this.tokenizeSingleLineRawString$3$bailout(1, quoteChar, start, next);
    for (; t1 = $.getInterceptor(next), !t1.$eq(next, -1);) {
      if (t1.$eq(next, quoteChar)) {
        this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
        return this.advance$0();
      } else if (t1.$eq(next, 13) || t1.$eq(next, 10)) {
        t1 = $.get$ScannerErrorCode_UNTERMINATED_STRING_LITERAL();
        t2 = this._liblib9$_errorListener;
        t3 = new $.AnalysisError(null, null, null, 0, 0);
        t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
        t2.onError$1(t2, t3);
        this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
        return this.advance$0();
      }
      next = this.advance$0();
    }
    t1 = $.get$ScannerErrorCode_UNTERMINATED_STRING_LITERAL();
    t2 = this._liblib9$_errorListener;
    t3 = new $.AnalysisError(null, null, null, 0, 0);
    t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
    t2.onError$1(t2, t3);
    this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
    return this.advance$0();
  },
  tokenizeSingleLineRawString$3$bailout: function(state0, quoteChar, start, next) {
    var t1, t2, t3;
    for (; t1 = $.getInterceptor(next), !t1.$eq(next, -1);) {
      if (t1.$eq(next, quoteChar)) {
        this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
        return this.advance$0();
      } else if (t1.$eq(next, 13) || t1.$eq(next, 10)) {
        t1 = $.get$ScannerErrorCode_UNTERMINATED_STRING_LITERAL();
        t2 = this._liblib9$_errorListener;
        t3 = new $.AnalysisError(null, null, null, 0, 0);
        t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
        t2.onError$1(t2, t3);
        this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
        return this.advance$0();
      }
      next = this.advance$0();
    }
    t1 = $.get$ScannerErrorCode_UNTERMINATED_STRING_LITERAL();
    t2 = this._liblib9$_errorListener;
    t3 = new $.AnalysisError(null, null, null, 0, 0);
    t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
    t2.onError$1(t2, t3);
    this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
    return this.advance$0();
  },
  tokenizeSingleLineString$3: function(next, quoteChar, start) {
    var t1, t2, t3;
    if (typeof next !== "number")
      return this.tokenizeSingleLineString$3$bailout(1, next, quoteChar, start);
    for (; t1 = $.getInterceptor(next), !t1.$eq(next, quoteChar);) {
      if (t1.$eq(next, 92))
        next = this.advance$0();
      else if (t1.$eq(next, 36)) {
        this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, -1));
        this._tokenStart = this.get$offset(this);
        next = this.tokenizeStringInterpolation$1(start);
        start = this.get$offset(this);
        continue;
      }
      t1 = $.getInterceptor$n(next);
      if (t1.$le(next, 13) === true)
        t1 = t1.$eq(next, 10) || t1.$eq(next, 13) || t1.$eq(next, -1);
      else
        t1 = false;
      if (t1) {
        t1 = $.get$ScannerErrorCode_UNTERMINATED_STRING_LITERAL();
        t2 = this._liblib9$_errorListener;
        t3 = new $.AnalysisError(null, null, null, 0, 0);
        t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
        t2.onError$1(t2, t3);
        this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
        return this.advance$0();
      }
      next = this.advance$0();
    }
    this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
    return this.advance$0();
  },
  tokenizeSingleLineString$3$bailout: function(state0, next, quoteChar, start) {
    var t1, t2, t3;
    for (; t1 = $.getInterceptor(next), !t1.$eq(next, quoteChar);) {
      if (t1.$eq(next, 92))
        next = this.advance$0();
      else if (t1.$eq(next, 36)) {
        this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, -1));
        this._tokenStart = this.get$offset(this);
        next = this.tokenizeStringInterpolation$1(start);
        start = this.get$offset(this);
        continue;
      }
      t1 = $.getInterceptor$n(next);
      if (t1.$le(next, 13) === true)
        t1 = t1.$eq(next, 10) || t1.$eq(next, 13) || t1.$eq(next, -1);
      else
        t1 = false;
      if (t1) {
        t1 = $.get$ScannerErrorCode_UNTERMINATED_STRING_LITERAL();
        t2 = this._liblib9$_errorListener;
        t3 = new $.AnalysisError(null, null, null, 0, 0);
        t3._jtd_constructor_132_impl$5(this._liblib9$_source, this.get$offset(this), 1, t1, []);
        t2.onError$1(t2, t3);
        this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
        return this.advance$0();
      }
      next = this.advance$0();
    }
    this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, 0));
    return this.advance$0();
  },
  tokenizeSlashOrComment$1: function(next) {
    next = this.advance$0();
    if (42 === next)
      return this.tokenizeMultiLineComment$1(next);
    else if (47 === next)
      return this.tokenizeSingleLineComment$1(next);
    else if (61 === next) {
      this.appendToken$1($.get$TokenType_SLASH_EQ());
      return this.advance$0();
    } else {
      this.appendToken$1($.get$TokenType_SLASH());
      return next;
    }
  },
  tokenizeString$3: function(next, start, raw) {
    var next0, t1;
    next0 = this.advance$0();
    t1 = $.getInterceptor(next);
    if (t1.$eq(next, next0)) {
      next0 = this.advance$0();
      if (t1.$eq(next, next0))
        return this.tokenizeMultiLineString$3(next, start, raw);
      else {
        this.appendStringToken$2($.get$TokenType_STRING(), this.getString$2(this, start, -1));
        return next0;
      }
    }
    if (raw)
      return this.tokenizeSingleLineRawString$3(next0, next, start);
    else
      return this.tokenizeSingleLineString$3(next0, next, start);
  },
  tokenizeStringInterpolation$1: function(start) {
    var next;
    this._tokenStart = this.get$offset(this);
    next = this.advance$0();
    if (typeof next !== "number")
      return this.tokenizeStringInterpolation$1$bailout(1, start, next);
    if (next === 123)
      return this.tokenizeInterpolatedExpression$2(next, start);
    else
      return this.tokenizeInterpolatedIdentifier$2(next, start);
  },
  tokenizeStringInterpolation$1$bailout: function(state0, start, next) {
    if ($.$eq(next, 123))
      return this.tokenizeInterpolatedExpression$2(next, start);
    else
      return this.tokenizeInterpolatedIdentifier$2(next, start);
  },
  tokenizeTag$1: function(next) {
    var t1;
    if ($.$eq(this.get$offset(this), 0))
      if ($.$eq(this.peek$0(), 33)) {
        do {
          next = this.advance$0();
          t1 = $.getInterceptor(next);
        } while (!t1.$eq(next, 10) && !t1.$eq(next, 13) && t1.$gt(next, 0) === true);
        this.appendStringToken$2($.get$TokenType_SCRIPT_TAG(), this.getString$2(this, this._tokenStart, 0));
        return next;
      }
    this.appendToken$1($.get$TokenType_HASH());
    return this.advance$0();
  },
  tokenizeTilde$1: function(next) {
    next = this.advance$0();
    if ($.$eq(next, 47))
      return this.select$3(this, 61, $.get$TokenType_TILDE_SLASH_EQ(), $.get$TokenType_TILDE_SLASH());
    else {
      this.appendToken$1($.get$TokenType_TILDE());
      return next;
    }
  },
  AbstractScanner$2: function(source, errorListener) {
    var t1;
    this._liblib9$_source = source;
    this._liblib9$_errorListener = errorListener;
    t1 = new $.Token(null, 0, null, null);
    t1._liblib9$_type = $.get$TokenType_EOF();
    t1._liblib9$_offset = -1;
    this._tokens = t1;
    t1 = this._tokens;
    t1._liblib9$_next = t1;
    t1.set$previous(t1);
    this._liblib9$_tail = this._tokens;
    this._tokenStart = -1;
    this._liblib9$_lineStarts.push(0);
  }
},

"+AbstractScanner": 0,

StringToken: {
  "": function StringToken(_value2, _liblib9$_type, _liblib9$_offset, _liblib9$_previous, _liblib9$_next) {
    this._value2 = _value2;
    this._liblib9$_type = _liblib9$_type;
    this._liblib9$_offset = _liblib9$_offset;
    this._liblib9$_previous = _liblib9$_previous;
    this._liblib9$_next = _liblib9$_next;
  },
  "super": "Token",
  get$_value2: function() {
    return this._value2;
  },
  set$_value2: function(v) {
    this._value2 = v;
  },
  get$lexeme: function() {
    return this._value2;
  },
  value$0: function(_) {
    return this._value2;
  },
  "+value:0:0": 0,
  get$value: function(_receiver) {
    return new $.BoundClosure$i0(this, "value$0", _receiver);
  }
},

"+StringToken": 0,

TokenWithComment: {
  "": function TokenWithComment(_precedingComment, _liblib9$_type, _liblib9$_offset, _liblib9$_previous, _liblib9$_next) {
    this._precedingComment = _precedingComment;
    this._liblib9$_type = _liblib9$_type;
    this._liblib9$_offset = _liblib9$_offset;
    this._liblib9$_previous = _liblib9$_previous;
    this._liblib9$_next = _liblib9$_next;
  },
  "super": "Token",
  get$_precedingComment: function() {
    return this._precedingComment;
  },
  set$_precedingComment: function(v) {
    this._precedingComment = v;
  },
  get$precedingComments: function() {
    return this._precedingComment;
  }
},

"+TokenWithComment": 0,

Token: {
  "": function Token(_liblib9$_type, _liblib9$_offset, _liblib9$_previous, _liblib9$_next) {
    this._liblib9$_type = _liblib9$_type;
    this._liblib9$_offset = _liblib9$_offset;
    this._liblib9$_previous = _liblib9$_previous;
    this._liblib9$_next = _liblib9$_next;
  },
  "super": "Object",
  get$_liblib9$_type: function() {
    return this._liblib9$_type;
  },
  set$_liblib9$_type: function(v) {
    this._liblib9$_type = v;
  },
  get$_liblib9$_offset: function() {
    return this._liblib9$_offset;
  },
  set$_liblib9$_offset: function(v) {
    this._liblib9$_offset = v;
  },
  get$_liblib9$_previous: function() {
    return this._liblib9$_previous;
  },
  set$_liblib9$_previous: function(v) {
    this._liblib9$_previous = v;
  },
  get$_liblib9$_next: function() {
    return this._liblib9$_next;
  },
  set$_liblib9$_next: function(v) {
    this._liblib9$_next = v;
  },
  get$length: function(_) {
    return $.get$length$asx(this.get$lexeme());
  },
  get$lexeme: function() {
    var t1 = this._liblib9$_type;
    t1.get$lexeme;
    return t1._lexeme;
  },
  get$next: function() {
    return this._liblib9$_next;
  },
  next$1: function(arg0) {
    return this.get$next().call$1(arg0);
  },
  get$offset: function(_) {
    return this._liblib9$_offset;
  },
  get$precedingComments: function() {
    return;
  },
  get$previous: function() {
    return this._liblib9$_previous;
  },
  get$type: function(_) {
    return this._liblib9$_type;
  },
  isOperator$0: function() {
    var t1 = this._liblib9$_type;
    t1.isOperator$0;
    return t1._tokenClass !== $.get$TokenClass_NO_CLASS() && t1 !== $.get$TokenType_OPEN_PAREN() && t1 !== $.get$TokenType_OPEN_SQUARE_BRACKET() && t1 !== $.get$TokenType_PERIOD();
  },
  isUserDefinableOperator$0: function() {
    return this._liblib9$_type.isUserDefinableOperator$0();
  },
  setNext$1: function(token) {
    this._liblib9$_next = token;
    token.set$previous(this);
    return token;
  },
  toString$0: function(_) {
    return this.get$lexeme();
  },
  value$0: function(_) {
    var t1 = this._liblib9$_type;
    t1.get$lexeme;
    return t1._lexeme;
  },
  get$value: function(_receiver) {
    return new $.BoundClosure$i0(this, "value$0", _receiver);
  },
  set$previous: function(previous2) {
    this._liblib9$_previous = previous2;
  }
},

"+Token": 0,

StringScanner: {
  "": function StringScanner(_offsetDelta, _string, _stringLength, _charOffset, _liblib9$_source, _liblib9$_errorListener, _tokens, _liblib9$_tail, _firstComment, _lastComment, _tokenStart, _liblib9$_lineStarts, _groupingStack, _hasUnmatchedGroups2) {
    this._offsetDelta = _offsetDelta;
    this._string = _string;
    this._stringLength = _stringLength;
    this._charOffset = _charOffset;
    this._liblib9$_source = _liblib9$_source;
    this._liblib9$_errorListener = _liblib9$_errorListener;
    this._tokens = _tokens;
    this._liblib9$_tail = _liblib9$_tail;
    this._firstComment = _firstComment;
    this._lastComment = _lastComment;
    this._tokenStart = _tokenStart;
    this._liblib9$_lineStarts = _liblib9$_lineStarts;
    this._groupingStack = _groupingStack;
    this._hasUnmatchedGroups2 = _hasUnmatchedGroups2;
  },
  "super": "AbstractScanner",
  get$_offsetDelta: function() {
    return this._offsetDelta;
  },
  set$_offsetDelta: function(v) {
    this._offsetDelta = v;
  },
  get$_string: function() {
    return this._string;
  },
  set$_string: function(v) {
    this._string = v;
  },
  get$_stringLength: function() {
    return this._stringLength;
  },
  set$_stringLength: function(v) {
    this._stringLength = v;
  },
  get$_charOffset: function() {
    return this._charOffset;
  },
  set$_charOffset: function(v) {
    this._charOffset = v;
  },
  get$offset: function(_) {
    var t1 = this._offsetDelta;
    if (typeof t1 !== "number")
      return this.get$offset$bailout1(1, t1);
    return t1 + this._charOffset;
  },
  get$offset$bailout1: function(state0, t1) {
    return $.$add$ns(t1, this._charOffset);
  },
  setSourceStart$3: function(line, column, offset) {
    var t1, i;
    if (line >= 1)
      if (column >= 1)
        if ($.$lt$n(offset, 0) !== true) {
          if (typeof offset !== "number")
            throw $.iae(offset);
          t1 = line + column - 2 >= offset;
        } else
          t1 = true;
      else
        t1 = true;
    else
      t1 = true;
    if (t1)
      return;
    this._offsetDelta = 1;
    for (t1 = this._liblib9$_lineStarts, i = 2; i < line; ++i)
      t1.push(this.get$offset(this));
    this._offsetDelta = $.$add$ns($.$sub$n(offset, column), 1);
    t1.push(this.get$offset(this));
    this._offsetDelta = offset;
  },
  advance$0: function() {
    var t1, t2;
    t1 = this._charOffset + 1;
    t2 = this._stringLength;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (t1 >= t2)
      return -1;
    t2 = this._string;
    this._charOffset = t1;
    return $.codeUnitAt$1$s(t2, t1);
  },
  "+advance:0:0": 0,
  getString$2: function(_, start, endDelta) {
    var t1, t2;
    if (typeof start !== "number")
      return this.getString$2$bailout1(1, start, endDelta);
    t1 = this._string;
    t2 = this._offsetDelta;
    if (typeof t2 !== "number")
      return this.getString$2$bailout1(2, start, endDelta, t1, t2);
    return $.substring$2$s(t1, start - t2, this._charOffset + 1 + endDelta);
  },
  "+getString:2:0": 0,
  getString$2$bailout1: function(state0, start, endDelta, t1, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._string;
        t2 = this._offsetDelta;
      case 2:
        state0 = 0;
        return $.substring$2$s(t1, $.$sub$n(start, t2), this._charOffset + 1 + endDelta);
    }
  },
  peek$0: function() {
    var t1, t2;
    t1 = this._charOffset;
    t2 = $.get$length$asx(this._string);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (t1 + 1 >= t2)
      return -1;
    return $.codeUnitAt$1$s(this._string, this._charOffset + 1);
  },
  "+peek:0:0": 0
},

"+StringScanner": 0,

BeginTokenWithComment: {
  "": function BeginTokenWithComment(_precedingComment, _liblib9$_endToken, _liblib9$_type, _liblib9$_offset, _liblib9$_previous, _liblib9$_next) {
    this._precedingComment = _precedingComment;
    this._liblib9$_endToken = _liblib9$_endToken;
    this._liblib9$_type = _liblib9$_type;
    this._liblib9$_offset = _liblib9$_offset;
    this._liblib9$_previous = _liblib9$_previous;
    this._liblib9$_next = _liblib9$_next;
  },
  "super": "BeginToken",
  get$_precedingComment: function() {
    return this._precedingComment;
  },
  set$_precedingComment: function(v) {
    this._precedingComment = v;
  },
  get$precedingComments: function() {
    return this._precedingComment;
  }
},

"+BeginTokenWithComment": 0,

KeywordToken: {
  "": function KeywordToken(_liblib9$_keyword, _liblib9$_type, _liblib9$_offset, _liblib9$_previous, _liblib9$_next) {
    this._liblib9$_keyword = _liblib9$_keyword;
    this._liblib9$_type = _liblib9$_type;
    this._liblib9$_offset = _liblib9$_offset;
    this._liblib9$_previous = _liblib9$_previous;
    this._liblib9$_next = _liblib9$_next;
  },
  "super": "Token",
  get$_liblib9$_keyword: function() {
    return this._liblib9$_keyword;
  },
  set$_liblib9$_keyword: function(v) {
    this._liblib9$_keyword = v;
  },
  get$keyword: function() {
    return this._liblib9$_keyword;
  },
  keyword$0: function() {
    return this.get$keyword().call$0();
  },
  get$lexeme: function() {
    return $.get$syntax$x(this._liblib9$_keyword);
  },
  value$0: function(_) {
    return this._liblib9$_keyword;
  },
  get$value: function(_receiver) {
    return new $.BoundClosure$i0(this, "value$0", _receiver);
  },
  $isKeywordToken: true
},

"+KeywordToken": 0,

BeginToken: {
  "": function BeginToken(_liblib9$_endToken, _liblib9$_type, _liblib9$_offset, _liblib9$_previous, _liblib9$_next) {
    this._liblib9$_endToken = _liblib9$_endToken;
    this._liblib9$_type = _liblib9$_type;
    this._liblib9$_offset = _liblib9$_offset;
    this._liblib9$_previous = _liblib9$_previous;
    this._liblib9$_next = _liblib9$_next;
  },
  "super": "Token",
  get$_liblib9$_endToken: function() {
    return this._liblib9$_endToken;
  },
  set$_liblib9$_endToken: function(v) {
    this._liblib9$_endToken = v;
  },
  get$endToken: function() {
    return this._liblib9$_endToken;
  },
  set$endToken: function(token) {
    this._liblib9$_endToken = token;
  },
  "+endToken=": 0,
  BeginToken$2: function(type, offset) {
  },
  $isBeginToken: true
},

"+BeginToken": 0,

TokenClass: {
  "": function TokenClass(name, ordinal, _precedence) {
    this.name = name;
    this.ordinal = ordinal;
    this._precedence = _precedence;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  get$ordinal: function() {
    return this.ordinal;
  },
  get$_precedence: function() {
    return this._precedence;
  },
  set$_precedence: function(v) {
    this._precedence = v;
  },
  compareTo$1: function(_, other) {
    var t1 = other.get$ordinal();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this.ordinal - t1;
  },
  toString$0: function(_) {
    return this.name;
  }
},

"+TokenClass": 0,

KeywordTokenWithComment: {
  "": function KeywordTokenWithComment(_precedingComment, _liblib9$_keyword, _liblib9$_type, _liblib9$_offset, _liblib9$_previous, _liblib9$_next) {
    this._precedingComment = _precedingComment;
    this._liblib9$_keyword = _liblib9$_keyword;
    this._liblib9$_type = _liblib9$_type;
    this._liblib9$_offset = _liblib9$_offset;
    this._liblib9$_previous = _liblib9$_previous;
    this._liblib9$_next = _liblib9$_next;
  },
  "super": "KeywordToken",
  get$_precedingComment: function() {
    return this._precedingComment;
  },
  set$_precedingComment: function(v) {
    this._precedingComment = v;
  },
  get$precedingComments: function() {
    return this._precedingComment;
  }
},

"+KeywordTokenWithComment": 0,

TokenType: {
  "": function TokenType(name, ordinal, _tokenClass, _lexeme) {
    this.name = name;
    this.ordinal = ordinal;
    this._tokenClass = _tokenClass;
    this._lexeme = _lexeme;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  get$ordinal: function() {
    return this.ordinal;
  },
  get$_tokenClass: function() {
    return this._tokenClass;
  },
  set$_tokenClass: function(v) {
    this._tokenClass = v;
  },
  get$_lexeme: function() {
    return this._lexeme;
  },
  set$_lexeme: function(v) {
    this._lexeme = v;
  },
  get$lexeme: function() {
    return this._lexeme;
  },
  isAdditiveOperator$0: function() {
    return this._tokenClass === $.get$TokenClass_ADDITIVE_OPERATOR();
  },
  isAssignmentOperator$0: function() {
    return this._tokenClass === $.get$TokenClass_ASSIGNMENT_OPERATOR();
  },
  isEqualityOperator$0: function() {
    return this._tokenClass === $.get$TokenClass_EQUALITY_OPERATOR();
  },
  isIncrementOperator$0: function() {
    var t1 = this._lexeme;
    return t1 === "++" || t1 === "--";
  },
  isMultiplicativeOperator$0: function() {
    return this._tokenClass === $.get$TokenClass_MULTIPLICATIVE_OPERATOR();
  },
  isOperator$0: function() {
    return this._tokenClass !== $.get$TokenClass_NO_CLASS() && this !== $.get$TokenType_OPEN_PAREN() && this !== $.get$TokenType_OPEN_SQUARE_BRACKET() && this !== $.get$TokenType_PERIOD();
  },
  isRelationalOperator$0: function() {
    return this._tokenClass === $.get$TokenClass_RELATIONAL_OPERATOR();
  },
  isShiftOperator$0: function() {
    return this._tokenClass === $.get$TokenClass_SHIFT_OPERATOR();
  },
  isUserDefinableOperator$0: function() {
    var t1 = this._lexeme;
    return t1 === "==" || t1 === "~" || t1 === "[]" || t1 === "[]=" || t1 === "*" || t1 === "/" || t1 === "%" || t1 === "~/" || t1 === "+" || t1 === "-" || t1 === "<<" || t1 === ">>" || t1 === ">=" || t1 === ">" || t1 === "<=" || t1 === "<" || t1 === "&" || t1 === "^" || t1 === "|";
  },
  compareTo$1: function(_, other) {
    var t1 = other.get$ordinal();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this.ordinal - t1;
  },
  toString$0: function(_) {
    return this.name;
  }
},

"+TokenType": 0,

TokenType_EOF0: {
  "": function TokenType_EOF(name, ordinal, _tokenClass, _lexeme) {
    this.name = name;
    this.ordinal = ordinal;
    this._tokenClass = _tokenClass;
    this._lexeme = _lexeme;
  },
  "super": "TokenType",
  toString$0: function(_) {
    return "-eof-";
  }
},

"+TokenType_EOF": 0,

KeywordState_computeKeywordStateTable: function(start, strings, offset, length2) {
  var result, t1, t2, t3, t4, i, chunk, chunkStart, isLeaf, t5, c, t6;
  if (typeof start !== "number")
    return $.KeywordState_computeKeywordStateTable$bailout(1, start, strings, offset, length2);
  if (offset !== (offset | 0))
    return $.KeywordState_computeKeywordStateTable$bailout(1, start, strings, offset, length2);
  if (typeof length2 !== "number")
    return $.KeywordState_computeKeywordStateTable$bailout(1, start, strings, offset, length2);
  result = $.List_List(26, $.KeywordState);
  result.$builtinTypeInfo = [$.KeywordState];
  for (t1 = result.length, t2 = strings.length, t3 = offset + length2, t4 = start + 1, i = offset, chunk = 0, chunkStart = -1, isLeaf = false; i < t3; ++i) {
    if (i < 0 || i >= t2)
      throw $.ioore(i);
    t5 = $.get$length$asx(strings[i]);
    if (typeof t5 !== "number")
      return $.KeywordState_computeKeywordStateTable$bailout(2, start, strings, offset, length2, chunkStart, i, $.JSInt_methods, isLeaf, chunk, result, t2, t1, $.JSNumber_methods, t5);
    if (t5 === start)
      isLeaf = true;
    t5 = $.get$length$asx(strings[i]);
    if (typeof t5 !== "number")
      return $.KeywordState_computeKeywordStateTable$bailout(3, start, strings, offset, length2, chunkStart, i, $.JSInt_methods, isLeaf, chunk, result, t2, t1, $.JSNumber_methods, t5);
    if (t5 > start) {
      c = $.codeUnitAt$1$s(strings[i], start);
      if (typeof c !== "number")
        return $.KeywordState_computeKeywordStateTable$bailout(4, start, strings, offset, length2, chunkStart, i, $.JSInt_methods, isLeaf, chunk, result, t2, t1, $.JSNumber_methods, 0, c);
      if (chunk !== c) {
        if (chunkStart !== -1) {
          t5 = chunk - 97;
          t6 = $.KeywordState_computeKeywordStateTable(t4, strings, chunkStart, i - chunkStart);
          if (t5 >>> 0 !== t5 || t5 >= t1)
            throw $.ioore(t5);
          result[t5] = t6;
        }
        chunkStart = i;
        chunk = c;
      }
    }
  }
  if (chunkStart !== -1) {
    t5 = chunk - 97;
    t3 = $.KeywordState_computeKeywordStateTable(t4, strings, chunkStart, t3 - chunkStart);
    if (t5 >>> 0 !== t5 || t5 >= t1)
      throw $.ioore(t5);
    result[t5] = t3;
  } else {
    t1 = $.get$KeywordState__EMPTY_TABLE();
    if (offset < 0 || offset >= t2)
      throw $.ioore(offset);
    t2 = strings[offset];
    t3 = new $.KeywordState(null, null);
    t3._liblib9$_table = t1;
    if (t2 == null)
      t1 = null;
    else {
      t1 = $.get$Keyword_keywords();
      t2 = t1.$index(t1, t2);
      t1 = t2;
    }
    t3._keyword2 = t1;
    return t3;
  }
  if (isLeaf) {
    if (offset < 0 || offset >= t2)
      throw $.ioore(offset);
    t1 = strings[offset];
    t2 = new $.KeywordState(null, null);
    t2._liblib9$_table = result;
    if (t1 == null)
      t1 = null;
    else {
      t3 = $.get$Keyword_keywords();
      t1 = t3.$index(t3, t1);
    }
    t2._keyword2 = t1;
    return t2;
  } else {
    t1 = new $.KeywordState(null, null);
    t1._liblib9$_table = result;
    t2 = null;
    t1._keyword2 = t2;
    return t1;
  }
},

"+computeKeywordStateTable:4:0": 0,

KeywordState_computeKeywordStateTable$bailout: function(state0, start, strings, offset, length2, chunkStart, i, t1, isLeaf, chunk, result, t4, t3, t2, t5, c) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      result = $.List_List(26, $.KeywordState);
      result.$builtinTypeInfo = [$.KeywordState];
      t1 = $.getInterceptor$ns(offset);
      t2 = $.getInterceptor$ns(start);
      t3 = result.length;
      t4 = strings.length;
      i = offset;
      chunk = 0;
      chunkStart = -1;
      isLeaf = false;
    default:
      var t6;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!($.$lt$n(i, t1.$add(offset, length2)) === true))
                break L0;
              if (i >>> 0 !== i || i >= t4)
                throw $.ioore(i);
              t5 = $.get$length$asx(strings[i]);
            case 2:
              state0 = 0;
              if ($.$eq(t5, start))
                isLeaf = true;
              t5 = $.get$length$asx(strings[i]);
            case 3:
              state0 = 0;
            case 4:
              if (state0 === 4 || state0 === 0 && $.$gt$n(t5, start) === true)
                switch (state0) {
                  case 0:
                    c = $.codeUnitAt$1$s(strings[i], start);
                  case 4:
                    state0 = 0;
                    t5 = $.getInterceptor(chunk);
                    if (!t5.$eq(chunk, c)) {
                      if (chunkStart !== -1) {
                        t5 = t5.$sub(chunk, 97);
                        t6 = $.KeywordState_computeKeywordStateTable(t2.$add(start, 1), strings, chunkStart, i - chunkStart);
                        if (t5 >>> 0 !== t5 || t5 >= t3)
                          throw $.ioore(t5);
                        result[t5] = t6;
                      }
                      chunkStart = i;
                      chunk = c;
                    }
                }
              ++i;
          }
      if (chunkStart !== -1) {
        t5 = $.$sub$n(chunk, 97);
        t1 = $.KeywordState_computeKeywordStateTable(t2.$add(start, 1), strings, chunkStart, $.$sub$n(t1.$add(offset, length2), chunkStart));
        if (t5 >>> 0 !== t5 || t5 >= t3)
          throw $.ioore(t5);
        result[t5] = t1;
      } else {
        t1 = $.get$KeywordState__EMPTY_TABLE();
        if (offset >>> 0 !== offset || offset >= t4)
          throw $.ioore(offset);
        t4 = strings[offset];
        t2 = new $.KeywordState(null, null);
        t2._liblib9$_table = t1;
        if (t4 == null)
          t1 = null;
        else {
          t1 = $.get$Keyword_keywords();
          t4 = t1.$index(t1, t4);
          t1 = t4;
        }
        t2._keyword2 = t1;
        return t2;
      }
      if (isLeaf) {
        if (offset >>> 0 !== offset || offset >= t4)
          throw $.ioore(offset);
        t1 = strings[offset];
        t2 = new $.KeywordState(null, null);
        t2._liblib9$_table = result;
        if (t1 == null)
          t1 = null;
        else {
          t3 = $.get$Keyword_keywords();
          t1 = t3.$index(t3, t1);
        }
        t2._keyword2 = t1;
        return t2;
      } else {
        t1 = new $.KeywordState(null, null);
        t1._liblib9$_table = result;
        t2 = null;
        t1._keyword2 = t2;
        return t1;
      }
  }
},

KeywordState_createKeywordStateTable: function() {
  var values2, strings, t1, t2, i, t3, compare;
  values2 = $.get$Keyword_values();
  strings = $.List_List(values2.length, $.JSString);
  strings.$builtinTypeInfo = [$.JSString];
  for (t1 = values2.length, t2 = strings.length, i = 0; i < t1; ++i) {
    t3 = values2[i];
    t3 = t3.get$syntax(t3);
    if (i >= t2)
      throw $.ioore(i);
    strings[i] = t3;
  }
  compare = $.Comparable_compare$closure;
  t1 = t2 - 1;
  if (t1 - 0 <= 32)
    $.Sort_insertionSort_(strings, 0, t1, compare);
  else
    $.Sort__dualPivotQuicksort(strings, 0, t1, compare);
  return $.KeywordState_computeKeywordStateTable(0, strings, 0, t2);
},

"+createKeywordStateTable:0:0": 0,

Keyword_createKeywordMap: function() {
  var result, t1, t2, keyword;
  result = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  result.$builtinTypeInfo = [$.JSString, $.Keyword];
  t1 = $.get$Keyword_values();
  t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
  t1 = new $.ListIterator(t1, t1.length, 0, null);
  t1.$builtinTypeInfo = [t2];
  for (; t1.moveNext$0();) {
    keyword = t1._liblib$_current;
    result.$indexSet(result, keyword.get$_syntax(), keyword);
  }
  return result;
},

"+createKeywordMap:0:0": 0,

BeginToken$: function(type, offset) {
  var t1 = new $.BeginToken(null, null, 0, null, null);
  t1._liblib9$_type = type;
  t1._liblib9$_offset = offset;
  t1.BeginToken$2(type, offset);
  return t1;
},

"+new BeginToken:2:0": 0}],
["engine.source", "../packages/analyzer_experimental/src/generated/source.dart", , {
Source: {
  "": function Source() {
  },
  "super": "Object"
},

"+Source": 0,

SourceKind: {
  "": function SourceKind(name, ordinal) {
    this.name = name;
    this.ordinal = ordinal;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  get$ordinal: function() {
    return this.ordinal;
  },
  compareTo$1: function(_, other) {
    var t1 = other.get$ordinal();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this.ordinal - t1;
  },
  toString$0: function(_) {
    return this.name;
  },
  $isSourceKind: true
},

"+SourceKind": 0,

LineInfo: {
  "": function LineInfo(_liblib15$_lineStarts) {
    this._liblib15$_lineStarts = _liblib15$_lineStarts;
  },
  "super": "Object",
  get$_liblib15$_lineStarts: function() {
    return this._liblib15$_lineStarts;
  },
  set$_liblib15$_lineStarts: function(v) {
    this._liblib15$_lineStarts = v;
  },
  $isLineInfo: true
},

"+LineInfo": 0}],
["engine.utilities.dart", "../packages/analyzer_experimental/src/generated/utilities_dart.dart", , {
ParameterKind: {
  "": function ParameterKind(name, ordinal, _isOptional2) {
    this.name = name;
    this.ordinal = ordinal;
    this._isOptional2 = _isOptional2;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  get$ordinal: function() {
    return this.ordinal;
  },
  get$_isOptional2: function() {
    return this._isOptional2;
  },
  set$_isOptional2: function(v) {
    this._isOptional2 = v;
  },
  compareTo$1: function(_, other) {
    var t1 = other.get$ordinal();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return this.ordinal - t1;
  },
  toString$0: function(_) {
    return this.name;
  }
},

"+ParameterKind": 0}],
["filesystem", "../lib/filesystem.dart", , {
FileSystemManager: {
  "": function FileSystemManager(_fileSystems) {
    this._fileSystems = _fileSystems;
  },
  "super": "Object",
  get$_fileSystems: function() {
    return this._fileSystems;
  },
  set$_fileSystems: function(v) {
    this._fileSystems = v;
  },
  pickle$1: function(entity) {
    var entityPickle = entity.get$fileSystem().pickle$1(entity);
    return $.S($.get$id$x(entity.get$fileSystem())) + ":" + $.S(entityPickle);
  }
},

"+FileSystemManager": 0,

FileSystem: {
  "": function FileSystem() {
  },
  "super": "Object",
  pickle$1: function(entity) {
    return $.get$id$x(entity);
  }
},

"+FileSystem": 0,

FileSystemEntity: {
  "": function FileSystemEntity() {
  },
  "super": "Object"
},

"+FileSystemEntity": 0,

FileSystemFolder_getChild_closure: {
  "": function FileSystemFolder_getChild_closure(name_0) {
    this.name_0 = name_0;
  },
  "super": "Closure",
  call$1: function(children) {
    var t1, t2, entity;
    for (t1 = $.get$iterator$ax(children), t2 = this.name_0; t1.moveNext$0() === true;) {
      entity = t1.get$current();
      if ($.$eq($.get$name$x(entity), t2)) {
        t1 = new $._FutureImpl(0, $.get$_Zone__current(), null);
        t1.$builtinTypeInfo = [null];
        t1._state = 4;
        t1._resultOrListeners = entity;
        return t1;
      }
    }
    t1 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t1.$builtinTypeInfo = [null];
    t1._state = 4;
    t1._resultOrListeners = null;
    return t1;
  },
  $isFunction: true
},

"+FileSystemFolder_getChild_closure": 0}],
["filesystem_sdk", "../lib/filesystem_sdk.dart", , {
SdkFileSystem: {
  "": function SdkFileSystem(_root) {
    this._root = _root;
  },
  "super": "FileSystem",
  get$_root: function() {
    return this._root;
  },
  set$_root: function(v) {
    this._root = v;
  },
  get$id: function(_) {
    return "sdk";
  },
  pickle$1: function(entity) {
    return $.get$id$x(entity);
  },
  unpickle$1: function(pickle) {
    var paths, t1, t2;
    paths = $.split$1$s(pickle, "/");
    t1 = $.getInterceptor$asx(paths);
    if (t1.get$isEmpty(paths) === true) {
      t1 = new $._FutureImpl(0, $.get$_Zone__current(), null);
      t1.$builtinTypeInfo = [null];
      t1._state = 4;
      t1._resultOrListeners = null;
      return t1;
    }
    t1.removeAt$1(paths, 0);
    t1 = t1.get$isEmpty(paths);
    t2 = this._root;
    if (t1 === true) {
      t1 = new $._FutureImpl(0, $.get$_Zone__current(), null);
      t1.$builtinTypeInfo = [null];
      t1._state = 4;
      t1._resultOrListeners = t2;
      return t1;
    } else
      return this._unpickle$2(t2, paths);
  },
  "+unpickle:1:0": 0,
  _unpickle$2: function(folder, paths) {
    return folder.getChild$1($.removeAt$1$ax(paths, 0)).then$1(new $.SdkFileSystem__unpickle_closure(this, paths));
  },
  readContents$1: function(path) {
    return $.HttpRequest_getString($.Runtime_getURL(path), null, null);
  }
},

"+SdkFileSystem": 0,

SdkFileSystem__unpickle_closure: {
  "": function SdkFileSystem__unpickle_closure(this_0, paths_1) {
    this.this_0 = this_0;
    this.paths_1 = paths_1;
  },
  "super": "Closure",
  call$1: function(entity) {
    var t1 = this.paths_1;
    if ($.get$isEmpty$asx(t1) === true) {
      t1 = new $._FutureImpl(0, $.get$_Zone__current(), null);
      t1.$builtinTypeInfo = [null];
      t1._state = 4;
      t1._resultOrListeners = entity;
      return t1;
    }
    if (typeof entity === "object" && entity !== null && !!$.getInterceptor(entity).$isFileSystemFolder)
      return this.this_0._unpickle$2(entity, t1);
    else {
      t1 = new $._FutureImpl(0, $.get$_Zone__current(), null);
      t1.$builtinTypeInfo = [null];
      t1._state = 4;
      t1._resultOrListeners = null;
      return t1;
    }
  },
  $isFunction: true
},

"+SdkFileSystem__unpickle_closure": 0,

_SdkEntity: {
  "": function _SdkEntity(_parent, _liblib11$_name) {
    this._parent = _parent;
    this._liblib11$_name = _liblib11$_name;
  },
  "super": "FileSystemEntity",
  get$_parent: function() {
    return this._parent;
  },
  set$_parent: function(v) {
    this._parent = v;
  },
  get$_liblib11$_name: function() {
    return this._liblib11$_name;
  },
  set$_liblib11$_name: function(v) {
    this._liblib11$_name = v;
  },
  get$name: function(_) {
    return this._liblib11$_name;
  },
  get$parent: function(_) {
    return this._parent;
  },
  get$fileSystem: function() {
    var t1, t2;
    t1 = this._parent;
    t1.get$fileSystem;
    t2 = t1.rootFs;
    return t2 != null ? t2 : $._SdkEntity.prototype.get$fileSystem.call(t1);
  },
  get$id: function(_) {
    return this.get$path(this);
  },
  get$path: function(_) {
    var t1, t2;
    t1 = this._parent;
    t2 = this._liblib11$_name;
    if (t1 != null)
      return $.S(t1.get$path(t1)) + "/" + $.S(t2);
    else
      return t2;
  },
  "+path": 0
},

"+_SdkEntity": 0,

_SdkFolder: {
  "": function _SdkFolder(rootFs, children, _parent, _liblib11$_name) {
    this.rootFs = rootFs;
    this.children = children;
    this._parent = _parent;
    this._liblib11$_name = _liblib11$_name;
  },
  "super": "_SdkEntity",
  get$rootFs: function() {
    return this.rootFs;
  },
  set$rootFs: function(v) {
    this.rootFs = v;
  },
  get$children: function(receiver) {
    return this.children;
  },
  set$children: function(receiver, v) {
    this.children = v;
  },
  get$fileSystem: function() {
    var t1 = this.rootFs;
    return t1 != null ? t1 : $._SdkEntity.prototype.get$fileSystem.call(this);
  },
  getChildren$0: function() {
    var t1, t2, completer, futureImpl;
    t1 = this.children;
    if (t1 != null) {
      t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
      t2.$builtinTypeInfo = [null];
      t2._state = 4;
      t2._resultOrListeners = t1;
      return t2;
    } else {
      t1 = null;
      t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
      t2.$builtinTypeInfo = [t1];
      completer = new $._AsyncCompleter(t2, false);
      completer.$builtinTypeInfo = [t1];
      futureImpl = completer.future;
      t1 = futureImpl._zone;
      t1._openCallbacks = t1._openCallbacks + 1;
      t1 = this.rootFs;
      t1 = t1 != null ? t1 : $._SdkEntity.prototype.get$fileSystem.call(this);
      t1.readContents$1($.$add$ns(this.get$path(this), "/files.json")).then$1(new $._SdkFolder_getChildren_closure(this, completer)).catchError$1(new $._SdkFolder_getChildren_closure0(this, completer));
      return futureImpl;
    }
  },
  getChild$1: function($name) {
    return this.getChildren$0().then$1(new $._SdkFolder_getChild_closure($name));
  },
  "+getChild:1:0": 0,
  parseJson$1: function(jsonText) {
    var list, results, t1, value, t2;
    list = $.parse(jsonText, null);
    results = $.List_List($, $.FileSystemEntity);
    results.$builtinTypeInfo = [$.FileSystemEntity];
    for (t1 = $.get$iterator$ax(list); t1.moveNext$0() === true;) {
      value = t1.get$current();
      t2 = $.getInterceptor$s(value);
      if (t2.endsWith$1(value, "/") === true)
        results.push(new $._SdkFolder(null, null, this, t2.substring$2(value, 0, $.$sub$n(t2.get$length(value), 1))));
      else
        results.push(new $._SdkFile(this, value));
    }
    return results;
  },
  $isFileSystemFolder: true
},

"+_SdkFolder": 0,

_SdkFolder_getChildren_closure: {
  "": function _SdkFolder_getChildren_closure(this_0, completer_1) {
    this.this_0 = this_0;
    this.completer_1 = completer_1;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = $.getInterceptor$x(t1);
    t2.set$children(t1, t1.parseJson$1(value));
    t3 = this.completer_1;
    t1 = t2.get$children(t1);
    if (t3._isComplete)
      $.throwExpression(new $.StateError("Future already completed"));
    t3._isComplete = true;
    t2 = t3.future._zone;
    t2._openCallbacks = t2._openCallbacks - 1;
    if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
      ;
    t3._setFutureValue$1(t1);
  },
  $isFunction: true
},

"+_SdkFolder_getChildren_closure": 0,

_SdkFolder_getChildren_closure0: {
  "": function _SdkFolder_getChildren_closure(this_2, completer_3) {
    this.this_2 = this_2;
    this.completer_3 = completer_3;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1, t2, t3;
    t1 = this.this_2;
    t2 = $.List_List($, $.FileSystemEntity);
    t2.$builtinTypeInfo = [$.FileSystemEntity];
    t3 = $.getInterceptor$x(t1);
    t3.set$children(t1, t2);
    t2 = this.completer_3;
    t1 = t3.get$children(t1);
    if (t2._isComplete)
      $.throwExpression(new $.StateError("Future already completed"));
    t2._isComplete = true;
    t3 = t2.future._zone;
    t3._openCallbacks = t3._openCallbacks - 1;
    if (!t3._isExecutingCallback && t3._openCallbacks === 0 && t3._children.length === 0)
      ;
    t2._setFutureValue$1(t1);
  },
  $isFunction: true
},

"+_SdkFolder_getChildren_closure": 0,

_SdkFolder_getChild_closure: {
  "": function _SdkFolder_getChild_closure(name_0) {
    this.name_0 = name_0;
  },
  "super": "Closure",
  call$1: function(children) {
    var t1, t2, entity;
    for (t1 = $.get$iterator$ax(children), t2 = this.name_0; t1.moveNext$0() === true;) {
      entity = t1.get$current();
      if ($.$eq($.get$name$x(entity), t2)) {
        t1 = new $._FutureImpl(0, $.get$_Zone__current(), null);
        t1.$builtinTypeInfo = [null];
        t1._state = 4;
        t1._resultOrListeners = entity;
        return t1;
      }
    }
    t1 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t1.$builtinTypeInfo = [null];
    t1._state = 4;
    t1._resultOrListeners = null;
    return t1;
  },
  $isFunction: true
},

"+_SdkFolder_getChild_closure": 0,

_SdkFile: {
  "": function _SdkFile(_parent, _liblib11$_name) {
    this._parent = _parent;
    this._liblib11$_name = _liblib11$_name;
  },
  "super": "_SdkEntity",
  get$modifyable: function() {
    return false;
  },
  readContents$0: function() {
    var t1, t2;
    t1 = this._parent;
    t1.get$fileSystem;
    t2 = t1.rootFs;
    t1 = t2 != null ? t2 : $._SdkEntity.prototype.get$fileSystem.call(t1);
    return t1.readContents$1(this.get$path(this));
  },
  $isFileSystemFile: true
},

"+_SdkFile": 0}],
["filesystem_sdk_test", "../test/filesystem_sdk_test.dart", , {
basicTests_closure: {
  "": function basicTests_closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.test("exists", new $.basicTests__closure());
    $.test("rootExists", new $.basicTests__closure0());
    $.test("readVersion", new $.basicTests__closure1());
    $.test("readDirectory", new $.basicTests__closure2());
    $.test("pickleFile", new $.basicTests__closure3());
    $.test("pickleDirectory", new $.basicTests__closure4());
  },
  $isFunction: true
},

"+basicTests_closure": 0,

basicTests__closure: {
  "": function basicTests__closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.expect($.get$sdkFileSystem(), $.C__IsNotNull, null, null, false);
  },
  $isFunction: true
},

"+basicTests__closure": 0,

basicTests__closure0: {
  "": function basicTests__closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.expect($.get$sdkFileSystem()._root, $.C__IsNotNull, null, null, false);
  },
  $isFunction: true
},

"+basicTests__closure": 0,

basicTests__closure1: {
  "": function basicTests__closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.get$sdkFileSystem();
    var versionContents = $.HttpRequest_getString($.Runtime_getURL("sdk/version"), null, null);
    versionContents.then$1(new $.basicTests___closure2());
    $.expect(versionContents, $._Completes_PGb, null, null, false);
  },
  $isFunction: true
},

"+basicTests__closure": 0,

basicTests___closure2: {
  "": function basicTests___closure() {
  },
  "super": "Closure",
  call$1: function(str) {
    str = $.trim$0$s(str);
    $.expect($.get$length$asx(str), new $._OrderingComparison(100, false, true, false, "a value less than", true), null, null, false);
    $.expect(str, new $._StringStartsWith("0."), null, null, false);
    $.expect(str, new $._StringContainsInOrder(["_r"]), null, null, false);
  },
  $isFunction: true
},

"+basicTests___closure": 0,

basicTests__closure2: {
  "": function basicTests__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var future = $.get$sdkFileSystem()._root.getChildren$0();
    future.then$1(new $.basicTests___closure1());
    $.expect(future, $._Completes_PGb, null, null, false);
  },
  $isFunction: true
},

"+basicTests__closure": 0,

basicTests___closure1: {
  "": function basicTests___closure() {
  },
  "super": "Closure",
  call$1: function(children) {
    var t1, t2, folder, t3, file;
    t1 = $.getInterceptor$asx(children);
    t2 = t1.get$length(children);
    $.expect(t2, new $._DeepMatcher(2, 100, null), null, null, false);
    folder = t1.$index(children, 0);
    t2 = $.getInterceptor$x(folder);
    t3 = t2.get$name(folder);
    $.expect(t3, new $._StringEqualsMatcher("lib"), null, null, false);
    $.expect(t2.get$id(folder), $.C__IsNotNull, null, null, false);
    t2 = t2.get$parent(folder);
    t3 = $.get$sdkFileSystem()._root;
    $.expect(t2, new $._DeepMatcher(t3, 100, null), null, null, false);
    t2 = folder.get$fileSystem();
    t3 = $.get$sdkFileSystem();
    $.expect(t2, new $._DeepMatcher(t3, 100, null), null, null, false);
    file = t1.$index(children, 1);
    t1 = $.getInterceptor$x(file);
    t2 = t1.get$name(file);
    $.expect(t2, new $._StringEqualsMatcher("version"), null, null, false);
    $.expect(t1.get$id(file), $.C__IsNotNull, null, null, false);
    t1 = t1.get$parent(file);
    t2 = $.get$sdkFileSystem()._root;
    $.expect(t1, new $._DeepMatcher(t2, 100, null), null, null, false);
    t1 = file.get$fileSystem();
    t2 = $.get$sdkFileSystem();
    $.expect(t1, new $._DeepMatcher(t2, 100, null), null, null, false);
    t1 = file.get$modifyable();
    $.expect(t1, new $._DeepMatcher(false, 100, null), null, null, false);
  },
  $isFunction: true
},

"+basicTests___closure": 0,

basicTests__closure3: {
  "": function basicTests__closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.expect($.get$sdkFileSystem().unpickle$1("sdk/version").then$1(new $.basicTests___closure0()), $._Completes_PGb, null, null, false);
  },
  $isFunction: true
},

"+basicTests__closure": 0,

basicTests___closure0: {
  "": function basicTests___closure() {
  },
  "super": "Closure",
  call$1: function(file) {
    var t1, t2;
    $.expect(file, $.C__IsNotNull, null, null, false);
    $.expect(typeof file === "object" && file !== null && !!$.getInterceptor(file).$isFileSystemFile, true, null, null, false);
    t1 = $.getInterceptor$x(file);
    t2 = t1.get$name(file);
    $.expect(t2, new $._StringEqualsMatcher("version"), null, null, false);
    $.get$sdkFileSystem();
    t1 = t1.get$id(file);
    $.expect(t1, new $._StringEqualsMatcher("sdk/version"), null, null, false);
  },
  $isFunction: true
},

"+basicTests___closure": 0,

basicTests__closure4: {
  "": function basicTests__closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.expect($.get$sdkFileSystem().unpickle$1("sdk/lib").then$1(new $.basicTests___closure()), $._Completes_PGb, null, null, false);
  },
  $isFunction: true
},

"+basicTests__closure": 0,

basicTests___closure: {
  "": function basicTests___closure() {
  },
  "super": "Closure",
  call$1: function(file) {
    var t1, t2;
    $.expect(file, $.C__IsNotNull, null, null, false);
    $.expect(typeof file === "object" && file !== null && !!$.getInterceptor(file).$isFileSystemFolder, true, null, null, false);
    t1 = $.getInterceptor$x(file);
    t2 = t1.get$name(file);
    $.expect(t2, new $._StringEqualsMatcher("lib"), null, null, false);
    $.get$sdkFileSystem();
    t1 = t1.get$id(file);
    $.expect(t1, new $._StringEqualsMatcher("sdk/lib"), null, null, false);
  },
  $isFunction: true
},

"+basicTests___closure": 0,

basicTests: function() {
  $.group("filesystem_sdk", new $.basicTests_closure());
},

"+basicTests:0:0": 0}],
["html_common", "dart:html_common", , {
_convertDartToNative_PrepareForStructuredClone_findSlot: {
  "": function _convertDartToNative_PrepareForStructuredClone_findSlot(values_1, copies_2) {
    this.values_1 = values_1;
    this.copies_2 = copies_2;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_1;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_2.push(null);
    return $length;
  },
  $isFunction: true
},

"+_convertDartToNative_PrepareForStructuredClone_findSlot": 0,

_convertDartToNative_PrepareForStructuredClone_readSlot: {
  "": function _convertDartToNative_PrepareForStructuredClone_readSlot(copies_3) {
    this.copies_3 = copies_3;
  },
  "super": "Closure",
  call$1: function(i) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $isFunction: true
},

"+_convertDartToNative_PrepareForStructuredClone_readSlot": 0,

_convertDartToNative_PrepareForStructuredClone_writeSlot: {
  "": function _convertDartToNative_PrepareForStructuredClone_writeSlot(copies_4) {
    this.copies_4 = copies_4;
  },
  "super": "Closure",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  },
  $isFunction: true
},

"+_convertDartToNative_PrepareForStructuredClone_writeSlot": 0,

_convertDartToNative_PrepareForStructuredClone_cleanupSlots: {
  "": function _convertDartToNative_PrepareForStructuredClone_cleanupSlots() {
  },
  "super": "Closure",
  call$0: function() {
  },
  $isFunction: true
},

"+_convertDartToNative_PrepareForStructuredClone_cleanupSlots": 0,

_convertDartToNative_PrepareForStructuredClone_walk: {
  "": function _convertDartToNative_PrepareForStructuredClone_walk(findSlot_5, readSlot_6, writeSlot_7) {
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  },
  "super": "Closure",
  call$1: function(e) {
    var t1, slot, t2, $length, copy, i;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isDateTime)
      throw $.wrapException(new $.UnimplementedError("structured clone of DateTime"));
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isRegExp)
      throw $.wrapException(new $.UnimplementedError("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFile0)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isBlob)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isByteBuffer)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isTypedData)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isMap) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (t2 != null)
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      e.forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || !!$.getInterceptor(e).$isList)) {
      if (typeof e !== "string" && (typeof e !== "object" || e === null || e.constructor !== Array && !$.isJsIndexable(e, e[$.dispatchPropertyName])))
        return this.call$1$bailout(1, e);
      t1 = $.getInterceptor(e);
      $length = e.length;
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null) {
        if (true === copy) {
          copy = new Array($length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      copy = new Array($length);
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !$.isJsIndexable(copy, copy[$.dispatchPropertyName]))
        return this.call$1$bailout(2, e, copy, slot, t1, $length);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.wrapException(new $.UnimplementedError("structured clone of other type"));
  },
  call$1$bailout: function(state0, e, copy, slot, t1, $length) {
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isDateTime)
          throw $.wrapException(new $.UnimplementedError("structured clone of DateTime"));
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isRegExp)
          throw $.wrapException(new $.UnimplementedError("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFile0)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isBlob)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isByteBuffer)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isTypedData)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isMap) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (t2 != null)
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          e.forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
          return t1.copy_0;
        }
      default:
        var t2, i;
        if (state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || !!$.getInterceptor(e).$isList))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t1 = $.getInterceptor$asx(e);
              $length = t1.get$length(e);
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (copy != null) {
                if (true === copy) {
                  copy = new Array($length);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              copy = new Array($length);
            case 2:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              if (typeof $length !== "number")
                throw $.iae($length);
              i = 0;
              for (; i < $length; ++i)
                $.JSArray_methods.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        throw $.wrapException(new $.UnimplementedError("structured clone of other type"));
    }
  },
  $isFunction: true
},

"+_convertDartToNative_PrepareForStructuredClone_walk": 0,

_convertDartToNative_PrepareForStructuredClone_walk_closure: {
  "": function _convertDartToNative_PrepareForStructuredClone_walk_closure(box_0, walk_8) {
    this.box_0 = box_0;
    this.walk_8 = walk_8;
  },
  "super": "Closure",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  },
  $isFunction: true
},

"+_convertDartToNative_PrepareForStructuredClone_walk_closure": 0,

CssClassSetImpl: {
  "": function CssClassSetImpl() {
  },
  "super": "Object",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  toggle$1: function(value) {
    var s, result;
    s = this.readClasses$0();
    if (s.contains$1(s, value)) {
      s.remove$1(s, value);
      result = false;
    } else {
      s.add$1(s, value);
      result = true;
    }
    this.writeClasses$1(s);
    return result;
  },
  get$iterator: function(_) {
    var t1 = this.readClasses$0();
    t1 = new $.LinkedHashSetIterator(t1, t1._modifications, null, null);
    t1.$builtinTypeInfo = [null];
    t1._cell = t1._set._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  join$1: function(_, separator) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, separator);
  },
  map$1: function(_, f) {
    var t1, t2;
    t1 = this.readClasses$0();
    t2 = $.getRuntimeTypeArgument(t1, t1.$asIterableBase, 0);
    t1 = new $.MappedIterable(t1, f);
    t1.$builtinTypeInfo = [t2, null];
    return t1;
  },
  where$1: function(_, f) {
    var t1, t2;
    t1 = this.readClasses$0();
    t2 = $.getRuntimeTypeArgument(t1, t1.$asIterableBase, 0);
    t1 = new $.WhereIterable(t1, f);
    t1.$builtinTypeInfo = [t2];
    return t1;
  },
  get$isEmpty: function(_) {
    return this.readClasses$0()._liblib0$_length === 0;
  },
  get$isNotEmpty: function(_) {
    return this.readClasses$0()._liblib0$_length !== 0;
  },
  get$length: function(_) {
    return this.readClasses$0()._liblib0$_length;
  },
  fold$2: function(_, initialValue, combine) {
    var t1 = this.readClasses$0();
    return t1.fold$2(t1, initialValue, combine);
  },
  contains$1: function(_, value) {
    var t1 = this.readClasses$0();
    return t1.contains$1(t1, value);
  },
  add$1: function(_, value) {
    this.modify$1(this, new $.CssClassSetImpl_add_closure(value));
  },
  remove$1: function(_, value) {
    var s, result;
    if (typeof value !== "string")
      return false;
    s = this.readClasses$0();
    result = s.remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  addAll$1: function(_, iterable) {
    this.modify$1(this, new $.CssClassSetImpl_addAll_closure(iterable));
  },
  removeAll$1: function(iterable) {
    this.modify$1(this, new $.CssClassSetImpl_removeAll_closure(iterable));
  },
  union$1: function(_, other) {
    var t1, t2;
    t1 = this.readClasses$0();
    t2 = t1._newSet$0();
    t2.addAll$1(t2, t1);
    t2.addAll$1(t2, other);
    return t2;
  },
  get$first: function(_) {
    var t1 = this.readClasses$0()._first;
    if (t1 == null)
      $.throwExpression(new $.StateError("No elements"));
    return t1.get$_liblib0$_element();
  },
  get$single: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$single(t1);
  },
  toList$1$growable: function(_, growable) {
    var t1 = this.readClasses$0();
    return $.List_List$from(t1, growable, $.getRuntimeTypeArgument(t1, t1.$asIterableBase, 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  skip$1: function(_, n) {
    var t1, t2;
    t1 = this.readClasses$0();
    t2 = $.getRuntimeTypeArgument(t1, t1.$asIterableBase, 0);
    t1 = new $.SkipIterable(t1, n);
    t1.$builtinTypeInfo = [t2];
    t2 = t1._skipCount;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0) === true)
      $.throwExpression(new $.RangeError(t2));
    return t1;
  },
  modify$1: function(_, f) {
    var s = this.readClasses$0();
    f.call$1(s);
    this.writeClasses$1(s);
  },
  $isIterable: true,
  $asIterable: function() { return [$.JSString]; }
},

"+CssClassSetImpl": 0,

CssClassSetImpl_add_closure: {
  "": function CssClassSetImpl_add_closure(value_0) {
    this.value_0 = value_0;
  },
  "super": "Closure",
  call$1: function(s) {
    return $.add$1$ax(s, this.value_0);
  },
  $isFunction: true
},

"+CssClassSetImpl_add_closure": 0,

CssClassSetImpl_addAll_closure: {
  "": function CssClassSetImpl_addAll_closure(iterable_0) {
    this.iterable_0 = iterable_0;
  },
  "super": "Closure",
  call$1: function(s) {
    return $.addAll$1$ax(s, this.iterable_0);
  },
  $isFunction: true
},

"+CssClassSetImpl_addAll_closure": 0,

CssClassSetImpl_removeAll_closure: {
  "": function CssClassSetImpl_removeAll_closure(iterable_0) {
    this.iterable_0 = iterable_0;
  },
  "super": "Closure",
  call$1: function(s) {
    return s.removeAll$1(this.iterable_0);
  },
  $isFunction: true
},

"+CssClassSetImpl_removeAll_closure": 0,

FilteredElementList: {
  "": function FilteredElementList(_node, _childNodes) {
    this._node = _node;
    this._childNodes = _childNodes;
  },
  "super": "ListBase",
  get$_node: function() {
    return this._node;
  },
  get$_childNodes: function() {
    return this._childNodes;
  },
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_closure()), true, $.Element);
  },
  "+_filtered": 0,
  forEach$1: function(_, f) {
    $.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len;
    if (typeof newLength !== "number")
      return this.set$length$bailout(1, newLength);
    len = this.get$_filtered().length;
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  set$length$bailout: function(state0, newLength) {
    var len, t1;
    len = this.get$_filtered().length;
    t1 = $.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len) === true)
      return;
    else if (t1.$lt(newLength, 0) === true)
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  contains$1: function(_, element) {
    return element != null && $.$eq($.get$parentNode$x(element), this._node);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException(new $.UnsupportedError("Cannot setRange on filtered list"));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  replaceRange$3: function(_, start, end, iterable) {
    throw $.wrapException(new $.UnsupportedError("Cannot replaceRange on filtered list"));
  },
  removeRange$2: function(_, start, end) {
    $.IterableMixinWorkaround_forEach($.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new $.FilteredElementList_removeRange_closure());
  },
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  insert$2: function(_, index, value) {
    var t1 = this._childNodes;
    t1.insert$2(t1, index, value);
  },
  insertAll$2: function(_, index, iterable) {
    var t1, t2;
    t1 = this._childNodes._this;
    t2 = t1.childNodes;
    if (index < 0 || index >= t2.length)
      throw $.ioore(index);
    $.insertAllBefore$2$x(t1, iterable, t2[index]);
  },
  removeAt$1: function(_, index) {
    var t1, result;
    t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    result = t1[index];
    $.remove$0$ax(result);
    return result;
  },
  remove$1: function(_, element) {
    var i, t1, indexElement;
    if (typeof element !== "object" || element === null || !$.getInterceptor(element).$isElement)
      return false;
    for (i = 0; i < this.get$_filtered().length; ++i) {
      t1 = this.get$_filtered();
      if (i >= t1.length)
        throw $.ioore(i);
      indexElement = t1[i];
      if (indexElement === element) {
        $.remove$0$ax(indexElement);
        return true;
      }
    }
    return false;
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this.get$_filtered();
    t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    return t1;
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null
},

"+FilteredElementList": 0,

FilteredElementList__filtered_closure: {
  "": function FilteredElementList__filtered_closure() {
  },
  "super": "Closure",
  call$1: function(n) {
    return typeof n === "object" && n !== null && !!$.getInterceptor(n).$isElement;
  },
  $isFunction: true
},

"+FilteredElementList__filtered_closure": 0,

FilteredElementList_removeRange_closure: {
  "": function FilteredElementList_removeRange_closure() {
  },
  "super": "Closure",
  call$1: function(el) {
    return $.remove$0$ax(el);
  },
  $isFunction: true
},

"+FilteredElementList_removeRange_closure": 0,

_convertDartToNative_PrepareForStructuredClone: function(value) {
  var copies, copy;
  copies = [];
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(new $._convertDartToNative_PrepareForStructuredClone_findSlot([], copies), new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies), new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies)).call$1(value);
  new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots().call$0();
  return copy;
},

"+_convertDartToNative_PrepareForStructuredClone:1:0": 0,

Device_cssPrefix: function() {
  if ($.Device__cachedCssPrefix == null) {
    if ($.Device__isFirefox == null)
      $.Device__isFirefox = $.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
    if ($.Device__isFirefox === true)
      $.Device__cachedCssPrefix = "-moz-";
    else {
      if ($.Device__isIE == null) {
        if ($.Device__isOpera == null)
          $.Device__isOpera = $.contains$2$asx(window.navigator.userAgent, "Opera", 0);
        $.Device__isIE = $.Device__isOpera !== true && $.contains$2$asx(window.navigator.userAgent, "MSIE", 0) === true;
      }
      if ($.Device__isIE === true)
        $.Device__cachedCssPrefix = "-ms-";
      else {
        if ($.Device__isOpera == null)
          $.Device__isOpera = $.contains$2$asx(window.navigator.userAgent, "Opera", 0);
        if ($.Device__isOpera === true)
          $.Device__cachedCssPrefix = "-o-";
        else
          $.Device__cachedCssPrefix = "-webkit-";
      }
    }
  }
  return $.Device__cachedCssPrefix;
},

"+cssPrefix": 0}],
["java.core", "../packages/analyzer_experimental/src/generated/java_core.dart", , {
JavaString_format_closure: {
  "": function JavaString_format_closure(box_0, args_1) {
    this.box_0 = box_0;
    this.args_1 = args_1;
  },
  "super": "Closure",
  call$1: function(match) {
    var t1, t2, t3;
    switch (match.group$1(1)) {
      case "%":
        return "%";
      case "s":
        t1 = this.box_0;
        t2 = this.args_1;
        if ($.$ge$n(t1.index_0, t2.length) === true)
          throw $.wrapException(new $.MissingFormatArgumentException(match.group$1(0)));
        t3 = t1.index_0;
        t1.index_0 = $.$add$ns(t3, 1);
        if (t3 >>> 0 !== t3 || t3 >= t2.length)
          throw $.ioore(t3);
        return $.toString$0(t2[t3]);
      default:
        return match.group$1(1);
    }
  },
  $isFunction: true
},

"+JavaString_format_closure": 0,

PrintWriter: {
  "": function PrintWriter() {
  },
  "super": "Object"
},

"+PrintWriter": 0,

PrintStringWriter: {
  "": function PrintStringWriter(_sb) {
    this._sb = _sb;
  },
  "super": "PrintWriter",
  get$_sb: function() {
    return this._sb;
  },
  toString$0: function(_) {
    return this._sb._contents;
  }
},

"+PrintStringWriter": 0,

JavaException: {
  "": function JavaException(message, e) {
    this.message = message;
    this.e = e;
  },
  "super": "Object",
  get$message: function(receiver) {
    return this.message;
  },
  get$e: function() {
    return this.e;
  },
  toString$0: function(_) {
    return "JavaException: " + $.S(this.message) + " " + $.S(this.e);
  },
  $isException: true
},

"+JavaException": 0,

IllegalArgumentException: {
  "": function IllegalArgumentException(message) {
    this.message = message;
  },
  "super": "Object",
  get$message: function(receiver) {
    return this.message;
  },
  toString$0: function(_) {
    return "IllegalStateException: " + this.message;
  },
  $isException: true
},

"+IllegalArgumentException": 0,

StringIndexOutOfBoundsException: {
  "": function StringIndexOutOfBoundsException(index) {
    this.index = index;
  },
  "super": "Object",
  get$index: function(receiver) {
    return this.index;
  },
  toString$0: function(_) {
    return "StringIndexOutOfBoundsException: " + $.S(this.index);
  },
  $isException: true
},

"+StringIndexOutOfBoundsException": 0,

IllegalStateException: {
  "": function IllegalStateException(message) {
    this.message = message;
  },
  "super": "Object",
  get$message: function(receiver) {
    return this.message;
  },
  toString$0: function(_) {
    return "IllegalStateException: " + this.message;
  },
  $isException: true
},

"+IllegalStateException": 0,

MissingFormatArgumentException: {
  "": function MissingFormatArgumentException(s) {
    this.s = s;
  },
  "super": "Object",
  get$s: function() {
    return this.s;
  },
  toString$0: function(_) {
    return "MissingFormatArgumentException: " + $.S(this.s);
  },
  $isException: true
},

"+MissingFormatArgumentException": 0,

ListWrapper: {
  "": function ListWrapper(elements) {
    this.elements = elements;
  },
  "super": "ListBase",
  get$elements: function(receiver) {
    return this.elements;
  },
  set$elements: function(receiver, v) {
    this.elements = v;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this.get$elements(this);
    t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    return t1;
  },
  $index: function(_, index) {
    var t1 = this.get$elements(this);
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$elements(this);
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  set$length: function(_, newLength) {
    $.JSArray_methods.set$length(this.get$elements(this), newLength);
  },
  get$length: function(_) {
    return this.get$elements(this).length;
  },
  add$1: function(_, value) {
    this.get$elements(this).push(value);
  },
  addAll$1: function(_, iterable) {
    $.JSArray_methods.addAll$1(this.get$elements(this), iterable);
  },
  setAll$2: function(_, index, iterable) {
    var t1 = this.get$elements(this);
    $.IterableMixinWorkaround_setAllList(t1, index, iterable);
  },
  indexOf$2: function(_, element, start) {
    var t1 = this.get$elements(this);
    return $.Arrays_indexOf(t1, element, start, t1.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  insert$2: function(_, index, element) {
    $.JSArray_methods.insert$2(this.get$elements(this), index, element);
  },
  insertAll$2: function(_, index, iterable) {
    var t1 = this.get$elements(this);
    $.IterableMixinWorkaround_insertAllList(t1, index, iterable);
  },
  lastIndexOf$2: function(_, element, start) {
    var t1 = this.get$elements(this);
    return $.Arrays_lastIndexOf(t1, element, t1.length - 1);
  },
  lastIndexOf$1: function($receiver, element) {
    return this.lastIndexOf$2($receiver, element, null);
  },
  clear$0: function(_) {
    $.JSArray_methods.set$length(this.get$elements(this), 0);
  },
  remove$1: function(_, element) {
    return $.JSArray_methods.remove$1(this.get$elements(this), element);
  },
  removeAt$1: function(_, index) {
    return $.JSArray_methods.removeAt$1(this.get$elements(this), index);
  },
  removeLast$0: function(_) {
    var t1 = this.get$elements(this);
    if (0 >= t1.length)
      throw $.ioore(0);
    return t1.pop();
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    var t1 = this.get$elements(this);
    $.IterableMixinWorkaround_setRangeList(t1, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  removeRange$2: function(_, start, end) {
    $.JSArray_methods.removeRange$2(this.get$elements(this), start, end);
  },
  replaceRange$3: function(_, start, end, iterable) {
    var t1 = this.get$elements(this);
    $.IterableMixinWorkaround__rangeCheck(t1, start, end);
    $.JSArray_methods.removeRange$2(t1, start, end);
    $.IterableMixinWorkaround_insertAllList(t1, start, iterable);
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
},

"+ListWrapper": 0,

MapEntry: {
  "": function MapEntry(_liblib13$_map, _liblib13$_key, _liblib13$_value) {
    this._liblib13$_map = _liblib13$_map;
    this._liblib13$_key = _liblib13$_key;
    this._liblib13$_value = _liblib13$_value;
  },
  "super": "Object",
  get$_liblib13$_map: function() {
    return this._liblib13$_map;
  },
  get$_liblib13$_key: function() {
    return this._liblib13$_key;
  },
  get$_liblib13$_value: function() {
    return this._liblib13$_value;
  },
  set$_liblib13$_value: function(v) {
    this._liblib13$_value = v;
  },
  getKey$0: function() {
    return this._liblib13$_key;
  },
  getValue$0: function() {
    return this._liblib13$_value;
  }
},

"+MapEntry": 0,

getMapEntrySet_closure: {
  "": function getMapEntrySet_closure(m_0, result_1) {
    this.m_0 = m_0;
    this.result_1 = result_1;
  },
  "super": "Closure",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.result_1;
    t2 = new $.MapEntry(this.m_0, k, v);
    t2.$builtinTypeInfo = [null, null];
    t1.add$1(t1, t2);
  },
  $isFunction: true
},

"+getMapEntrySet_closure": 0,

JavaStringBuilder: {
  "": function JavaStringBuilder(sb) {
    this.sb = sb;
  },
  "super": "Object",
  get$sb: function() {
    return this.sb;
  },
  set$sb: function(v) {
    this.sb = v;
  },
  toString$0: function(_) {
    return this.sb._contents;
  },
  append$1: function(_, x) {
    var t1;
    if (typeof x !== "string")
      return this.append$1$bailout(1, x);
    t1 = this.sb;
    t1._contents = t1._contents + x;
    return this;
  },
  append$1$bailout: function(state0, x) {
    var t1, str;
    t1 = this.sb;
    str = typeof x === "string" ? x : $.S(x);
    t1._contents = t1._contents + str;
    return this;
  },
  get$length: function(_) {
    return this.sb._contents.length;
  }
},

"+JavaStringBuilder": 0,

JavaSystem_arraycopy: function(src, srcPos, dest, destPos, $length) {
  var t1, t2, i, t3, t4;
  for (t1 = src.length, t2 = dest.length, i = 0; i < $length; ++i) {
    t3 = destPos + i;
    t4 = srcPos + i;
    if (t4 < 0 || t4 >= t1)
      throw $.ioore(t4);
    t4 = src[t4];
    if (t3 < 0 || t3 >= t2)
      throw $.ioore(t3);
    dest[t3] = t4;
  }
},

"+arraycopy:5:0": 0,

Character_digit: function(codePoint, radix) {
  if (radix !== 16)
    throw $.wrapException(new $.ArgumentError("only radix == 16 is supported"));
  if (typeof codePoint !== "number")
    throw $.iae(codePoint);
  if (48 <= codePoint && codePoint <= 57)
    return codePoint - 48;
  if (65 <= codePoint && codePoint <= 70)
    return 10 + (codePoint - 65);
  if (97 <= codePoint && codePoint <= 102)
    return 10 + (codePoint - 97);
  return -1;
},

"+digit:2:0": 0,

Character_toChars: function(codePoint) {
  var t1, charCodes, offset;
  t1 = $.getInterceptor$n(codePoint);
  if (t1.$lt(codePoint, 0) === true || t1.$gt(codePoint, 1114111) === true)
    throw $.wrapException(new $.IllegalArgumentException(""));
  if (t1.$lt(codePoint, 65536) === true) {
    charCodes = $.List_List$filled(1, codePoint, $.JSInt);
    charCodes.$builtinTypeInfo = [$.JSInt];
    return $.Primitives_stringFromCharCodes(charCodes);
  }
  offset = t1.$sub(codePoint, 65536);
  t1 = $.getInterceptor$n(offset);
  charCodes = [$.$add$ns($.$shr$n(t1.$and(offset, 2147483647), 10), 55296), $.$add$ns(t1.$and(offset, 1023), 56320)];
  return $.Primitives_stringFromCharCodes(charCodes);
},

"+toChars:1:0": 0,

JavaString_format: function(fmt, args) {
  var t1, t2;
  t1 = {};
  t1.index_0 = 0;
  t2 = $.JSSyntaxRegExp_makeNative("%(.)", false, true, false);
  fmt.replaceAllMapped$2;
  return $.stringReplaceAllFuncUnchecked(fmt, new $.JSSyntaxRegExp(t2, null, null), new $.JavaString_format_closure(t1, args), null);
},

"+format:2:0": 0,

getMapEntrySet: function(m) {
  var result = new $.HashSet(0, null, null, null, null);
  result.$builtinTypeInfo = [null];
  m.forEach$1(m, new $.getMapEntrySet_closure(m, result));
  return result;
},

"+getMapEntrySet:1:0": 0,

javaSetAdd: function(s, o) {
  if (!s.contains$1(s, o)) {
    s.add$1(s, o);
    return true;
  }
  return false;
},

"+javaSetAdd:2:0": 0}],
["java.engine", "../packages/analyzer_experimental/src/generated/java_engine.dart", , {
UUID: {
  "": function UUID(id) {
    this.id = id;
  },
  "super": "Object",
  get$id: function(receiver) {
    return this.id;
  },
  toString$0: function(_) {
    return this.id;
  }
},

"+UUID": 0,

StringUtilities_intern: function(s) {
  return s;
},

"+intern:1:0": 0,

FileNameUtilities_getExtension: function(fileName) {
  var t1, index, t2;
  if (fileName == null)
    return "";
  t1 = $.getInterceptor$asx(fileName);
  index = t1.lastIndexOf$1(fileName, ".");
  t2 = $.getInterceptor$n(index);
  if (t2.$ge(index, 0) === true)
    return t1.substring$1(fileName, t2.$add(index, 1));
  return "";
},

"+getExtension:1:0": 0}],
["jobs", "../lib/jobs.dart", , {
JobManager: {
  "": function JobManager(_liblib23$_streamController, _liblib23$_stream, _runningJob, _waitingJobs) {
    this._liblib23$_streamController = _liblib23$_streamController;
    this._liblib23$_stream = _liblib23$_stream;
    this._runningJob = _runningJob;
    this._waitingJobs = _waitingJobs;
  },
  "super": "Object",
  get$_liblib23$_streamController: function() {
    return this._liblib23$_streamController;
  },
  set$_liblib23$_streamController: function(v) {
    this._liblib23$_streamController = v;
  },
  get$_liblib23$_stream: function() {
    return this._liblib23$_stream;
  },
  set$_liblib23$_stream: function(v) {
    this._liblib23$_stream = v;
  },
  get$_runningJob: function() {
    return this._runningJob;
  },
  set$_runningJob: function(v) {
    this._runningJob = v;
  },
  get$_waitingJobs: function() {
    return this._waitingJobs;
  },
  set$_waitingJobs: function(v) {
    this._waitingJobs = v;
  },
  get$onChange: function(_) {
    return this._liblib23$_stream;
  },
  _scheduleNextJob$0: function() {
    var t1, t2;
    if (this._waitingJobs.length !== 0) {
      t1 = new $.JobManager__scheduleNextJob_closure(this);
      t2 = $.get$_Zone__current();
      new $._ZoneTimer(t2, t1, null, false)._ZoneTimer$3(t2, $.Duration_0, t1);
    }
  },
  _runNextJob$0: function() {
    var t1, t2, t3, t4;
    this._runningJob = $.JSArray_methods.removeAt$1(this._waitingJobs, 0);
    t1 = this._runningJob;
    t2 = this._liblib23$_streamController;
    t3 = new $.JobManagerEvent(this, t1, true, null, null, null);
    t4 = t2._state;
    if ((t4 & 2) !== 0)
      $.throwExpression(new $.StateError("Adding event after close"));
    if (t2._subscription != null)
      t2._sendData$1(t3);
    else if ((t4 & 1) === 0) {
      t4 = $.getRuntimeTypeArgument(t2, t2.$as_StreamController, 0);
      t3 = new $._DelayedData(t3, null);
      t3.$builtinTypeInfo = [t4];
      t2._addPendingEvent$1(t3);
    }
    this._runningJob.run$1(new $._ProgressMonitorImpl(this, t1, null, null, 0)).whenComplete$1(new $.JobManager__runNextJob_closure(this));
  }
},

"+JobManager": 0,

JobManager__scheduleNextJob_closure: {
  "": function JobManager__scheduleNextJob_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    return this.this_0._runNextJob$0();
  },
  $isFunction: true
},

"+JobManager__scheduleNextJob_closure": 0,

JobManager__runNextJob_closure: {
  "": function JobManager__runNextJob_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, t3, t4;
    t1 = this.this_0;
    t2 = t1.get$_runningJob();
    t3 = t1.get$_liblib23$_streamController();
    t2 = new $.JobManagerEvent(t1, t2, null, true, null, null);
    t4 = t3.get$_state();
    if (typeof t4 !== "number")
      throw t4.$and();
    if ((t4 & 2) !== 0)
      $.throwExpression(new $.StateError("Adding event after close"));
    if (t3.get$_subscription() != null)
      t3._sendData$1(t2);
    else if ((t4 & 1) === 0) {
      t4 = $.getRuntimeTypeArgument(t3, t3.$as_StreamController, 0);
      t2 = new $._DelayedData(t2, null);
      t2.$builtinTypeInfo = [t4];
      t3._addPendingEvent$1(t2);
    }
    t1.set$_runningJob(null);
    t1._scheduleNextJob$0();
  },
  $isFunction: true
},

"+JobManager__runNextJob_closure": 0,

JobManagerEvent: {
  "": function JobManagerEvent(manager, job, _started, _finished, _indeterminate, _progress) {
    this.manager = manager;
    this.job = job;
    this._started = _started;
    this._finished = _finished;
    this._indeterminate = _indeterminate;
    this._progress = _progress;
  },
  "super": "Object",
  get$manager: function() {
    return this.manager;
  },
  get$job: function() {
    return this.job;
  },
  get$_started: function() {
    return this._started;
  },
  set$_started: function(v) {
    this._started = v;
  },
  get$_finished: function() {
    return this._finished;
  },
  set$_finished: function(v) {
    this._finished = v;
  },
  get$_indeterminate: function() {
    return this._indeterminate;
  },
  set$_indeterminate: function(v) {
    this._indeterminate = v;
  },
  get$_progress: function() {
    return this._progress;
  },
  set$_progress: function(v) {
    this._progress = v;
  },
  get$started: function() {
    return this._started;
  },
  get$finished: function() {
    return this._finished;
  },
  get$indeterminate: function(_) {
    return this._indeterminate;
  },
  get$progress: function() {
    return this._progress;
  },
  toString$0: function(_) {
    var t1;
    if (this._started === true)
      return $.S($.get$name$x(this.job)) + " started";
    else {
      t1 = this.job;
      if (this._finished === true)
        return $.S($.get$name$x(t1)) + " finished";
      else
        return $.S($.get$name$x(t1)) + " " + $.S($.toStringAsFixed$1$n($.$mul$n(this._progress, 100), 1)) + "%";
    }
  }
},

"+JobManagerEvent": 0,

Job: {
  "": function Job(name) {
    this.name = name;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  toString$0: function(_) {
    return this.name;
  }
},

"+Job": 0,

ProgressMonitor: {
  "": function ProgressMonitor(_title, _maxWork, _work) {
    this._title = _title;
    this._maxWork = _maxWork;
    this._work = _work;
  },
  "super": "Object",
  get$_title: function() {
    return this._title;
  },
  set$_title: function(v) {
    this._title = v;
  },
  get$_maxWork: function() {
    return this._maxWork;
  },
  set$_maxWork: function(v) {
    this._maxWork = v;
  },
  get$_work: function() {
    return this._work;
  },
  set$_work: function(v) {
    this._work = v;
  },
  start$2: function(_, title, workAmount) {
    this._title = title;
    this._maxWork = workAmount;
  },
  "+start:1:1": 0,
  get$indeterminate: function(_) {
    return $.$eq(this._maxWork, 0);
  },
  get$progress: function() {
    return $.$div$n(this._work, this._maxWork);
  },
  worked$1: function(amount) {
    this._work = $.$add$ns(this._work, amount);
    if ($.$gt$n(this._work, this._maxWork) === true)
      this._work = this._maxWork;
  },
  "+worked:1:0": 0,
  done$0: function() {
    this._work = this._maxWork;
  },
  "+done:0:0": 0
},

"+ProgressMonitor": 0,

_ProgressMonitorImpl: {
  "": function _ProgressMonitorImpl(manager, job, _title, _maxWork, _work) {
    this.manager = manager;
    this.job = job;
    this._title = _title;
    this._maxWork = _maxWork;
    this._work = _work;
  },
  "super": "ProgressMonitor",
  get$manager: function() {
    return this.manager;
  },
  set$manager: function(v) {
    this.manager = v;
  },
  get$job: function() {
    return this.job;
  },
  set$job: function(v) {
    this.job = v;
  }
},

"+_ProgressMonitorImpl": 0}],
["jobs_test", "../test/jobs_test.dart", , {
main_closure2: {
  "": function main_closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.test("schedule", new $.main__closure6());
  },
  $isFunction: true
},

"+main_closure": 0,

main__closure6: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, jobManager, future;
    t1 = $.JobManagerEvent;
    t1 = t1;
    t2 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t2.$builtinTypeInfo = [t1];
    t2._stream = $._ControllerStream$(t2, t1);
    t1 = t2;
    t2 = $.List_List($, $.Job);
    t2.$builtinTypeInfo = [$.Job];
    jobManager = new $.JobManager(t1, null, null, t2);
    jobManager._liblib23$_stream = jobManager._liblib23$_streamController._stream.asBroadcastStream$0();
    t1 = new $._TakeStream(5, jobManager._liblib23$_stream);
    t1.$builtinTypeInfo = [null];
    future = t1.toList$0(t1).then$1(new $.main___closure1());
    jobManager._waitingJobs.push(new $.MockJob("Mock job"));
    if (jobManager._runningJob == null)
      jobManager._scheduleNextJob$0();
    $.expect(future, $._Completes_PGb, null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main___closure1: {
  "": function main___closure() {
  },
  "super": "Closure",
  call$1: function(events) {
    var t1, t2;
    t1 = $.getInterceptor$ax(events);
    $.expect(true, t1.removeAt$1(events, 0).get$started(), null, null, false);
    t2 = t1.removeAt$1(events, 0).get$progress();
    $.expect(t2, new $._DeepMatcher(0, 100, null), null, null, false);
    t2 = t1.removeAt$1(events, 0).get$progress();
    $.expect(t2, new $._DeepMatcher(0.1, 100, null), null, null, false);
    t2 = t1.removeAt$1(events, 0).get$progress();
    $.expect(t2, new $._DeepMatcher(1, 100, null), null, null, false);
    $.expect(true, t1.removeAt$1(events, 0).get$finished(), null, null, false);
  },
  $isFunction: true
},

"+main___closure": 0,

MockJob: {
  "": function MockJob(name) {
    this.name = name;
  },
  "super": "Job",
  run$1: function(monitor) {
    var t1, t2, t3;
    $.ProgressMonitor.prototype.start$2.call(monitor, monitor, "Mock job...", 10);
    t1 = monitor.manager;
    t2 = t1._liblib23$_streamController;
    t1 = new $.JobManagerEvent(t1, monitor.job, null, null, $.$eq(monitor._maxWork, 0), $.$div$n(monitor._work, monitor._maxWork));
    t3 = t2._state;
    if ((t3 & 2) !== 0)
      $.throwExpression(new $.StateError("Adding event after close"));
    if (t2._subscription != null)
      t2._sendData$1(t1);
    else if ((t3 & 1) === 0) {
      t1 = new $._DelayedData(t1, null);
      $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(t2, t2.$as_StreamController, 0)]);
      t2._addPendingEvent$1(t1);
    }
    return $.Future_Future(new $.MockJob_run_closure(this, monitor), null);
  }
},

"+MockJob": 0,

MockJob_run_closure: {
  "": function MockJob_run_closure(this_0, monitor_1) {
    this.this_0 = this_0;
    this.monitor_1 = monitor_1;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.monitor_1;
    $.ProgressMonitor.prototype.worked$1.call(t1, 1);
    t2 = t1.manager;
    t3 = t1.job;
    t4 = t2._liblib23$_streamController;
    t5 = new $.JobManagerEvent(t2, t3, null, null, $.$eq(t1._maxWork, 0), $.$div$n(t1._work, t1._maxWork));
    t6 = t4._state;
    if ((t6 & 2) !== 0)
      $.throwExpression(new $.StateError("Adding event after close"));
    if (t4._subscription != null)
      t4._sendData$1(t5);
    else if ((t6 & 1) === 0) {
      t5 = new $._DelayedData(t5, null);
      $.setRuntimeTypeInfo(t5, [$.getRuntimeTypeArgument(t4, t4.$as_StreamController, 0)]);
      t4._addPendingEvent$1(t5);
    }
    $.ProgressMonitor.prototype.done$0.call(t1);
    t1 = new $.JobManagerEvent(t2, t3, null, null, $.$eq(t1._maxWork, 0), $.$div$n(t1._work, t1._maxWork));
    t2 = t4._state;
    if ((t2 & 2) !== 0)
      $.throwExpression(new $.StateError("Adding event after close"));
    if (t4._subscription != null)
      t4._sendData$1(t1);
    else if ((t2 & 1) === 0) {
      t1 = new $._DelayedData(t1, null);
      $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(t4, t4.$as_StreamController, 0)]);
      t4._addPendingEvent$1(t1);
    }
    return this.this_0;
  },
  $isFunction: true
},

"+MockJob_run_closure": 0,

main4: function() {
  $.group("jobs", new $.main_closure2());
}}],
["js", "../packages/js/js.dart", , {
_initialize_closure1: {
  "": function _initialize_closure() {
  },
  "super": "Closure",
  call$1: function(_) {
    var t1;
    $._initialize0();
    t1 = $.get$_proxiedObjectTable0();
    t1._liblib20$_scopeIndices.push(t1._liblib20$_handleStack.length);
    $._jsEnterJavaScriptScope0.callSync$1([]);
    return $.get$_proxiedObjectTable0()._liblib20$_scopeIndices.length;
  },
  $isFunction: true
},

"+_initialize_closure": 0,

_initialize_closure2: {
  "": function _initialize_closure() {
  },
  "super": "Closure",
  call$1: function(args) {
    $.$index$asx(args, 0);
    $._jsExitJavaScriptScope0.callSync$1([]);
    $.get$_proxiedObjectTable0().exitScope$0();
    return;
  },
  $isFunction: true
},

"+_initialize_closure": 0,

_enterScopeIfNeeded_closure0: {
  "": function _enterScopeIfNeeded_closure(depth_0) {
    this.depth_0 = depth_0;
  },
  "super": "Closure",
  call$0: function() {
    $._jsExitJavaScriptScope0.callSync$1([]);
    $.get$_proxiedObjectTable0().exitScope$0();
    return;
  },
  $isFunction: true
},

"+_enterScopeIfNeeded_closure": 0,

Callback0: {
  "": function Callback(_liblib20$_manualDispose, _liblib20$_id, _liblib20$_callback) {
    this._liblib20$_manualDispose = _liblib20$_manualDispose;
    this._liblib20$_id = _liblib20$_id;
    this._liblib20$_callback = _liblib20$_callback;
  },
  "super": "Object",
  get$_liblib20$_manualDispose: function() {
    return this._liblib20$_manualDispose;
  },
  set$_liblib20$_manualDispose: function(v) {
    this._liblib20$_manualDispose = v;
  },
  get$_liblib20$_id: function() {
    return this._liblib20$_id;
  },
  set$_liblib20$_id: function(v) {
    this._liblib20$_id = v;
  },
  get$_liblib20$_callback: function() {
    return this._liblib20$_callback;
  },
  set$_liblib20$_callback: function(v) {
    this._liblib20$_callback = v;
  },
  toJs$0: function() {
    return new $.FunctionProxy0(new $._LocalSendPortSync($.get$_proxiedObjectTable0()._liblib20$_port), this._liblib20$_id);
  },
  dispose$0: function() {
    var t1, t2, t3, t4;
    t1 = $.get$_proxiedObjectTable0();
    t2 = this._liblib20$_id;
    t3 = t1._liblib20$_registry;
    t3.$index(t3, t2);
    t4 = t1._liblib20$_globalIds;
    t4.remove$1(t4, t2);
    t3.remove$1(t3, t2);
    t1._liblib20$_deletedCount = t1._liblib20$_deletedCount + 1;
  },
  Callback$many$2$withThis: function(f, withThis) {
    var t1, t2, t3, t4, id;
    this._liblib20$_callback = new $.Callback$many_closure(f, withThis);
    this._liblib20$_manualDispose = true;
    t1 = $.get$_proxiedObjectTable0();
    t2 = this._liblib20$_callback;
    $._enterScopeIfNeeded0();
    t3 = t1._liblib20$_name + "-";
    t4 = t1._liblib20$_nextId;
    t1._liblib20$_nextId = t4 + 1;
    id = t3 + t4;
    t4 = t1._liblib20$_registry;
    t4.$indexSet(t4, id, t2);
    t1._liblib20$_handleStack.push(id);
    this._liblib20$_id = id;
    t1 = $.get$_proxiedObjectTable0();
    t1 = t1._liblib20$_globalIds;
    t1.add$1(t1, this._liblib20$_id);
  },
  Callback$once$2$withThis: function(f, withThis) {
    var t1, t2, t3, t4, id;
    this._liblib20$_callback = new $.Callback$once_closure0(this, f, withThis);
    this._liblib20$_manualDispose = false;
    t1 = $.get$_proxiedObjectTable0();
    t2 = this._liblib20$_callback;
    $._enterScopeIfNeeded0();
    t3 = t1._liblib20$_name + "-";
    t4 = t1._liblib20$_nextId;
    t1._liblib20$_nextId = t4 + 1;
    id = t3 + t4;
    t4 = t1._liblib20$_registry;
    t4.$indexSet(t4, id, t2);
    t1._liblib20$_handleStack.push(id);
    this._liblib20$_id = id;
    t1 = $.get$_proxiedObjectTable0();
    t1 = t1._liblib20$_globalIds;
    t1.add$1(t1, this._liblib20$_id);
  },
  $isSerializable0: true,
  $asSerializable0: function() { return [$.FunctionProxy0]; }
},

"+Callback": 0,

Callback$once_closure0: {
  "": function Callback$once_closure(this_0, f_1, withThis_2) {
    this.this_0 = this_0;
    this.f_1 = f_1;
    this.withThis_2 = withThis_2;
  },
  "super": "Closure",
  call$1: function(args) {
    var t1, t2, t3, t4;
    try {
      t1 = this.withThis_2 ? args : $.toList$0$ax($.skip$1$ax(args, 1));
      t1 = $.Primitives_applyFunction(this.f_1, t1, $.Function__toMangledNames(null));
      return t1;
    } finally {
      t1 = $.get$_proxiedObjectTable0();
      t2 = this.this_0.get$_liblib20$_id();
      t3 = t1._liblib20$_registry;
      t3.$index(t3, t2);
      t4 = t1._liblib20$_globalIds;
      t4.remove$1(t4, t2);
      t3.remove$1(t3, t2);
      t1._liblib20$_deletedCount = t1._liblib20$_deletedCount + 1;
    }
  },
  $isFunction: true
},

"+Callback$once_closure": 0,

Callback$many_closure: {
  "": function Callback$many_closure(f_0, withThis_1) {
    this.f_0 = f_0;
    this.withThis_1 = withThis_1;
  },
  "super": "Closure",
  call$1: function(args) {
    var t1 = this.withThis_1 ? args : $.toList$0$ax($.skip$1$ax(args, 1));
    return $.Primitives_applyFunction(this.f_0, t1, $.Function__toMangledNames(null));
  },
  $isFunction: true
},

"+Callback$many_closure": 0,

_Undefined: {
  "": function _Undefined() {
  },
  "super": "Object"
},

"+_Undefined": 0,

Proxy0: {
  "": function Proxy(_liblib20$_port, _liblib20$_id) {
    this._liblib20$_port = _liblib20$_port;
    this._liblib20$_id = _liblib20$_id;
  },
  "super": "Object",
  get$_liblib20$_port: function() {
    return this._liblib20$_port;
  },
  set$_liblib20$_port: function(v) {
    this._liblib20$_port = v;
  },
  get$_liblib20$_id: function() {
    return this._liblib20$_id;
  },
  toJs$0: function() {
    return this;
  },
  $index: function(_, arg) {
    return $.Proxy__forward(this, "[]", "method", [arg]);
  },
  $indexSet: function(_, key, value) {
    return $.Proxy__forward(this, "[]=", "method", [key, value]);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      t1 = true;
    else
      t1 = typeof other === "object" && other !== null && !!$.getInterceptor(other).$isProxy0 && $._jsPortEquals0.callSync$1([$._serialize0(this), $._serialize0(other)]) === true;
    return t1;
  },
  toString$0: function(_) {
    var t1, exception;
    try {
      t1 = $.Proxy__forward(this, "toString", "method", []);
      return t1;
    } catch (exception) {
      $.unwrapException(exception);
      return $.Object.prototype.toString$0.call(this, this);
    }

  },
  noSuchMethod$1: function(_, invocation) {
    var symbol, member, args, kind;
    symbol = invocation.get$memberName();
    member = typeof symbol === "string" ? symbol : symbol.get$_liblib$_name();
    if (typeof member !== "string")
      return this.noSuchMethod$1$bailout1(1, invocation, member);
    if ($.JSString_methods.indexOf$1(member, "@") !== -1)
      member = $.JSString_methods.substring$2(member, 0, $.JSString_methods.indexOf$1(member, "@"));
    args = invocation.get$positionalArguments();
    if (typeof args !== "object" || args === null || args.constructor !== Array || !!args.fixed$length)
      return this.noSuchMethod$1$bailout1(2, invocation, member, args);
    if (invocation.get$isGetter() === true) {
      if ($.JSString_methods.startsWith$1(member, "get:"))
        member = $.JSString_methods.substring$1(member, 4);
      kind = "get";
    } else if (invocation.get$isSetter() === true) {
      if ($.JSString_methods.endsWith$1(member, "="))
        member = $.JSString_methods.substring$2(member, 0, member.length - 1);
      if ($.JSString_methods.startsWith$1(member, "set:"))
        member = $.JSString_methods.substring$1(member, 4);
      kind = "set";
    } else if ($.JSString_methods.startsWith$1(member, "get:")) {
      member = $.JSString_methods.substring$1(member, 4);
      kind = "get";
    } else if ($.JSString_methods.startsWith$1(member, "set:")) {
      member = $.JSString_methods.substring$1(member, 4);
      kind = "set";
    } else
      kind = member === "call" ? "apply" : "method";
    return $.Proxy__forward(this, member, kind, args);
  },
  noSuchMethod$1$bailout1: function(state0, invocation, member, args) {
    switch (state0) {
      case 0:
        symbol = invocation.get$memberName();
        member = typeof symbol === "string" ? symbol : symbol.get$_liblib$_name();
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(member);
        if (!$.$eq(t1.indexOf$1(member, "@"), -1))
          member = t1.substring$2(member, 0, t1.indexOf$1(member, "@"));
        args = invocation.get$positionalArguments();
      case 2:
        var symbol, t1, kind;
        state0 = 0;
        if (args == null)
          args = [];
        if (invocation.get$isGetter() === true) {
          t1 = $.getInterceptor$s(member);
          if (t1.startsWith$1(member, "get:") === true)
            member = t1.substring$1(member, 4);
          kind = "get";
        } else if (invocation.get$isSetter() === true) {
          t1 = $.getInterceptor$s(member);
          if (t1.endsWith$1(member, "=") === true)
            member = t1.substring$2(member, 0, $.$sub$n(t1.get$length(member), 1));
          t1 = $.getInterceptor$s(member);
          if (t1.startsWith$1(member, "set:") === true)
            member = t1.substring$1(member, 4);
          kind = "set";
        } else {
          t1 = $.getInterceptor$s(member);
          if (t1.startsWith$1(member, "get:") === true) {
            member = t1.substring$1(member, 4);
            kind = "get";
          } else if (t1.startsWith$1(member, "set:") === true) {
            member = t1.substring$1(member, 4);
            kind = "set";
          } else
            kind = t1.$eq(member, "call") ? "apply" : "method";
        }
        return $.Proxy__forward(this, member, kind, args);
    }
  },
  $isProxy0: true,
  $isSerializable0: true,
  $asSerializable0: function() { return [$.Proxy0]; }
},

"+Proxy": 0,

FunctionProxy0: {
  "": function FunctionProxy(_liblib20$_port, _liblib20$_id) {
    this._liblib20$_port = _liblib20$_port;
    this._liblib20$_id = _liblib20$_id;
  },
  "super": "Proxy0",
  call$6: function(arg1, arg2, arg3, arg4, arg5, arg6) {
    return $.Proxy__forward(this, "", "apply", $._pruneUndefined0(arg1, arg2, arg3, arg4, arg5, arg6));
  },
  "+call:0:6": 0,
  call$5: function(arg1, arg2, arg3, arg4, arg5) {
    return this.call$6(arg1, arg2, arg3, arg4, arg5, $.C__Undefined0);
  },
  call$1: function(arg1) {
    return this.call$6(arg1, $.C__Undefined0, $.C__Undefined0, $.C__Undefined0, $.C__Undefined0, $.C__Undefined0);
  },
  call$2: function(arg1, arg2) {
    return this.call$6(arg1, arg2, $.C__Undefined0, $.C__Undefined0, $.C__Undefined0, $.C__Undefined0);
  },
  call$4: function(arg1, arg2, arg3, arg4) {
    return this.call$6(arg1, arg2, arg3, arg4, $.C__Undefined0, $.C__Undefined0);
  },
  call$3: function(arg1, arg2, arg3) {
    return this.call$6(arg1, arg2, arg3, $.C__Undefined0, $.C__Undefined0, $.C__Undefined0);
  },
  call$0: function() {
    return this.call$6($.C__Undefined0, $.C__Undefined0, $.C__Undefined0, $.C__Undefined0, $.C__Undefined0, $.C__Undefined0);
  },
  $isFunctionProxy0: true,
  $isFunction: true,
  $isSerializable0: true,
  $asSerializable0: function() { return [$.Proxy0]; }
},

"+FunctionProxy": 0,

_ProxiedObjectTable: {
  "": function _ProxiedObjectTable(_liblib20$_name, _liblib20$_nextId, _liblib20$_deletedCount, _liblib20$_registry, _liblib20$_port, _liblib20$_globalIds, _liblib20$_handleStack, _liblib20$_scopeIndices) {
    this._liblib20$_name = _liblib20$_name;
    this._liblib20$_nextId = _liblib20$_nextId;
    this._liblib20$_deletedCount = _liblib20$_deletedCount;
    this._liblib20$_registry = _liblib20$_registry;
    this._liblib20$_port = _liblib20$_port;
    this._liblib20$_globalIds = _liblib20$_globalIds;
    this._liblib20$_handleStack = _liblib20$_handleStack;
    this._liblib20$_scopeIndices = _liblib20$_scopeIndices;
  },
  "super": "Object",
  get$_liblib20$_name: function() {
    return this._liblib20$_name;
  },
  get$_liblib20$_nextId: function() {
    return this._liblib20$_nextId;
  },
  set$_liblib20$_nextId: function(v) {
    this._liblib20$_nextId = v;
  },
  get$_liblib20$_deletedCount: function() {
    return this._liblib20$_deletedCount;
  },
  set$_liblib20$_deletedCount: function(v) {
    this._liblib20$_deletedCount = v;
  },
  get$_liblib20$_registry: function() {
    return this._liblib20$_registry;
  },
  get$_liblib20$_port: function() {
    return this._liblib20$_port;
  },
  get$_liblib20$_globalIds: function() {
    return this._liblib20$_globalIds;
  },
  get$_liblib20$_handleStack: function() {
    return this._liblib20$_handleStack;
  },
  get$_liblib20$_scopeIndices: function() {
    return this._liblib20$_scopeIndices;
  },
  exitScope$0: function() {
    var t1, start, t2, t3, i, t4;
    t1 = this._liblib20$_scopeIndices;
    if (0 >= t1.length)
      throw $.ioore(0);
    start = t1.pop();
    if (start !== (start | 0))
      return this.exitScope$0$bailout(1, start);
    for (t1 = this._liblib20$_handleStack, t2 = this._liblib20$_registry, t3 = this._liblib20$_globalIds, i = start; t4 = t1.length, i < t4; ++i) {
      if (i < 0)
        throw $.ioore(i);
      if (!t3.contains$1(t3, t1[i])) {
        if (i >= t1.length)
          throw $.ioore(i);
        t2.remove$1(t2, t1[i]);
        this._liblib20$_deletedCount = this._liblib20$_deletedCount + 1;
      }
    }
    if (start !== t4)
      $.JSArray_methods.removeRange$2(t1, start, t4 - start);
  },
  "+exitScope:0:0": 0,
  exitScope$0$bailout: function(state0, start) {
    var t1, t2, t3, i;
    for (t1 = this._liblib20$_handleStack, t2 = this._liblib20$_registry, t3 = this._liblib20$_globalIds, i = start; $.$lt$n(i, t1.length) === true; ++i) {
      if (i >>> 0 !== i || i >= t1.length)
        throw $.ioore(i);
      if (!t3.contains$1(t3, t1[i])) {
        if (i >= t1.length)
          throw $.ioore(i);
        t2.remove$1(t2, t1[i]);
        this._liblib20$_deletedCount = this._liblib20$_deletedCount + 1;
      }
    }
    if (!$.$eq(start, t1.length)) {
      t2 = t1.length;
      if (typeof start !== "number")
        throw $.iae(start);
      $.JSArray_methods.removeRange$2(t1, start, t2 - start);
    }
  },
  add$1: function(_, x) {
    var t1, t2, id;
    $._enterScopeIfNeeded0();
    t1 = this._liblib20$_name + "-";
    t2 = this._liblib20$_nextId;
    this._liblib20$_nextId = t2 + 1;
    id = t1 + t2;
    t2 = this._liblib20$_registry;
    t2.$indexSet(t2, id, x);
    this._liblib20$_handleStack.push(id);
    return id;
  },
  _ProxiedObjectTable$0: function() {
    this._liblib20$_port.receive$1(new $._ProxiedObjectTable_closure(this));
  }
},

"+_ProxiedObjectTable": 0,

_ProxiedObjectTable_closure: {
  "": function _ProxiedObjectTable_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(msg) {
    var receiver, method, args, func, result, e, exception, t1;
    try {
      receiver = $.$index$asx(this.this_0.get$_liblib20$_registry(), $.$index$asx(msg, 0));
      method = $.$index$asx(msg, 1);
      args = $.toList$0$ax($.map$1$ax($.$index$asx(msg, 2), $._deserialize0$closure));
      if ($.$eq(method, "#call")) {
        func = $.propertyTypeCast(receiver, "$isFunction");
        result = $._serialize0(func.call$1(args));
        return ["return", result];
      } else
        throw $.wrapException("Invocation unsupported on non-function Dart proxies");
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      return ["throws", $.S(e)];
    }

  },
  $isFunction: true
},

"+_ProxiedObjectTable_closure": 0,

_deserialize_deserializeFunction0: {
  "": function _deserialize_deserializeFunction() {
  },
  "super": "Closure",
  call$1: function(message) {
    var t1, id, port;
    t1 = $.getInterceptor$asx(message);
    id = t1.$index(message, 1);
    port = t1.$index(message, 2);
    if ($.$eq(port, new $._LocalSendPortSync($.get$_proxiedObjectTable0()._liblib20$_port))) {
      t1 = $.get$_proxiedObjectTable0()._liblib20$_registry;
      return t1.$index(t1, id);
    } else
      return new $.FunctionProxy0(port, id);
  },
  $isFunction: true
},

"+_deserialize_deserializeFunction": 0,

_deserialize_deserializeObject0: {
  "": function _deserialize_deserializeObject() {
  },
  "super": "Closure",
  call$1: function(message) {
    var t1, id, port;
    t1 = $.getInterceptor$asx(message);
    id = t1.$index(message, 1);
    port = t1.$index(message, 2);
    if ($.$eq(port, new $._LocalSendPortSync($.get$_proxiedObjectTable0()._liblib20$_port))) {
      t1 = $.get$_proxiedObjectTable0()._liblib20$_registry;
      return t1.$index(t1, id);
    } else
      return new $.Proxy0(port, id);
  },
  $isFunction: true
},

"+_deserialize_deserializeObject": 0,

_initialize0: function() {
  var t1, exception, script, serialized, output;
  if ($._jsPortSync0 != null)
    return;
  try {
    t1 = window;
    $._jsPortSync0 = $.Window_methods.lookupPort$1(t1, "dart-js-context");
  } catch (exception) {
    $.unwrapException(exception);
  }

  if ($._jsPortSync0 == null) {
    script = document.createElement("script");
    t1 = $.getInterceptor$x(script);
    t1.set$type(script, "text/javascript");
    t1.set$innerHtml(script, "(function() {\n  // Proxy support for js.dart.\n\n  var globalContext = window;\n\n  // Support for binding the receiver (this) in proxied functions.\n  function bindIfFunction(f, _this) {\n    if (typeof(f) != \"function\") {\n      return f;\n    } else {\n      return new BoundFunction(_this, f);\n    }\n  }\n\n  function unbind(obj) {\n    if (obj instanceof BoundFunction) {\n      return obj.object;\n    } else {\n      return obj;\n    }\n  }\n\n  function getBoundThis(obj) {\n    if (obj instanceof BoundFunction) {\n      return obj._this;\n    } else {\n      return globalContext;\n    }\n  }\n\n  function BoundFunction(_this, object) {\n    this._this = _this;\n    this.object = object;\n  }\n\n  // Table for local objects and functions that are proxied.\n  function ProxiedObjectTable() {\n    // Name for debugging.\n    this.name = 'js-ref';\n\n    // Table from IDs to JS objects.\n    this.map = {};\n\n    // Generator for new IDs.\n    this._nextId = 0;\n\n    // Counter for deleted proxies.\n    this._deletedCount = 0;\n\n    // Flag for one-time initialization.\n    this._initialized = false;\n\n    // Ports for managing communication to proxies.\n    this.port = new ReceivePortSync();\n    this.sendPort = this.port.toSendPort();\n\n    // Set of IDs that are global.\n    // These will not be freed on an exitScope().\n    this.globalIds = {};\n\n    // Stack of scoped handles.\n    this.handleStack = [];\n\n    // Stack of active scopes where each value is represented by the size of\n    // the handleStack at the beginning of the scope.  When an active scope\n    // is popped, the handleStack is restored to where it was when the\n    // scope was entered.\n    this.scopeIndices = [];\n  }\n\n  // Number of valid IDs.  This is the number of objects (global and local)\n  // kept alive by this table.\n  ProxiedObjectTable.prototype.count = function () {\n    return Object.keys(this.map).length;\n  }\n\n  // Number of total IDs ever allocated.\n  ProxiedObjectTable.prototype.total = function () {\n    return this.count() + this._deletedCount;\n  }\n\n  // Adds an object to the table and return an ID for serialization.\n  ProxiedObjectTable.prototype.add = function (obj) {\n    if (this.scopeIndices.length == 0) {\n      throw \"Cannot allocate a proxy outside of a scope.\";\n    }\n    // TODO(vsm): Cache refs for each obj?\n    var ref = this.name + '-' + this._nextId++;\n    this.handleStack.push(ref);\n    this.map[ref] = obj;\n    return ref;\n  }\n\n  ProxiedObjectTable.prototype._initializeOnce = function () {\n    if (!this._initialized) {\n      this._initialize();\n      this._initialized = true;\n    }\n  }\n\n  // Enters a new scope for this table.\n  ProxiedObjectTable.prototype.enterScope = function() {\n    this._initializeOnce();\n    this.scopeIndices.push(this.handleStack.length);\n  }\n\n  // Invalidates all non-global IDs in the current scope and\n  // exit the current scope.\n  ProxiedObjectTable.prototype.exitScope = function() {\n    var start = this.scopeIndices.pop();\n    for (var i = start; i < this.handleStack.length; ++i) {\n      var key = this.handleStack[i];\n      if (!this.globalIds.hasOwnProperty(key)) {\n        delete this.map[this.handleStack[i]];\n        this._deletedCount++;\n      }\n    }\n    this.handleStack = this.handleStack.splice(0, start);\n  }\n\n  // Makes this ID globally scope.  It must be explicitly invalidated.\n  ProxiedObjectTable.prototype.globalize = function(id) {\n    this.globalIds[id] = true;\n  }\n\n  // Invalidates this ID, potentially freeing its corresponding object.\n  ProxiedObjectTable.prototype.invalidate = function(id) {\n    var old = this.get(id);\n    delete this.globalIds[id];\n    delete this.map[id];\n    this._deletedCount++;\n    return old;\n  }\n\n  // Gets the object or function corresponding to this ID.\n  ProxiedObjectTable.prototype.get = function (id) {\n    if (!this.map.hasOwnProperty(id)) {\n      throw 'Proxy ' + id + ' has been invalidated.'\n    }\n    return this.map[id];\n  }\n\n  ProxiedObjectTable.prototype._initialize = function () {\n    // Configure this table's port to forward methods, getters, and setters\n    // from the remote proxy to the local object.\n    var table = this;\n\n    this.port.receive(function (message) {\n      // TODO(vsm): Support a mechanism to register a handler here.\n      try {\n        var object = table.get(message[0]);\n        var receiver = unbind(object);\n        var member = message[1];\n        var kind = message[2];\n        var args = message[3].map(deserialize);\n        if (kind == 'get') {\n          // Getter.\n          var field = member;\n          if (field in receiver && args.length == 0) {\n            var result = bindIfFunction(receiver[field], receiver);\n            return [ 'return', serialize(result) ];\n          }\n        } else if (kind == 'set') {\n          // Setter.\n          var field = member;\n          if (args.length == 1) {\n            return [ 'return', serialize(receiver[field] = args[0]) ];\n          }\n        } else if (kind == 'apply') {\n          // Direct function invocation.\n          var _this = getBoundThis(object);\n          return [ 'return', serialize(receiver.apply(_this, args)) ];\n        } else if (member == '[]' && args.length == 1) {\n          // Index getter.\n          var result = bindIfFunction(receiver[args[0]], receiver);\n          return [ 'return', serialize(result) ];\n        } else if (member == '[]=' && args.length == 2) {\n          // Index setter.\n          return [ 'return', serialize(receiver[args[0]] = args[1]) ];\n        } else {\n          // Member function invocation.\n          var f = receiver[member];\n          if (f) {\n            var result = f.apply(receiver, args);\n            return [ 'return', serialize(result) ];\n          }\n        }\n        return [ 'none' ];\n      } catch (e) {\n        return [ 'throws', e.toString() ];\n      }\n    });\n  }\n\n  // Singleton for local proxied objects.\n  var proxiedObjectTable = new ProxiedObjectTable();\n\n  // DOM element serialization code.\n  var _localNextElementId = 0;\n  var _DART_ID = 'data-dart_id';\n  var _DART_TEMPORARY_ATTACHED = 'data-dart_temporary_attached';\n\n  function serializeElement(e) {\n    // TODO(vsm): Use an isolate-specific id.\n    var id;\n    if (e.hasAttribute(_DART_ID)) {\n      id = e.getAttribute(_DART_ID);\n    } else {\n      id = (_localNextElementId++).toString();\n      e.setAttribute(_DART_ID, id);\n    }\n    if (e !== document.documentElement) {\n      // Element must be attached to DOM to be retrieve in js part.\n      // Attach top unattached parent to avoid detaching parent of \"e\" when\n      // appending \"e\" directly to document. We keep count of elements\n      // temporarily attached to prevent detaching top unattached parent to\n      // early. This count is equals to the length of _DART_TEMPORARY_ATTACHED\n      // attribute. There could be other elements to serialize having the same\n      // top unattached parent.\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue + \"a\";\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          break;\n        }\n        if (top.parentNode == null) {\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, \"a\");\n          document.documentElement.appendChild(top);\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return id;\n  }\n\n  function deserializeElement(id) {\n    // TODO(vsm): Clear the attribute.\n    var list = document.querySelectorAll('[' + _DART_ID + '=\"' + id + '\"]');\n\n    if (list.length > 1) throw 'Non unique ID: ' + id;\n    if (list.length == 0) {\n      throw 'Element must be attached to the document: ' + id;\n    }\n    var e = list[0];\n    if (e !== document.documentElement) {\n      // detach temporary attached element\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue.substring(1);\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          // detach top only if no more elements have to be unserialized\n          if (top.getAttribute(_DART_TEMPORARY_ATTACHED).length === 0) {\n            top.removeAttribute(_DART_TEMPORARY_ATTACHED);\n            document.documentElement.removeChild(top);\n          }\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return e;\n  }\n\n\n  // Type for remote proxies to Dart objects.\n  function DartProxy(id, sendPort) {\n    this.id = id;\n    this.port = sendPort;\n  }\n\n  // Serializes JS types to SendPortSync format:\n  // - primitives -> primitives\n  // - sendport -> sendport\n  // - DOM element -> [ 'domref', element-id ]\n  // - Function -> [ 'funcref', function-id, sendport ]\n  // - Object -> [ 'objref', object-id, sendport ]\n  function serialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Non-proxied objects are serialized.\n      return message;\n    } else if (message instanceof Element &&\n        (message.ownerDocument == null || message.ownerDocument == document)) {\n      return [ 'domref', serializeElement(message) ];\n    } else if (message instanceof BoundFunction &&\n               typeof(message.object) == 'function') {\n      // Local function proxy.\n      return [ 'funcref',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    } else if (typeof(message) == 'function') {\n      if ('_dart_id' in message) {\n        // Remote function proxy.\n        var remoteId = message._dart_id;\n        var remoteSendPort = message._dart_port;\n        return [ 'funcref', remoteId, remoteSendPort ];\n      } else {\n        // Local function proxy.\n        return [ 'funcref',\n                 proxiedObjectTable.add(message),\n                 proxiedObjectTable.sendPort ];\n      }\n    } else if (message instanceof DartProxy) {\n      // Remote object proxy.\n      return [ 'objref', message.id, message.port ];\n    } else {\n      // Local object proxy.\n      return [ 'objref',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    }\n  }\n\n  function deserialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Serialized type.\n      return message;\n    }\n    var tag = message[0];\n    switch (tag) {\n      case 'funcref': return deserializeFunction(message);\n      case 'objref': return deserializeObject(message);\n      case 'domref': return deserializeElement(message[1]);\n    }\n    throw 'Unsupported serialized data: ' + message;\n  }\n\n  // Create a local function that forwards to the remote function.\n  function deserializeFunction(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local function.\n      return unbind(proxiedObjectTable.get(id));\n    } else {\n      // Remote function.  Forward to its port.\n      var f = function () {\n        var depth = enterScope();\n        try {\n          var args = Array.prototype.slice.apply(arguments);\n          args.splice(0, 0, this);\n          args = args.map(serialize);\n          var result = port.callSync([id, '#call', args]);\n          if (result[0] == 'throws') throw deserialize(result[1]);\n          return deserialize(result[1]);\n        } finally {\n          exitScope(depth);\n        }\n      };\n      // Cache the remote id and port.\n      f._dart_id = id;\n      f._dart_port = port;\n      return f;\n    }\n  }\n\n  // Creates a DartProxy to forwards to the remote object.\n  function deserializeObject(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local object.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote object.\n      return new DartProxy(id, port);\n    }\n  }\n\n  // Remote handler to construct a new JavaScript object given its\n  // serialized constructor and arguments.\n  function construct(args) {\n    args = args.map(deserialize);\n    var constructor = unbind(args[0]);\n    args = Array.prototype.slice.call(args, 1);\n\n    // Until 10 args, the 'new' operator is used. With more arguments we use a\n    // generic way that may not work, particulary when the constructor does not\n    // have an \"apply\" method.\n    var ret = null;\n    if (args.length === 0) {\n      ret = new constructor();\n    } else if (args.length === 1) {\n      ret = new constructor(args[0]);\n    } else if (args.length === 2) {\n      ret = new constructor(args[0], args[1]);\n    } else if (args.length === 3) {\n      ret = new constructor(args[0], args[1], args[2]);\n    } else if (args.length === 4) {\n      ret = new constructor(args[0], args[1], args[2], args[3]);\n    } else if (args.length === 5) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4]);\n    } else if (args.length === 6) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5]);\n    } else if (args.length === 7) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 8) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 9) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 10) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6], args[7], args[8], args[9]);\n    } else {\n      // Dummy Type with correct constructor.\n      var Type = function(){};\n      Type.prototype = constructor.prototype;\n  \n      // Create a new instance\n      var instance = new Type();\n  \n      // Call the original constructor.\n      ret = constructor.apply(instance, args);\n      ret = Object(ret) === ret ? ret : instance;\n    }\n    return serialize(ret);\n  }\n\n  // Remote handler to return the top-level JavaScript context.\n  function context(data) {\n    return serialize(globalContext);\n  }\n\n  // Remote handler to track number of live / allocated proxies.\n  function proxyCount() {\n    var live = proxiedObjectTable.count();\n    var total = proxiedObjectTable.total();\n    return [live, total];\n  }\n\n  // Return true if two JavaScript proxies are equal (==).\n  function proxyEquals(args) {\n    return deserialize(args[0]) == deserialize(args[1]);\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyInstanceof(args) {\n    var obj = unbind(deserialize(args[0]));\n    var type = unbind(deserialize(args[1]));\n    return obj instanceof type;\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyDeleteProperty(args) {\n    var obj = unbind(deserialize(args[0]));\n    var member = unbind(deserialize(args[1]));\n    delete obj[member];\n  }\n\n  function proxyConvert(args) {\n    return serialize(deserializeDataTree(args));\n  }\n\n  function deserializeDataTree(data) {\n    var type = data[0];\n    var value = data[1];\n    if (type === 'map') {\n      var obj = {};\n      for (var i = 0; i < value.length; i++) {\n        obj[value[i][0]] = deserializeDataTree(value[i][1]);\n      }\n      return obj;\n    } else if (type === 'list') {\n      var list = [];\n      for (var i = 0; i < value.length; i++) {\n        list.push(deserializeDataTree(value[i]));\n      }\n      return list;\n    } else /* 'simple' */ {\n      return deserialize(value);\n    }\n  }\n\n  function makeGlobalPort(name, f) {\n    var port = new ReceivePortSync();\n    port.receive(f);\n    window.registerPort(name, port.toSendPort());\n  }\n\n  // Enters a new scope in the JavaScript context.\n  function enterJavaScriptScope() {\n    proxiedObjectTable.enterScope();\n  }\n\n  // Enters a new scope in both the JavaScript and Dart context.\n  var _dartEnterScopePort = null;\n  function enterScope() {\n    enterJavaScriptScope();\n    if (!_dartEnterScopePort) {\n      _dartEnterScopePort = window.lookupPort('js-dart-enter-scope');\n    }\n    return _dartEnterScopePort.callSync([]);\n  }\n\n  // Exits the current scope (and invalidate local IDs) in the JavaScript\n  // context.\n  function exitJavaScriptScope() {\n    proxiedObjectTable.exitScope();\n  }\n\n  // Exits the current scope in both the JavaScript and Dart context.\n  var _dartExitScopePort = null;\n  function exitScope(depth) {\n    exitJavaScriptScope();\n    if (!_dartExitScopePort) {\n      _dartExitScopePort = window.lookupPort('js-dart-exit-scope');\n    }\n    return _dartExitScopePort.callSync([ depth ]);\n  }\n\n  makeGlobalPort('dart-js-context', context);\n  makeGlobalPort('dart-js-create', construct);\n  makeGlobalPort('dart-js-proxy-count', proxyCount);\n  makeGlobalPort('dart-js-equals', proxyEquals);\n  makeGlobalPort('dart-js-instanceof', proxyInstanceof);\n  makeGlobalPort('dart-js-delete-property', proxyDeleteProperty);\n  makeGlobalPort('dart-js-convert', proxyConvert);\n  makeGlobalPort('dart-js-enter-scope', enterJavaScriptScope);\n  makeGlobalPort('dart-js-exit-scope', exitJavaScriptScope);\n  makeGlobalPort('dart-js-globalize', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.globalize(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n  makeGlobalPort('dart-js-invalidate', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.invalidate(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n})();\n");
    t1 = document.body;
    t1.get$nodes;
    new $._ChildNodeListLazy(t1)._this.appendChild(script);
    $._jsPortSync0 = $.Window_methods.lookupPort$1(window, "dart-js-context");
  }
  $._jsPortCreate0 = $.Window_methods.lookupPort$1(window, "dart-js-create");
  $._jsPortProxyCount0 = $.Window_methods.lookupPort$1(window, "dart-js-proxy-count");
  $._jsPortEquals0 = $.Window_methods.lookupPort$1(window, "dart-js-equals");
  $._jsPortInstanceof0 = $.Window_methods.lookupPort$1(window, "dart-js-instanceof");
  $._jsPortDeleteProperty0 = $.Window_methods.lookupPort$1(window, "dart-js-delete-property");
  $._jsPortConvert0 = $.Window_methods.lookupPort$1(window, "dart-js-convert");
  $._jsEnterJavaScriptScope0 = $.Window_methods.lookupPort$1(window, "dart-js-enter-scope");
  $._jsExitJavaScriptScope0 = $.Window_methods.lookupPort$1(window, "dart-js-exit-scope");
  $._jsGlobalize0 = $.Window_methods.lookupPort$1(window, "dart-js-globalize");
  $._jsInvalidate0 = $.Window_methods.lookupPort$1(window, "dart-js-invalidate");
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_closure1());
  $._dartEnterDartScope0 = t1;
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_closure2());
  $._dartExitDartScope0 = t1;
  t1 = window;
  serialized = new $._JsSerializer0(0, new $._MessageTraverserVisitedMap0()).traverse$1($._dartEnterDartScope0.toSendPort$0());
  t1 = t1.document.documentElement;
  t1.get$attributes;
  output = new $.StringBuffer("");
  output.StringBuffer$1("");
  new $._JsonStringifier(output, []).stringifyValue$1(serialized);
  new $._ElementAttributeMap(t1)._element.setAttribute("dart-port:js-dart-enter-scope", output._contents);
  t1 = window;
  serialized = new $._JsSerializer0(0, new $._MessageTraverserVisitedMap0()).traverse$1($._dartExitDartScope0.toSendPort$0());
  t1 = t1.document.documentElement;
  t1.get$attributes;
  output = new $.StringBuffer("");
  output.StringBuffer$1("");
  new $._JsonStringifier(output, []).stringifyValue$1(serialized);
  new $._ElementAttributeMap(t1)._element.setAttribute("dart-port:js-dart-exit-scope", output._contents);
},

"+_initialize:0:0": 0,

_enterScopeIfNeeded0: function() {
  var t1, depth;
  if ($.get$_proxiedObjectTable0()._liblib20$_scopeIndices.length === 0) {
    $._initialize0();
    t1 = $.get$_proxiedObjectTable0();
    t1._liblib20$_scopeIndices.push(t1._liblib20$_handleStack.length);
    $._jsEnterJavaScriptScope0.callSync$1([]);
    depth = $.get$_proxiedObjectTable0()._liblib20$_scopeIndices.length;
    $.get$_Zone__current().runAsync$1(new $._enterScopeIfNeeded_closure0(depth));
  }
},

"+_enterScopeIfNeeded:0:0": 0,

scoped0: function(f) {
  var depth, t1;
  $._initialize0();
  t1 = $.get$_proxiedObjectTable0();
  t1._liblib20$_scopeIndices.push(t1._liblib20$_handleStack.length);
  $._jsEnterJavaScriptScope0.callSync$1([]);
  depth = $.get$_proxiedObjectTable0()._liblib20$_scopeIndices.length;
  try {
    t1 = f.call$0();
    return t1;
  } finally {
    $._jsExitJavaScriptScope0.callSync$1([]);
    $.get$_proxiedObjectTable0().exitScope$0();
  }
},

"+scoped:1:0": 0,

Callback$once0: function(f, withThis) {
  var t1 = new $.Callback0(null, null, null);
  t1.Callback$once$2$withThis(f, withThis);
  return t1;
},

"+new Callback$once:1:1": 0,

Callback$many: function(f, withThis) {
  var t1 = new $.Callback0(null, null, null);
  t1.Callback$many$2$withThis(f, withThis);
  return t1;
},

"+new Callback$many:1:1": 0,

_pruneUndefined0: function(arg1, arg2, arg3, arg4, arg5, arg6) {
  var args, index;
  args = [arg1, arg2, arg3, arg4, arg5, arg6];
  index = $.Arrays_indexOf(args, $.C__Undefined0, 0, args.length);
  if ($.$lt$n(index, 0) === true)
    return args;
  return $.JSArray_methods.sublist$2(args, 0, index);
},

"+_pruneUndefined:6:0": 0,

Proxy_Proxy$withArgList0: function($constructor, $arguments) {
  var t1, serialized;
  $._enterScopeIfNeeded0();
  t1 = [$constructor];
  $.JSArray_methods.addAll$1(t1, $arguments);
  t1 = $.JSArray_methods.map$1(t1, $._serialize0$closure);
  serialized = t1.toList$0(t1);
  return $._deserialize0($._jsPortCreate0.callSync$1(serialized));
},

"+new Proxy$withArgList:2:0": 0,

Proxy__serializeDataTree0: function(data) {
  var entries, t1, key;
  if (typeof data === "object" && data !== null && !!$.getInterceptor(data).$isMap) {
    entries = $.List_List($, null);
    for (t1 = $.get$iterator$ax(data.get$keys()); t1.moveNext$0() === true;) {
      key = t1.get$current();
      entries.push([key, $.Proxy__serializeDataTree0(data.$index(data, key))]);
    }
    return ["map", entries];
  } else if (typeof data === "object" && data !== null && (data.constructor === Array || !!$.getInterceptor(data).$isIterable)) {
    t1 = $.map$1$ax(data, $.Proxy__serializeDataTree0$closure);
    return ["list", t1.toList$0(t1)];
  } else
    return ["simple", $._serialize0(data)];
},

"+_serializeDataTree:1:0": 0,

Proxy__forward: function(receiver, member, kind, args) {
  var result, t1;
  $._enterScopeIfNeeded0();
  result = receiver._liblib20$_port.callSync$1([receiver._liblib20$_id, member, kind, $.toList$0$ax($.map$1$ax(args, $._serialize0$closure))]);
  t1 = $.getInterceptor$asx(result);
  switch (t1.$index(result, 0)) {
    case "return":
      return $._deserialize0(t1.$index(result, 1));
    case "throws":
      throw $.wrapException($._deserialize0(t1.$index(result, 1)));
    case "none":
      throw $.wrapException(new $.NoSuchMethodError(receiver, member, args, $.makeLiteralMap([]), null));
    default:
      throw $.wrapException("Invalid return value");
  }
},

"+_forward:4:0": 0,

_ProxiedObjectTable$0: function() {
  var t1, t2, t3, t4, t5;
  t1 = $.makeLiteralMap([]);
  t2 = $.ReceivePortSync$();
  t3 = $.List_List($, $.JSString);
  t3.$builtinTypeInfo = [$.JSString];
  t4 = $.List_List($, $.JSInt);
  t4.$builtinTypeInfo = [$.JSInt];
  t5 = new $.HashSet(0, null, null, null, null);
  t5.$builtinTypeInfo = [$.JSString];
  t1 = new $._ProxiedObjectTable("dart-ref", 0, 0, t1, t2, t5, t3, t4);
  t1._ProxiedObjectTable$0();
  return t1;
},

"+new _ProxiedObjectTable:0:0": 0,

_serialize0: function(message) {
  var t1, t2, t3, id;
  if (message == null)
    return;
  else if (typeof message === "string" || typeof message === "number" || typeof message === "boolean")
    return message;
  else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isSendPortSync)
    return message;
  else {
    if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isElement) {
      t1 = message.ownerDocument;
      t1 = t1 == null || t1 === document;
    } else
      t1 = false;
    if (t1)
      return ["domref", $._serializeElement0(message)];
    else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isFunctionProxy0)
      return ["funcref", message._liblib20$_id, message._liblib20$_port];
    else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isProxy0)
      return ["objref", message._liblib20$_id, message._liblib20$_port];
    else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isSerializable0)
      return $._serialize0(message.toJs$0());
    else {
      t1 = $.get$_proxiedObjectTable0();
      $._enterScopeIfNeeded0();
      t2 = t1._liblib20$_name + "-";
      t3 = t1._liblib20$_nextId;
      t1._liblib20$_nextId = t3 + 1;
      id = t2 + t3;
      t3 = t1._liblib20$_registry;
      t3.$indexSet(t3, id, message);
      t1._liblib20$_handleStack.push(id);
      return ["objref", id, new $._LocalSendPortSync($.get$_proxiedObjectTable0()._liblib20$_port)];
    }
  }
},

"+_serialize:1:0": 0,

_deserialize0: function(message) {
  var t1;
  if (message == null)
    return;
  else if (typeof message === "string" || typeof message === "number" || typeof message === "boolean")
    return message;
  else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isSendPortSync)
    return message;
  t1 = $.getInterceptor$asx(message);
  switch (t1.$index(message, 0)) {
    case "funcref":
      return new $._deserialize_deserializeFunction0().call$1(message);
    case "objref":
      return new $._deserialize_deserializeObject0().call$1(message);
    case "domref":
      return $._deserializeElement0(t1.$index(message, 1));
  }
  throw $.wrapException("Unsupported serialized data: " + $.S(message));
},

"+_deserialize:1:0": 0,

_serializeElement0: function(e) {
  var id, t1, $top, oldValue, newValue, top0;
  if (new $._ElementAttributeMap(e)._element.hasAttribute("data-dart_id") === true)
    id = new $._ElementAttributeMap(e)._element.getAttribute("data-dart_id");
  else {
    t1 = $._localNextElementId0;
    $._localNextElementId0 = $.$add$ns(t1, 1);
    id = "dart-" + $.S(t1);
    new $._ElementAttributeMap(e)._element.setAttribute("data-dart_id", id);
  }
  if (e !== document.documentElement)
    for ($top = e; true; $top = top0) {
      $top.get$attributes;
      if (new $._ElementAttributeMap($top)._element.hasAttribute("data-dart_temporary_attached") === true) {
        $top.get$attributes;
        oldValue = new $._ElementAttributeMap($top)._element.getAttribute("data-dart_temporary_attached");
        if (oldValue == null)
          throw oldValue.$add();
        newValue = $.$add$ns(oldValue, "a");
        $top.get$attributes;
        new $._ElementAttributeMap($top)._element.setAttribute("data-dart_temporary_attached", newValue);
        break;
      }
      top0 = $top.parentElement;
      if (top0 == null) {
        $top.get$attributes;
        new $._ElementAttributeMap($top)._element.setAttribute("data-dart_temporary_attached", "a");
        t1 = $.get$children$x(document.documentElement);
        t1.add$1(t1, $top);
        break;
      }
      t1 = document.documentElement;
      if (top0 == null ? t1 == null : top0 === t1)
        break;
    }
  return id;
},

"+_serializeElement:1:0": 0,

_deserializeElement0: function(id) {
  var t1, list, t2, e, $top, newValue;
  t1 = "[data-dart_id=\"" + $.S(id) + "\"]";
  list = new $._FrozenElementList(document.querySelectorAll(t1));
  list.$builtinTypeInfo = [null];
  t1 = list._nodeList;
  t2 = t1.length;
  if (t2 > 1)
    throw $.wrapException("Non unique ID: " + $.S(id));
  if (t2 === 0)
    throw $.wrapException("Only elements attached to document can be serialized: " + $.S(id));
  e = t1[0];
  if (e !== document.documentElement)
    for ($top = e; true;) {
      t1 = $.getInterceptor$x($top);
      if (t1.get$attributes($top)._element.hasAttribute("data-dart_temporary_attached") === true) {
        newValue = $.substring$1$s(t1.get$attributes($top)._element.getAttribute("data-dart_temporary_attached"), 1);
        t1.get$attributes($top)._element.setAttribute("data-dart_temporary_attached", newValue);
        if (t1.get$attributes($top)._element.getAttribute("data-dart_temporary_attached").length === 0) {
          t1 = t1.get$attributes($top)._element;
          t1.getAttribute("data-dart_temporary_attached");
          t1.removeAttribute("data-dart_temporary_attached");
          $top.remove$0;
          t1 = $top.parentNode;
          if (t1 != null)
            t1.removeChild($top);
        }
        break;
      }
      $top = $top.parentElement;
      t1 = document.documentElement;
      if ($top == null ? t1 == null : $top === t1)
        break;
    }
  return e;
},

"+_deserializeElement:1:0": 0}],
["js", "package:js/js.dart", , {
_initialize_closure: {
  "": function _initialize_closure() {
  },
  "super": "Closure",
  call$1: function(_) {
    var t1;
    $._initialize();
    t1 = $.get$_proxiedObjectTable();
    t1._scopeIndices.push(t1._handleStack.length);
    $._jsEnterJavaScriptScope.callSync$1([]);
    return $.get$_proxiedObjectTable()._scopeIndices.length;
  },
  $isFunction: true
},

"+_initialize_closure": 0,

_initialize_closure0: {
  "": function _initialize_closure() {
  },
  "super": "Closure",
  call$1: function(args) {
    $.$index$asx(args, 0);
    $._jsExitJavaScriptScope.callSync$1([]);
    $.get$_proxiedObjectTable().exitScope$0();
    return;
  },
  $isFunction: true
},

"+_initialize_closure": 0,

_enterScopeIfNeeded_closure: {
  "": function _enterScopeIfNeeded_closure(depth_0) {
    this.depth_0 = depth_0;
  },
  "super": "Closure",
  call$0: function() {
    $._jsExitJavaScriptScope.callSync$1([]);
    $.get$_proxiedObjectTable().exitScope$0();
    return;
  },
  $isFunction: true
},

"+_enterScopeIfNeeded_closure": 0,

Callback: {
  "": function Callback(_manualDispose, _liblib10$_id, _liblib10$_callback) {
    this._manualDispose = _manualDispose;
    this._liblib10$_id = _liblib10$_id;
    this._liblib10$_callback = _liblib10$_callback;
  },
  "super": "Object",
  get$_manualDispose: function() {
    return this._manualDispose;
  },
  set$_manualDispose: function(v) {
    this._manualDispose = v;
  },
  get$_liblib10$_id: function() {
    return this._liblib10$_id;
  },
  set$_liblib10$_id: function(v) {
    this._liblib10$_id = v;
  },
  get$_liblib10$_callback: function() {
    return this._liblib10$_callback;
  },
  set$_liblib10$_callback: function(v) {
    this._liblib10$_callback = v;
  },
  toJs$0: function() {
    return new $.FunctionProxy(new $._LocalSendPortSync($.get$_proxiedObjectTable()._liblib10$_port), this._liblib10$_id);
  },
  dispose$0: function() {
    var t1, t2, t3, t4;
    t1 = $.get$_proxiedObjectTable();
    t2 = this._liblib10$_id;
    t3 = t1._registry;
    t3.$index(t3, t2);
    t4 = t1._globalIds;
    t4.remove$1(t4, t2);
    t3.remove$1(t3, t2);
    t1._deletedCount = t1._deletedCount + 1;
  },
  Callback$once$2$withThis: function(f, withThis) {
    var t1, t2, t3, t4, id;
    this._liblib10$_callback = new $.Callback$once_closure(this, f, withThis);
    this._manualDispose = false;
    t1 = $.get$_proxiedObjectTable();
    t2 = this._liblib10$_callback;
    $._enterScopeIfNeeded();
    t3 = t1._name + "-";
    t4 = t1._nextId;
    t1._nextId = t4 + 1;
    id = t3 + t4;
    t4 = t1._registry;
    t4.$indexSet(t4, id, t2);
    t1._handleStack.push(id);
    this._liblib10$_id = id;
    t1 = $.get$_proxiedObjectTable();
    t1 = t1._globalIds;
    t1.add$1(t1, this._liblib10$_id);
  },
  $isSerializable: true,
  $asSerializable: function() { return [$.FunctionProxy]; }
},

"+Callback": 0,

Callback$once_closure: {
  "": function Callback$once_closure(this_0, f_1, withThis_2) {
    this.this_0 = this_0;
    this.f_1 = f_1;
    this.withThis_2 = withThis_2;
  },
  "super": "Closure",
  call$1: function(args) {
    var t1, t2, t3, t4;
    try {
      t1 = this.withThis_2 ? args : $.toList$0$ax($.skip$1$ax(args, 1));
      t1 = $.Primitives_applyFunction(this.f_1, t1, $.Function__toMangledNames(null));
      return t1;
    } finally {
      t1 = $.get$_proxiedObjectTable();
      t2 = this.this_0.get$_liblib10$_id();
      t3 = t1._registry;
      t3.$index(t3, t2);
      t4 = t1._globalIds;
      t4.remove$1(t4, t2);
      t3.remove$1(t3, t2);
      t1._deletedCount = t1._deletedCount + 1;
    }
  },
  $isFunction: true
},

"+Callback$once_closure": 0,

_Undefined0: {
  "": function _Undefined() {
  },
  "super": "Object"
},

"+_Undefined": 0,

Proxy: {
  "": function Proxy(_liblib10$_port, _liblib10$_id) {
    this._liblib10$_port = _liblib10$_port;
    this._liblib10$_id = _liblib10$_id;
  },
  "super": "Object",
  get$_liblib10$_port: function() {
    return this._liblib10$_port;
  },
  set$_liblib10$_port: function(v) {
    this._liblib10$_port = v;
  },
  get$_liblib10$_id: function() {
    return this._liblib10$_id;
  },
  toJs$0: function() {
    return this;
  },
  $index: function(_, arg) {
    return $.Proxy__forward0(this, "[]", "method", [arg]);
  },
  $indexSet: function(_, key, value) {
    return $.Proxy__forward0(this, "[]=", "method", [key, value]);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      t1 = true;
    else
      t1 = typeof other === "object" && other !== null && !!$.getInterceptor(other).$isProxy && $._jsPortEquals.callSync$1([$._serialize(this), $._serialize(other)]) === true;
    return t1;
  },
  toString$0: function(_) {
    var t1, exception;
    try {
      t1 = $.Proxy__forward0(this, "toString", "method", []);
      return t1;
    } catch (exception) {
      $.unwrapException(exception);
      return $.Object.prototype.toString$0.call(this, this);
    }

  },
  noSuchMethod$1: function(_, invocation) {
    var symbol, member, args, kind;
    symbol = invocation.get$memberName();
    member = typeof symbol === "string" ? symbol : symbol.get$_liblib$_name();
    if (typeof member !== "string")
      return this.noSuchMethod$1$bailout1(1, invocation, member);
    if ($.JSString_methods.indexOf$1(member, "@") !== -1)
      member = $.JSString_methods.substring$2(member, 0, $.JSString_methods.indexOf$1(member, "@"));
    args = invocation.get$positionalArguments();
    if (typeof args !== "object" || args === null || args.constructor !== Array || !!args.fixed$length)
      return this.noSuchMethod$1$bailout1(2, invocation, member, args);
    if (invocation.get$isGetter() === true) {
      if ($.JSString_methods.startsWith$1(member, "get:"))
        member = $.JSString_methods.substring$1(member, 4);
      kind = "get";
    } else if (invocation.get$isSetter() === true) {
      if ($.JSString_methods.endsWith$1(member, "="))
        member = $.JSString_methods.substring$2(member, 0, member.length - 1);
      if ($.JSString_methods.startsWith$1(member, "set:"))
        member = $.JSString_methods.substring$1(member, 4);
      kind = "set";
    } else if ($.JSString_methods.startsWith$1(member, "get:")) {
      member = $.JSString_methods.substring$1(member, 4);
      kind = "get";
    } else if ($.JSString_methods.startsWith$1(member, "set:")) {
      member = $.JSString_methods.substring$1(member, 4);
      kind = "set";
    } else
      kind = member === "call" ? "apply" : "method";
    return $.Proxy__forward0(this, member, kind, args);
  },
  noSuchMethod$1$bailout1: function(state0, invocation, member, args) {
    switch (state0) {
      case 0:
        symbol = invocation.get$memberName();
        member = typeof symbol === "string" ? symbol : symbol.get$_liblib$_name();
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(member);
        if (!$.$eq(t1.indexOf$1(member, "@"), -1))
          member = t1.substring$2(member, 0, t1.indexOf$1(member, "@"));
        args = invocation.get$positionalArguments();
      case 2:
        var symbol, t1, kind;
        state0 = 0;
        if (args == null)
          args = [];
        if (invocation.get$isGetter() === true) {
          t1 = $.getInterceptor$s(member);
          if (t1.startsWith$1(member, "get:") === true)
            member = t1.substring$1(member, 4);
          kind = "get";
        } else if (invocation.get$isSetter() === true) {
          t1 = $.getInterceptor$s(member);
          if (t1.endsWith$1(member, "=") === true)
            member = t1.substring$2(member, 0, $.$sub$n(t1.get$length(member), 1));
          t1 = $.getInterceptor$s(member);
          if (t1.startsWith$1(member, "set:") === true)
            member = t1.substring$1(member, 4);
          kind = "set";
        } else {
          t1 = $.getInterceptor$s(member);
          if (t1.startsWith$1(member, "get:") === true) {
            member = t1.substring$1(member, 4);
            kind = "get";
          } else if (t1.startsWith$1(member, "set:") === true) {
            member = t1.substring$1(member, 4);
            kind = "set";
          } else
            kind = t1.$eq(member, "call") ? "apply" : "method";
        }
        return $.Proxy__forward0(this, member, kind, args);
    }
  },
  $isProxy: true,
  $isSerializable: true,
  $asSerializable: function() { return [$.Proxy]; }
},

"+Proxy": 0,

FunctionProxy: {
  "": function FunctionProxy(_liblib10$_port, _liblib10$_id) {
    this._liblib10$_port = _liblib10$_port;
    this._liblib10$_id = _liblib10$_id;
  },
  "super": "Proxy",
  call$6: function(arg1, arg2, arg3, arg4, arg5, arg6) {
    return $.Proxy__forward0(this, "", "apply", $._pruneUndefined(arg1, arg2, arg3, arg4, arg5, arg6));
  },
  call$5: function(arg1, arg2, arg3, arg4, arg5) {
    return this.call$6(arg1, arg2, arg3, arg4, arg5, $.C__Undefined);
  },
  call$1: function(arg1) {
    return this.call$6(arg1, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined);
  },
  call$2: function(arg1, arg2) {
    return this.call$6(arg1, arg2, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined);
  },
  call$4: function(arg1, arg2, arg3, arg4) {
    return this.call$6(arg1, arg2, arg3, arg4, $.C__Undefined, $.C__Undefined);
  },
  call$3: function(arg1, arg2, arg3) {
    return this.call$6(arg1, arg2, arg3, $.C__Undefined, $.C__Undefined, $.C__Undefined);
  },
  call$0: function() {
    return this.call$6($.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined, $.C__Undefined);
  },
  $isFunctionProxy: true,
  $isFunction: true,
  $isSerializable: true,
  $asSerializable: function() { return [$.Proxy]; }
},

"+FunctionProxy": 0,

_ProxiedObjectTable0: {
  "": function _ProxiedObjectTable(_name, _nextId, _deletedCount, _registry, _liblib10$_port, _globalIds, _handleStack, _scopeIndices) {
    this._name = _name;
    this._nextId = _nextId;
    this._deletedCount = _deletedCount;
    this._registry = _registry;
    this._liblib10$_port = _liblib10$_port;
    this._globalIds = _globalIds;
    this._handleStack = _handleStack;
    this._scopeIndices = _scopeIndices;
  },
  "super": "Object",
  get$_name: function() {
    return this._name;
  },
  get$_nextId: function() {
    return this._nextId;
  },
  set$_nextId: function(v) {
    this._nextId = v;
  },
  get$_deletedCount: function() {
    return this._deletedCount;
  },
  set$_deletedCount: function(v) {
    this._deletedCount = v;
  },
  get$_registry: function() {
    return this._registry;
  },
  get$_liblib10$_port: function() {
    return this._liblib10$_port;
  },
  get$_globalIds: function() {
    return this._globalIds;
  },
  get$_handleStack: function() {
    return this._handleStack;
  },
  get$_scopeIndices: function() {
    return this._scopeIndices;
  },
  exitScope$0: function() {
    var t1, start, t2, t3, i, t4;
    t1 = this._scopeIndices;
    if (0 >= t1.length)
      throw $.ioore(0);
    start = t1.pop();
    if (start !== (start | 0))
      return this.exitScope$0$bailout(1, start);
    for (t1 = this._handleStack, t2 = this._registry, t3 = this._globalIds, i = start; t4 = t1.length, i < t4; ++i) {
      if (i < 0)
        throw $.ioore(i);
      if (!t3.contains$1(t3, t1[i])) {
        if (i >= t1.length)
          throw $.ioore(i);
        t2.remove$1(t2, t1[i]);
        this._deletedCount = this._deletedCount + 1;
      }
    }
    if (start !== t4)
      $.JSArray_methods.removeRange$2(t1, start, t4 - start);
  },
  exitScope$0$bailout: function(state0, start) {
    var t1, t2, t3, i;
    for (t1 = this._handleStack, t2 = this._registry, t3 = this._globalIds, i = start; $.$lt$n(i, t1.length) === true; ++i) {
      if (i >>> 0 !== i || i >= t1.length)
        throw $.ioore(i);
      if (!t3.contains$1(t3, t1[i])) {
        if (i >= t1.length)
          throw $.ioore(i);
        t2.remove$1(t2, t1[i]);
        this._deletedCount = this._deletedCount + 1;
      }
    }
    if (!$.$eq(start, t1.length)) {
      t2 = t1.length;
      if (typeof start !== "number")
        throw $.iae(start);
      $.JSArray_methods.removeRange$2(t1, start, t2 - start);
    }
  },
  add$1: function(_, x) {
    var t1, t2, id;
    $._enterScopeIfNeeded();
    t1 = this._name + "-";
    t2 = this._nextId;
    this._nextId = t2 + 1;
    id = t1 + t2;
    t2 = this._registry;
    t2.$indexSet(t2, id, x);
    this._handleStack.push(id);
    return id;
  },
  _liblib10$_ProxiedObjectTable$0: function() {
    this._liblib10$_port.receive$1(new $._ProxiedObjectTable_closure0(this));
  }
},

"+_ProxiedObjectTable": 0,

_ProxiedObjectTable_closure0: {
  "": function _ProxiedObjectTable_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(msg) {
    var receiver, method, args, func, result, e, exception, t1;
    try {
      receiver = $.$index$asx(this.this_0.get$_registry(), $.$index$asx(msg, 0));
      method = $.$index$asx(msg, 1);
      args = $.toList$0$ax($.map$1$ax($.$index$asx(msg, 2), $._deserialize$closure));
      if ($.$eq(method, "#call")) {
        func = $.propertyTypeCast(receiver, "$isFunction");
        result = $._serialize(func.call$1(args));
        return ["return", result];
      } else
        throw $.wrapException("Invocation unsupported on non-function Dart proxies");
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      return ["throws", $.S(e)];
    }

  },
  $isFunction: true
},

"+_ProxiedObjectTable_closure": 0,

_deserialize_deserializeFunction: {
  "": function _deserialize_deserializeFunction() {
  },
  "super": "Closure",
  call$1: function(message) {
    var t1, id, port;
    t1 = $.getInterceptor$asx(message);
    id = t1.$index(message, 1);
    port = t1.$index(message, 2);
    if ($.$eq(port, new $._LocalSendPortSync($.get$_proxiedObjectTable()._liblib10$_port))) {
      t1 = $.get$_proxiedObjectTable()._registry;
      return t1.$index(t1, id);
    } else
      return new $.FunctionProxy(port, id);
  },
  $isFunction: true
},

"+_deserialize_deserializeFunction": 0,

_deserialize_deserializeObject: {
  "": function _deserialize_deserializeObject() {
  },
  "super": "Closure",
  call$1: function(message) {
    var t1, id, port;
    t1 = $.getInterceptor$asx(message);
    id = t1.$index(message, 1);
    port = t1.$index(message, 2);
    if ($.$eq(port, new $._LocalSendPortSync($.get$_proxiedObjectTable()._liblib10$_port))) {
      t1 = $.get$_proxiedObjectTable()._registry;
      return t1.$index(t1, id);
    } else
      return new $.Proxy(port, id);
  },
  $isFunction: true
},

"+_deserialize_deserializeObject": 0,

_initialize: function() {
  var t1, exception, script, serialized, output;
  if ($._jsPortSync != null)
    return;
  try {
    t1 = window;
    $._jsPortSync = $.Window_methods.lookupPort$1(t1, "dart-js-context");
  } catch (exception) {
    $.unwrapException(exception);
  }

  if ($._jsPortSync == null) {
    script = document.createElement("script");
    t1 = $.getInterceptor$x(script);
    t1.set$type(script, "text/javascript");
    t1.set$innerHtml(script, "(function() {\n  // Proxy support for js.dart.\n\n  var globalContext = window;\n\n  // Support for binding the receiver (this) in proxied functions.\n  function bindIfFunction(f, _this) {\n    if (typeof(f) != \"function\") {\n      return f;\n    } else {\n      return new BoundFunction(_this, f);\n    }\n  }\n\n  function unbind(obj) {\n    if (obj instanceof BoundFunction) {\n      return obj.object;\n    } else {\n      return obj;\n    }\n  }\n\n  function getBoundThis(obj) {\n    if (obj instanceof BoundFunction) {\n      return obj._this;\n    } else {\n      return globalContext;\n    }\n  }\n\n  function BoundFunction(_this, object) {\n    this._this = _this;\n    this.object = object;\n  }\n\n  // Table for local objects and functions that are proxied.\n  function ProxiedObjectTable() {\n    // Name for debugging.\n    this.name = 'js-ref';\n\n    // Table from IDs to JS objects.\n    this.map = {};\n\n    // Generator for new IDs.\n    this._nextId = 0;\n\n    // Counter for deleted proxies.\n    this._deletedCount = 0;\n\n    // Flag for one-time initialization.\n    this._initialized = false;\n\n    // Ports for managing communication to proxies.\n    this.port = new ReceivePortSync();\n    this.sendPort = this.port.toSendPort();\n\n    // Set of IDs that are global.\n    // These will not be freed on an exitScope().\n    this.globalIds = {};\n\n    // Stack of scoped handles.\n    this.handleStack = [];\n\n    // Stack of active scopes where each value is represented by the size of\n    // the handleStack at the beginning of the scope.  When an active scope\n    // is popped, the handleStack is restored to where it was when the\n    // scope was entered.\n    this.scopeIndices = [];\n  }\n\n  // Number of valid IDs.  This is the number of objects (global and local)\n  // kept alive by this table.\n  ProxiedObjectTable.prototype.count = function () {\n    return Object.keys(this.map).length;\n  }\n\n  // Number of total IDs ever allocated.\n  ProxiedObjectTable.prototype.total = function () {\n    return this.count() + this._deletedCount;\n  }\n\n  // Adds an object to the table and return an ID for serialization.\n  ProxiedObjectTable.prototype.add = function (obj) {\n    if (this.scopeIndices.length == 0) {\n      throw \"Cannot allocate a proxy outside of a scope.\";\n    }\n    // TODO(vsm): Cache refs for each obj?\n    var ref = this.name + '-' + this._nextId++;\n    this.handleStack.push(ref);\n    this.map[ref] = obj;\n    return ref;\n  }\n\n  ProxiedObjectTable.prototype._initializeOnce = function () {\n    if (!this._initialized) {\n      this._initialize();\n      this._initialized = true;\n    }\n  }\n\n  // Enters a new scope for this table.\n  ProxiedObjectTable.prototype.enterScope = function() {\n    this._initializeOnce();\n    this.scopeIndices.push(this.handleStack.length);\n  }\n\n  // Invalidates all non-global IDs in the current scope and\n  // exit the current scope.\n  ProxiedObjectTable.prototype.exitScope = function() {\n    var start = this.scopeIndices.pop();\n    for (var i = start; i < this.handleStack.length; ++i) {\n      var key = this.handleStack[i];\n      if (!this.globalIds.hasOwnProperty(key)) {\n        delete this.map[this.handleStack[i]];\n        this._deletedCount++;\n      }\n    }\n    this.handleStack = this.handleStack.splice(0, start);\n  }\n\n  // Makes this ID globally scope.  It must be explicitly invalidated.\n  ProxiedObjectTable.prototype.globalize = function(id) {\n    this.globalIds[id] = true;\n  }\n\n  // Invalidates this ID, potentially freeing its corresponding object.\n  ProxiedObjectTable.prototype.invalidate = function(id) {\n    var old = this.get(id);\n    delete this.globalIds[id];\n    delete this.map[id];\n    this._deletedCount++;\n    return old;\n  }\n\n  // Gets the object or function corresponding to this ID.\n  ProxiedObjectTable.prototype.get = function (id) {\n    if (!this.map.hasOwnProperty(id)) {\n      throw 'Proxy ' + id + ' has been invalidated.'\n    }\n    return this.map[id];\n  }\n\n  ProxiedObjectTable.prototype._initialize = function () {\n    // Configure this table's port to forward methods, getters, and setters\n    // from the remote proxy to the local object.\n    var table = this;\n\n    this.port.receive(function (message) {\n      // TODO(vsm): Support a mechanism to register a handler here.\n      try {\n        var object = table.get(message[0]);\n        var receiver = unbind(object);\n        var member = message[1];\n        var kind = message[2];\n        var args = message[3].map(deserialize);\n        if (kind == 'get') {\n          // Getter.\n          var field = member;\n          if (field in receiver && args.length == 0) {\n            var result = bindIfFunction(receiver[field], receiver);\n            return [ 'return', serialize(result) ];\n          }\n        } else if (kind == 'set') {\n          // Setter.\n          var field = member;\n          if (args.length == 1) {\n            return [ 'return', serialize(receiver[field] = args[0]) ];\n          }\n        } else if (kind == 'apply') {\n          // Direct function invocation.\n          var _this = getBoundThis(object);\n          return [ 'return', serialize(receiver.apply(_this, args)) ];\n        } else if (member == '[]' && args.length == 1) {\n          // Index getter.\n          var result = bindIfFunction(receiver[args[0]], receiver);\n          return [ 'return', serialize(result) ];\n        } else if (member == '[]=' && args.length == 2) {\n          // Index setter.\n          return [ 'return', serialize(receiver[args[0]] = args[1]) ];\n        } else {\n          // Member function invocation.\n          var f = receiver[member];\n          if (f) {\n            var result = f.apply(receiver, args);\n            return [ 'return', serialize(result) ];\n          }\n        }\n        return [ 'none' ];\n      } catch (e) {\n        return [ 'throws', e.toString() ];\n      }\n    });\n  }\n\n  // Singleton for local proxied objects.\n  var proxiedObjectTable = new ProxiedObjectTable();\n\n  // DOM element serialization code.\n  var _localNextElementId = 0;\n  var _DART_ID = 'data-dart_id';\n  var _DART_TEMPORARY_ATTACHED = 'data-dart_temporary_attached';\n\n  function serializeElement(e) {\n    // TODO(vsm): Use an isolate-specific id.\n    var id;\n    if (e.hasAttribute(_DART_ID)) {\n      id = e.getAttribute(_DART_ID);\n    } else {\n      id = (_localNextElementId++).toString();\n      e.setAttribute(_DART_ID, id);\n    }\n    if (e !== document.documentElement) {\n      // Element must be attached to DOM to be retrieve in js part.\n      // Attach top unattached parent to avoid detaching parent of \"e\" when\n      // appending \"e\" directly to document. We keep count of elements\n      // temporarily attached to prevent detaching top unattached parent to\n      // early. This count is equals to the length of _DART_TEMPORARY_ATTACHED\n      // attribute. There could be other elements to serialize having the same\n      // top unattached parent.\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue + \"a\";\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          break;\n        }\n        if (top.parentNode == null) {\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, \"a\");\n          document.documentElement.appendChild(top);\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return id;\n  }\n\n  function deserializeElement(id) {\n    // TODO(vsm): Clear the attribute.\n    var list = document.querySelectorAll('[' + _DART_ID + '=\"' + id + '\"]');\n\n    if (list.length > 1) throw 'Non unique ID: ' + id;\n    if (list.length == 0) {\n      throw 'Element must be attached to the document: ' + id;\n    }\n    var e = list[0];\n    if (e !== document.documentElement) {\n      // detach temporary attached element\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue.substring(1);\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          // detach top only if no more elements have to be unserialized\n          if (top.getAttribute(_DART_TEMPORARY_ATTACHED).length === 0) {\n            top.removeAttribute(_DART_TEMPORARY_ATTACHED);\n            document.documentElement.removeChild(top);\n          }\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return e;\n  }\n\n\n  // Type for remote proxies to Dart objects.\n  function DartProxy(id, sendPort) {\n    this.id = id;\n    this.port = sendPort;\n  }\n\n  // Serializes JS types to SendPortSync format:\n  // - primitives -> primitives\n  // - sendport -> sendport\n  // - DOM element -> [ 'domref', element-id ]\n  // - Function -> [ 'funcref', function-id, sendport ]\n  // - Object -> [ 'objref', object-id, sendport ]\n  function serialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Non-proxied objects are serialized.\n      return message;\n    } else if (message instanceof Element &&\n        (message.ownerDocument == null || message.ownerDocument == document)) {\n      return [ 'domref', serializeElement(message) ];\n    } else if (message instanceof BoundFunction &&\n               typeof(message.object) == 'function') {\n      // Local function proxy.\n      return [ 'funcref',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    } else if (typeof(message) == 'function') {\n      if ('_dart_id' in message) {\n        // Remote function proxy.\n        var remoteId = message._dart_id;\n        var remoteSendPort = message._dart_port;\n        return [ 'funcref', remoteId, remoteSendPort ];\n      } else {\n        // Local function proxy.\n        return [ 'funcref',\n                 proxiedObjectTable.add(message),\n                 proxiedObjectTable.sendPort ];\n      }\n    } else if (message instanceof DartProxy) {\n      // Remote object proxy.\n      return [ 'objref', message.id, message.port ];\n    } else {\n      // Local object proxy.\n      return [ 'objref',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    }\n  }\n\n  function deserialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Serialized type.\n      return message;\n    }\n    var tag = message[0];\n    switch (tag) {\n      case 'funcref': return deserializeFunction(message);\n      case 'objref': return deserializeObject(message);\n      case 'domref': return deserializeElement(message[1]);\n    }\n    throw 'Unsupported serialized data: ' + message;\n  }\n\n  // Create a local function that forwards to the remote function.\n  function deserializeFunction(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local function.\n      return unbind(proxiedObjectTable.get(id));\n    } else {\n      // Remote function.  Forward to its port.\n      var f = function () {\n        var depth = enterScope();\n        try {\n          var args = Array.prototype.slice.apply(arguments);\n          args.splice(0, 0, this);\n          args = args.map(serialize);\n          var result = port.callSync([id, '#call', args]);\n          if (result[0] == 'throws') throw deserialize(result[1]);\n          return deserialize(result[1]);\n        } finally {\n          exitScope(depth);\n        }\n      };\n      // Cache the remote id and port.\n      f._dart_id = id;\n      f._dart_port = port;\n      return f;\n    }\n  }\n\n  // Creates a DartProxy to forwards to the remote object.\n  function deserializeObject(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local object.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote object.\n      return new DartProxy(id, port);\n    }\n  }\n\n  // Remote handler to construct a new JavaScript object given its\n  // serialized constructor and arguments.\n  function construct(args) {\n    args = args.map(deserialize);\n    var constructor = unbind(args[0]);\n    args = Array.prototype.slice.call(args, 1);\n\n    // Until 10 args, the 'new' operator is used. With more arguments we use a\n    // generic way that may not work, particulary when the constructor does not\n    // have an \"apply\" method.\n    var ret = null;\n    if (args.length === 0) {\n      ret = new constructor();\n    } else if (args.length === 1) {\n      ret = new constructor(args[0]);\n    } else if (args.length === 2) {\n      ret = new constructor(args[0], args[1]);\n    } else if (args.length === 3) {\n      ret = new constructor(args[0], args[1], args[2]);\n    } else if (args.length === 4) {\n      ret = new constructor(args[0], args[1], args[2], args[3]);\n    } else if (args.length === 5) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4]);\n    } else if (args.length === 6) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5]);\n    } else if (args.length === 7) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 8) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 9) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 10) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6], args[7], args[8], args[9]);\n    } else {\n      // Dummy Type with correct constructor.\n      var Type = function(){};\n      Type.prototype = constructor.prototype;\n  \n      // Create a new instance\n      var instance = new Type();\n  \n      // Call the original constructor.\n      ret = constructor.apply(instance, args);\n      ret = Object(ret) === ret ? ret : instance;\n    }\n    return serialize(ret);\n  }\n\n  // Remote handler to return the top-level JavaScript context.\n  function context(data) {\n    return serialize(globalContext);\n  }\n\n  // Remote handler to track number of live / allocated proxies.\n  function proxyCount() {\n    var live = proxiedObjectTable.count();\n    var total = proxiedObjectTable.total();\n    return [live, total];\n  }\n\n  // Return true if two JavaScript proxies are equal (==).\n  function proxyEquals(args) {\n    return deserialize(args[0]) == deserialize(args[1]);\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyInstanceof(args) {\n    var obj = unbind(deserialize(args[0]));\n    var type = unbind(deserialize(args[1]));\n    return obj instanceof type;\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyDeleteProperty(args) {\n    var obj = unbind(deserialize(args[0]));\n    var member = unbind(deserialize(args[1]));\n    delete obj[member];\n  }\n\n  function proxyConvert(args) {\n    return serialize(deserializeDataTree(args));\n  }\n\n  function deserializeDataTree(data) {\n    var type = data[0];\n    var value = data[1];\n    if (type === 'map') {\n      var obj = {};\n      for (var i = 0; i < value.length; i++) {\n        obj[value[i][0]] = deserializeDataTree(value[i][1]);\n      }\n      return obj;\n    } else if (type === 'list') {\n      var list = [];\n      for (var i = 0; i < value.length; i++) {\n        list.push(deserializeDataTree(value[i]));\n      }\n      return list;\n    } else /* 'simple' */ {\n      return deserialize(value);\n    }\n  }\n\n  function makeGlobalPort(name, f) {\n    var port = new ReceivePortSync();\n    port.receive(f);\n    window.registerPort(name, port.toSendPort());\n  }\n\n  // Enters a new scope in the JavaScript context.\n  function enterJavaScriptScope() {\n    proxiedObjectTable.enterScope();\n  }\n\n  // Enters a new scope in both the JavaScript and Dart context.\n  var _dartEnterScopePort = null;\n  function enterScope() {\n    enterJavaScriptScope();\n    if (!_dartEnterScopePort) {\n      _dartEnterScopePort = window.lookupPort('js-dart-enter-scope');\n    }\n    return _dartEnterScopePort.callSync([]);\n  }\n\n  // Exits the current scope (and invalidate local IDs) in the JavaScript\n  // context.\n  function exitJavaScriptScope() {\n    proxiedObjectTable.exitScope();\n  }\n\n  // Exits the current scope in both the JavaScript and Dart context.\n  var _dartExitScopePort = null;\n  function exitScope(depth) {\n    exitJavaScriptScope();\n    if (!_dartExitScopePort) {\n      _dartExitScopePort = window.lookupPort('js-dart-exit-scope');\n    }\n    return _dartExitScopePort.callSync([ depth ]);\n  }\n\n  makeGlobalPort('dart-js-context', context);\n  makeGlobalPort('dart-js-create', construct);\n  makeGlobalPort('dart-js-proxy-count', proxyCount);\n  makeGlobalPort('dart-js-equals', proxyEquals);\n  makeGlobalPort('dart-js-instanceof', proxyInstanceof);\n  makeGlobalPort('dart-js-delete-property', proxyDeleteProperty);\n  makeGlobalPort('dart-js-convert', proxyConvert);\n  makeGlobalPort('dart-js-enter-scope', enterJavaScriptScope);\n  makeGlobalPort('dart-js-exit-scope', exitJavaScriptScope);\n  makeGlobalPort('dart-js-globalize', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.globalize(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n  makeGlobalPort('dart-js-invalidate', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.invalidate(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n})();\n");
    t1 = document.body;
    t1.get$nodes;
    new $._ChildNodeListLazy(t1)._this.appendChild(script);
    $._jsPortSync = $.Window_methods.lookupPort$1(window, "dart-js-context");
  }
  $._jsPortCreate = $.Window_methods.lookupPort$1(window, "dart-js-create");
  $._jsPortProxyCount = $.Window_methods.lookupPort$1(window, "dart-js-proxy-count");
  $._jsPortEquals = $.Window_methods.lookupPort$1(window, "dart-js-equals");
  $._jsPortInstanceof = $.Window_methods.lookupPort$1(window, "dart-js-instanceof");
  $._jsPortDeleteProperty = $.Window_methods.lookupPort$1(window, "dart-js-delete-property");
  $._jsPortConvert = $.Window_methods.lookupPort$1(window, "dart-js-convert");
  $._jsEnterJavaScriptScope = $.Window_methods.lookupPort$1(window, "dart-js-enter-scope");
  $._jsExitJavaScriptScope = $.Window_methods.lookupPort$1(window, "dart-js-exit-scope");
  $._jsGlobalize = $.Window_methods.lookupPort$1(window, "dart-js-globalize");
  $._jsInvalidate = $.Window_methods.lookupPort$1(window, "dart-js-invalidate");
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_closure());
  $._dartEnterDartScope = t1;
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_closure0());
  $._dartExitDartScope = t1;
  t1 = window;
  serialized = new $._JsSerializer0(0, new $._MessageTraverserVisitedMap0()).traverse$1($._dartEnterDartScope.toSendPort$0());
  t1 = t1.document.documentElement;
  t1.get$attributes;
  output = new $.StringBuffer("");
  output.StringBuffer$1("");
  new $._JsonStringifier(output, []).stringifyValue$1(serialized);
  new $._ElementAttributeMap(t1)._element.setAttribute("dart-port:js-dart-enter-scope", output._contents);
  t1 = window;
  serialized = new $._JsSerializer0(0, new $._MessageTraverserVisitedMap0()).traverse$1($._dartExitDartScope.toSendPort$0());
  t1 = t1.document.documentElement;
  t1.get$attributes;
  output = new $.StringBuffer("");
  output.StringBuffer$1("");
  new $._JsonStringifier(output, []).stringifyValue$1(serialized);
  new $._ElementAttributeMap(t1)._element.setAttribute("dart-port:js-dart-exit-scope", output._contents);
},

_enterScopeIfNeeded: function() {
  var t1, depth;
  if ($.get$_proxiedObjectTable()._scopeIndices.length === 0) {
    $._initialize();
    t1 = $.get$_proxiedObjectTable();
    t1._scopeIndices.push(t1._handleStack.length);
    $._jsEnterJavaScriptScope.callSync$1([]);
    depth = $.get$_proxiedObjectTable()._scopeIndices.length;
    $.get$_Zone__current().runAsync$1(new $._enterScopeIfNeeded_closure(depth));
  }
},

scoped: function(f) {
  var depth, t1;
  $._initialize();
  t1 = $.get$_proxiedObjectTable();
  t1._scopeIndices.push(t1._handleStack.length);
  $._jsEnterJavaScriptScope.callSync$1([]);
  depth = $.get$_proxiedObjectTable()._scopeIndices.length;
  try {
    t1 = f.call$0();
    return t1;
  } finally {
    $._jsExitJavaScriptScope.callSync$1([]);
    $.get$_proxiedObjectTable().exitScope$0();
  }
},

Callback$once: function(f, withThis) {
  var t1 = new $.Callback(null, null, null);
  t1.Callback$once$2$withThis(f, withThis);
  return t1;
},

_pruneUndefined: function(arg1, arg2, arg3, arg4, arg5, arg6) {
  var args, index;
  args = [arg1, arg2, arg3, arg4, arg5, arg6];
  index = $.Arrays_indexOf(args, $.C__Undefined, 0, args.length);
  if ($.$lt$n(index, 0) === true)
    return args;
  return $.JSArray_methods.sublist$2(args, 0, index);
},

Proxy_Proxy$withArgList: function($constructor, $arguments) {
  var t1, serialized;
  $._enterScopeIfNeeded();
  t1 = [$constructor];
  $.JSArray_methods.addAll$1(t1, $arguments);
  t1 = $.JSArray_methods.map$1(t1, $._serialize$closure);
  serialized = t1.toList$0(t1);
  return $._deserialize($._jsPortCreate.callSync$1(serialized));
},

Proxy__serializeDataTree: function(data) {
  var entries, t1, key;
  if (typeof data === "object" && data !== null && !!$.getInterceptor(data).$isMap) {
    entries = $.List_List($, null);
    for (t1 = $.get$iterator$ax(data.get$keys()); t1.moveNext$0() === true;) {
      key = t1.get$current();
      entries.push([key, $.Proxy__serializeDataTree(data.$index(data, key))]);
    }
    return ["map", entries];
  } else if (typeof data === "object" && data !== null && (data.constructor === Array || !!$.getInterceptor(data).$isIterable)) {
    t1 = $.map$1$ax(data, $.Proxy__serializeDataTree$closure);
    return ["list", t1.toList$0(t1)];
  } else
    return ["simple", $._serialize(data)];
},

Proxy__forward0: function(receiver, member, kind, args) {
  var result, t1;
  $._enterScopeIfNeeded();
  result = receiver._liblib10$_port.callSync$1([receiver._liblib10$_id, member, kind, $.toList$0$ax($.map$1$ax(args, $._serialize$closure))]);
  t1 = $.getInterceptor$asx(result);
  switch (t1.$index(result, 0)) {
    case "return":
      return $._deserialize(t1.$index(result, 1));
    case "throws":
      throw $.wrapException($._deserialize(t1.$index(result, 1)));
    case "none":
      throw $.wrapException(new $.NoSuchMethodError(receiver, member, args, $.makeLiteralMap([]), null));
    default:
      throw $.wrapException("Invalid return value");
  }
},

_ProxiedObjectTable$: function() {
  var t1, t2, t3, t4, t5;
  t1 = $.makeLiteralMap([]);
  t2 = $.ReceivePortSync$();
  t3 = $.List_List($, $.JSString);
  t3.$builtinTypeInfo = [$.JSString];
  t4 = $.List_List($, $.JSInt);
  t4.$builtinTypeInfo = [$.JSInt];
  t5 = new $.HashSet(0, null, null, null, null);
  t5.$builtinTypeInfo = [$.JSString];
  t1 = new $._ProxiedObjectTable0("dart-ref", 0, 0, t1, t2, t5, t3, t4);
  t1._liblib10$_ProxiedObjectTable$0();
  return t1;
},

_serialize: function(message) {
  var t1, t2, t3, id;
  if (message == null)
    return;
  else if (typeof message === "string" || typeof message === "number" || typeof message === "boolean")
    return message;
  else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isSendPortSync)
    return message;
  else {
    if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isElement) {
      t1 = message.ownerDocument;
      t1 = t1 == null || t1 === document;
    } else
      t1 = false;
    if (t1)
      return ["domref", $._serializeElement(message)];
    else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isFunctionProxy)
      return ["funcref", message._liblib10$_id, message._liblib10$_port];
    else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isProxy)
      return ["objref", message._liblib10$_id, message._liblib10$_port];
    else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isSerializable)
      return $._serialize(message.toJs$0());
    else {
      t1 = $.get$_proxiedObjectTable();
      $._enterScopeIfNeeded();
      t2 = t1._name + "-";
      t3 = t1._nextId;
      t1._nextId = t3 + 1;
      id = t2 + t3;
      t3 = t1._registry;
      t3.$indexSet(t3, id, message);
      t1._handleStack.push(id);
      return ["objref", id, new $._LocalSendPortSync($.get$_proxiedObjectTable()._liblib10$_port)];
    }
  }
},

_deserialize: function(message) {
  var t1;
  if (message == null)
    return;
  else if (typeof message === "string" || typeof message === "number" || typeof message === "boolean")
    return message;
  else if (typeof message === "object" && message !== null && !!$.getInterceptor(message).$isSendPortSync)
    return message;
  t1 = $.getInterceptor$asx(message);
  switch (t1.$index(message, 0)) {
    case "funcref":
      return new $._deserialize_deserializeFunction().call$1(message);
    case "objref":
      return new $._deserialize_deserializeObject().call$1(message);
    case "domref":
      return $._deserializeElement(t1.$index(message, 1));
  }
  throw $.wrapException("Unsupported serialized data: " + $.S(message));
},

_serializeElement: function(e) {
  var id, t1, $top, oldValue, newValue, top0;
  if (new $._ElementAttributeMap(e)._element.hasAttribute("data-dart_id") === true)
    id = new $._ElementAttributeMap(e)._element.getAttribute("data-dart_id");
  else {
    t1 = $._localNextElementId;
    $._localNextElementId = $.$add$ns(t1, 1);
    id = "dart-" + $.S(t1);
    new $._ElementAttributeMap(e)._element.setAttribute("data-dart_id", id);
  }
  if (e !== document.documentElement)
    for ($top = e; true; $top = top0) {
      $top.get$attributes;
      if (new $._ElementAttributeMap($top)._element.hasAttribute("data-dart_temporary_attached") === true) {
        $top.get$attributes;
        oldValue = new $._ElementAttributeMap($top)._element.getAttribute("data-dart_temporary_attached");
        if (oldValue == null)
          throw oldValue.$add();
        newValue = $.$add$ns(oldValue, "a");
        $top.get$attributes;
        new $._ElementAttributeMap($top)._element.setAttribute("data-dart_temporary_attached", newValue);
        break;
      }
      top0 = $top.parentElement;
      if (top0 == null) {
        $top.get$attributes;
        new $._ElementAttributeMap($top)._element.setAttribute("data-dart_temporary_attached", "a");
        t1 = $.get$children$x(document.documentElement);
        t1.add$1(t1, $top);
        break;
      }
      t1 = document.documentElement;
      if (top0 == null ? t1 == null : top0 === t1)
        break;
    }
  return id;
},

_deserializeElement: function(id) {
  var t1, list, t2, e, $top, newValue;
  t1 = "[data-dart_id=\"" + $.S(id) + "\"]";
  list = new $._FrozenElementList(document.querySelectorAll(t1));
  list.$builtinTypeInfo = [null];
  t1 = list._nodeList;
  t2 = t1.length;
  if (t2 > 1)
    throw $.wrapException("Non unique ID: " + $.S(id));
  if (t2 === 0)
    throw $.wrapException("Only elements attached to document can be serialized: " + $.S(id));
  e = t1[0];
  if (e !== document.documentElement)
    for ($top = e; true;) {
      t1 = $.getInterceptor$x($top);
      if (t1.get$attributes($top)._element.hasAttribute("data-dart_temporary_attached") === true) {
        newValue = $.substring$1$s(t1.get$attributes($top)._element.getAttribute("data-dart_temporary_attached"), 1);
        t1.get$attributes($top)._element.setAttribute("data-dart_temporary_attached", newValue);
        if (t1.get$attributes($top)._element.getAttribute("data-dart_temporary_attached").length === 0) {
          t1 = t1.get$attributes($top)._element;
          t1.getAttribute("data-dart_temporary_attached");
          t1.removeAttribute("data-dart_temporary_attached");
          $top.remove$0;
          t1 = $top.parentNode;
          if (t1 != null)
            t1.removeChild($top);
        }
        break;
      }
      $top = $top.parentElement;
      t1 = document.documentElement;
      if ($top == null ? t1 == null : $top === t1)
        break;
    }
  return e;
}}],
["js_test", "../test/js_test.dart", , {
jsInterop_closure: {
  "": function jsInterop_closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.test("retainRelease1", new $.jsInterop__closure());
    $.test("retainRelease2", new $.jsInterop__closure0());
    $.test("retainRelease3", new $.jsInterop__closure1());
  },
  $isFunction: true
},

"+jsInterop_closure": 0,

jsInterop__closure: {
  "": function jsInterop__closure() {
  },
  "super": "Closure",
  call$0: function() {
    $._enterScopeIfNeeded0();
    var proxy = $._deserialize0($._jsPortConvert0.callSync$1($.Proxy__serializeDataTree0(["one", "two"])));
    $._jsGlobalize0.callSync$1($._serialize0(proxy.toJs$0()));
    $.expect(proxy, $.C__IsNotNull, null, null, false);
    $._jsInvalidate0.callSync$1($._serialize0(proxy.toJs$0()));
    $.expect(proxy, $.C__IsNotNull, null, null, false);
  },
  $isFunction: true
},

"+jsInterop__closure": 0,

jsInterop__closure0: {
  "": function jsInterop__closure() {
  },
  "super": "Closure",
  call$0: function() {
    $._enterScopeIfNeeded0();
    var proxy = $.Proxy_Proxy$withArgList0($._deserialize0($._jsPortSync0.callSync$1([])).get$Array(), $._pruneUndefined0($.C__Undefined0, $.C__Undefined0, $.C__Undefined0, $.C__Undefined0, $.C__Undefined0, $.C__Undefined0));
    $._jsGlobalize0.callSync$1($._serialize0(proxy.toJs$0()));
    $.expect(proxy, $.C__IsNotNull, null, null, false);
    $._jsInvalidate0.callSync$1($._serialize0(proxy.toJs$0()));
    $.expect(proxy, $.C__IsNotNull, null, null, false);
  },
  $isFunction: true
},

"+jsInterop__closure": 0,

jsInterop__closure1: {
  "": function jsInterop__closure() {
  },
  "super": "Closure",
  call$0: function() {
    $._enterScopeIfNeeded0();
    var proxy = $.Proxy_Proxy$withArgList0($._deserialize0($._jsPortSync0.callSync$1([])).get$ace().get$EditSession(), $._pruneUndefined0("", "ace/mode/dart", $.C__Undefined0, $.C__Undefined0, $.C__Undefined0, $.C__Undefined0));
    $._jsGlobalize0.callSync$1($._serialize0(proxy.toJs$0()));
    $.expect(proxy, $.C__IsNotNull, null, null, false);
    $._jsInvalidate0.callSync$1($._serialize0(proxy.toJs$0()));
    $.expect(proxy, $.C__IsNotNull, null, null, false);
  },
  $isFunction: true
},

"+jsInterop__closure": 0,

jsInterop: function() {
  $.group("js_interop", new $.jsInterop_closure());
},

"+jsInterop:0:0": 0}],
["matcher", "../packages/unittest/matcher.dart", , {
MatchState: {
  "": function MatchState(state) {
    this.state = state;
  },
  "super": "Object",
  get$state: function(receiver) {
    return this.state;
  },
  set$state: function(receiver, v) {
    this.state = v;
  }
},

"+MatchState": 0,

BaseMatcher: {
  "": function BaseMatcher() {
  },
  "super": "Object",
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    var t1;
    mismatchDescription._out = $.S(mismatchDescription._out) + "was ";
    if (typeof item === "object" && item !== null && !!$.getInterceptor(item).$isMatcher)
      item.describe$1(mismatchDescription);
    else {
      t1 = $.prettyPrint(item, 25, 80);
      mismatchDescription._out = $.S(mismatchDescription._out) + $.S(t1);
    }
    return mismatchDescription;
  },
  $isMatcher: true
},

"+BaseMatcher": 0,

_Empty: {
  "": function _Empty() {
  },
  "super": "BaseMatcher",
  matches$2: function(_, item, matchState) {
    if (typeof item === "object" && item !== null && !!$.getInterceptor(item).$isMap || typeof item === "object" && item !== null && (item.constructor === Array || !!$.getInterceptor(item).$isIterable))
      return $.get$isEmpty$asx(item);
    else if (typeof item === "string")
      return item.length === 0;
    else
      return false;
  },
  describe$1: function(description) {
    description._out = $.S(description._out) + "empty";
    return description;
  },
  "+describe:1:0": 0
},

"+_Empty": 0,

_IsNull: {
  "": function _IsNull() {
  },
  "super": "BaseMatcher",
  matches$2: function(_, item, matchState) {
    return item == null;
  },
  describe$1: function(description) {
    description._out = $.S(description._out) + "null";
    return description;
  }
},

"+_IsNull": 0,

_IsNotNull: {
  "": function _IsNotNull() {
  },
  "super": "BaseMatcher",
  matches$2: function(_, item, matchState) {
    return item != null;
  },
  describe$1: function(description) {
    description._out = $.S(description._out) + "not null";
    return description;
  }
},

"+_IsNotNull": 0,

_IsTrue: {
  "": function _IsTrue() {
  },
  "super": "BaseMatcher",
  matches$2: function(_, item, matchState) {
    return $.$eq(item, true);
  },
  describe$1: function(description) {
    description._out = $.S(description._out) + "true";
    return description;
  }
},

"+_IsTrue": 0,

_DeepMatcher: {
  "": function _DeepMatcher(_expected, _limit, count) {
    this._expected = _expected;
    this._limit = _limit;
    this.count = count;
  },
  "super": "BaseMatcher",
  get$_expected: function() {
    return this._expected;
  },
  get$_limit: function() {
    return this._limit;
  },
  get$count: function() {
    return this.count;
  },
  set$count: function(v) {
    this.count = v;
  },
  _compareIterables$4: function(expected, actual, matcher, depth) {
    var expectedIterator, actualIterator, position, reason, r;
    if (typeof actual !== "object" || actual === null || actual.constructor !== Array && !$.getInterceptor(actual).$isIterable)
      return "is not Iterable";
    expectedIterator = $.get$iterator$ax(expected);
    actualIterator = $.get$iterator$ax(actual);
    for (position = 0, reason = null; reason == null;)
      if (expectedIterator.moveNext$0() === true)
        if (actualIterator.moveNext$0() === true) {
          r = matcher.call$4(expectedIterator.get$current(), actualIterator.get$current(), "mismatch at position " + position, depth);
          if (r != null)
            reason = $.toString$0(r);
          ++position;
        } else
          reason = "shorter than expected";
      else {
        if (actualIterator.moveNext$0() === true)
          ;
        else
          return;
        reason = "longer than expected";
      }
    return reason;
  },
  "+_compareIterables:4:0": 0,
  _recursiveMatch$4: function(expected, actual, $location, depth) {
    var canRecurse, t1, reason, r, t2, err, key, t3;
    if (typeof depth !== "number")
      return this._recursiveMatch$4$bailout(1, expected, actual, $location, depth);
    canRecurse = depth === 0 || this._limit > 1;
    t1 = $.getInterceptor(expected);
    if (t1.$eq(expected, actual))
      reason = null;
    else if (depth > this._limit) {
      reason = new $.StringDescription(null);
      reason._out = "recursion depth limit exceeded";
    } else if (typeof expected === "object" && expected !== null && (expected.constructor === Array || !!$.getInterceptor(expected).$isIterable) && canRecurse) {
      r = this._compareIterables$4(expected, actual, this.get$_recursiveMatch(), depth + 1);
      if (r != null) {
        reason = new $.StringDescription(null);
        reason._out = r;
      } else
        reason = null;
    } else if (typeof expected === "object" && expected !== null && !!$.getInterceptor(expected).$isMap && canRecurse)
      if (typeof actual !== "object" || actual === null || !$.getInterceptor(actual).$isMap) {
        reason = new $.StringDescription(null);
        reason._out = "expected a map";
      } else {
        t2 = t1.get$length(expected);
        if (t2 !== (t2 | 0))
          return this._recursiveMatch$4$bailout(2, expected, actual, $location, depth, $.JSNumber_methods, t1, t2);
        err = t2 === actual.get$length(actual) ? "" : "different map lengths; ";
        for (t2 = $.get$iterator$ax(expected.get$keys()); reason = null, t2.moveNext$0() === true;) {
          key = t2.get$current();
          if (actual.containsKey$1(key) !== true) {
            reason = new $.StringDescription(null);
            reason._out = err;
            reason._out = $.S(reason._out) + "missing map key ";
            if (typeof key === "object" && key !== null && !!$.getInterceptor(key).$isMatcher)
              key.describe$1(reason);
            else {
              t2 = $.prettyPrint(key, 25, 80);
              reason._out = $.S(reason._out) + $.S(t2);
            }
            break;
          }
        }
        if (reason == null) {
          for (t2 = $.get$iterator$ax(actual.get$keys()); t2.moveNext$0() === true;) {
            key = t2.get$current();
            if (expected.containsKey$1(key) !== true) {
              reason = new $.StringDescription(null);
              reason._out = err;
              reason._out = $.S(reason._out) + "extra map key ";
              if (typeof key === "object" && key !== null && !!$.getInterceptor(key).$isMatcher)
                key.describe$1(reason);
              else {
                t2 = $.prettyPrint(key, 25, 80);
                reason._out = $.S(reason._out) + $.S(t2);
              }
              break;
            }
          }
          if (reason == null)
            for (t2 = $.get$iterator$ax(expected.get$keys()), t3 = depth + 1; t2.moveNext$0() === true;) {
              key = t2.get$current();
              reason = this._recursiveMatch$4(t1.$index(expected, key), actual.$index(actual, key), "with key <" + $.S(key) + "> " + $.S($location), t3);
              if (reason != null)
                break;
            }
        }
      }
    else {
      reason = new $.StringDescription(null);
      reason._out = "";
      if (depth > 0) {
        reason._out = $.S(reason._out) + "expected ";
        if (typeof expected === "object" && expected !== null && !!$.getInterceptor(expected).$isMatcher)
          expected.describe$1(reason);
        else {
          t1 = $.prettyPrint(expected, 25, 80);
          reason._out = $.S(reason._out) + $.S(t1);
        }
        reason._out = $.S(reason._out) + " but ";
      }
      reason._out = $.S(reason._out) + "was ";
      if (typeof actual === "object" && actual !== null && !!$.getInterceptor(actual).$isMatcher)
        actual.describe$1(reason);
      else {
        t1 = $.prettyPrint(actual, 25, 80);
        reason._out = $.S(reason._out) + $.S(t1);
      }
    }
    if (reason != null) {
      t1 = $.get$length$asx($location);
      if (typeof t1 !== "number")
        return this._recursiveMatch$4$bailout(3, 0, 0, $location, 0, t1, 0, 0, reason);
      t1 = t1 > 0;
    } else
      t1 = false;
    if (t1)
      $.add$1$ax($.add$1$ax(reason, " "), $location);
    return reason;
  },
  "+_recursiveMatch:4:0": 0,
  _recursiveMatch$4$bailout: function(state0, expected, actual, $location, depth, t1, t2, t3, reason) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(depth);
        canRecurse = t1.$eq(depth, 0) || this._limit > 1;
        t2 = $.getInterceptor(expected);
      case 2:
        if (state0 === 0 && t2.$eq(expected, actual))
          reason = null;
        else
          switch (state0) {
            case 0:
            case 2:
              if (state0 === 0 && t1.$gt(depth, this._limit) === true) {
                reason = new $.StringDescription(null);
                reason._out = "recursion depth limit exceeded";
              } else
                switch (state0) {
                  case 0:
                  case 2:
                    if (state0 === 0 && typeof expected === "object" && expected !== null && (expected.constructor === Array || !!$.getInterceptor(expected).$isIterable) && canRecurse) {
                      r = this._compareIterables$4(expected, actual, this.get$_recursiveMatch(), t1.$add(depth, 1));
                      if (r != null) {
                        reason = new $.StringDescription(null);
                        reason._out = r;
                      } else
                        reason = null;
                    } else
                      switch (state0) {
                        case 0:
                        case 2:
                          if (state0 === 2 || state0 === 0 && typeof expected === "object" && expected !== null && !!$.getInterceptor(expected).$isMap && canRecurse)
                            switch (state0) {
                              case 0:
                              case 2:
                                if (state0 === 0 && (typeof actual !== "object" || actual === null || !$.getInterceptor(actual).$isMap)) {
                                  reason = new $.StringDescription(null);
                                  reason._out = "expected a map";
                                } else
                                  switch (state0) {
                                    case 0:
                                      t3 = t2.get$length(expected);
                                    case 2:
                                      state0 = 0;
                                      err = $.$eq(t3, actual.get$length(actual)) ? "" : "different map lengths; ";
                                      for (t3 = $.get$iterator$ax(expected.get$keys()); reason = null, t3.moveNext$0() === true;) {
                                        key = t3.get$current();
                                        if (actual.containsKey$1(key) !== true) {
                                          reason = new $.StringDescription(null);
                                          reason._out = err;
                                          reason._out = $.S(reason._out) + "missing map key ";
                                          if (typeof key === "object" && key !== null && !!$.getInterceptor(key).$isMatcher)
                                            key.describe$1(reason);
                                          else {
                                            t3 = $.prettyPrint(key, 25, 80);
                                            reason._out = $.S(reason._out) + $.S(t3);
                                          }
                                          break;
                                        }
                                      }
                                      if (reason == null) {
                                        for (t3 = $.get$iterator$ax(actual.get$keys()); t3.moveNext$0() === true;) {
                                          key = t3.get$current();
                                          if (expected.containsKey$1(key) !== true) {
                                            reason = new $.StringDescription(null);
                                            reason._out = err;
                                            reason._out = $.S(reason._out) + "extra map key ";
                                            if (typeof key === "object" && key !== null && !!$.getInterceptor(key).$isMatcher)
                                              key.describe$1(reason);
                                            else {
                                              t3 = $.prettyPrint(key, 25, 80);
                                              reason._out = $.S(reason._out) + $.S(t3);
                                            }
                                            break;
                                          }
                                        }
                                        if (reason == null)
                                          for (t3 = $.get$iterator$ax(expected.get$keys()); t3.moveNext$0() === true;) {
                                            key = t3.get$current();
                                            reason = this._recursiveMatch$4(t2.$index(expected, key), actual.$index(actual, key), "with key <" + $.S(key) + "> " + $.S($location), t1.$add(depth, 1));
                                            if (reason != null)
                                              break;
                                          }
                                      }
                                  }
                            }
                          else {
                            reason = new $.StringDescription(null);
                            reason._out = "";
                            if (t1.$gt(depth, 0) === true) {
                              reason._out = $.S(reason._out) + "expected ";
                              if (typeof expected === "object" && expected !== null && !!$.getInterceptor(expected).$isMatcher)
                                expected.describe$1(reason);
                              else {
                                t1 = $.prettyPrint(expected, 25, 80);
                                reason._out = $.S(reason._out) + $.S(t1);
                              }
                              reason._out = $.S(reason._out) + " but ";
                            }
                            reason._out = $.S(reason._out) + "was ";
                            if (typeof actual === "object" && actual !== null && !!$.getInterceptor(actual).$isMatcher)
                              actual.describe$1(reason);
                            else {
                              t1 = $.prettyPrint(actual, 25, 80);
                              reason._out = $.S(reason._out) + $.S(t1);
                            }
                          }
                      }
                }
          }
      case 3:
        var canRecurse, r, err, key;
        if (state0 === 3 || state0 === 0 && reason != null)
          switch (state0) {
            case 0:
              t1 = $.get$length$asx($location);
            case 3:
              state0 = 0;
              t1 = $.$gt$n(t1, 0) === true;
          }
        else
          t1 = false;
        if (t1)
          $.add$1$ax($.add$1$ax(reason, " "), $location);
        return reason;
    }
  },
  get$_recursiveMatch: function() {
    return new $.BoundClosure$4(this, "_recursiveMatch$4", null);
  },
  matches$2: function(_, item, matchState) {
    var reason = this._recursiveMatch$4(this._expected, item, "", 0);
    return (reason == null ? null : $.toString$0(reason)) == null;
  },
  describe$1: function(description) {
    var t1 = this._expected;
    if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isMatcher)
      t1.describe$1(description);
    else {
      t1 = $.prettyPrint(t1, 25, 80);
      description._out = $.S(description._out) + $.S(t1);
    }
    return description;
  },
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    var reason, t1;
    reason = this._recursiveMatch$4(this._expected, item, "", 0);
    t1 = reason == null ? null : $.toString$0(reason);
    mismatchDescription._out = $.S(mismatchDescription._out) + $.S(t1);
    return mismatchDescription;
  }
},

"+_DeepMatcher": 0,

_StringEqualsMatcher: {
  "": function _StringEqualsMatcher(_liblib21$_value) {
    this._liblib21$_value = _liblib21$_value;
  },
  "super": "BaseMatcher",
  get$_liblib21$_value: function() {
    return this._liblib21$_value;
  },
  matches$2: function(_, item, mismatchState) {
    return this._liblib21$_value === item;
  },
  describe$1: function(description) {
    var t1 = this._liblib21$_value;
    t1 = $.prettyPrint(t1, 25, 80);
    description._out = $.S(description._out) + $.S(t1);
    return description;
  },
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    var t1, buff, escapedItem, escapedValue, minLength, minLength0, minLength1, start, i;
    if (typeof item !== "string") {
      if (typeof item === "object" && item !== null && !!$.getInterceptor(item).$isMatcher)
        item.describe$1(mismatchDescription);
      else {
        t1 = $.prettyPrint(item, 25, 80);
        mismatchDescription._out = $.S(mismatchDescription._out) + $.S(t1);
      }
      mismatchDescription._out = $.S(mismatchDescription._out) + " not a string";
      return mismatchDescription;
    } else {
      buff = new $.StringBuffer("");
      buff._contents = "";
      buff._contents = buff._contents + "Strings are not equal.";
      t1 = $.JSString_methods.replaceAll$2(item, "\n", "\\n");
      t1 = $.stringReplaceAllUnchecked(t1, "\r", "\\r");
      escapedItem = $.stringReplaceAllUnchecked(t1, "\t", "\\t");
      t1 = $.JSString_methods.replaceAll$2(this._liblib21$_value, "\n", "\\n");
      t1 = $.stringReplaceAllUnchecked(t1, "\r", "\\r");
      escapedValue = $.stringReplaceAllUnchecked(t1, "\t", "\\t");
      minLength = escapedItem.length;
      minLength0 = escapedValue.length;
      minLength1 = minLength < minLength0 ? minLength : minLength0;
      for (start = 0; start < minLength1; ++start) {
        if (start >= minLength0)
          $.throwExpression(new $.RangeError("value " + start));
        t1 = escapedValue.charCodeAt(start);
        if (start >= minLength)
          $.throwExpression(new $.RangeError("value " + start));
        if (t1 !== escapedItem.charCodeAt(start))
          break;
      }
      if (start === minLength1)
        if (minLength0 < minLength) {
          buff._contents = buff._contents + " Both strings start the same, but the given value also has the following trailing characters: ";
          $._StringEqualsMatcher__writeTrailing(buff, escapedItem, minLength0);
        } else {
          buff._contents = buff._contents + " Both strings start the same, but the given value is missing the following trailing characters: ";
          $._StringEqualsMatcher__writeTrailing(buff, escapedValue, minLength);
        }
      else {
        buff._contents = buff._contents + "\nExpected: ";
        $._StringEqualsMatcher__writeLeading(buff, escapedValue, start);
        $._StringEqualsMatcher__writeTrailing(buff, escapedValue, start);
        buff._contents = buff._contents + "\n  Actual: ";
        $._StringEqualsMatcher__writeLeading(buff, escapedItem, start);
        $._StringEqualsMatcher__writeTrailing(buff, escapedItem, start);
        buff._contents = buff._contents + "\n          ";
        i = start > 10 ? 14 : start;
        for (; i > 0; --i)
          buff._contents = buff._contents + " ";
        t1 = "^\n Differ at position " + start;
        buff._contents = buff._contents + t1;
      }
      mismatchDescription._out = buff._contents;
      return mismatchDescription;
    }
  }
},

"+_StringEqualsMatcher": 0,

_Predicate: {
  "": function _Predicate(_matcher, _description) {
    this._matcher = _matcher;
    this._description = _description;
  },
  "super": "BaseMatcher",
  get$_matcher: function() {
    return this._matcher;
  },
  get$_description: function() {
    return this._description;
  },
  _matcher$1: function(arg0) {
    return this._matcher.call$1(arg0);
  },
  matches$2: function(_, item, matchState) {
    return this._matcher$1(item);
  },
  describe$1: function(description) {
    description._out = $.S(description._out) + this._description;
    return description;
  }
},

"+_Predicate": 0,

StringDescription: {
  "": function StringDescription(_out) {
    this._out = _out;
  },
  "super": "Object",
  get$_out: function() {
    return this._out;
  },
  set$_out: function(v) {
    this._out = v;
  },
  toString$0: function(_) {
    return this._out;
  },
  add$1: function(_, text) {
    this._out = $.S(this._out) + $.S(text);
    return this;
  },
  addAll$4: function(_, start, separator, end, list) {
    var t1, t2, separate, item;
    this._out = $.S(this._out) + start;
    t1 = $.getRuntimeTypeArgument(list, list.$asJSArray, 0);
    t2 = new $.ListIterator(list, list.length, 0, null);
    t2.$builtinTypeInfo = [t1];
    separate = false;
    for (; t2.moveNext$0(); separate = true) {
      item = t2._liblib$_current;
      if (separate)
        this._out = $.S(this._out) + separator;
      if (typeof item === "object" && item !== null && !!$.getInterceptor(item).$isMatcher)
        item.describe$1(this);
      else {
        t1 = $.prettyPrint(item, 25, 80);
        this._out = $.S(this._out) + $.S(t1);
      }
    }
    this._out = $.S(this._out) + end;
    return this;
  },
  "+addAll:4:0": 0
},

"+StringDescription": 0,

TestFailure: {
  "": function TestFailure(_liblib21$_message) {
    this._liblib21$_message = _liblib21$_message;
  },
  "super": "Object",
  get$_liblib21$_message: function() {
    return this._liblib21$_message;
  },
  set$_liblib21$_message: function(v) {
    this._liblib21$_message = v;
  },
  get$message: function(_) {
    return this._liblib21$_message;
  },
  toString$0: function(_) {
    return this._liblib21$_message;
  },
  $isTestFailure: true
},

"+TestFailure": 0,

closure: {
  "": function closure() {
  },
  "super": "Closure",
  call$2: function(f, id) {
    return f;
  },
  "+call:1:1": 0,
  call$1: function(f) {
    return this.call$2(f, null);
  },
  $isFunction: true
},

"+closure": 0,

DefaultFailureHandler: {
  "": function DefaultFailureHandler() {
  },
  "super": "Object",
  fail$1: function(reason) {
    throw $.wrapException(new $.TestFailure(reason));
  },
  "+fail:1:0": 0,
  DefaultFailureHandler$0: function() {
    if ($._assertErrorFormatter == null)
      $._assertErrorFormatter = $._defaultErrorFormatter$closure;
  }
},

"+DefaultFailureHandler": 0,

_Completes: {
  "": function _Completes(_matcher, _liblib21$_id) {
    this._matcher = _matcher;
    this._liblib21$_id = _liblib21$_id;
  },
  "super": "BaseMatcher",
  get$_matcher: function() {
    return this._matcher;
  },
  get$_liblib21$_id: function() {
    return this._liblib21$_id;
  },
  matches$2: function(_, item, matchState) {
    var done;
    if (typeof item !== "object" || item === null || !$.getInterceptor(item).$isFuture)
      return false;
    done = $.get$wrapAsync().call$2(new $._Completes_matches_closure(), this._liblib21$_id);
    item.then$2$onError(new $._Completes_matches_closure0(this, done), new $._Completes_matches_closure1(this, done));
    return true;
  },
  describe$1: function(description) {
    var t1 = description._out;
    description._out = $.S(t1) + "completes successfully";
    return description;
  }
},

"+_Completes": 0,

_Completes_matches_closure: {
  "": function _Completes_matches_closure() {
  },
  "super": "Closure",
  call$1: function(fn) {
    return fn.call$0();
  },
  $isFunction: true
},

"+_Completes_matches_closure": 0,

_Completes_matches_closure0: {
  "": function _Completes_matches_closure(this_1, done_2) {
    this.this_1 = this_1;
    this.done_2 = done_2;
  },
  "super": "Closure",
  call$1: function(value) {
    this.done_2.call$1(new $._Completes_matches__closure0(this.this_1, value));
  },
  $isFunction: true
},

"+_Completes_matches_closure": 0,

_Completes_matches__closure0: {
  "": function _Completes_matches__closure(this_3, value_4) {
    this.this_3 = this_3;
    this.value_4 = value_4;
  },
  "super": "Closure",
  call$0: function() {
    var t1 = this.this_3.get$_matcher();
    if (t1 != null)
      $.expect(this.value_4, t1, null, null, false);
  },
  $isFunction: true
},

"+_Completes_matches__closure": 0,

_Completes_matches_closure1: {
  "": function _Completes_matches_closure(this_5, done_6) {
    this.this_5 = this_5;
    this.done_6 = done_6;
  },
  "super": "Closure",
  call$1: function(error) {
    var t1, t2, trace, stackTrace;
    t1 = {};
    t2 = this.this_5;
    t1.reason_0 = "Expected future " + ($.$eq(t2.get$_liblib21$_id(), "") ? "" : $.S(t2.get$_liblib21$_id()) + " ") + "to complete successfully, but it failed with " + $.S(error);
    trace = $.getAttachedStackTrace(error);
    if (trace != null) {
      stackTrace = "  " + $.S($.replaceAll$2$s($.toString$0(trace), "\n", "\n  "));
      t1.reason_0 = t1.reason_0 + "\nStack trace:\n" + stackTrace;
    }
    this.done_6.call$1(new $._Completes_matches__closure(t1));
  },
  $isFunction: true
},

"+_Completes_matches_closure": 0,

_Completes_matches__closure: {
  "": function _Completes_matches__closure(box_0) {
    this.box_0 = box_0;
  },
  "super": "Closure",
  call$0: function() {
    var t1, handler, failureHandler;
    t1 = this.box_0.reason_0;
    if ($._assertFailureHandler == null) {
      handler = new $.DefaultFailureHandler();
      handler.DefaultFailureHandler$0();
      $._assertFailureHandler = handler;
    }
    failureHandler = $._assertFailureHandler;
    failureHandler.fail$1(t1);
    return;
  },
  $isFunction: true
},

"+_Completes_matches__closure": 0,

_OrderingComparison: {
  "": function _OrderingComparison(_liblib21$_value, _equalValue, _lessThanValue, _greaterThanValue, _comparisonDescription, _valueInDescription) {
    this._liblib21$_value = _liblib21$_value;
    this._equalValue = _equalValue;
    this._lessThanValue = _lessThanValue;
    this._greaterThanValue = _greaterThanValue;
    this._comparisonDescription = _comparisonDescription;
    this._valueInDescription = _valueInDescription;
  },
  "super": "BaseMatcher",
  get$_liblib21$_value: function() {
    return this._liblib21$_value;
  },
  get$_equalValue: function() {
    return this._equalValue;
  },
  get$_lessThanValue: function() {
    return this._lessThanValue;
  },
  get$_greaterThanValue: function() {
    return this._greaterThanValue;
  },
  get$_comparisonDescription: function() {
    return this._comparisonDescription;
  },
  get$_valueInDescription: function() {
    return this._valueInDescription;
  },
  matches$2: function(_, item, matchState) {
    var t1, t2;
    t1 = this._liblib21$_value;
    t2 = $.getInterceptor(item);
    if (t2.$eq(item, t1))
      return this._equalValue;
    else if (t2.$lt(item, t1) === true)
      return this._lessThanValue;
    else
      return this._greaterThanValue;
  },
  describe$1: function(description) {
    var t1, t2;
    t1 = description._out;
    t2 = this._comparisonDescription;
    if (this._valueInDescription) {
      description._out = $.S(t1) + t2;
      description._out = $.S(description._out) + " ";
      t1 = this._liblib21$_value;
      t1 = $.prettyPrint(t1, 25, 80);
      description._out = $.S(description._out) + $.S(t1);
      return description;
    } else {
      description._out = $.S(t1) + t2;
      return description;
    }
  }
},

"+_OrderingComparison": 0,

_StringStartsWith: {
  "": function _StringStartsWith(_liblib21$_prefix) {
    this._liblib21$_prefix = _liblib21$_prefix;
  },
  "super": "_StringMatcher",
  get$_liblib21$_prefix: function() {
    return this._liblib21$_prefix;
  },
  matches$2: function(_, item, matchState) {
    return typeof item === "string" && $.JSString_methods.startsWith$1(item, this._liblib21$_prefix);
  },
  describe$1: function(description) {
    var t1;
    description._out = $.S(description._out) + "a string starting with ";
    t1 = this._liblib21$_prefix;
    t1 = $.prettyPrint(t1, 25, 80);
    description._out = $.S(description._out) + $.S(t1);
    return description;
  }
},

"+_StringStartsWith": 0,

_StringContainsInOrder: {
  "": function _StringContainsInOrder(_substrings) {
    this._substrings = _substrings;
  },
  "super": "_StringMatcher",
  get$_substrings: function() {
    return this._substrings;
  },
  matches$2: function(_, item, matchState) {
    var t1, t2, from_index;
    if (typeof item !== "string")
      return false;
    t1 = this._substrings;
    t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    from_index = 0;
    for (; t1.moveNext$0();) {
      from_index = $.JSString_methods.indexOf$2(item, t1._liblib$_current, from_index);
      if (from_index < 0)
        return false;
    }
    return true;
  },
  describe$1: function(description) {
    return description.addAll$4(description, "a string containing ", ", ", " in order", this._substrings);
  }
},

"+_StringContainsInOrder": 0,

_StringMatcher: {
  "": function _StringMatcher() {
  },
  "super": "BaseMatcher",
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    var t1;
    if (typeof item !== "string") {
      if (typeof item === "object" && item !== null && !!$.getInterceptor(item).$isMatcher)
        item.describe$1(mismatchDescription);
      else {
        t1 = $.prettyPrint(item, 25, 80);
        mismatchDescription._out = $.S(mismatchDescription._out) + $.S(t1);
      }
      mismatchDescription._out = $.S(mismatchDescription._out) + " not a string";
      return mismatchDescription;
    } else
      return $.BaseMatcher.prototype.describeMismatch$4.call(this, item, mismatchDescription, matchState, verbose);
  }
},

"+_StringMatcher": 0,

_StringEqualsMatcher__writeLeading: function(buff, s, start) {
  var t1;
  if (start > 10) {
    buff._contents = buff._contents + "... ";
    t1 = $.JSString_methods.substring$2(s, start - 10, start);
    buff._contents = buff._contents + t1;
  } else {
    t1 = $.JSString_methods.substring$2(s, 0, start);
    buff._contents = buff._contents + t1;
  }
},

"+_writeLeading:3:0": 0,

_StringEqualsMatcher__writeTrailing: function(buff, s, start) {
  var t1 = start + 10;
  if (t1 > s.length) {
    t1 = $.JSString_methods.substring$1(s, start);
    buff._contents = buff._contents + t1;
  } else {
    t1 = $.JSString_methods.substring$2(s, start, t1);
    buff._contents = buff._contents + t1;
    buff._contents = buff._contents + " ...";
  }
},

"+_writeTrailing:3:0": 0,

expect: function(actual, matcher, failureHandler, reason, verbose) {
  var doesMatch, matchState, e, trace, exception, t1, handler;
  matcher = $.wrapMatcher(matcher);
  doesMatch = null;
  matchState = new $.MatchState(null);
  try {
    doesMatch = $.matches$2$x(matcher, actual, matchState);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    trace = $.getTraceFromException(exception);
    doesMatch = false;
    if (reason == null) {
      t1 = e;
      reason = $.S(typeof t1 === "string" ? e : $.toString$0(e)) + " at " + $.S(trace);
    }
  }

  if (doesMatch !== true) {
    if ($._assertFailureHandler == null) {
      handler = new $.DefaultFailureHandler();
      if ($._assertErrorFormatter == null)
        $._assertErrorFormatter = $._defaultErrorFormatter$closure;
      $._assertFailureHandler = handler;
    }
    failureHandler = $._assertFailureHandler;
    failureHandler.failMatch$5;
    failureHandler.fail$1($._assertErrorFormatter.call$5(actual, matcher, reason, matchState, verbose));
  }
},

"+expect:2:3": 0,

wrapMatcher: function(x) {
  if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMatcher)
    return x;
  else if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isFunction)
    return new $._Predicate(x, "satisfies function");
  else
    return typeof x === "string" ? new $._StringEqualsMatcher(x) : new $._DeepMatcher(x, 100, null);
},

"+wrapMatcher:1:0": 0,

_defaultErrorFormatter: function(actual, matcher, reason, matchState, verbose) {
  var description, t1, mismatchDescription;
  description = new $.StringDescription(null);
  description._out = "";
  description._out = $.S(description._out) + "Expected: ";
  if (typeof matcher === "object" && matcher !== null && !!$.getInterceptor(matcher).$isMatcher)
    matcher.describe$1(description);
  else {
    t1 = $.prettyPrint(matcher, 25, 80);
    description._out = $.S(description._out) + $.S(t1);
  }
  description._out = $.S(description._out) + "\n";
  mismatchDescription = new $.StringDescription(null);
  mismatchDescription._out = "";
  matcher.describeMismatch$4(actual, mismatchDescription, matchState, verbose);
  description._out = $.S(description._out) + "     But: ";
  t1 = mismatchDescription._out;
  description._out = $.S(description._out) + $.S(t1);
  description._out = $.S(description._out) + ".\n";
  description._out = $.S(description._out) + "Actual: ";
  if (typeof actual === "object" && actual !== null && !!$.getInterceptor(actual).$isMatcher)
    actual.describe$1(description);
  else {
    t1 = $.prettyPrint(actual, 25, 80);
    description._out = $.S(description._out) + $.S(t1);
  }
  if (reason != null) {
    description._out = $.S(description._out) + $.S(reason);
    description._out = $.S(description._out) + "\n";
  }
  return description._out;
},

"+_defaultErrorFormatter:5:0": 0}],
["metadata", "../../../../../tools/eclipse_37/eclipse/dart-sdk/lib/html/html_common/metadata.dart", , {
SupportedBrowser: {
  "": function SupportedBrowser(browserName, minimumVersion) {
    this.browserName = browserName;
    this.minimumVersion = minimumVersion;
  },
  "super": "Object",
  get$browserName: function() {
    return this.browserName;
  },
  get$minimumVersion: function() {
    return this.minimumVersion;
  }
},

"+SupportedBrowser": 0,

Experimental: {
  "": function Experimental() {
  },
  "super": "Object"
},

"+Experimental": 0,

DomName: {
  "": function DomName(name) {
    this.name = name;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  }
},

"+DomName": 0,

DocsEditable: {
  "": function DocsEditable() {
  },
  "super": "Object"
},

"+DocsEditable": 0,

Unstable: {
  "": function Unstable() {
  },
  "super": "Object"
},

"+Unstable": 0}],
["preferences", "../lib/preferences.dart", , {
PreferenceStore: {
  "": function PreferenceStore() {
  },
  "super": "Object"
},

"+PreferenceStore": 0,

PreferenceEvent: {
  "": function PreferenceEvent(store, key, value) {
    this.store = store;
    this.key = key;
    this.value = value;
  },
  "super": "Object",
  get$store: function() {
    return this.store;
  },
  get$key: function(receiver) {
    return this.key;
  },
  get$value: function(receiver) {
    return this.value;
  }
},

"+PreferenceEvent": 0}],
["preferences_chrome", "../lib/preferences_chrome.dart", , {
ChromePreferenceStore: {
  "": function ChromePreferenceStore(streamController, _storageArea) {
    this.streamController = streamController;
    this._storageArea = _storageArea;
  },
  "super": "PreferenceStore",
  get$streamController: function() {
    return this.streamController;
  },
  set$streamController: function(v) {
    this.streamController = v;
  },
  get$_storageArea: function() {
    return this._storageArea;
  },
  set$_storageArea: function(v) {
    this._storageArea = v;
  },
  getValue$1: function(key) {
    return this._storageArea.get$1([key]).then$1(new $.ChromePreferenceStore_getValue_closure(key));
  },
  setValue$2: function(key, value) {
    var map = $.makeLiteralMap([]);
    map.$indexSet(map, key, value);
    return this._storageArea.set$1(map).then$1(new $.ChromePreferenceStore_setValue_closure(this, key, value));
  }
},

"+ChromePreferenceStore": 0,

ChromePreferenceStore_getValue_closure: {
  "": function ChromePreferenceStore_getValue_closure(key_0) {
    this.key_0 = key_0;
  },
  "super": "Closure",
  call$1: function(map) {
    var t1, t2;
    t1 = $.$index$asx(map, this.key_0);
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [null];
    t2._state = 4;
    t2._resultOrListeners = t1;
    return t2;
  },
  $isFunction: true
},

"+ChromePreferenceStore_getValue_closure": 0,

ChromePreferenceStore_setValue_closure: {
  "": function ChromePreferenceStore_setValue_closure(this_0, key_1, value_2) {
    this.this_0 = this_0;
    this.key_1 = key_1;
    this.value_2 = value_2;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1, t2, t3, t4;
    t1 = this.this_0;
    t2 = t1.get$streamController();
    t3 = this.value_2;
    t1 = new $.PreferenceEvent(t1, this.key_1, t3);
    t4 = t2.get$_state();
    if (typeof t4 !== "number")
      throw t4.$and();
    if ((t4 & 2) !== 0)
      $.throwExpression(new $.StateError("Adding event after close"));
    if (t2.get$_subscription() != null)
      t2._sendData$1(t1);
    else if ((t4 & 1) === 0) {
      t4 = $.getRuntimeTypeArgument(t2, t2.$as_StreamController, 0);
      t1 = new $._DelayedData(t1, null);
      t1.$builtinTypeInfo = [t4];
      t2._addPendingEvent$1(t1);
    }
    t1 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t1.$builtinTypeInfo = [null];
    t1._state = 4;
    t1._resultOrListeners = t3;
    return t1;
  },
  $isFunction: true
},

"+ChromePreferenceStore_setValue_closure": 0}],
["preferences_test", "../test/preferences_test.dart", , {
main_closure1: {
  "": function main_closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.test("writeRead", new $.main__closure5());
  },
  $isFunction: true
},

"+main_closure": 0,

main__closure5: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.get$chromePrefsLocal().setValue$2("foo1", "bar1");
    $.expect($.get$chromePrefsLocal().getValue$1("foo1").then$1(new $.main___closure0()), $._Completes_PGb, null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main___closure0: {
  "": function main___closure() {
  },
  "super": "Closure",
  call$1: function(val) {
    $.expect(val, new $._StringEqualsMatcher("bar1"), null, null, false);
  },
  $isFunction: true
},

"+main___closure": 0,

main5: function() {
  $.group("preferences.chrome", new $.main_closure1());
}}],
["pretty_print", "../packages/unittest/src/pretty_print.dart", , {
prettyPrint__prettyPrint: {
  "": function prettyPrint__prettyPrint(maxLineLength_1, maxItems_2) {
    this.maxLineLength_1 = maxLineLength_1;
    this.maxItems_2 = maxItems_2;
  },
  "super": "Closure",
  call$4: function(object, indent, seen, $top) {
    var t1, t2, t3, type, strings, singleLine, value, defaultToString;
    t1 = {};
    t1.seen_0 = seen;
    if ($.contains$1$asx(t1.seen_0, object) === true)
      return "(recursive)";
    t2 = t1.seen_0;
    t3 = new $.HashSet(0, null, null, null, null);
    t3.$builtinTypeInfo = [null];
    t3.addAll$1(t3, [object]);
    t1.seen_0 = $.union$1$x(t2, t3);
    t1 = new $.prettyPrint__prettyPrint_pp(t1, this, indent);
    if (typeof object === "object" && object !== null && (object.constructor === Array || !!$.getInterceptor(object).$isIterable)) {
      type = typeof object === "object" && object !== null && (object.constructor === Array || !!$.getInterceptor(object).$isList) ? "" : $.$add$ns($.typeName(object), ":");
      t1 = $.map$1$ax(object, t1);
      strings = t1.toList$0(t1);
      if ($.$gt$n($.get$length$asx(strings), this.maxItems_2) === true) {
        t1 = $.getInterceptor$asx(strings);
        t1.replaceRange$3(strings, this.maxItems_2 - 1, t1.get$length(strings), ["..."]);
      }
      t1 = $.getInterceptor$ax(strings);
      singleLine = $.S(type) + "[" + $.S(t1.join$1(strings, ", ")) + "]";
      if (typeof indent !== "number")
        throw $.iae(indent);
      t2 = singleLine.length + indent <= this.maxLineLength_1;
      if (t2) {
        if (false)
          $.throwExpression(new $.RangeError("value 0 not in range 0.." + singleLine.length));
        t2 = $.stringContainsUnchecked(singleLine, "\n", 0) !== true;
      } else
        t2 = false;
      if (t2)
        return singleLine;
      return $.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add($.S(type) + "[\n", $.join$1$ax(t1.map$1(strings, new $.prettyPrint__prettyPrint_closure(indent)), ",\n")), "\n"), $.JSArray_methods.join$1($.List_List$filled(indent, " ", null), "")), "]");
    } else if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isMap) {
      t1 = $.map$1$ax(object.get$keys(), new $.prettyPrint__prettyPrint_closure0(object, t1));
      strings = t1.toList$0(t1);
      if ($.$gt$n($.get$length$asx(strings), this.maxItems_2) === true) {
        t1 = $.getInterceptor$asx(strings);
        t1.replaceRange$3(strings, this.maxItems_2 - 1, t1.get$length(strings), ["..."]);
      }
      t1 = $.getInterceptor$ax(strings);
      singleLine = "{" + $.S(t1.join$1(strings, ", ")) + "}";
      if (typeof indent !== "number")
        throw $.iae(indent);
      t2 = singleLine.length + indent <= this.maxLineLength_1;
      if (t2) {
        if (false)
          $.throwExpression(new $.RangeError("value 0 not in range 0.." + singleLine.length));
        t2 = $.stringContainsUnchecked(singleLine, "\n", 0) !== true;
      } else
        t2 = false;
      if (t2)
        return singleLine;
      return $.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add("{\n", $.join$1$ax(t1.map$1(strings, new $.prettyPrint__prettyPrint_closure1(indent)), ",\n")), "\n"), $.JSArray_methods.join$1($.List_List$filled(indent, " ", null), "")), "}");
    } else if (typeof object === "string") {
      t1 = new $.MappedListIterable(object.split("\n"), $.escapeString$closure);
      t1.$builtinTypeInfo = [null, null];
      return $.JSString_methods.$add($.JSString_methods.$add("'", t1.join$1(t1, "\\n'\n" + $.JSArray_methods.join$1($.List_List$filled($.$add$ns(indent, 2), " ", null), "") + "'")), "'");
    } else {
      value = $.replaceAll$2$s($.toString$0(object), "\n", $.JSString_methods.$add($.JSArray_methods.join$1($.List_List$filled(indent, " ", null), ""), "\n"));
      defaultToString = $.startsWith$1$s(value, "Instance of ");
      if ($top === true)
        value = "<" + $.S(value) + ">";
      if (typeof object === "number" || typeof object === "boolean" || typeof object === "object" && object !== null && !!$.getInterceptor(object).$isFunction || object == null || defaultToString === true)
        return value;
      else
        return $.S($.typeName(object)) + ":" + $.S(value);
    }
  },
  $isFunction: true
},

"+prettyPrint__prettyPrint": 0,

prettyPrint__prettyPrint_pp: {
  "": function prettyPrint__prettyPrint_pp(box_0, _prettyPrint_3, indent_4) {
    this.box_0 = box_0;
    this._prettyPrint_3 = _prettyPrint_3;
    this.indent_4 = indent_4;
  },
  "super": "Closure",
  call$1: function(child) {
    return this._prettyPrint_3.call$4(child, $.$add$ns(this.indent_4, 2), this.box_0.seen_0, false);
  },
  $isFunction: true
},

"+prettyPrint__prettyPrint_pp": 0,

prettyPrint__prettyPrint_closure: {
  "": function prettyPrint__prettyPrint_closure(indent_5) {
    this.indent_5 = indent_5;
  },
  "super": "Closure",
  call$1: function(string) {
    return $.JSString_methods.$add($.JSArray_methods.join$1($.List_List$filled($.$add$ns(this.indent_5, 2), " ", null), ""), string);
  },
  $isFunction: true
},

"+prettyPrint__prettyPrint_closure": 0,

prettyPrint__prettyPrint_closure0: {
  "": function prettyPrint__prettyPrint_closure(object_6, pp_7) {
    this.object_6 = object_6;
    this.pp_7 = pp_7;
  },
  "super": "Closure",
  call$1: function(key) {
    var t1, t2;
    t1 = this.pp_7;
    t2 = this.object_6;
    return $.S(t1.call$1(key)) + ": " + $.S(t1.call$1(t2.$index(t2, key)));
  },
  $isFunction: true
},

"+prettyPrint__prettyPrint_closure": 0,

prettyPrint__prettyPrint_closure1: {
  "": function prettyPrint__prettyPrint_closure(indent_8) {
    this.indent_8 = indent_8;
  },
  "super": "Closure",
  call$1: function(string) {
    return $.JSString_methods.$add($.JSArray_methods.join$1($.List_List$filled($.$add$ns(this.indent_8, 2), " ", null), ""), string);
  },
  $isFunction: true
},

"+prettyPrint__prettyPrint_closure": 0,

prettyPrint: function(object, maxItems, maxLineLength) {
  var t1 = new $.HashSet(0, null, null, null, null);
  t1.$builtinTypeInfo = [null];
  return new $.prettyPrint__prettyPrint(maxLineLength, maxItems).call$4(object, 0, t1, true);
},

"+prettyPrint:1:2": 0}],
["unittest", "../packages/unittest/unittest.dart", , {
_ExpectFailureHandler: {
  "": function _ExpectFailureHandler(_config) {
    this._config = _config;
  },
  "super": "DefaultFailureHandler",
  get$_config: function() {
    return this._config;
  },
  set$_config: function(v) {
    this._config = v;
  },
  fail$1: function(reason) {
    this._config.onExpectFailure$1(reason);
  }
},

"+_ExpectFailureHandler": 0,

Configuration: {
  "": function Configuration(_liblib24$_receivePort, name, autoStart, throwOnTestFailures, stopTestOnExpectFailure, _testLogBuffer) {
    this._liblib24$_receivePort = _liblib24$_receivePort;
    this.name = name;
    this.autoStart = autoStart;
    this.throwOnTestFailures = throwOnTestFailures;
    this.stopTestOnExpectFailure = stopTestOnExpectFailure;
    this._testLogBuffer = _testLogBuffer;
  },
  "super": "Object",
  get$_liblib24$_receivePort: function() {
    return this._liblib24$_receivePort;
  },
  set$_liblib24$_receivePort: function(v) {
    this._liblib24$_receivePort = v;
  },
  get$name: function(receiver) {
    return this.name;
  },
  get$autoStart: function() {
    return this.autoStart;
  },
  get$throwOnTestFailures: function() {
    return this.throwOnTestFailures;
  },
  set$throwOnTestFailures: function(v) {
    this.throwOnTestFailures = v;
  },
  get$stopTestOnExpectFailure: function() {
    return this.stopTestOnExpectFailure;
  },
  set$stopTestOnExpectFailure: function(v) {
    this.stopTestOnExpectFailure = v;
  },
  get$_testLogBuffer: function() {
    return this._testLogBuffer;
  },
  set$_testLogBuffer: function(v) {
    this._testLogBuffer = v;
  },
  onInit$0: function() {
    var t1, t2, t3, t4;
    t1 = $.ReceivePortImpl__nextFreeId;
    $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
    t1 = new $.ReceivePortImpl(t1, null);
    t2 = $globalState.currentContext;
    t3 = t1._id;
    t2.register$2;
    if (t2.ports.containsKey$1(t3))
      $.throwExpression($.Exception_Exception("Registry: ports must be registered only once."));
    t4 = t2.ports;
    t4.$indexSet(t4, t3, t1);
    t3 = $._globalState().isolates;
    t3.$indexSet(t3, t2.id, t2);
    this._liblib24$_receivePort = t1;
    $.Primitives_printString("unittest-suite-wait-for-done");
  },
  onTestResult$1: function(testCase) {
    var reason, t1, i, t2, t3, str;
    if (!this.stopTestOnExpectFailure && this._testLogBuffer.length > 0) {
      reason = new $.StringBuffer("");
      reason._contents = "";
      for (t1 = this._testLogBuffer, i = 0; t2 = t1.length, t3 = t2 - 2, i < t3; i += 2) {
        str = t1[i];
        str = typeof str === "string" ? str : $.S(str);
        reason._contents = reason._contents + str;
        reason._contents = reason._contents + "\n";
        t2 = i + 1;
        if (t2 >= t1.length)
          throw $.ioore(t2);
        str = $._formatStack(t1[t2]);
        str = typeof str === "string" ? str : $.S(str);
        reason._contents = reason._contents + str;
        reason._contents = reason._contents + "\n";
      }
      if (t3 < 0)
        throw $.ioore(t3);
      str = t1[t3];
      str = typeof str === "string" ? str : $.S(str);
      reason._contents = reason._contents + str;
      if (testCase._result === "pass") {
        testCase._result = "fail";
        testCase._liblib24$_message = reason._contents;
        t2 = t1.length;
        t3 = t2 - 1;
        if (t3 < 0)
          throw $.ioore(t3);
        testCase._stackTrace = $._formatStack(t1[t3]);
      } else {
        t2 = t1.length;
        t3 = t2 - 1;
        if (t3 < 0)
          throw $.ioore(t3);
        str = $._formatStack(t1[t3]);
        str = typeof str === "string" ? str : $.S(str);
        reason._contents = reason._contents + str;
        reason._contents = reason._contents + "\n";
        testCase._liblib24$_message = reason._contents + "\n" + $.S(testCase._liblib24$_message);
      }
    }
  },
  "+onTestResult:1:0": 0,
  onExpectFailure$1: function(reason) {
    var stack, t1, exception;
    if (this.stopTestOnExpectFailure)
      throw $.wrapException(new $.TestFailure(reason));
    else {
      t1 = this._testLogBuffer;
      t1.push(reason);
      try {
        throw $.wrapException("");
      } catch (exception) {
        $.unwrapException(exception);
        stack = $.getTraceFromException(exception);
        t1.push(stack);
      }

    }
  },
  "+onExpectFailure:1:0": 0,
  formatResult$1: function(testCase) {
    var result, t1, t2;
    result = new $.StringBuffer("");
    result._contents = "";
    t1 = $.getInterceptor$x(testCase);
    t2 = $.toUpperCase$0$s(t1.get$result(testCase));
    if (typeof t2 !== "string")
      return this.formatResult$1$bailout(1, testCase, t1, result, t2);
    result._contents = result._contents + t2;
    result._contents = result._contents + ": ";
    t2 = testCase.get$description();
    if (typeof t2 !== "string")
      return this.formatResult$1$bailout(2, testCase, t1, result, t2);
    result._contents = result._contents + t2;
    result._contents = result._contents + "\n";
    t2 = t1.get$message(testCase);
    if (typeof t2 !== "string")
      return this.formatResult$1$bailout(3, testCase, t1, result, t2);
    if (t2 !== "") {
      t1 = this._indent$1(t1.get$message(testCase));
      if (typeof t1 !== "string")
        return this.formatResult$1$bailout(4, testCase, t1, result);
      result._contents = result._contents + t1;
      result._contents = result._contents + "\n";
    }
    if (testCase.get$stackTrace() != null) {
      t1 = testCase.get$stackTrace();
      if (typeof t1 !== "string")
        return this.formatResult$1$bailout(5, testCase, t1, result);
      t1 = t1 !== "";
    } else
      t1 = false;
    if (t1) {
      t1 = this._indent$1(testCase.get$stackTrace());
      if (typeof t1 !== "string")
        return this.formatResult$1$bailout(6, 0, t1, result);
      result._contents = result._contents + t1;
      result._contents = result._contents + "\n";
    }
    return result._contents;
  },
  "+formatResult:1:0": 0,
  formatResult$1$bailout: function(state0, testCase, t1, result, t2) {
    switch (state0) {
      case 0:
        result = new $.StringBuffer("");
        result._contents = "";
        t1 = $.getInterceptor$x(testCase);
        t2 = $.toUpperCase$0$s(t1.get$result(testCase));
      case 1:
        state0 = 0;
        str = typeof t2 === "string" ? t2 : $.S(t2);
        result._contents = result._contents + str;
        result._contents = result._contents + ": ";
        t2 = testCase.get$description();
      case 2:
        state0 = 0;
        str = typeof t2 === "string" ? t2 : $.S(t2);
        result._contents = result._contents + str;
        result._contents = result._contents + "\n";
        t2 = t1.get$message(testCase);
      case 3:
        state0 = 0;
      case 4:
        if (state0 === 4 || state0 === 0 && !$.$eq(t2, ""))
          switch (state0) {
            case 0:
              t1 = this._indent$1(t1.get$message(testCase));
            case 4:
              state0 = 0;
              str = typeof t1 === "string" ? t1 : $.S(t1);
              result._contents = result._contents + str;
              result._contents = result._contents + "\n";
          }
      case 5:
        if (state0 === 5 || state0 === 0 && testCase.get$stackTrace() != null)
          switch (state0) {
            case 0:
              t1 = testCase.get$stackTrace();
            case 5:
              state0 = 0;
              t1 = !$.$eq(t1, "");
          }
        else
          t1 = false;
      case 6:
        var str;
        if (state0 === 6 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              t1 = this._indent$1(testCase.get$stackTrace());
            case 6:
              state0 = 0;
              str = typeof t1 === "string" ? t1 : $.S(t1);
              result._contents = result._contents + str;
              result._contents = result._contents + "\n";
          }
        return result._contents;
    }
  },
  onSummary$5: function(passed, failed, errors, results, uncaughtError) {
    var t1;
    for (t1 = results.get$iterator(results); t1.moveNext$0();)
      $.Primitives_printString(this.formatResult$1(t1._liblib$_current));
    $.Primitives_printString("");
    if (passed === 0 && failed === 0 && errors === 0 && uncaughtError == null)
      $.Primitives_printString("No tests found.");
    else if (failed === 0 && errors === 0 && uncaughtError == null)
      $.Primitives_printString("All " + passed + " tests passed.");
    else {
      if (uncaughtError != null)
        $.Primitives_printString("Top-level uncaught error: " + uncaughtError);
      $.Primitives_printString("" + passed + " PASSED, " + failed + " FAILED, " + errors + " ERRORS");
    }
  },
  onDone$1: function(success) {
    var t1, t2, t3;
    if (success) {
      $.Primitives_printString("unittest-suite-success");
      t1 = this._liblib24$_receivePort;
      t1.close$0;
      t1._callback = null;
      t2 = $globalState.currentContext;
      t1 = t1._id;
      t2.unregister$1;
      t3 = t2.ports;
      t3.remove$1(t3, t1);
      if (t2.ports._liblib0$_length === 0) {
        t1 = $globalState.isolates;
        t1.remove$1(t1, t2.id);
      }
    } else {
      t1 = this._liblib24$_receivePort;
      t1.close$0;
      t1._callback = null;
      t2 = $globalState.currentContext;
      t1 = t1._id;
      t2.unregister$1;
      t3 = t2.ports;
      t3.remove$1(t3, t1);
      if (t2.ports._liblib0$_length === 0) {
        t1 = $globalState.isolates;
        t1.remove$1(t1, t2.id);
      }
      if (this.throwOnTestFailures)
        throw $.wrapException(new $._ExceptionImplementation("Some tests failed."));
    }
  },
  _indent$1: function(str) {
    return $.join$1$ax($.map$1$ax($.split$1$s(str, "\n"), new $.Configuration__indent_closure()), "\n");
  },
  "+_indent:1:0": 0
},

"+Configuration": 0,

Configuration__indent_closure: {
  "": function Configuration__indent_closure() {
  },
  "super": "Closure",
  call$1: function(line) {
    return "  " + $.S(line);
  },
  $isFunction: true
},

"+Configuration__indent_closure": 0,

TestCase: {
  "": function TestCase(id, description, setUp, tearDown, testFunction, _callbackFunctionsOutstanding, _liblib24$_message, _result, _stackTrace, currentGroup, _startTime, _runningTime, enabled, _doneTeardown, _testComplete) {
    this.id = id;
    this.description = description;
    this.setUp = setUp;
    this.tearDown = tearDown;
    this.testFunction = testFunction;
    this._callbackFunctionsOutstanding = _callbackFunctionsOutstanding;
    this._liblib24$_message = _liblib24$_message;
    this._result = _result;
    this._stackTrace = _stackTrace;
    this.currentGroup = currentGroup;
    this._startTime = _startTime;
    this._runningTime = _runningTime;
    this.enabled = enabled;
    this._doneTeardown = _doneTeardown;
    this._testComplete = _testComplete;
  },
  "super": "Object",
  get$id: function(receiver) {
    return this.id;
  },
  get$description: function() {
    return this.description;
  },
  get$setUp: function() {
    return this.setUp;
  },
  set$setUp: function(v) {
    this.setUp = v;
  },
  get$tearDown: function() {
    return this.tearDown;
  },
  set$tearDown: function(v) {
    this.tearDown = v;
  },
  get$testFunction: function() {
    return this.testFunction;
  },
  set$testFunction: function(v) {
    this.testFunction = v;
  },
  get$_callbackFunctionsOutstanding: function() {
    return this._callbackFunctionsOutstanding;
  },
  set$_callbackFunctionsOutstanding: function(v) {
    this._callbackFunctionsOutstanding = v;
  },
  get$_liblib24$_message: function() {
    return this._liblib24$_message;
  },
  set$_liblib24$_message: function(v) {
    this._liblib24$_message = v;
  },
  get$_result: function() {
    return this._result;
  },
  set$_result: function(v) {
    this._result = v;
  },
  get$_stackTrace: function() {
    return this._stackTrace;
  },
  set$_stackTrace: function(v) {
    this._stackTrace = v;
  },
  get$currentGroup: function() {
    return this.currentGroup;
  },
  get$_startTime: function() {
    return this._startTime;
  },
  set$_startTime: function(v) {
    this._startTime = v;
  },
  get$_runningTime: function() {
    return this._runningTime;
  },
  set$_runningTime: function(v) {
    this._runningTime = v;
  },
  get$enabled: function() {
    return this.enabled;
  },
  set$enabled: function(v) {
    this.enabled = v;
  },
  get$_doneTeardown: function() {
    return this._doneTeardown;
  },
  set$_doneTeardown: function(v) {
    this._doneTeardown = v;
  },
  get$_testComplete: function() {
    return this._testComplete;
  },
  set$_testComplete: function(v) {
    this._testComplete = v;
  },
  setUp$0: function() {
    return this.setUp.call$0();
  },
  tearDown$0: function() {
    return this.tearDown.call$0();
  },
  testFunction$0: function() {
    return this.testFunction.call$0();
  },
  get$message: function(_) {
    return this._liblib24$_message;
  },
  get$result: function(_) {
    return this._result;
  },
  get$stackTrace: function() {
    return this._stackTrace;
  },
  get$isComplete: function() {
    return !this.enabled || this._result != null;
  },
  _runTest$0: function() {
    var t1, f;
    t1 = $._config;
    t1.onTestStart$1;
    $.JSArray_methods.set$length(t1._testLogBuffer, 0);
    t1 = new $.DateTime(Date.now(), false);
    $.Primitives_lazyAsJsDate(t1);
    this._startTime = t1;
    this._runningTime = null;
    this._callbackFunctionsOutstanding = this._callbackFunctionsOutstanding + 1;
    f = this.testFunction$0();
    this._callbackFunctionsOutstanding = this._callbackFunctionsOutstanding - 1;
    if (typeof f === "object" && f !== null && !!$.getInterceptor(f).$isFuture)
      return f.then$1(new $.TestCase__runTest_closure(this)).catchError$1(new $.TestCase__runTest_closure0(this));
    else {
      if (this._result == null && this._callbackFunctionsOutstanding === 0)
        this._complete$1("pass");
      return;
    }
  },
  _liblib24$_run$0: function() {
    var rtn, f, t1, t2;
    if (!this.enabled)
      return;
    this._stackTrace = null;
    this._result = null;
    this._liblib24$_message = "";
    this._doneTeardown = false;
    rtn = this.setUp == null ? null : this.setUp$0();
    if (typeof rtn === "object" && rtn !== null && !!$.getInterceptor(rtn).$isFuture)
      rtn.then$1(new $.TestCase__run_closure(this)).catchError$1(new $.TestCase__run_closure0(this));
    else {
      f = this._runTest$0();
      if (f != null)
        return f;
    }
    if (this._result == null) {
      t1 = null;
      t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
      t2.$builtinTypeInfo = [t1];
      t2 = new $._AsyncCompleter(t2, false);
      t2.$builtinTypeInfo = [t1];
      t1 = t2.future._zone;
      t1._openCallbacks = t1._openCallbacks + 1;
      this._testComplete = t2;
      return this._testComplete.future;
    }
    return;
  },
  get$_liblib24$_run: function() {
    return new $.BoundClosure$0(this, "_liblib24$_run$0", null);
  },
  _setResult$3: function(testResult, messageText, stack) {
    var t1, t2;
    this._liblib24$_message = messageText;
    this._stackTrace = $._formatStack(stack);
    t1 = this._result;
    t2 = $._config;
    if (t1 == null) {
      this._result = testResult;
      t2.onTestResult$1(this);
    } else {
      this._result = testResult;
      t2.onTestResultChanged$1;
    }
  },
  _complete$3: function(testResult, messageText, stack) {
    var t1, rtn, t2;
    if (this._runningTime == null)
      if (this._startTime != null) {
        t1 = new $.DateTime(Date.now(), false);
        if (t1.date === void 0)
          t1.date = new Date(t1.millisecondsSinceEpoch);
        t1.date;
        this._runningTime = $.Duration$(0, 0, 0, $.$sub$n(t1.millisecondsSinceEpoch, this._startTime.millisecondsSinceEpoch), 0, 0);
      } else
        this._runningTime = $.Duration_0;
    this._setResult$3(testResult, messageText, stack);
    if (!this._doneTeardown) {
      this._doneTeardown = true;
      if (this.tearDown != null) {
        rtn = this.tearDown$0();
        if (typeof rtn === "object" && rtn !== null && !!$.getInterceptor(rtn).$isFuture) {
          rtn.then$1(new $.TestCase__complete_closure(this)).catchError$1(new $.TestCase__complete_closure0(this));
          return;
        }
      }
    }
    t1 = this._testComplete;
    if (t1 != null) {
      t1.complete$1;
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t2 = t1.future._zone;
      t2._openCallbacks = t2._openCallbacks - 1;
      if (!t2._isExecutingCallback && t2._openCallbacks === 0 && $.JSArray_methods.get$isEmpty(t2._children))
        t2._dispose$0();
      t1._setFutureValue$1(this);
      this._testComplete = null;
    }
  },
  "+_complete:1:2": 0,
  _complete$1: function(testResult) {
    return this._complete$3(testResult, "", "");
  },
  fail$2: function(messageText, stack) {
    var t1 = this._result;
    if (t1 != null)
      this._complete$3("error", t1 === "pass" ? "Test failed after initially passing: " + $.S(messageText) : "Test failed more than once: " + $.S(messageText), stack);
    else
      this._complete$3("fail", messageText, stack);
  },
  "+fail:1:1": 0,
  error$2: function(_, messageText, stack) {
    this._complete$3("error", messageText, stack);
  },
  "+error:1:1": 0,
  _markCallbackComplete$0: function() {
    var t1 = this._callbackFunctionsOutstanding - 1;
    this._callbackFunctionsOutstanding = t1;
    if (t1 === 0)
      t1 = !(!this.enabled || this._result != null);
    else
      t1 = false;
    if (t1)
      this._complete$1("pass");
  }
},

"+TestCase": 0,

TestCase__runTest_closure: {
  "": function TestCase__runTest_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1 = this.this_0;
    if (t1.get$_result() == null && $.$eq(t1.get$_callbackFunctionsOutstanding(), 0))
      t1._complete$1("pass");
    return;
  },
  $isFunction: true
},

"+TestCase__runTest_closure": 0,

TestCase__runTest_closure0: {
  "": function TestCase__runTest_closure(this_1) {
    this.this_1 = this_1;
  },
  "super": "Closure",
  call$1: function(error) {
    $._registerException(this.this_1, error, $.getAttachedStackTrace(error));
  },
  $isFunction: true
},

"+TestCase__runTest_closure": 0,

TestCase__run_closure: {
  "": function TestCase__run_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(_) {
    return this.this_0._runTest$0();
  },
  $isFunction: true
},

"+TestCase__run_closure": 0,

TestCase__run_closure0: {
  "": function TestCase__run_closure(this_1) {
    this.this_1 = this_1;
  },
  "super": "Closure",
  call$1: function(e) {
    var t1, t2, stack;
    t1 = this.this_1;
    t2 = $._config;
    t2.onTestStart$1;
    $.JSArray_methods.set$length(t2._testLogBuffer, 0);
    t2 = new $.DateTime(Date.now(), false);
    $.Primitives_lazyAsJsDate(t2);
    t1.set$_startTime(t2);
    t1.set$_runningTime(null);
    stack = $.getAttachedStackTrace(e);
    if (stack == null)
      stack = "";
    t1._complete$3("error", $.S(t1.get$description()) + ": Test setup failed: " + $.S(e), $.S(stack));
  },
  $isFunction: true
},

"+TestCase__run_closure": 0,

TestCase__complete_closure: {
  "": function TestCase__complete_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1, t2, t3, t4;
    t1 = this.this_0;
    t2 = t1.get$_testComplete();
    if (t2 != null) {
      t2.complete$1;
      if (t2.get$_isComplete() === true)
        $.throwExpression(new $.StateError("Future already completed"));
      t2.set$_isComplete(true);
      t3 = t2.get$future().get$_zone();
      t4 = t3.get$_openCallbacks();
      if (typeof t4 !== "number")
        throw t4.$sub();
      t3.set$_openCallbacks(t4 - 1);
      if (t3.get$_isExecutingCallback() !== true && $.$eq(t3.get$_openCallbacks(), 0) && $.get$isEmpty$asx($.get$_children$x(t3)) === true)
        t3._dispose$0();
      t2._setFutureValue$1(t1);
      t1.set$_testComplete(null);
    }
  },
  $isFunction: true
},

"+TestCase__complete_closure": 0,

TestCase__complete_closure0: {
  "": function TestCase__complete_closure(this_1) {
    this.this_1 = this_1;
  },
  "super": "Closure",
  call$1: function(error) {
    var trace, t1, t2, t3, t4;
    trace = $.getAttachedStackTrace(error);
    t1 = this.this_1;
    t2 = $.S(t1.get$description()) + ": Test teardown failed: " + $.S(error);
    t1._setResult$3("error", t2, trace == null ? "" : $.toString$0(trace));
    t2 = t1.get$_testComplete();
    if (t2 != null) {
      t2.complete$1;
      if (t2.get$_isComplete() === true)
        $.throwExpression(new $.StateError("Future already completed"));
      t2.set$_isComplete(true);
      t3 = t2.get$future().get$_zone();
      t4 = t3.get$_openCallbacks();
      if (typeof t4 !== "number")
        throw t4.$sub();
      t3.set$_openCallbacks(t4 - 1);
      if (t3.get$_isExecutingCallback() !== true && $.$eq(t3.get$_openCallbacks(), 0) && $.get$isEmpty$asx($.get$_children$x(t3)) === true)
        t3._dispose$0();
      t2._setFutureValue$1(t1);
      t1.set$_testComplete(null);
    }
  },
  $isFunction: true
},

"+TestCase__complete_closure": 0,

_GroupContext: {
  "": function _GroupContext(parent, _liblib24$_name, _testSetup, _testTeardown) {
    this.parent = parent;
    this._liblib24$_name = _liblib24$_name;
    this._testSetup = _testSetup;
    this._testTeardown = _testTeardown;
  },
  "super": "Object",
  get$parent: function(receiver) {
    return this.parent;
  },
  get$_liblib24$_name: function() {
    return this._liblib24$_name;
  },
  get$_testSetup: function() {
    return this._testSetup;
  },
  set$_testSetup: function(v) {
    this._testSetup = v;
  },
  get$_testTeardown: function() {
    return this._testTeardown;
  },
  set$_testTeardown: function(v) {
    this._testTeardown = v;
  },
  get$testSetup: function() {
    return this._testSetup;
  },
  get$testTeardown: function() {
    return this._testTeardown;
  },
  get$fullName: function() {
    var t1, t2, t3;
    t1 = this.parent;
    t2 = t1 == null || $.$eq(t1, $.get$_rootContext());
    t3 = this._liblib24$_name;
    return t2 ? t3 : $.S(t1.get$fullName()) + $.groupSep + t3;
  }
},

"+_GroupContext": 0,

_SpreadArgsHelper: {
  "": function _SpreadArgsHelper(callback, minExpectedCalls, maxExpectedCalls, isDone, id, actualCalls, testCase, complete) {
    this.callback = callback;
    this.minExpectedCalls = minExpectedCalls;
    this.maxExpectedCalls = maxExpectedCalls;
    this.isDone = isDone;
    this.id = id;
    this.actualCalls = actualCalls;
    this.testCase = testCase;
    this.complete = complete;
  },
  "super": "Object",
  get$callback: function() {
    return this.callback;
  },
  get$minExpectedCalls: function() {
    return this.minExpectedCalls;
  },
  get$maxExpectedCalls: function() {
    return this.maxExpectedCalls;
  },
  get$isDone: function() {
    return this.isDone;
  },
  get$id: function(receiver) {
    return this.id;
  },
  get$actualCalls: function() {
    return this.actualCalls;
  },
  set$actualCalls: function(v) {
    this.actualCalls = v;
  },
  get$testCase: function() {
    return this.testCase;
  },
  get$complete: function(receiver) {
    return this.complete;
  },
  set$complete: function(receiver, v) {
    this.complete = v;
  },
  callback$1: function(arg0) {
    return this.callback.call$1(arg0);
  },
  shouldCallBack$0: function() {
    var t1, t2;
    this.actualCalls = this.actualCalls + 1;
    t1 = this.testCase;
    if (t1.get$isComplete() === true) {
      t2 = $.getInterceptor$x(t1);
      if ($.$eq(t2.get$result(t1), "pass"))
        t2.error$2(t1, "Callback " + this.id + "called (" + this.actualCalls + ") after test case " + $.S(t1.get$description()) + " has already been marked as " + $.S(t2.get$result(t1)) + ".", "");
      return false;
    } else {
      t1 = this.maxExpectedCalls;
      if (t1 >= 0 && this.actualCalls > t1)
        throw $.wrapException(new $.TestFailure("Callback " + this.id + "called more times than expected (" + t1 + ")."));
    }
    return true;
  },
  after$0: function() {
    if (!this.complete) {
      var t1 = this.minExpectedCalls;
      if (t1 > 0 && this.actualCalls < t1)
        return;
      if (false)
        return;
      this.complete = true;
      this.testCase._markCallbackComplete$0();
    }
  },
  "+after:0:0": 0,
  get$after: function() {
    return new $.BoundClosure$0(this, "after$0", null);
  },
  invoke1$1: function(arg1) {
    return $._guardAsync(new $._SpreadArgsHelper_invoke1_closure(this, arg1), this.get$after(), this.testCase);
  },
  "+invoke1:1:0": 0,
  get$invoke1: function() {
    return new $.BoundClosure$1(this, "invoke1$1", null);
  },
  _SpreadArgsHelper$5: function(callback, minExpected, maxExpected, isDone, id) {
    var t1;
    $._ensureInitialized(true);
    t1 = this.testCase;
    if (t1 == null)
      throw $.wrapException(new $.StateError("No valid test. Did you forget to run your test inside a call to test()?"));
    if (minExpected > 0) {
      t1.set$_callbackFunctionsOutstanding($.$add$ns(t1.get$_callbackFunctionsOutstanding(), 1));
      this.complete = false;
    } else
      this.complete = true;
  }
},

"+_SpreadArgsHelper": 0,

_SpreadArgsHelper_invoke1_closure: {
  "": function _SpreadArgsHelper_invoke1_closure(this_0, arg1_1) {
    this.this_0 = this_0;
    this.arg1_1 = arg1_1;
  },
  "super": "Closure",
  call$0: function() {
    var t1 = this.this_0;
    if (t1.shouldCallBack$0() === true)
      return t1.callback$1(this.arg1_1);
  },
  $isFunction: true
},

"+_SpreadArgsHelper_invoke1_closure": 0,

_nextTestCase_closure: {
  "": function _nextTestCase_closure() {
  },
  "super": "Closure",
  call$0: function() {
    $._currentTestCaseIndex = $.$add$ns($._currentTestCaseIndex, 1);
    $._nextBatch();
  },
  $isFunction: true
},

"+_nextTestCase_closure": 0,

runTests_closure: {
  "": function runTests_closure() {
  },
  "super": "Closure",
  call$0: function() {
    $._nextBatch();
  },
  $isFunction: true
},

"+runTests_closure": 0,

_nextBatch_closure: {
  "": function _nextBatch_closure() {
  },
  "super": "Closure",
  call$0: function() {
    $._nextTestCase();
  },
  $isFunction: true
},

"+_nextBatch_closure": 0,

_ensureInitialized_closure: {
  "": function _ensureInitialized_closure() {
  },
  "super": "Closure",
  call$2: function(f, id) {
    return $._SpreadArgsHelper$(f, 1, 0, null, id).get$invoke1();
  },
  call$1: function(f) {
    return this.call$2(f, null);
  },
  $isFunction: true
},

"+_ensureInitialized_closure": 0,

_formatStack_closure: {
  "": function _formatStack_closure() {
  },
  "super": "Closure",
  call$2: function(n, line) {
    var match, t1;
    match = $.get$_frameRegExp().firstMatch$1(line);
    if (match == null)
      return n;
    match.$index;
    t1 = match._match;
    if (1 >= t1.length)
      throw $.ioore(1);
    return $.max(n, $.$add$ns($.get$length$asx(t1[1]), 1));
  },
  $isFunction: true
},

"+_formatStack_closure": 0,

test: function(spec, body) {
  var t1, t2, t3, t4, t5;
  $._ensureInitialized(true);
  if (!$._soloTestSeen || $._soloNestingLevel > 0) {
    t1 = $.get$testCases()._liblib0$_source.length;
    t2 = $._fullSpec(spec);
    t3 = $.get$_currentContext().get$fullName();
    t4 = $.get$_currentContext().get$testSetup();
    t5 = $.get$_currentContext().get$testTeardown();
    $.get$_testCases().push(new $.TestCase(t1 + 1, t2, t4, t5, body, 0, "", null, null, t3, null, null, true, false, null));
  }
},

"+test:2:0": 0,

_SpreadArgsHelper$: function(callback, minExpected, maxExpected, isDone, id) {
  var t1, t2, t3;
  t1 = maxExpected === 0 && minExpected > 0 ? minExpected : maxExpected;
  if ($.$ge$n($._currentTestCaseIndex, 0) === true && $.$lt$n($._currentTestCaseIndex, $.get$testCases()._liblib0$_source.length) === true) {
    t2 = $.get$testCases();
    t3 = $._currentTestCaseIndex;
    t2 = t2._liblib0$_source;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t3 = t2[t3];
    t2 = t3;
  } else
    t2 = null;
  t2 = new $._SpreadArgsHelper(callback, minExpected, t1, isDone, $._SpreadArgsHelper__makeCallbackId(id, callback), 0, t2, null);
  t2._SpreadArgsHelper$5(callback, minExpected, maxExpected, isDone, id);
  return t2;
},

"+new _SpreadArgsHelper:5:0": 0,

_SpreadArgsHelper__makeCallbackId: function(id, callback) {
  var fname, t1, pos, t2, epos;
  if (id != null)
    return $.S(id) + " ";
  else {
    fname = $.toString$0(callback);
    t1 = $.getInterceptor$asx(fname);
    pos = t1.indexOf$1(fname, "Function '");
    t2 = $.getInterceptor$n(pos);
    if (t2.$gt(pos, 0) === true) {
      pos = t2.$add(pos, 10);
      epos = t1.indexOf$2(fname, "'", pos);
      if ($.$gt$n(epos, 0) === true)
        return $.S(t1.substring$2(fname, pos, epos)) + " ";
    }
  }
  return "";
},

"+_makeCallbackId:2:0": 0,

group: function(description, body) {
  var e, trace, stack, t1, t2, t3, exception;
  $._ensureInitialized(true);
  t1 = new $._GroupContext($.get$_currentContext(), description, null, null);
  t2 = t1.parent;
  t3 = t2 == null;
  t1._testSetup = t3 ? null : t2.get$testSetup();
  t1._testTeardown = t3 ? null : t2.get$testTeardown();
  $._currentContext = t1;
  try {
    body.call$0();
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    trace = $.getTraceFromException(exception);
    stack = trace == null ? "" : ": " + $.S($.toString$0(trace));
    $._uncaughtErrorMessage = $.S($.toString$0(e)) + $.S(stack);
  }
 finally {
    $._currentContext = $.get$parent$x($.get$_currentContext());
  }
},

"+group:2:0": 0,

_nextTestCase: function() {
  $.get$_Zone__current().runAsync$1(new $._nextTestCase_closure());
},

"+_nextTestCase:0:0": 0,

runTests: function() {
  $._ensureInitialized(false);
  $._currentTestCaseIndex = 0;
  $._config.onStart$0;
  $.get$_Zone__current().runAsync$1(new $.runTests_closure());
},

"+runTests:0:0": 0,

_guardAsync: function(tryBody, finallyBody, testCase) {
  var e, trace, t1, exception;
  try {
    t1 = tryBody.call$0();
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    trace = $.getTraceFromException(exception);
    $._registerException(testCase, e, trace);
  }
 finally {
    if (finallyBody != null)
      finallyBody.call$0();
  }
},

"+_guardAsync:3:0": 0,

_registerException: function(testCase, e, trace) {
  var message, t1;
  trace = trace == null ? "" : $.toString$0(trace);
  message = typeof e === "object" && e !== null && !!$.getInterceptor(e).$isTestFailure ? e._liblib21$_message : "Caught " + $.S(e);
  t1 = $.getInterceptor$x(testCase);
  if (t1.get$result(testCase) == null)
    testCase.fail$2(message, trace);
  else
    t1.error$2(testCase, message, trace);
},

"+_registerException:2:1": 0,

_nextBatch: function() {
  var t1, t2, testCase, f;
  for (; true;) {
    if ($.$ge$n($._currentTestCaseIndex, $.get$testCases()._liblib0$_source.length) === true) {
      $._completeTests();
      break;
    }
    t1 = $.get$testCases();
    t2 = $._currentTestCaseIndex;
    t1 = t1._liblib0$_source;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    testCase = t1[t2];
    f = $._guardAsync(testCase.get$_liblib24$_run(), null, testCase);
    if (f != null) {
      f.whenComplete$1(new $._nextBatch_closure());
      break;
    }
    $._currentTestCaseIndex = $.$add$ns($._currentTestCaseIndex, 1);
  }
},

"+_nextBatch:0:0": 0,

_completeTests: function() {
  var t1, passed, failed, errors;
  if (!$._initialized)
    return;
  for (t1 = $.get$testCases(), t1 = t1.get$iterator(t1), passed = 0, failed = 0, errors = 0; t1.moveNext$0();)
    switch ($.get$result$x(t1._liblib$_current)) {
      case "pass":
        ++passed;
        break;
      case "fail":
        ++failed;
        break;
      case "error":
        ++errors;
        break;
    }
  $._config.onSummary$5(passed, failed, errors, $.get$testCases(), $._uncaughtErrorMessage);
  t1 = $._config;
  t1.onDone$1(passed > 0 && failed === 0 && errors === 0 && $._uncaughtErrorMessage == null);
  $._initialized = false;
},

"+_completeTests:0:0": 0,

_fullSpec: function(spec) {
  var group = $.S($.get$_currentContext().get$fullName());
  return group !== "" ? group + $.groupSep + spec : spec;
},

"+_fullSpec:1:0": 0,

_ensureInitialized: function(configAutoStart) {
  var t1, handler;
  if ($._initialized)
    return;
  $._initialized = true;
  $.wrapAsync = new $._ensureInitialized_closure();
  $._uncaughtErrorMessage = null;
  if ($._config == null) {
    t1 = new $.Configuration(null, "Configuration", true, true, true, $.List_List($, null));
    handler = new $._ExpectFailureHandler(t1);
    handler.DefaultFailureHandler$0();
    $._assertFailureHandler = handler;
    $._config = t1;
  }
  $._config.onInit$0();
  if (configAutoStart && $._config.autoStart)
    $.get$_Zone__current().runAsync$1($.runTests$closure);
},

"+_ensureInitialized:1:0": 0,

_formatStack: function(stack) {
  var lines, padding, sb, i, line, match, t1, t2, member, $location, position, j;
  if (typeof stack === "object" && stack !== null && !!$.getInterceptor(stack).$isStackTrace) {
    lines = $.split$1$s(stack.toString$0(stack), "\n");
    if (typeof lines !== "object" || lines === null || lines.constructor !== Array && !$.isJsIndexable(lines, lines[$.dispatchPropertyName]))
      return $._formatStack$bailout(1, lines);
  } else if (typeof stack === "string")
    lines = stack.split("\n");
  else
    return $.toString$0(stack);
  padding = $.JSArray_methods.fold$2(lines, 0, new $._formatStack_closure());
  if (typeof padding !== "number")
    return $._formatStack$bailout(2, lines, $.JSArray_methods, padding);
  sb = new $.StringBuffer("");
  sb._contents = "";
  for (i = 0; i < lines.length; ++i) {
    line = lines[i];
    if (typeof line !== "string")
      return $._formatStack$bailout(3, lines, $.JSArray_methods, padding, line, $.JSNumber_methods, i, sb);
    if (line === "")
      continue;
    match = $.get$_frameRegExp().firstMatch$1(line);
    if (match == null) {
      sb._contents = sb._contents + line;
      sb._contents = sb._contents + "\n";
    } else {
      match.$index;
      t1 = match._match;
      t2 = t1.length;
      if (1 >= t2)
        throw $.ioore(1);
      member = t1[1];
      if (typeof member !== "string")
        return $._formatStack$bailout(4, lines, $.JSArray_methods, padding, 0, $.JSNumber_methods, i, sb, t1, member, t2);
      if (2 >= t2)
        throw $.ioore(2);
      $location = t1[2];
      if (typeof $location !== "string")
        return $._formatStack$bailout(5, lines, $.JSArray_methods, padding, 0, $.JSNumber_methods, i, sb, t1, member, t2, $location);
      if (3 >= t2)
        throw $.ioore(3);
      position = t1[3];
      if (typeof position !== "string")
        return $._formatStack$bailout(6, lines, $.JSArray_methods, padding, 0, $.JSNumber_methods, i, sb, 0, member, 0, $location, position);
      if ($.JSString_methods.indexOf$1(member, "TestCase._runTest") >= 0)
        break;
      else if ($.JSString_methods.indexOf$1(member, "expect") >= 0)
        sb._contents = "";
      else {
        sb._contents = sb._contents + member;
        for (t1 = padding - member.length, j = 0; j <= t1; ++j)
          sb._contents = sb._contents + " ";
        sb._contents = sb._contents + $location;
        sb._contents = sb._contents + " ";
        sb._contents = sb._contents + position;
        sb._contents = sb._contents + "\n";
      }
    }
  }
  return sb._contents;
},

"+_formatStack:1:0": 0,

_formatStack$bailout: function(state0, lines, t1, padding, line, t2, i, sb, t3, member, t4, $location, position) {
  switch (state0) {
    case 0:
    case 1:
      if (state0 === 1 || state0 === 0 && typeof stack === "object" && stack !== null && !!$.getInterceptor(stack).$isStackTrace)
        switch (state0) {
          case 0:
            lines = $.split$1$s(stack.toString$0(stack), "\n");
          case 1:
            state0 = 0;
        }
      else if (typeof stack === "string")
        lines = stack.split("\n");
      else
        return $.toString$0(stack);
      t1 = $.getInterceptor$ax(lines);
      padding = t1.fold$2(lines, 0, new $._formatStack_closure());
    case 2:
      state0 = 0;
      sb = new $.StringBuffer("");
      sb._contents = "";
      t2 = $.getInterceptor$n(padding);
      i = 0;
    default:
      var match, str, j;
      L0:
        while (true)
          switch (state0) {
            case 0:
              t3 = t1.get$length(lines);
              if (typeof t3 !== "number")
                throw $.iae(t3);
              if (!(i < t3))
                break L0;
            default:
              c$0: {
                switch (state0) {
                  case 0:
                    line = t1.$index(lines, i);
                  case 3:
                    state0 = 0;
                    if ($.$eq(line, ""))
                      break c$0;
                    match = $.get$_frameRegExp().firstMatch$1(line);
                  default:
                    if (state0 === 0 && match == null) {
                      str = typeof line === "string" ? line : $.S(line);
                      sb._contents = sb._contents + str;
                      sb._contents = sb._contents + "\n";
                    } else
                      switch (state0) {
                        case 0:
                          match.$index;
                          t3 = match._match;
                          t4 = t3.length;
                          if (1 >= t4)
                            throw $.ioore(1);
                          member = t3[1];
                        case 4:
                          state0 = 0;
                          if (2 >= t4)
                            throw $.ioore(2);
                          $location = t3[2];
                        case 5:
                          state0 = 0;
                          if (3 >= t4)
                            throw $.ioore(3);
                          position = t3[3];
                        case 6:
                          state0 = 0;
                          t3 = $.getInterceptor$asx(member);
                          if ($.$ge$n(t3.indexOf$1(member, "TestCase._runTest"), 0) === true)
                            break L0;
                          else if ($.$ge$n(t3.indexOf$1(member, "expect"), 0) === true)
                            sb._contents = "";
                          else {
                            str = typeof member === "string" ? member : $.S(member);
                            sb._contents = sb._contents + str;
                            j = 0;
                            while (true) {
                              t4 = t2.$sub(padding, t3.get$length(member));
                              if (typeof t4 !== "number")
                                throw $.iae(t4);
                              if (!(j <= t4))
                                break;
                              sb._contents = sb._contents + " ";
                              ++j;
                            }
                            str = typeof $location === "string" ? $location : $.S($location);
                            sb._contents = sb._contents + str;
                            sb._contents = sb._contents + " ";
                            str = typeof position === "string" ? position : $.S(position);
                            sb._contents = sb._contents + str;
                            sb._contents = sb._contents + "\n";
                          }
                      }
                }
              }
              ++i;
          }
      return sb._contents;
  }
}}],
["utils", "../lib/utils.dart", , {
toTitleCase: function(str) {
  var t1, t2;
  t1 = $.getInterceptor$asx(str);
  t2 = t1.get$length(str);
  if (typeof t2 !== "number")
    return $.toTitleCase$bailout(1, str, t1, t2);
  if (t2 < 2)
    return t1.toUpperCase$0(str);
  else {
    t2 = $.toUpperCase$0$s(t1.substring$2(str, 0, 1));
    if (typeof t2 !== "number")
      return $.toTitleCase$bailout(2, str, t1, t2);
    t1 = $.toLowerCase$0$s(t1.substring$1(str, 1));
    if (typeof t1 !== "number")
      return $.toTitleCase$bailout(3, 0, t1, t2);
    return t2 + t1;
  }
},

"+toTitleCase:1:0": 0,

toTitleCase$bailout: function(state0, str, t1, t2) {
  switch (state0) {
    case 0:
      t1 = $.getInterceptor$asx(str);
      t2 = t1.get$length(str);
    case 1:
      state0 = 0;
    default:
      if (state0 === 0 && $.$lt$n(t2, 2) === true)
        return t1.toUpperCase$0(str);
      else
        switch (state0) {
          case 0:
            t2 = $.toUpperCase$0$s(t1.substring$2(str, 0, 1));
          case 2:
            state0 = 0;
            t1 = $.toLowerCase$0$s(t1.substring$1(str, 1));
          case 3:
            state0 = 0;
            return $.$add$ns(t2, t1);
        }
  }
},

stripQuotes: function(str) {
  var t1 = $.getInterceptor$asx(str);
  if ($.$lt$n(t1.get$length(str), 2) === true)
    return str;
  if (t1.startsWith$1(str, "'") === true && t1.endsWith$1(str, "'") === true)
    return t1.substring$2(str, 1, $.$sub$n(t1.get$length(str), 1));
  if (t1.startsWith$1(str, "\"") === true && t1.endsWith$1(str, "\"") === true)
    return t1.substring$2(str, 1, $.$sub$n(t1.get$length(str), 1));
  return str;
},

"+stripQuotes:1:0": 0,

jsRelease: function(proxy) {
  var ex, exception, t1;
  try {
    $._jsInvalidate0.callSync$1($._serialize0(proxy.toJs$0()));
  } catch (exception) {
    t1 = $.unwrapException(exception);
    ex = t1;
    try {
      $.Primitives_printString("Exception call js.release() on " + $.S(proxy));
    } catch (exception) {
      $.unwrapException(exception);
    }

    $.Primitives_printString($.toString$0(ex));
  }

},

"+jsRelease:1:0": 0,

_platform: function() {
  var str = window.navigator.platform;
  return str != null ? $.toLowerCase$0$s(str) : "";
},

"+_platform:0:0": 0,

beep: function() {
  var osc, t1;
  if ($._ctx == null)
    $._ctx = new (window.AudioContext || window.webkitAudioContext)();
  osc = $._ctx.createOscillator();
  osc.connect($._ctx.destination, 0, 0);
  osc.start(0);
  t1 = $._ctx.currentTime;
  if (t1 == null)
    throw t1.$add();
  osc.stop(t1 + 0.1);
},

"+beep:0:0": 0}],
["utils", "../packages/unittest/src/utils.dart", , {
typeName: function(x) {
  var type, t1, exception;
  try {
    if (x == null)
      return "null";
    type = $.toString$0($.get$runtimeType$(x));
    t1 = $.startsWith$1$s(type, "_") === true ? "?" : type;
    return t1;
  } catch (exception) {
    $.unwrapException(exception);
    return "?";
  }

},

"+typeName:1:0": 0,

escapeString: function(source) {
  return $.join$1$ax($.map$1$ax($.split$1$s(source, ""), $._escapeChar$closure), "");
},

"+escapeString:1:0": 0,

_escapeChar: function(ch) {
  var t1 = $.getInterceptor(ch);
  if (t1.$eq(ch, "'"))
    return "\\'";
  else if (t1.$eq(ch, "\n"))
    return "\\n";
  else if (t1.$eq(ch, "\r"))
    return "\\r";
  else if (t1.$eq(ch, "\t"))
    return "\\t";
  else
    return ch;
},

"+_escapeChar:1:0": 0}],
["webitor", "../webitor.dart", , {
Webitor: {
  "": function Webitor(workbench, aboutPopover, preferencesPopover, searchBox, preferences) {
    this.workbench = workbench;
    this.aboutPopover = aboutPopover;
    this.preferencesPopover = preferencesPopover;
    this.searchBox = searchBox;
    this.preferences = preferences;
  },
  "super": "Object",
  get$workbench: function() {
    return this.workbench;
  },
  set$workbench: function(v) {
    this.workbench = v;
  },
  get$aboutPopover: function() {
    return this.aboutPopover;
  },
  set$aboutPopover: function(v) {
    this.aboutPopover = v;
  },
  get$preferencesPopover: function() {
    return this.preferencesPopover;
  },
  set$preferencesPopover: function(v) {
    this.preferencesPopover = v;
  },
  get$searchBox: function() {
    return this.searchBox;
  },
  set$searchBox: function(v) {
    this.searchBox = v;
  },
  get$preferences: function() {
    return this.preferences;
  },
  set$preferences: function(v) {
    this.preferences = v;
  },
  createActions$0: function() {
    var t1, t2, t3;
    t1 = this.workbench;
    t2 = $.Action;
    t2 = t2;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t2];
    t3._stream = $._ControllerStream$(t3, t2);
    t2 = t3;
    t2 = new $.FileNewAction(t1, t2, null, "file-new", "New", true, null);
    t2._liblib7$_stream = t2.streamController._stream.asBroadcastStream$0();
    t2.WorkbenchAction$3(t1, "file-new", "New");
    if (t2.binding == null)
      t2.binding = $.KeyBinding$("ctrl-n");
    t1 = t1.actionMap;
    t1.$indexSet(t1, t2.id, t2);
    t2 = this.workbench;
    t1 = $.Action;
    t1 = t1;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t1];
    t3._stream = $._ControllerStream$(t3, t1);
    t1 = t3;
    t1 = new $.FileOpenAction(t2, t1, null, "file-open", "Open...", true, null);
    t1._liblib7$_stream = t1.streamController._stream.asBroadcastStream$0();
    t1.WorkbenchAction$3(t2, "file-open", "Open...");
    if (t1.binding == null)
      t1.binding = $.KeyBinding$("ctrl-o");
    t2 = t2.actionMap;
    t2.$indexSet(t2, t1.id, t1);
    t1 = this.workbench;
    t2 = $.Action;
    t2 = t2;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t2];
    t3._stream = $._ControllerStream$(t3, t2);
    t2 = t3;
    t2 = new $.FileSaveAction(t1, t2, null, "file-save", "Save", true, null);
    t2._liblib7$_stream = t2.streamController._stream.asBroadcastStream$0();
    t2.WorkbenchAction$3(t1, "file-save", "Save");
    if (t2.binding == null)
      t2.binding = $.KeyBinding$("ctrl-s");
    t1 = t1.actionMap;
    t1.$indexSet(t1, t2.id, t2);
    t2 = this.workbench;
    t1 = $.Action;
    t1 = t1;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t1];
    t3._stream = $._ControllerStream$(t3, t1);
    t1 = t3;
    t1 = new $.FileSaveAllAction(t2, t1, null, "file-saveAll", "Save All", true, null);
    t1._liblib7$_stream = t1.streamController._stream.asBroadcastStream$0();
    t1.WorkbenchAction$3(t2, "file-saveAll", "Save All");
    if (t1.binding == null)
      t1.binding = $.KeyBinding$("ctrl-shift-s");
    t2 = t2.actionMap;
    t2.$indexSet(t2, t1.id, t1);
    t1 = this.workbench;
    t2 = $.Action;
    t2 = t2;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t2];
    t3._stream = $._ControllerStream$(t3, t2);
    t2 = t3;
    t2 = new $.FileCloseAction(t1, t2, null, "file-close", "Close", true, null);
    t2._liblib7$_stream = t2.streamController._stream.asBroadcastStream$0();
    t2.WorkbenchAction$3(t1, "file-close", "Close");
    if (t2.binding == null)
      t2.binding = $.KeyBinding$("ctrl-w");
    t1 = t1.actionMap;
    t1.$indexSet(t1, t2.id, t2);
    t2 = this.workbench;
    t1 = $.Action;
    t1 = t1;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t1];
    t3._stream = $._ControllerStream$(t3, t1);
    t1 = t3;
    t1 = new $.FileCloseAllAction(t2, t1, null, "file-closeAll", "Close All", true, null);
    t1._liblib7$_stream = t1.streamController._stream.asBroadcastStream$0();
    t1.WorkbenchAction$3(t2, "file-closeAll", "Close All");
    if (t1.binding == null)
      t1.binding = $.KeyBinding$("ctrl-shift-w");
    t2 = t2.actionMap;
    t2.$indexSet(t2, t1.id, t1);
    t1 = this.workbench;
    t2 = $.Action;
    t2 = t2;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t2];
    t3._stream = $._ControllerStream$(t3, t2);
    t2 = t3;
    t2 = new $.FileExitAction(t1, t2, null, "file-exit", "Quit", true, null);
    t2._liblib7$_stream = t2.streamController._stream.asBroadcastStream$0();
    t2.WorkbenchAction$3(t1, "file-exit", "Quit");
    if ($.JSString_methods.indexOf$1($._platform(), "mac") !== -1)
      t2.binding = $.KeyBinding$("ctrl-q");
    if ($.JSString_methods.indexOf$1($._platform(), "win") !== -1)
      t2.binding = $.KeyBinding$("ctrl-shift-f4");
    t1 = t1.actionMap;
    t1.$indexSet(t1, t2.id, t2);
    t2 = this.workbench;
    t1 = $.Action;
    t1 = t1;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t1];
    t3._stream = $._ControllerStream$(t3, t1);
    t1 = t3;
    t1 = new $.EditNextTabAction(t2, t1, null, "edit-nextTab", "Next Tab", true, null);
    t1._liblib7$_stream = t1.streamController._stream.asBroadcastStream$0();
    t1.WorkbenchAction$3(t2, "edit-nextTab", "Next Tab");
    if (t1.binding == null)
      t1.binding = $.KeyBinding$("ctrl-tab");
    if ($.JSString_methods.indexOf$1($._platform(), "mac") !== -1)
      t1.binding = $.KeyBinding$("macCtrl-tab");
    t2 = t2.actionMap;
    t2.$indexSet(t2, t1.id, t1);
    t1 = this.workbench;
    t2 = $.Action;
    t2 = t2;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t2];
    t3._stream = $._ControllerStream$(t3, t2);
    t2 = t3;
    t2 = new $.EditPrevTabAction(t1, t2, null, "edit-prevTab", "Previous Tab", true, null);
    t2._liblib7$_stream = t2.streamController._stream.asBroadcastStream$0();
    t2.WorkbenchAction$3(t1, "edit-prevTab", "Previous Tab");
    if (t2.binding == null)
      t2.binding = $.KeyBinding$("ctrl-shift-tab");
    if ($.JSString_methods.indexOf$1($._platform(), "mac") !== -1)
      t2.binding = $.KeyBinding$("macCtrl-shift-tab");
    t1 = t1.actionMap;
    t1.$indexSet(t1, t2.id, t2);
    t2 = this.workbench;
    t1 = $.Action;
    t1 = t1;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t1];
    t3._stream = $._ControllerStream$(t3, t1);
    t1 = t3;
    t1 = new $.EditGotoLineAction(t2, t1, null, "edit-gotoLine", "Goto Line...", true, null);
    t1._liblib7$_stream = t1.streamController._stream.asBroadcastStream$0();
    t1.WorkbenchAction$3(t2, "edit-gotoLine", "Goto Line...");
    if (t1.binding == null)
      t1.binding = $.KeyBinding$("ctrl-l");
    t2 = t2.actionMap;
    t2.$indexSet(t2, t1.id, t1);
    t1 = this.workbench;
    t2 = $.Action;
    t2 = t2;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t2];
    t3._stream = $._ControllerStream$(t3, t2);
    t2 = t3;
    t2 = new $.RunRunAction(t1, t2, null, "run-run", "Run", true, null);
    t2._liblib7$_stream = t2.streamController._stream.asBroadcastStream$0();
    t2.WorkbenchAction$3(t1, "run-run", "Run");
    if (t2.binding == null)
      t2.binding = $.KeyBinding$("ctrl-r");
    t1 = t1.actionMap;
    t1.$indexSet(t1, t2.id, t2);
    t2 = this.workbench;
    t1 = $.Action;
    t1 = t1;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t1];
    t3._stream = $._ControllerStream$(t3, t1);
    t1 = t3;
    t1 = new $.RemoteDebugAction(t2, t1, null, "run-remoteDebug", "Remote Debug...", true, null);
    t1._liblib7$_stream = t1.streamController._stream.asBroadcastStream$0();
    t1.WorkbenchAction$3(t2, "run-remoteDebug", "Remote Debug...");
    t2 = t2.actionMap;
    t2.$indexSet(t2, t1.id, t1);
    t1 = this.workbench;
    t2 = $.Action;
    t2 = t2;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t2];
    t3._stream = $._ControllerStream$(t3, t2);
    t2 = t3;
    t2 = new $.GlobalSearchAction(this, t1, t2, null, "search-focus", "Search", true, null);
    t2._liblib7$_stream = t2.streamController._stream.asBroadcastStream$0();
    t2.WorkbenchAction$3(t1, "search-focus", "Search");
    if (t2.binding == null)
      t2.binding = $.KeyBinding$("ctrl-shift-f");
    t1 = t1.actionMap;
    t1.$indexSet(t1, t2.id, t2);
  },
  "+createActions:0:0": 0,
  createMenubar$0: function() {
    var t1, $menubar, fileMenu, t2, t3, editMenu, t4, refactorMenu, runMenu, toolsMenu;
    t1 = this.workbench.titleArea;
    t1.get$menubar;
    $menubar = t1._menubar;
    fileMenu = $.BMenu$("File");
    t1 = this.workbench.actionMap;
    t1 = this.createMenuItem$1(t1.$index(t1, "file-new"));
    $.add$1$ax($.get$children$x(fileMenu.ulElement), t1.element);
    t2 = fileMenu._items;
    t2.push(t1);
    t1 = this.workbench.actionMap;
    t1 = this.createMenuItem$1(t1.$index(t1, "file-open"));
    $.add$1$ax($.get$children$x(fileMenu.ulElement), t1.element);
    t2.push(t1);
    t1 = fileMenu.ulElement;
    t3 = new $.BListItem(null);
    t3.element = $.document().createElement("li");
    if (t1 != null)
      $.add$1$ax($.get$children$x(t1), t3.element);
    $.$indexSet$ax($.get$attributes$x(t3.element), "role", "presentation");
    $.add$1$ax($.get$classes$x(t3.element), "divider");
    t1 = this.workbench.actionMap;
    t1 = this.createMenuItem$1(t1.$index(t1, "file-save"));
    $.add$1$ax($.get$children$x(fileMenu.ulElement), t1.element);
    t2.push(t1);
    t1 = this.workbench.actionMap;
    t1 = this.createMenuItem$1(t1.$index(t1, "file-saveAll"));
    $.add$1$ax($.get$children$x(fileMenu.ulElement), t1.element);
    t2.push(t1);
    t1 = fileMenu.ulElement;
    t3 = new $.BListItem(null);
    t3.element = $.document().createElement("li");
    if (t1 != null)
      $.add$1$ax($.get$children$x(t1), t3.element);
    $.$indexSet$ax($.get$attributes$x(t3.element), "role", "presentation");
    $.add$1$ax($.get$classes$x(t3.element), "divider");
    t1 = this.workbench.actionMap;
    t1 = this.createMenuItem$1(t1.$index(t1, "file-close"));
    $.add$1$ax($.get$children$x(fileMenu.ulElement), t1.element);
    t2.push(t1);
    t1 = this.workbench.actionMap;
    t1 = this.createMenuItem$1(t1.$index(t1, "file-closeAll"));
    $.add$1$ax($.get$children$x(fileMenu.ulElement), t1.element);
    t2.push(t1);
    t1 = fileMenu.ulElement;
    t3 = new $.BListItem(null);
    t3.element = $.document().createElement("li");
    if (t1 != null)
      $.add$1$ax($.get$children$x(t1), t3.element);
    $.$indexSet$ax($.get$attributes$x(t3.element), "role", "presentation");
    $.add$1$ax($.get$classes$x(t3.element), "divider");
    t1 = this.workbench.actionMap;
    t1 = this.createMenuItem$1(t1.$index(t1, "file-exit"));
    $.add$1$ax($.get$children$x(fileMenu.ulElement), t1.element);
    t2.push(t1);
    t1 = $menubar.menus;
    t1.push(fileMenu);
    fileMenu.menubar = $menubar;
    $.add$1$ax($.get$children$x($menubar._liblib5$_element), fileMenu.get$element());
    editMenu = $.BMenu$("Edit");
    t2 = $.BMenuItem$("Cut", null);
    $.add$1$ax($.get$children$x(editMenu.ulElement), t2.element);
    t3 = editMenu._items;
    t3.push(t2);
    t2 = $.BMenuItem$("Copy", null);
    $.add$1$ax($.get$children$x(editMenu.ulElement), t2.element);
    t3.push(t2);
    t2 = $.BMenuItem$("Paste", null);
    $.add$1$ax($.get$children$x(editMenu.ulElement), t2.element);
    t3.push(t2);
    t2 = editMenu.ulElement;
    t4 = new $.BListItem(null);
    t4.element = $.document().createElement("li");
    if (t2 != null)
      $.add$1$ax($.get$children$x(t2), t4.element);
    $.$indexSet$ax($.get$attributes$x(t4.element), "role", "presentation");
    $.add$1$ax($.get$classes$x(t4.element), "divider");
    t2 = this.workbench.actionMap;
    t2 = this.createMenuItem$1(t2.$index(t2, "edit-nextTab"));
    $.add$1$ax($.get$children$x(editMenu.ulElement), t2.element);
    t3.push(t2);
    t2 = this.workbench.actionMap;
    t2 = this.createMenuItem$1(t2.$index(t2, "edit-prevTab"));
    $.add$1$ax($.get$children$x(editMenu.ulElement), t2.element);
    t3.push(t2);
    t2 = editMenu.ulElement;
    t4 = new $.BListItem(null);
    t4.element = $.document().createElement("li");
    if (t2 != null)
      $.add$1$ax($.get$children$x(t2), t4.element);
    $.$indexSet$ax($.get$attributes$x(t4.element), "role", "presentation");
    $.add$1$ax($.get$classes$x(t4.element), "divider");
    t2 = this.workbench.actionMap;
    t2 = this.createMenuItem$1(t2.$index(t2, "edit-gotoLine"));
    $.add$1$ax($.get$children$x(editMenu.ulElement), t2.element);
    t3.push(t2);
    t1.push(editMenu);
    editMenu.menubar = $menubar;
    $.add$1$ax($.get$children$x($menubar._liblib5$_element), editMenu.get$element());
    refactorMenu = $.BMenu$("Refactor");
    t2 = $.BMenuItem$("Rename", null);
    $.add$1$ax($.get$children$x(refactorMenu.ulElement), t2.element);
    refactorMenu._items.push(t2);
    t1.push(refactorMenu);
    refactorMenu.menubar = $menubar;
    $.add$1$ax($.get$children$x($menubar._liblib5$_element), refactorMenu.get$element());
    runMenu = $.BMenu$("Run");
    t2 = this.workbench.actionMap;
    t2 = this.createMenuItem$1(t2.$index(t2, "run-run"));
    $.add$1$ax($.get$children$x(runMenu.ulElement), t2.element);
    t3 = runMenu._items;
    t3.push(t2);
    t2 = this.workbench.actionMap;
    t2 = this.createMenuItem$1(t2.$index(t2, "run-remoteDebug"));
    $.add$1$ax($.get$children$x(runMenu.ulElement), t2.element);
    t3.push(t2);
    t1.push(runMenu);
    runMenu.menubar = $menubar;
    $.add$1$ax($.get$children$x($menubar._liblib5$_element), runMenu.get$element());
    toolsMenu = $.BMenu$("Tools");
    t2 = $.BMenuItem$("Debug: job 1", this.get$handleJob1());
    $.add$1$ax($.get$children$x(toolsMenu.ulElement), t2.element);
    t3 = toolsMenu._items;
    t3.push(t2);
    t2 = $.BMenuItem$("Debug: job 2", this.get$handleJob2());
    $.add$1$ax($.get$children$x(toolsMenu.ulElement), t2.element);
    t3.push(t2);
    t2 = toolsMenu.ulElement;
    t4 = new $.BListItem(null);
    t4.element = $.document().createElement("li");
    if (t2 != null)
      $.add$1$ax($.get$children$x(t2), t4.element);
    $.$indexSet$ax($.get$attributes$x(t4.element), "role", "presentation");
    $.add$1$ax($.get$classes$x(t4.element), "divider");
    t2 = $.BMenuItem$("Debug: alert info", new $.Webitor_createMenubar_closure(this));
    $.add$1$ax($.get$children$x(toolsMenu.ulElement), t2.element);
    t3.push(t2);
    t2 = $.BMenuItem$("Debug: alert success", new $.Webitor_createMenubar_closure0(this));
    $.add$1$ax($.get$children$x(toolsMenu.ulElement), t2.element);
    t3.push(t2);
    t2 = $.BMenuItem$("Debug: alert warning", new $.Webitor_createMenubar_closure1(this));
    $.add$1$ax($.get$children$x(toolsMenu.ulElement), t2.element);
    t3.push(t2);
    t2 = $.BMenuItem$("Debug: alert error", new $.Webitor_createMenubar_closure2(this));
    $.add$1$ax($.get$children$x(toolsMenu.ulElement), t2.element);
    t3.push(t2);
    t2 = toolsMenu.ulElement;
    t4 = new $.BListItem(null);
    t4.element = $.document().createElement("li");
    if (t2 != null)
      $.add$1$ax($.get$children$x(t2), t4.element);
    $.$indexSet$ax($.get$attributes$x(t4.element), "role", "presentation");
    $.add$1$ax($.get$classes$x(t4.element), "divider");
    t2 = $.BMenuItem$("Debug: Analyze", this.get$handleAnalyze());
    $.add$1$ax($.get$children$x(toolsMenu.ulElement), t2.element);
    t3.push(t2);
    t2 = toolsMenu.ulElement;
    t4 = new $.BListItem(null);
    t4.element = $.document().createElement("li");
    if (t2 != null)
      $.add$1$ax($.get$children$x(t2), t4.element);
    $.$indexSet$ax($.get$attributes$x(t4.element), "role", "presentation");
    $.add$1$ax($.get$classes$x(t4.element), "divider");
    t2 = $.BMenuItem$("Run Tests", this.get$handleRunTests());
    $.add$1$ax($.get$children$x(toolsMenu.ulElement), t2.element);
    t3.push(t2);
    t1.push(toolsMenu);
    toolsMenu.menubar = $menubar;
    $.add$1$ax($.get$children$x($menubar._liblib5$_element), toolsMenu.get$element());
  },
  "+createMenubar:0:0": 0,
  createToolbar$0: function() {
    var t1, $toolbar, ul, t2, li, wrenchButton;
    t1 = this.workbench.titleArea;
    t1.get$toolbar;
    $toolbar = t1._toolbar;
    ul = new $.BUnorderedList(null);
    ul.element = document.createElement("ul");
    $.add$1$ax($.get$classes$x(ul.element), "nav");
    $.add$1$ax($.get$classes$x(ul.element), "pull-right");
    t1 = ul.element;
    t2 = $.get$children$x($toolbar.container);
    t2.add$1(t2, t1);
    li = new $.BListItem(null);
    li.element = document.createElement("li");
    $.add$1$ax($.get$children$x(ul.element), li.element);
    t1 = new $.BInputElement(null);
    t1.element = $.InputElement_InputElement(null);
    $.add$1$ax($.get$classes$x(t1.element), "search-query");
    $.add$1$ax($.get$classes$x(t1.element), "navbar-search");
    $.$indexSet$ax($.get$attributes$x(t1.element), "type", "text");
    $.$indexSet$ax($.get$attributes$x(t1.element), "placeholder", "Search");
    this.searchBox = li.add$1(li, t1).get$element();
    $.get$onChange$x(this.searchBox).listen$1(new $.Webitor_createToolbar_closure(this));
    t1 = new $.BListItem(null);
    t1.element = document.createElement("li");
    $.add$1$ax($.get$classes$x(t1.element), "divider-vertical");
    $.add$1$ax($.get$children$x(ul.element), t1.element);
    li = new $.BListItem(null);
    li.element = document.createElement("li");
    $.add$1$ax($.get$children$x(ul.element), li.element);
    t1 = new $.BButton(null);
    t1.element = document.createElement("button");
    $.add$1$ax($.get$classes$x(t1.element), "btn");
    $.$indexSet$ax($.get$attributes$x(t1.element), "type", "button");
    $.add$1$ax($.get$classes$x(t1.element), "btn-mini");
    wrenchButton = li.add$1(li, t1);
    t1 = new $.BImage(null);
    t1.element = $.ImageElement_ImageElement(null, null, null);
    $.interceptedTypeCast(t1.element, "$isImageElement").src = "images/icons/tools.png";
    $.add$1$ax(wrenchButton, t1);
    this.createPreferencesPopover$1(wrenchButton.get$element());
  },
  "+createToolbar:0:0": 0,
  createAboutPopover$1: function(relativeTo) {
    var appName, appDescription, version, t1, t2;
    $.get$i18n();
    $._enterScopeIfNeeded();
    appName = $._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$i18n().getMessage$1("app_name");
    $.get$i18n();
    $._enterScopeIfNeeded();
    appDescription = $._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$i18n().getMessage$1("app_description");
    version = $.$index$asx($.Runtime_getManifest(), "version");
    this.aboutPopover = $.BPopover$(relativeTo, true, "bottom");
    t1 = this.aboutPopover;
    t1.setTitle$1;
    $.set$innerHtml$x(t1._titleElement, "About");
    t1 = this.aboutPopover;
    t1.get$contentElement;
    $.set$innerHtml$x(t1._contentElement, "<div class=\"media\">\n  <a class=\"pull-left\">\n    <img class=\"media-object\" src=\"images/webitor.png\" width=\"64\" height=\"64\">\n  </a>\n  <div class=\"media-body\">\n    <h4 class=\"media-heading\">" + $.S(appName) + "</h4>\n    <p>" + $.S(appDescription) + "<br>version " + $.S(version) + "</p>\n  </div>\n  <hr>\n  <p class=\"text-center\">Application is up to date.</p>\n</div>\n");
    relativeTo.get$onClick;
    t1 = new $._EventStream(relativeTo, $.EventStreamProvider_click._eventType, false);
    t1.$builtinTypeInfo = [null];
    t2 = $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0);
    t1 = new $._EventStreamSubscription(0, t1._liblib3$_target, t1._eventType, new $.Webitor_createAboutPopover_closure(this), t1._useCapture);
    t1.$builtinTypeInfo = [t2];
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._liblib3$_target, t1._eventType, t2, t1._useCapture);
  },
  "+createAboutPopover:1:0": 0,
  createPreferencesPopover$1: function(relativeTo) {
    var t1, t2;
    t1 = {};
    this.preferencesPopover = $.BPopover$(relativeTo, false, "bottom");
    t2 = this.preferencesPopover;
    t2.setTitle$1;
    $.set$innerHtml$x(t2._titleElement, "Settings");
    t2 = this.preferencesPopover;
    t2.set$width;
    $.set$width$x($.get$style$x(t2._mainElement), "30em");
    t1.form_1 = null;
    $.get$onClick$x(relativeTo).listen$1(new $.Webitor_createPreferencesPopover_closure(t1, this));
  },
  "+createPreferencesPopover:1:0": 0,
  handleAnalyze$1: function($event) {
    var t1, editor;
    t1 = this.workbench._editorManager;
    t1.get$activeEditor;
    editor = t1._activeEditor;
    if (typeof editor === "object" && editor !== null && !!$.getInterceptor(editor).$isTextEditorPart)
      $.analysisParseString(editor.get$contents(), editor.get$file(editor)).then$1(new $.Webitor_handleAnalyze_closure(this));
  },
  "+handleAnalyze:1:0": 0,
  get$handleAnalyze: function() {
    return new $.BoundClosure$1(this, "handleAnalyze$1", null);
  },
  handleRunTests$1: function($event) {
    var t1, handler, t2;
    t1 = this.workbench;
    if ($._testsDefined === true) {
      $._uncaughtErrorMessage = null;
      $._initialized = true;
      $.runTests();
    } else {
      t1 = new $.WorkbenchTestConfiguration(t1, null, "Configuration", true, true, true, $.List_List($, null));
      handler = new $._ExpectFailureHandler(t1);
      handler.DefaultFailureHandler$0();
      $._assertFailureHandler = handler;
      t2 = $._config;
      if (t2 !== t1) {
        if (t2 != null)
          $.throwExpression(new $.StateError("unittestConfiguration has already been set"));
        $._config = t1;
      }
      $.main();
      $._testsDefined = true;
    }
  },
  "+handleRunTests:1:0": 0,
  get$handleRunTests: function() {
    return new $.BoundClosure$1(this, "handleRunTests$1", null);
  },
  handleJob1$1: function($event) {
    var t1, t2;
    t1 = this.workbench.jobManager;
    t2 = "Test job " + $.S($.TestJob__count);
    $.TestJob__count = $.$add$ns($.TestJob__count, 1);
    t1._waitingJobs.push(new $.TestJob(false, t2));
    if (t1._runningJob == null)
      t1._scheduleNextJob$0();
  },
  "+handleJob1:1:0": 0,
  get$handleJob1: function() {
    return new $.BoundClosure$1(this, "handleJob1$1", null);
  },
  handleJob2$1: function($event) {
    var t1, t2;
    t1 = this.workbench.jobManager;
    t2 = "Test job " + $.S($.TestJob__count);
    $.TestJob__count = $.$add$ns($.TestJob__count, 1);
    t1._waitingJobs.push(new $.TestJob(true, t2));
    if (t1._runningJob == null)
      t1._scheduleNextJob$0();
  },
  "+handleJob2:1:0": 0,
  get$handleJob2: function() {
    return new $.BoundClosure$1(this, "handleJob2$1", null);
  },
  createMenuItem$1: function(action) {
    var t1, menuItem, t2, t3, t4;
    t1 = $.getInterceptor$x(action);
    menuItem = $.BMenuItem$(t1.get$name(action), new $.Webitor_createMenuItem_closure(action));
    t2 = action.get$binding();
    if (t2 != null) {
      t2 = "&nbsp;&nbsp;&nbsp;&nbsp;" + $.S(t2.getDescription$0());
      t3 = menuItem._a;
      t4 = new $.BSpan(null);
      t4.element = $._ElementFactoryProvider_createElement_tag("span");
      if (t3 != null)
        $.add$1$ax($.get$children$x(t3), t4.element);
      $.set$innerHtml$x(t4.element, t2);
      $.add$1$ax($.get$classes$x(t4.element), "pull-right");
    }
    t2 = action.get$enabled();
    if (!$.$eq(t2, $.contains$1$asx($.get$classes$x(menuItem.element), "disabled") !== true)) {
      t3 = menuItem.element;
      if (t2 === true)
        $.remove$1$ax($.get$classes$x(t3), "disabled");
      else
        $.add$1$ax($.get$classes$x(t3), "disabled");
    }
    t1.get$onChange(action).listen$1(new $.Webitor_createMenuItem_closure0(action, menuItem));
    return menuItem;
  },
  "+createMenuItem:1:0": 0,
  _handleWindowClosed$0: function() {
  },
  "+_handleWindowClosed:0:0": 0,
  get$_handleWindowClosed: function() {
    return new $.BoundClosure$0(this, "_handleWindowClosed$0", null);
  },
  Webitor$0: function() {
    this.workbench = $.Workbench$instantiate(document.querySelector("body"));
    $.get$i18n();
    $._enterScopeIfNeeded();
    var t1 = $._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$i18n().getMessage$1("app_name");
    document.querySelector("#brand").textContent = t1;
    t1 = document;
    $.get$i18n();
    $._enterScopeIfNeeded();
    t1.title = $._deserialize($._jsPortSync.callSync$1([])).get$chrome().get$i18n().getMessage$1("app_name");
    this.preferences.init$0();
    this.workbench.titleArea.get$brandElement;
    this.createAboutPopover$1(document.querySelector("a.brand"));
    this.createActions$0();
    this.createMenubar$0();
    this.createToolbar$0();
    $.get$app().window.onClosed$1(this.get$_handleWindowClosed());
  }
},

"+Webitor": 0,

Webitor_createMenubar_closure: {
  "": function Webitor_createMenubar_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1, t2;
    t1 = this.this_0.get$workbench().get$messageArea();
    t1.showInfoAlert$2;
    t1 = t1.get$_messageElement();
    t2 = new $.BAlert(null, null, null);
    t2.element = $.document().createElement("div");
    $.add$1$ax($.get$classes$x(t2.element), "alert");
    if (t1 != null)
      $.add$1$ax($.get$children$x(t1), t2.element);
    t1 = new $.BElement(null);
    t1.element = $.Element_Element$tag("strong");
    t1.setParent$1(null);
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t2._titleSpan = t1.element;
    t1 = new $.BSpan(null);
    t1.element = $.Element_Element$tag("span");
    t1.setParent$1(null);
    t1.innerHtml$1(t1, "&nbsp;");
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t1 = new $.BSpan(null);
    t1.element = $.Element_Element$tag("span");
    t1.setParent$1(null);
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t2._messageSpan = t1.element;
    $.set$innerHtml$x(t2._titleSpan, "Alert!");
    $.set$innerHtml$x(t2._messageSpan, "info level message");
    $.add$1$ax($.get$classes$x(t2.element), "alert-info");
    t2.closeButton$0();
  },
  $isFunction: true
},

"+Webitor_createMenubar_closure": 0,

Webitor_createMenubar_closure0: {
  "": function Webitor_createMenubar_closure(this_1) {
    this.this_1 = this_1;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1, t2;
    t1 = this.this_1.get$workbench().get$messageArea();
    t1.showSuccessAlert$2;
    t1 = t1.get$_messageElement();
    t2 = new $.BAlert(null, null, null);
    t2.element = $.document().createElement("div");
    $.add$1$ax($.get$classes$x(t2.element), "alert");
    if (t1 != null)
      $.add$1$ax($.get$children$x(t1), t2.element);
    t1 = new $.BElement(null);
    t1.element = $.Element_Element$tag("strong");
    t1.setParent$1(null);
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t2._titleSpan = t1.element;
    t1 = new $.BSpan(null);
    t1.element = $.Element_Element$tag("span");
    t1.setParent$1(null);
    t1.innerHtml$1(t1, "&nbsp;");
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t1 = new $.BSpan(null);
    t1.element = $.Element_Element$tag("span");
    t1.setParent$1(null);
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t2._messageSpan = t1.element;
    $.set$innerHtml$x(t2._titleSpan, "Alert!");
    $.set$innerHtml$x(t2._messageSpan, "success level message");
    $.add$1$ax($.get$classes$x(t2.element), "alert-success");
    t2.closeButton$0();
  },
  $isFunction: true
},

"+Webitor_createMenubar_closure": 0,

Webitor_createMenubar_closure1: {
  "": function Webitor_createMenubar_closure(this_2) {
    this.this_2 = this_2;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1, t2;
    t1 = this.this_2.get$workbench().get$messageArea();
    t1.showWarningAlert$2;
    t1 = t1.get$_messageElement();
    t2 = new $.BAlert(null, null, null);
    t2.element = $.document().createElement("div");
    $.add$1$ax($.get$classes$x(t2.element), "alert");
    if (t1 != null)
      $.add$1$ax($.get$children$x(t1), t2.element);
    t1 = new $.BElement(null);
    t1.element = $.Element_Element$tag("strong");
    t1.setParent$1(null);
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t2._titleSpan = t1.element;
    t1 = new $.BSpan(null);
    t1.element = $.Element_Element$tag("span");
    t1.setParent$1(null);
    t1.innerHtml$1(t1, "&nbsp;");
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t1 = new $.BSpan(null);
    t1.element = $.Element_Element$tag("span");
    t1.setParent$1(null);
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t2._messageSpan = t1.element;
    $.set$innerHtml$x(t2._titleSpan, "Alert!");
    $.set$innerHtml$x(t2._messageSpan, "warning level message");
    t1 = new $.BCloseButton(null);
    t1.element = $.ButtonElement_ButtonElement();
    t1.clazz$1("btn");
    t1.type$1(t1, "button");
    t1.setParent$1(null);
    $.remove$1$ax($.get$classes$x(t1.element), "btn");
    t1.close$0(t1);
    t1.innerHtml$1(t1, "&times;");
    $.get$onClick$x(t1.element).listen$1(t1.get$_liblib5$_close());
    $.add$1$ax($.get$children$x(t2.element), t1.element);
  },
  $isFunction: true
},

"+Webitor_createMenubar_closure": 0,

Webitor_createMenubar_closure2: {
  "": function Webitor_createMenubar_closure(this_3) {
    this.this_3 = this_3;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1, t2;
    t1 = this.this_3.get$workbench().get$messageArea();
    t1.showErrorAlert$2;
    t1 = t1.get$_messageElement();
    t2 = new $.BAlert(null, null, null);
    t2.element = $.document().createElement("div");
    $.add$1$ax($.get$classes$x(t2.element), "alert");
    if (t1 != null)
      $.add$1$ax($.get$children$x(t1), t2.element);
    t1 = new $.BElement(null);
    t1.element = $.Element_Element$tag("strong");
    t1.setParent$1(null);
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t2._titleSpan = t1.element;
    t1 = new $.BSpan(null);
    t1.element = $.Element_Element$tag("span");
    t1.setParent$1(null);
    t1.innerHtml$1(t1, "&nbsp;");
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t1 = new $.BSpan(null);
    t1.element = $.Element_Element$tag("span");
    t1.setParent$1(null);
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t2._messageSpan = t1.element;
    $.set$innerHtml$x(t2._titleSpan, "Alert!");
    $.set$innerHtml$x(t2._messageSpan, "error level message");
    $.add$1$ax($.get$classes$x(t2.element), "alert-error");
    t2.closeButton$0();
  },
  $isFunction: true
},

"+Webitor_createMenubar_closure": 0,

Webitor_createToolbar_closure: {
  "": function Webitor_createToolbar_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function($event) {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = t1.get$workbench().get$messageArea();
    t1 = $.get$value$x(t1.get$searchBox());
    t2.showWarningAlert$2;
    t2 = t2.get$_messageElement();
    t3 = new $.BAlert(null, null, null);
    t3.element = $.document().createElement("div");
    $.add$1$ax($.get$classes$x(t3.element), "alert");
    if (t2 != null)
      $.add$1$ax($.get$children$x(t2), t3.element);
    t2 = new $.BElement(null);
    t2.element = $.Element_Element$tag("strong");
    t2.setParent$1(null);
    $.add$1$ax($.get$children$x(t3.element), t2.element);
    t3._titleSpan = t2.element;
    t2 = new $.BSpan(null);
    t2.element = $.Element_Element$tag("span");
    t2.setParent$1(null);
    t2.innerHtml$1(t2, "&nbsp;");
    $.add$1$ax($.get$children$x(t3.element), t2.element);
    t2 = new $.BSpan(null);
    t2.element = $.Element_Element$tag("span");
    t2.setParent$1(null);
    $.add$1$ax($.get$children$x(t3.element), t2.element);
    t3._messageSpan = t2.element;
    $.set$innerHtml$x(t3._titleSpan, "TODO: search");
    $.set$innerHtml$x(t3._messageSpan, t1);
    t1 = new $.BCloseButton(null);
    t1.element = $.ButtonElement_ButtonElement();
    t1.clazz$1("btn");
    t1.type$1(t1, "button");
    t1.setParent$1(null);
    $.remove$1$ax($.get$classes$x(t1.element), "btn");
    t1.close$0(t1);
    t1.innerHtml$1(t1, "&times;");
    $.get$onClick$x(t1.element).listen$1(t1.get$_liblib5$_close());
    $.add$1$ax($.get$children$x(t3.element), t1.element);
  },
  $isFunction: true
},

"+Webitor_createToolbar_closure": 0,

Webitor_createAboutPopover_closure: {
  "": function Webitor_createAboutPopover_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1 = this.this_0.get$aboutPopover();
    t1.toggleVisibility$0;
    if ($.contains$1$asx($.get$classes$x(t1.get$_mainElement()), "show") === true)
      $.remove$1$ax($.get$classes$x(t1.get$_mainElement()), "show");
    else
      $.show$0$x(t1);
  },
  $isFunction: true
},

"+Webitor_createAboutPopover_closure": 0,

Webitor_createPreferencesPopover_closure: {
  "": function Webitor_createPreferencesPopover_closure(box_1, this_2) {
    this.box_1 = box_1;
    this.this_2 = this_2;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1, t2, t3, t4, form, fieldSet, label, checkbox, bootstrapSelect, str, aceSelect;
    t1 = {};
    t2 = this.box_1;
    if (t2.form_1 == null) {
      t3 = this.this_2;
      t4 = t3.get$preferencesPopover();
      t4.get$contentElement;
      t4 = t4.get$_contentElement();
      form = new $.BForm(null);
      form.element = document.createElement("form");
      if (t4 != null)
        $.add$1$ax($.get$children$x(t4), form.element);
      t2.form_1 = form;
      fieldSet = new $.BFieldset(null);
      fieldSet.element = document.createElement("fieldset");
      t4 = new $.BElement(null);
      t4.element = document.createElement("legend");
      $.set$innerHtml$x(t4.element, "Editing");
      $.add$1$ax($.get$children$x(fieldSet.element), t4.element);
      t4 = t2.form_1;
      t4.add$1;
      $.add$1$ax($.get$children$x(t4.element), fieldSet.element);
      t1.checkbox_0 = null;
      label = new $.BElement(null);
      label.element = document.createElement("label");
      $.add$1$ax($.get$classes$x(label.element), "checkbox");
      $.set$text$x(label.element, "Show print margin");
      checkbox = new $.BInputElement(null);
      checkbox.element = $.InputElement_InputElement(null);
      $.$indexSet$ax($.get$attributes$x(checkbox.element), "type", "checkbox");
      $.add$1$ax($.get$children$x(label.element), checkbox.element);
      t1.checkbox_0 = checkbox;
      $.set$checked$x(t1.checkbox_0, t3.get$preferences().get$_printMargin());
      $.get$onChange$x(t1.checkbox_0.get$element()).listen$1(new $.Webitor_createPreferencesPopover__closure(t1, t3));
      $.add$1$ax($.get$children$x(fieldSet.element), label.element);
      fieldSet = new $.BFieldset(null);
      fieldSet.element = document.createElement("fieldset");
      t1 = new $.BElement(null);
      t1.element = document.createElement("legend");
      $.set$innerHtml$x(t1.element, "Themes");
      $.add$1$ax($.get$children$x(fieldSet.element), t1.element);
      t1 = t2.form_1;
      t1.add$1;
      $.add$1$ax($.get$children$x(t1.element), fieldSet.element);
      label = new $.BElement(null);
      label.element = document.createElement("label");
      $.add$1$ax($.get$classes$x(label.element), "checkbox");
      $.set$text$x(label.element, "Application: ");
      bootstrapSelect = new $.BSelect(null);
      bootstrapSelect.element = document.createElement("select");
      $.add$1$ax($.get$children$x(label.element), bootstrapSelect.element);
      for (t1 = $.get$iterator$ax($.get$bootstrapManager().getThemes$0()); t1.moveNext$0() === true;) {
        str = t1.get$current();
        bootstrapSelect.createOption$2(str, $.$eq(str, t3.get$preferences().get$_bootstrapTheme()));
      }
      $.get$onChange$x(bootstrapSelect.element).listen$1(new $.Webitor_createPreferencesPopover__closure0(t3, bootstrapSelect));
      $.add$1$ax($.get$children$x(fieldSet.element), label.element);
      label = new $.BElement(null);
      label.element = document.createElement("label");
      $.add$1$ax($.get$classes$x(label.element), "checkbox");
      $.set$text$x(label.element, "Editor: ");
      aceSelect = new $.BSelect(null);
      aceSelect.element = document.createElement("select");
      $.add$1$ax($.get$children$x(label.element), aceSelect.element);
      for (t1 = $.get$iterator$ax(t3.get$workbench().get$_liblib8$_aceEditor().getThemes$0()); t1.moveNext$0() === true;) {
        str = t1.get$current();
        aceSelect.createOption$2(str, $.$eq(str, t3.get$preferences().get$_aceTheme()));
      }
      $.get$onChange$x(aceSelect.element).listen$1(new $.Webitor_createPreferencesPopover__closure1(t3, aceSelect));
      $.add$1$ax($.get$children$x(fieldSet.element), label.element);
    }
    t1 = this.this_2.get$preferencesPopover();
    t1.toggleVisibility$0;
    if ($.contains$1$asx($.get$classes$x(t1.get$_mainElement()), "show") === true)
      $.remove$1$ax($.get$classes$x(t1.get$_mainElement()), "show");
    else
      $.show$0$x(t1);
  },
  $isFunction: true
},

"+Webitor_createPreferencesPopover_closure": 0,

Webitor_createPreferencesPopover__closure: {
  "": function Webitor_createPreferencesPopover__closure(box_0, this_3) {
    this.box_0 = box_0;
    this.this_3 = this_3;
  },
  "super": "Closure",
  call$1: function(_) {
    this.this_3.get$preferences().set$showPrintMargin($.get$checked$x(this.box_0.checkbox_0));
  },
  $isFunction: true
},

"+Webitor_createPreferencesPopover__closure": 0,

Webitor_createPreferencesPopover__closure0: {
  "": function Webitor_createPreferencesPopover__closure(this_4, bootstrapSelect_5) {
    this.this_4 = this_4;
    this.bootstrapSelect_5 = bootstrapSelect_5;
  },
  "super": "Closure",
  call$1: function(_) {
    this.this_4.get$preferences().set$bootstrapTheme(this.bootstrapSelect_5.getSelectedItem$0());
  },
  $isFunction: true
},

"+Webitor_createPreferencesPopover__closure": 0,

Webitor_createPreferencesPopover__closure1: {
  "": function Webitor_createPreferencesPopover__closure(this_6, aceSelect_7) {
    this.this_6 = this_6;
    this.aceSelect_7 = aceSelect_7;
  },
  "super": "Closure",
  call$1: function(_) {
    this.this_6.get$preferences().set$aceTheme(this.aceSelect_7.getSelectedItem$0());
  },
  $isFunction: true
},

"+Webitor_createPreferencesPopover__closure": 0,

Webitor_handleAnalyze_closure: {
  "": function Webitor_handleAnalyze_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(result) {
    var t1, t2, error;
    for (t1 = $.get$iterator$ax(result.get$errors()), t2 = this.this_0; t1.moveNext$0() === true;) {
      error = t1.get$current();
      $.append$1$x(t2.get$workbench().get$_consoleView(), $.toString$0(error));
    }
  },
  $isFunction: true
},

"+Webitor_handleAnalyze_closure": 0,

Webitor_createMenuItem_closure: {
  "": function Webitor_createMenuItem_closure(action_0) {
    this.action_0 = action_0;
  },
  "super": "Closure",
  call$1: function($event) {
    var t1 = this.action_0;
    if (t1.get$enabled() === true)
      t1.invoke$0();
  },
  $isFunction: true
},

"+Webitor_createMenuItem_closure": 0,

Webitor_createMenuItem_closure0: {
  "": function Webitor_createMenuItem_closure(action_1, menuItem_2) {
    this.action_1 = action_1;
    this.menuItem_2 = menuItem_2;
  },
  "super": "Closure",
  call$1: function($event) {
    var t1, t2;
    t1 = this.menuItem_2;
    t2 = this.action_1.get$enabled();
    if (!$.$eq(t2, $.contains$1$asx($.get$classes$x(t1.element), "disabled") !== true)) {
      t1 = t1.element;
      if (t2 === true)
        $.remove$1$ax($.get$classes$x(t1), "disabled");
      else
        $.add$1$ax($.get$classes$x(t1), "disabled");
    }
  },
  $isFunction: true
},

"+Webitor_createMenuItem_closure": 0,

WebitorPreferences: {
  "": function WebitorPreferences(PRINT_MARGIN, ACE_THEME, BOOTSTRAP_THEME, _printMargin, _aceTheme, _bootstrapTheme) {
    this.PRINT_MARGIN = PRINT_MARGIN;
    this.ACE_THEME = ACE_THEME;
    this.BOOTSTRAP_THEME = BOOTSTRAP_THEME;
    this._printMargin = _printMargin;
    this._aceTheme = _aceTheme;
    this._bootstrapTheme = _bootstrapTheme;
  },
  "super": "Object",
  get$PRINT_MARGIN: function() {
    return this.PRINT_MARGIN;
  },
  get$ACE_THEME: function() {
    return this.ACE_THEME;
  },
  get$BOOTSTRAP_THEME: function() {
    return this.BOOTSTRAP_THEME;
  },
  get$_printMargin: function() {
    return this._printMargin;
  },
  set$_printMargin: function(v) {
    this._printMargin = v;
  },
  get$_aceTheme: function() {
    return this._aceTheme;
  },
  set$_aceTheme: function(v) {
    this._aceTheme = v;
  },
  get$_bootstrapTheme: function() {
    return this._bootstrapTheme;
  },
  set$_bootstrapTheme: function(v) {
    this._bootstrapTheme = v;
  },
  init$0: function() {
    $.workbench.get$prefsSync;
    $.get$chromePrefsSync().getValue$1(this.PRINT_MARGIN).then$1(new $.WebitorPreferences_init_closure(this));
    $.workbench.get$prefsSync;
    $.get$chromePrefsSync().getValue$1(this.ACE_THEME).then$1(new $.WebitorPreferences_init_closure0(this));
    $.workbench.get$prefsSync;
    $.get$chromePrefsSync().getValue$1(this.BOOTSTRAP_THEME).then$1(new $.WebitorPreferences_init_closure1(this));
  },
  "+init:0:0": 0,
  set$showPrintMargin: function(value) {
    var t1;
    if (!$.$eq(this._printMargin, value)) {
      this._printMargin = value;
      $.workbench.get$prefsSync;
      $.get$chromePrefsSync().setValue$2(this.PRINT_MARGIN, $.toString$0(value));
    }
    t1 = $.workbench;
    t1.get$aceEditor;
    t1 = t1._liblib8$_aceEditor;
    t1.getShowPrintMargin$0;
    if (!$.$eq(t1._aceEditor.getShowPrintMargin$0(), value)) {
      t1 = $.workbench;
      t1.get$aceEditor;
      t1 = t1._liblib8$_aceEditor;
      t1.setShowPrintMargin$1;
      t1._aceEditor.setShowPrintMargin$1(value);
    }
  },
  set$aceTheme: function(theme) {
    var t1;
    if (!$.$eq(this._aceTheme, theme)) {
      this._aceTheme = theme;
      $.workbench.get$prefsSync;
      $.get$chromePrefsSync().setValue$2(this.ACE_THEME, theme);
    }
    t1 = $.workbench;
    t1.get$aceEditor;
    t1 = t1._liblib8$_aceEditor;
    t1.getTheme$0;
    if (!$.$eq(t1._aceEditor.getTheme$0(), theme)) {
      t1 = $.workbench;
      t1.get$aceEditor;
      t1 = t1._liblib8$_aceEditor;
      t1.setTheme$1;
      t1._aceEditor.setTheme$1(theme);
    }
  },
  set$bootstrapTheme: function(theme) {
    var t1;
    if (!$.$eq(this._bootstrapTheme, theme)) {
      this._bootstrapTheme = theme;
      $.workbench.get$prefsSync;
      $.get$chromePrefsSync().setValue$2(this.BOOTSTRAP_THEME, theme);
    }
    $.get$bootstrapManager();
    t1 = $.interceptedTypeCast(document.querySelector("#bootstrapTheme"), "$isLinkElement").href;
    if (t1 == null ? theme != null : t1 !== theme) {
      $.get$bootstrapManager();
      $.interceptedTypeCast(document.querySelector("#bootstrapTheme"), "$isLinkElement").href = theme;
    }
  }
},

"+WebitorPreferences": 0,

WebitorPreferences_init_closure: {
  "": function WebitorPreferences_init_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(str) {
    var t1 = str == null ? true : "true" === str;
    this.this_0.set$showPrintMargin(t1);
  },
  $isFunction: true
},

"+WebitorPreferences_init_closure": 0,

WebitorPreferences_init_closure0: {
  "": function WebitorPreferences_init_closure(this_1) {
    this.this_1 = this_1;
  },
  "super": "Closure",
  call$1: function(str) {
    var t1;
    if (str == null) {
      t1 = $.workbench;
      t1.get$aceEditor;
      t1 = t1._liblib8$_aceEditor;
      t1.getTheme$0;
      t1 = t1._aceEditor.getTheme$0();
    } else
      t1 = str;
    this.this_1.set$aceTheme(t1);
  },
  $isFunction: true
},

"+WebitorPreferences_init_closure": 0,

WebitorPreferences_init_closure1: {
  "": function WebitorPreferences_init_closure(this_2) {
    this.this_2 = this_2;
  },
  "super": "Closure",
  call$1: function(str) {
    var t1;
    if (str == null) {
      $.get$bootstrapManager();
      t1 = $.interceptedTypeCast(document.querySelector("#bootstrapTheme"), "$isLinkElement").href;
    } else
      t1 = str;
    this.this_2.set$bootstrapTheme(t1);
  },
  $isFunction: true
},

"+WebitorPreferences_init_closure": 0,

FileNewAction: {
  "": function FileNewAction(workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "WorkbenchAction",
  invoke$0: function() {
    var t1, t2;
    t1 = $.workbench;
    t2 = $.AceEditorPart$(t1, null);
    t1.addEditor$1;
    t1._editorManager.addEditor$1(t2);
  }
},

"+FileNewAction": 0,

FileOpenAction: {
  "": function FileOpenAction(workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "WorkbenchAction",
  invoke$0: function() {
    $.get$fileSystem().chooseOpenFile$0().then$1(new $.FileOpenAction_invoke_closure());
  }
},

"+FileOpenAction": 0,

FileOpenAction_invoke_closure: {
  "": function FileOpenAction_invoke_closure() {
  },
  "super": "Closure",
  call$1: function(file) {
    var t1, t2;
    if (file != null) {
      t1 = $.workbench;
      t2 = $.AceEditorPart$(t1, file);
      t1.addEditor$1;
      t1._editorManager.addEditor$1(t2);
    }
  },
  $isFunction: true
},

"+FileOpenAction_invoke_closure": 0,

FileSaveAction: {
  "": function FileSaveAction(workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "EditorAction",
  invokeEditor$1: function(editor) {
    editor.save$0();
  },
  "+invokeEditor:1:0": 0
},

"+FileSaveAction": 0,

FileSaveAllAction: {
  "": function FileSaveAllAction(workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "EditorAction",
  updateEnabled$0: function() {
    var t1, t2, t3;
    t1 = $.workbench;
    t1.getEditors$0;
    t1 = $.IterableMixinWorkaround_any(t1._editorManager.editors, new $.FileSaveAllAction_updateEnabled_closure());
    if (this._enabled !== t1) {
      this._enabled = t1;
      t1 = this.streamController;
      t2 = t1._state;
      if ((t2 & 2) !== 0)
        $.throwExpression(new $.StateError("Adding event after close"));
      if (t1._subscription != null)
        t1._sendData$1(this);
      else if ((t2 & 1) === 0) {
        t2 = $.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0);
        t3 = new $._DelayedData(this, null);
        t3.$builtinTypeInfo = [t2];
        t1._addPendingEvent$1(t3);
      }
    }
  },
  invoke$0: function() {
    var t1, editors, t2;
    t1 = $.workbench;
    t1.getEditors$0;
    t1 = t1._editorManager.editors;
    editors = $.List_List$from(t1, true, $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0));
    t1 = $.getRuntimeTypeArgument(editors, editors.$asJSArray, 0);
    t2 = new $.ListIterator(editors, $.get$length$asx(editors), 0, null);
    t2.$builtinTypeInfo = [t1];
    for (; t2.moveNext$0();)
      t2._liblib$_current.save$0();
  }
},

"+FileSaveAllAction": 0,

FileSaveAllAction_updateEnabled_closure: {
  "": function FileSaveAllAction_updateEnabled_closure() {
  },
  "super": "Closure",
  call$1: function(part) {
    return part.get$dirty();
  },
  $isFunction: true
},

"+FileSaveAllAction_updateEnabled_closure": 0,

EditNextTabAction: {
  "": function EditNextTabAction(workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "WorkbenchAction",
  updateEnabled$0: function() {
    var t1, t2, t3;
    t1 = $.workbench;
    t1.getEditors$0;
    t1 = t1._editorManager.editors.length > 1;
    if (this._enabled !== t1) {
      this._enabled = t1;
      t1 = this.streamController;
      t2 = t1._state;
      if ((t2 & 2) !== 0)
        $.throwExpression(new $.StateError("Adding event after close"));
      if (t1._subscription != null)
        t1._sendData$1(this);
      else if ((t2 & 1) === 0) {
        t2 = $.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0);
        t3 = new $._DelayedData(this, null);
        t3.$builtinTypeInfo = [t2];
        t1._addPendingEvent$1(t3);
      }
    }
  },
  invoke$0: function() {
    var t1 = $.workbench;
    t1.selectNextTab$0;
    t1._editorManager.selectNextTab$0();
  }
},

"+EditNextTabAction": 0,

EditPrevTabAction: {
  "": function EditPrevTabAction(workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "WorkbenchAction",
  updateEnabled$0: function() {
    var t1, t2, t3;
    t1 = $.workbench;
    t1.getEditors$0;
    t1 = t1._editorManager.editors.length > 1;
    if (this._enabled !== t1) {
      this._enabled = t1;
      t1 = this.streamController;
      t2 = t1._state;
      if ((t2 & 2) !== 0)
        $.throwExpression(new $.StateError("Adding event after close"));
      if (t1._subscription != null)
        t1._sendData$1(this);
      else if ((t2 & 1) === 0) {
        t2 = $.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0);
        t3 = new $._DelayedData(this, null);
        t3.$builtinTypeInfo = [t2];
        t1._addPendingEvent$1(t3);
      }
    }
  },
  invoke$0: function() {
    var t1 = $.workbench;
    t1.selectPreviousTab$0;
    t1._editorManager.selectPreviousTab$0();
  }
},

"+EditPrevTabAction": 0,

EditGotoLineAction: {
  "": function EditGotoLineAction(workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "EditorAction",
  invokeEditor$1: function(editor) {
    var t1, $alert, form, textField;
    t1 = new $.BAlert(null, null, null);
    t1.element = document.createElement("div");
    $.add$1$ax($.get$classes$x(t1.element), "alert");
    $.add$1$ax($.get$classes$x(t1.element), "alert-info");
    $alert = t1.closeButton$0();
    t1 = new $.BForm(null);
    t1.element = document.createElement("form");
    $.add$1$ax($.get$classes$x(t1.element), "form-inline");
    form = t1.compact$0();
    t1 = new $.BElement(null);
    t1.element = document.createElement("strong");
    $.set$innerHtml$x(t1.element, "Goto line");
    $.add$1$ax($.get$children$x(form.element), t1.element);
    t1 = new $.BSpan(null);
    t1.element = document.createElement("span");
    $.set$innerHtml$x(t1.element, "&nbsp;");
    $.add$1$ax($.get$children$x(form.element), t1.element);
    textField = new $.BInputElement(null);
    textField.element = $.InputElement_InputElement(null);
    $.$indexSet$ax($.get$attributes$x(textField.element), "type", "text");
    $.add$1$ax($.get$children$x(form.element), textField.element);
    $.add$1$ax($.get$children$x($alert.element), form.element);
    $.get$onKeyPress$x(textField.element).listen$1(new $.EditGotoLineAction_invokeEditor_closure(editor, $alert, textField));
    t1 = $.workbench.messageArea;
    t1.add$1;
    t1 = $.get$children$x(t1._messageElement);
    t1.add$1(t1, $alert.element);
    $.focus$0$x(textField.element);
  }
},

"+EditGotoLineAction": 0,

EditGotoLineAction_invokeEditor_closure: {
  "": function EditGotoLineAction_invokeEditor_closure(editor_0, alert_1, textField_2) {
    this.editor_0 = editor_0;
    this.alert_1 = alert_1;
    this.textField_2 = textField_2;
  },
  "super": "Closure",
  call$1: function($event) {
    var line, t1, line0, t2, exception;
    t1 = $.getInterceptor$x($event);
    if ($.$eq(t1.get$keyCode($event), 27)) {
      t1.preventDefault$0($event);
      t1 = this.alert_1;
      $.remove$1$ax($.get$children$x($.get$parent$x(t1.element)), t1.element);
    } else if ($.$eq(t1.get$keyCode($event), 13)) {
      t1.preventDefault$0($event);
      try {
        line0 = $.Primitives_parseInt($.get$value$x(this.textField_2), null, null);
        line = line0;
        t1 = this.editor_0;
        t2 = this.alert_1;
        if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isTextEditorPart) {
          $.propertyTypeCast(t1, "$isTextEditorPart").gotoLine$1(line);
          $.remove$1$ax($.get$children$x($.get$parent$x(t2.element)), t2.element);
        } else
          t2.flash$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFormatException)
          this.alert_1.flash$0();
        else
          throw exception;
      }

    }
  },
  $isFunction: true
},

"+EditGotoLineAction_invokeEditor_closure": 0,

FileCloseAction: {
  "": function FileCloseAction(workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "EditorAction",
  invokeEditor$1: function(editor) {
    $.close$0$x(editor);
  }
},

"+FileCloseAction": 0,

FileCloseAllAction: {
  "": function FileCloseAllAction(workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "WorkbenchAction",
  updateEnabled$0: function() {
    var t1, t2, t3;
    t1 = $.workbench;
    t1.getEditors$0;
    t1 = t1._editorManager.editors.length !== 0;
    if (this._enabled !== t1) {
      this._enabled = t1;
      t1 = this.streamController;
      t2 = t1._state;
      if ((t2 & 2) !== 0)
        $.throwExpression(new $.StateError("Adding event after close"));
      if (t1._subscription != null)
        t1._sendData$1(this);
      else if ((t2 & 1) === 0) {
        t2 = $.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0);
        t3 = new $._DelayedData(this, null);
        t3.$builtinTypeInfo = [t2];
        t1._addPendingEvent$1(t3);
      }
    }
  },
  invoke$0: function() {
    var t1, editors, t2;
    t1 = $.workbench;
    t1.getEditors$0;
    t1 = t1._editorManager.editors;
    editors = $.List_List$from(t1, true, $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0));
    t1 = $.getRuntimeTypeArgument(editors, editors.$asJSArray, 0);
    t2 = new $.ListIterator(editors, $.get$length$asx(editors), 0, null);
    t2.$builtinTypeInfo = [t1];
    for (; t2.moveNext$0();)
      $.close$0$x(t2._liblib$_current);
  }
},

"+FileCloseAllAction": 0,

FileExitAction: {
  "": function FileExitAction(workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "WorkbenchAction",
  invoke$0: function() {
    $.close$0$x($.get$app().window.current$0());
  }
},

"+FileExitAction": 0,

RunRunAction: {
  "": function RunRunAction(workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "WorkbenchAction",
  invoke$0: function() {
    var t1, editor;
    t1 = $.workbench;
    t1.getActiveEditor$0;
    t1 = t1._editorManager;
    t1.get$activeEditor;
    editor = t1._activeEditor;
    if (editor != null && $.endsWith$1$s($.get$name$x(editor), ".html") === true)
      $.get$app().window.create$3$bounds$id("launch_page.html", new $.Bounds(null, null, 600, 800), "runWindow").then$1(new $.RunRunAction_invoke_closure());
    else
      $.beep();
  }
},

"+RunRunAction": 0,

RunRunAction_invoke_closure: {
  "": function RunRunAction_invoke_closure() {
  },
  "super": "Closure",
  call$1: function($window) {
  },
  $isFunction: true
},

"+RunRunAction_invoke_closure": 0,

RemoteDebugAction: {
  "": function RemoteDebugAction(workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "WorkbenchAction",
  invoke$0: function() {
    var t1, t2;
    t1 = $.workbench.messageArea;
    t1.showInfoAlert$2;
    t1 = t1._messageElement;
    t2 = new $.BAlert(null, null, null);
    t2.element = $.document().createElement("div");
    $.add$1$ax($.get$classes$x(t2.element), "alert");
    if (t1 != null) {
      t1 = $.get$children$x(t1);
      t1.add$1(t1, t2.element);
    }
    t1 = new $.BElement(null);
    t1.element = $.Element_Element$tag("strong");
    t1.setParent$1(null);
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t2._titleSpan = t1.element;
    t1 = new $.BSpan(null);
    t1.element = $.Element_Element$tag("span");
    t1.setParent$1(null);
    t1.innerHtml$1(t1, "&nbsp;");
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t1 = new $.BSpan(null);
    t1.element = $.Element_Element$tag("span");
    t1.setParent$1(null);
    $.add$1$ax($.get$children$x(t2.element), t1.element);
    t2._messageSpan = t1.element;
    $.set$innerHtml$x(t2._titleSpan, "TODO:");
    $.set$innerHtml$x(t2._messageSpan, "remote debug dialog");
    $.add$1$ax($.get$classes$x(t2.element), "alert-info");
    t2.closeButton$0();
  }
},

"+RemoteDebugAction": 0,

GlobalSearchAction: {
  "": function GlobalSearchAction(webitor, workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.webitor = webitor;
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "WorkbenchAction",
  get$webitor: function() {
    return this.webitor;
  },
  set$webitor: function(v) {
    this.webitor = v;
  },
  invoke$0: function() {
    $.focus$0$x(this.webitor.searchBox);
  }
},

"+GlobalSearchAction": 0,

TestJob: {
  "": function TestJob(indeterminate, name) {
    this.indeterminate = indeterminate;
    this.name = name;
  },
  "super": "Job",
  get$indeterminate: function(receiver) {
    return this.indeterminate;
  },
  set$indeterminate: function(receiver, v) {
    this.indeterminate = v;
  },
  run$1: function(monitor) {
    var t1, t2, t3, completer, futureImpl, t4;
    t1 = {};
    t2 = null;
    t3 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t3.$builtinTypeInfo = [t2];
    completer = new $._AsyncCompleter(t3, false);
    completer.$builtinTypeInfo = [t2];
    futureImpl = completer.future;
    t2 = futureImpl._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t2 = this.indeterminate ? 0 : 4;
    $.ProgressMonitor.prototype.start$2.call(monitor, monitor, this.name, t2);
    t2 = monitor.manager;
    t3 = t2._liblib23$_streamController;
    t2 = new $.JobManagerEvent(t2, monitor.job, null, null, $.$eq(monitor._maxWork, 0), $.$div$n(monitor._work, monitor._maxWork));
    t4 = t3._state;
    if ((t4 & 2) !== 0)
      $.throwExpression(new $.StateError("Adding event after close"));
    if (t3._subscription != null)
      t3._sendData$1(t2);
    else if ((t4 & 1) === 0) {
      t2 = new $._DelayedData(t2, null);
      $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t3, t3.$as_StreamController, 0)]);
      t3._addPendingEvent$1(t2);
    }
    t1.count_0 = 0;
    t2 = $.Duration$(0, 0, 0, 0, 0, 1);
    t1 = new $._PeriodicZoneTimer($.get$_Zone__current(), new $.TestJob_run_closure(t1, this, monitor, completer), null, false);
    t1._zone.expectCallback$0();
    t1._timer = $._createPeriodicTimer(t2, t1.get$_run());
    return futureImpl;
  }
},

"+TestJob": 0,

TestJob_run_closure: {
  "": function TestJob_run_closure(box_0, this_1, monitor_2, completer_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.monitor_2 = monitor_2;
    this.completer_3 = completer_3;
  },
  "super": "Closure",
  call$1: function(timer) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.monitor_2;
    $.ProgressMonitor.prototype.worked$1.call(t1, 1);
    t2 = t1.manager;
    t3 = t1.job;
    t4 = t2._liblib23$_streamController;
    t5 = new $.JobManagerEvent(t2, t3, null, null, $.$eq(t1._maxWork, 0), $.$div$n(t1._work, t1._maxWork));
    t6 = t4._state;
    if ((t6 & 2) !== 0)
      $.throwExpression(new $.StateError("Adding event after close"));
    if (t4._subscription != null)
      t4._sendData$1(t5);
    else if ((t6 & 1) === 0) {
      t5 = new $._DelayedData(t5, null);
      $.setRuntimeTypeInfo(t5, [$.getRuntimeTypeArgument(t4, t4.$as_StreamController, 0)]);
      t4._addPendingEvent$1(t5);
    }
    t5 = this.box_0;
    t5.count_0 = $.$add$ns(t5.count_0, 1);
    if ($.$gt$n(t5.count_0, 4) === true) {
      timer.cancel$0();
      $.ProgressMonitor.prototype.done$0.call(t1);
      t1 = new $.JobManagerEvent(t2, t3, null, null, $.$eq(t1._maxWork, 0), $.$div$n(t1._work, t1._maxWork));
      t2 = t4._state;
      if ((t2 & 2) !== 0)
        $.throwExpression(new $.StateError("Adding event after close"));
      if (t4._subscription != null)
        t4._sendData$1(t1);
      else if ((t2 & 1) === 0) {
        t1 = new $._DelayedData(t1, null);
        $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeArgument(t4, t4.$as_StreamController, 0)]);
        t4._addPendingEvent$1(t1);
      }
      t1 = this.completer_3;
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t2 = t1.future._zone;
      t2._openCallbacks = t2._openCallbacks - 1;
      if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      t1._setFutureValue$1(this.this_1);
    }
  },
  $isFunction: true
},

"+TestJob_run_closure": 0,

main8: function() {
  $.Webitor$();
},

Webitor$: function() {
  var t1 = new $.Webitor(null, null, null, null, new $.WebitorPreferences("printMargin", "aceTheme", "boostrapTheme", null, null, null));
  t1.Webitor$0();
  return t1;
},

"+new Webitor:0:0": 0}],
["widgets", "../lib/widgets.dart", , {
Action: {
  "": function Action(streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "Object",
  get$streamController: function() {
    return this.streamController;
  },
  set$streamController: function(v) {
    this.streamController = v;
  },
  get$_liblib7$_stream: function() {
    return this._liblib7$_stream;
  },
  set$_liblib7$_stream: function(v) {
    this._liblib7$_stream = v;
  },
  get$id: function(receiver) {
    return this.id;
  },
  set$id: function(receiver, v) {
    this.id = v;
  },
  get$name: function(receiver) {
    return this.name;
  },
  set$name: function(receiver, v) {
    this.name = v;
  },
  get$_enabled: function() {
    return this._enabled;
  },
  set$_enabled: function(v) {
    this._enabled = v;
  },
  get$binding: function() {
    return this.binding;
  },
  set$binding: function(v) {
    this.binding = v;
  },
  invoke$0: function() {
  },
  get$enabled: function() {
    return this._enabled;
  },
  matches$1: function(_, $event) {
    var t1 = this.binding;
    return t1 == null ? false : t1.matches$1(t1, $event);
  },
  get$onChange: function(_) {
    return this._liblib7$_stream;
  },
  toString$0: function(_) {
    return "Action: " + this.name;
  }
},

"+Action": 0,

KeyBinding: {
  "": function KeyBinding(modifiers, keyCode) {
    this.modifiers = modifiers;
    this.keyCode = keyCode;
  },
  "super": "Object",
  get$modifiers: function() {
    return this.modifiers;
  },
  set$modifiers: function(v) {
    this.modifiers = v;
  },
  get$keyCode: function(receiver) {
    return this.keyCode;
  },
  set$keyCode: function(receiver, v) {
    this.keyCode = v;
  },
  matches$1: function(_, $event) {
    var t1, t2;
    t1 = $.getInterceptor$x($event);
    if (!$.$eq(t1.get$keyCode($event), this.keyCode))
      return false;
    t2 = this.modifiers;
    if (!$.$eq(t1.get$ctrlKey($event), t2.contains$1(t2, 17)))
      return false;
    if (!$.$eq(t1.get$metaKey($event), t2.contains$1(t2, 91)))
      return false;
    if (!$.$eq(t1.get$altKey($event), t2.contains$1(t2, 18)))
      return false;
    if (!$.$eq(t1.get$shiftKey($event), t2.contains$1(t2, 16)))
      return false;
    return true;
  },
  getDescription$0: function() {
    var desc, t1;
    desc = $.List_List($, $.JSString);
    desc.$builtinTypeInfo = [$.JSString];
    t1 = this.modifiers;
    if (t1.contains$1(t1, 17))
      desc.push(this._descriptionOf$1(17));
    if (t1.contains$1(t1, 91))
      desc.push(this._descriptionOf$1(91));
    if (t1.contains$1(t1, 18))
      desc.push(this._descriptionOf$1(18));
    if (t1.contains$1(t1, 16))
      desc.push(this._descriptionOf$1(16));
    desc.push(this._descriptionOf$1(this.keyCode));
    return $.JSArray_methods.join$1(desc, "+");
  },
  _codeFor$1: function(str) {
    var t1 = $.get$_bindingMap();
    if (t1.$index(t1, str) != null) {
      t1 = $.get$_bindingMap();
      return t1.$index(t1, str);
    }
    return $.codeUnitAt$1$s(str, 0);
  },
  "+_codeFor:1:0": 0,
  _descriptionOf$1: function(code) {
    var str, t1, t2, t3, key, charCodes;
    if (typeof code !== "number")
      return this._descriptionOf$1$bailout(1, code);
    str = window.navigator.platform;
    if ($.JSString_methods.indexOf$1(str != null ? $.toLowerCase$0$s(str) : "", "mac") !== -1 && code === 91)
      return "Cmd";
    if (code === 91)
      return "Meta";
    if (code === 17)
      return "Ctrl";
    t1 = $.get$_bindingMap();
    t2 = $.getRuntimeTypeArgument(t1, t1.$asLinkedHashMap, 0);
    t1 = new $.LinkedHashMapKeyIterable(t1);
    t1.$builtinTypeInfo = [t2];
    t2 = t1._map;
    t3 = t2._modifications;
    t1 = $.getRuntimeTypeArgument(t1, t1.$asLinkedHashMapKeyIterable, 0);
    t3 = new $.LinkedHashMapKeyIterator(t2, t3, null, null);
    t3.$builtinTypeInfo = [t1];
    t3._cell = t3._map._first;
    for (; t3.moveNext$0();) {
      key = t3._liblib0$_current;
      t1 = $.get$_bindingMap();
      if (code === t1.$index(t1, key))
        return $.toTitleCase(key);
    }
    charCodes = $.List_List$filled(1, code, $.JSInt);
    charCodes.$builtinTypeInfo = [$.JSInt];
    return $.Primitives_stringFromCharCodes(charCodes);
  },
  "+_descriptionOf:1:0": 0,
  _descriptionOf$1$bailout: function(state0, code) {
    var str, t1, t2, t3, t4, key, charCodes;
    str = window.navigator.platform;
    if ($.JSString_methods.indexOf$1(str != null ? $.toLowerCase$0$s(str) : "", "mac") !== -1 && $.$eq(code, 91))
      return "Cmd";
    t1 = $.getInterceptor(code);
    if (t1.$eq(code, 91))
      return "Meta";
    if (t1.$eq(code, 17))
      return "Ctrl";
    t2 = $.get$_bindingMap();
    t3 = $.getRuntimeTypeArgument(t2, t2.$asLinkedHashMap, 0);
    t2 = new $.LinkedHashMapKeyIterable(t2);
    t2.$builtinTypeInfo = [t3];
    t3 = t2._map;
    t4 = t3._modifications;
    t2 = $.getRuntimeTypeArgument(t2, t2.$asLinkedHashMapKeyIterable, 0);
    t4 = new $.LinkedHashMapKeyIterator(t3, t4, null, null);
    t4.$builtinTypeInfo = [t2];
    t4._cell = t4._map._first;
    for (; t4.moveNext$0();) {
      key = t4._liblib0$_current;
      t2 = $.get$_bindingMap();
      if (t1.$eq(code, t2.$index(t2, key)))
        return $.toTitleCase(key);
    }
    charCodes = $.List_List$filled(1, code, $.JSInt);
    charCodes.$builtinTypeInfo = [$.JSInt];
    return $.Primitives_stringFromCharCodes(charCodes);
  },
  KeyBinding$1: function(str) {
    var codes, t1, t2;
    codes = str.toUpperCase().split("-");
    t1 = codes.length - 1;
    $.IterableMixinWorkaround__rangeCheck(codes, 0, t1);
    t1 = $.SubListIterable$(codes, 0, t1, null);
    t2 = $.getRuntimeTypeArgument(t1, t1.$asListIterable, 0);
    t1 = new $.ListIterator(t1, t1.get$length(t1), 0, null);
    t1.$builtinTypeInfo = [t2];
    t2 = this.modifiers;
    for (; t1.moveNext$0();)
      t2.add$1(t2, this._codeFor$1(t1._liblib$_current));
    t1 = codes.length;
    t2 = t1 - 1;
    if (t2 < 0)
      throw $.ioore(t2);
    this.keyCode = this._codeFor$1(codes[t2]);
  }
},

"+KeyBinding": 0,

FlexLayoutContainer: {
  "": function FlexLayoutContainer() {
  },
  "super": "Object"
},

"+FlexLayoutContainer": 0,

FlexLayoutChild: {
  "": function FlexLayoutChild() {
  },
  "super": "Object"
},

"+FlexLayoutChild": 0,

YesNoDialog: {
  "": function YesNoDialog(_completer, _titleSpan, _messageSpan, element) {
    this._completer = _completer;
    this._titleSpan = _titleSpan;
    this._messageSpan = _messageSpan;
    this.element = element;
  },
  "super": "BAlert",
  get$_completer: function() {
    return this._completer;
  },
  set$_completer: function(v) {
    this._completer = v;
  },
  YesNoDialog$3: function(dialogTitle, dialogMessage, buttonText) {
    var t1, closeButton, t2, count, text, button;
    t1 = new $.BElement(null);
    t1.element = $._ElementFactoryProvider_createElement_tag("strong");
    $.add$1$ax($.get$children$x(this.element), t1.element);
    this._titleSpan = t1.element;
    t1 = new $.BSpan(null);
    t1.element = $._ElementFactoryProvider_createElement_tag("span");
    $.set$innerHtml$x(t1.element, "&nbsp;");
    $.add$1$ax($.get$children$x(this.element), t1.element);
    t1 = new $.BSpan(null);
    t1.element = $._ElementFactoryProvider_createElement_tag("span");
    $.add$1$ax($.get$children$x(this.element), t1.element);
    this._messageSpan = t1.element;
    $.add$1$ax($.get$classes$x(this.element), "alert-info");
    $.set$innerHtml$x(this._titleSpan, dialogTitle);
    $.set$innerHtml$x(this._messageSpan, dialogMessage);
    closeButton = new $.BElement(null);
    closeButton.element = document.createElement("a");
    $.add$1$ax($.get$classes$x(closeButton.element), "close");
    $.set$innerHtml$x(closeButton.element, "&times;");
    $.add$1$ax($.get$children$x(this.element), closeButton.element);
    $.get$onClick$x(closeButton.element).listen$1(new $.YesNoDialog_closure(this));
    t1 = $.getRuntimeTypeArgument(buttonText, buttonText.$asJSArray, 0);
    t2 = new $.ListIterator(buttonText, buttonText.length, 0, null);
    t2.$builtinTypeInfo = [t1];
    count = 0;
    for (; t2.moveNext$0();) {
      text = t2._liblib$_current;
      t1 = new $.BSpan(null);
      t1.element = document.createElement("span");
      $.set$innerHtml$x(t1.element, "&nbsp;");
      $.add$1$ax($.get$children$x(this.element), t1.element);
      button = new $.BButton(null);
      button.element = document.createElement("button");
      $.add$1$ax($.get$classes$x(button.element), "btn");
      $.$indexSet$ax($.get$attributes$x(button.element), "type", "button");
      $.set$text$x(button.element, text);
      if (count === 0)
        button.buttonPrimary$0();
      $.get$onClick$x(button.element).listen$1(new $.YesNoDialog_closure0(this, count));
      $.add$1$ax($.get$children$x(this.element), button.element);
      ++count;
    }
  }
},

"+YesNoDialog": 0,

YesNoDialog_closure: {
  "": function YesNoDialog_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1, t2, t3;
    t1 = this.this_0;
    $.remove$1$ax($.get$children$x($.get$parent$x(t1.get$element())), t1.get$element());
    t1 = t1.get$_completer();
    if (t1.get$_isComplete() === true)
      $.throwExpression(new $.StateError("Future already completed"));
    t1.set$_isComplete(true);
    t2 = t1.get$future().get$_zone();
    t3 = t2.get$_openCallbacks();
    if (typeof t3 !== "number")
      throw t3.$sub();
    t2.set$_openCallbacks(t3 - 1);
    if (t2.get$_isExecutingCallback() !== true && $.$eq(t2.get$_openCallbacks(), 0) && $.$eq($.get$length$asx($.get$_children$x(t2)), 0)) {
      t3 = t2.get$_parentZone();
      if (t3 != null)
        t3._removeChild$1(t2);
    }
    t1._setFutureValue$1(-1);
  },
  $isFunction: true
},

"+YesNoDialog_closure": 0,

YesNoDialog_closure0: {
  "": function YesNoDialog_closure(this_1, _count_2) {
    this.this_1 = this_1;
    this._count_2 = _count_2;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1, t2, t3;
    t1 = this.this_1;
    $.remove$1$ax($.get$children$x($.get$parent$x(t1.get$element())), t1.get$element());
    t1 = t1.get$_completer();
    if (t1.get$_isComplete() === true)
      $.throwExpression(new $.StateError("Future already completed"));
    t1.set$_isComplete(true);
    t2 = t1.get$future().get$_zone();
    t3 = t2.get$_openCallbacks();
    if (typeof t3 !== "number")
      throw t3.$sub();
    t2.set$_openCallbacks(t3 - 1);
    if (t2.get$_isExecutingCallback() !== true && $.$eq(t2.get$_openCallbacks(), 0) && $.$eq($.get$length$asx($.get$_children$x(t2)), 0)) {
      t3 = t2.get$_parentZone();
      if (t3 != null)
        t3._removeChild$1(t2);
    }
    t1._setFutureValue$1(this._count_2);
  },
  $isFunction: true
},

"+YesNoDialog_closure": 0,

Selection: {
  "": function Selection(selections) {
    this.selections = selections;
  },
  "super": "Object",
  get$selections: function() {
    return this.selections;
  },
  set$selections: function(v) {
    this.selections = v;
  },
  get$single: function(_) {
    var t1 = this.selections;
    return t1.length > 0 ? $.JSArray_methods.get$first(t1) : null;
  }
},

"+Selection": 0,

SelectionEvent: {
  "": function SelectionEvent(selection, doubleClick) {
    this.selection = selection;
    this.doubleClick = doubleClick;
  },
  "super": "Object",
  get$selection: function() {
    return this.selection;
  },
  get$doubleClick: function() {
    return this.doubleClick;
  }
},

"+SelectionEvent": 0,

TreeLabelProvider: {
  "": function TreeLabelProvider() {
  },
  "super": "Object",
  render$2: function(treeItem, t) {
    var t1 = $.get$children$x(treeItem.element);
    t1 = $.get$children$x(t1.get$first(t1));
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.render$2$bailout(1, t, t1);
    if (1 >= t1.length)
      throw $.ioore(1);
    $.set$text$x(t1[1], $.S(t));
  },
  "+render:2:0": 0,
  render$2$bailout: function(state0, t, t1) {
    $.set$text$x($.$index$asx(t1, 1), $.S(t));
  }
},

"+TreeLabelProvider": 0,

ContentProvider: {
  "": function ContentProvider(streamController, _liblib7$_stream) {
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
  },
  "super": "Object",
  get$streamController: function() {
    return this.streamController;
  },
  set$streamController: function(v) {
    this.streamController = v;
  },
  get$_liblib7$_stream: function() {
    return this._liblib7$_stream;
  },
  set$_liblib7$_stream: function(v) {
    this._liblib7$_stream = v;
  },
  dispose$0: function() {
  }
},

"+ContentProvider": 0,

TreeViewer: {
  "": function TreeViewer(_list, _sections, _input, _selectedItem, _streamController, labelProvider) {
    this._list = _list;
    this._sections = _sections;
    this._input = _input;
    this._selectedItem = _selectedItem;
    this._streamController = _streamController;
    this.labelProvider = labelProvider;
  },
  "super": "Object",
  get$_list: function() {
    return this._list;
  },
  set$_list: function(v) {
    this._list = v;
  },
  get$_sections: function() {
    return this._sections;
  },
  set$_sections: function(v) {
    this._sections = v;
  },
  get$_input: function() {
    return this._input;
  },
  set$_input: function(v) {
    this._input = v;
  },
  get$_selectedItem: function() {
    return this._selectedItem;
  },
  set$_selectedItem: function(v) {
    this._selectedItem = v;
  },
  get$_streamController: function() {
    return this._streamController;
  },
  set$_streamController: function(v) {
    this._streamController = v;
  },
  get$labelProvider: function() {
    return this.labelProvider;
  },
  set$labelProvider: function(v) {
    this.labelProvider = v;
  },
  setInput$1: function(input) {
    var t1, t2;
    this._input = input;
    t1 = this._sections;
    t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    for (; t1.moveNext$0();)
      t1._liblib$_current.recalc$1(input);
  },
  get$element: function() {
    return this._list.element;
  },
  _selected$2: function(item, doubleClick) {
    var t1, t2, t3;
    t1 = this._selectedItem;
    if (t1 != null) {
      t1.set$selected;
      t1 = t1.element;
      t1 = $.get$classes$x(t1);
      t1.remove$1(t1, "active");
      this._selectedItem = null;
    }
    this._selectedItem = item;
    t1 = item.element;
    t1 = $.get$classes$x(t1);
    t1.add$1(t1, "active");
    t1 = this._streamController;
    t2 = new $.Selection(null);
    t2.selections = [this._selectedItem.data];
    t2 = new $.SelectionEvent(t2, doubleClick);
    t3 = t1._state;
    if ((t3 & 2) !== 0)
      $.throwExpression(new $.StateError("Adding event after close"));
    if (t1._subscription != null)
      t1._sendData$1(t2);
    else if ((t3 & 1) === 0) {
      t3 = $.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0);
      t2 = new $._DelayedData(t2, null);
      t2.$builtinTypeInfo = [t3];
      t1._addPendingEvent$1(t2);
    }
  },
  "+_selected:1:1": 0,
  _selected$1: function(item) {
    return this._selected$2(item, null);
  },
  _handleKeyEvent$1: function($event) {
    var t1 = $.getInterceptor$x($event);
    if ($.$eq(t1.get$keyCode($event), 38))
      this._moveSelection$1(-1);
    else if ($.$eq(t1.get$keyCode($event), 40))
      this._moveSelection$1(1);
  },
  "+_handleKeyEvent:1:0": 0,
  get$_handleKeyEvent: function() {
    return new $.BoundClosure$1(this, "_handleKeyEvent$1", null);
  },
  _moveSelection$1: function(direction) {
    var index, $length;
    if (this._selectedItem == null)
      return;
    index = $.indexOf$1$asx($.get$children$x(this._list.element), this._selectedItem.element);
    $length = $.get$length$asx($.get$children$x(this._list.element));
    if (typeof $length !== "number")
      return this._moveSelection$1$bailout(1, direction, $length, index);
    index = $.$add$ns(index, direction);
    if (typeof index !== "number")
      return this._moveSelection$1$bailout(2, direction, $length, index);
    while (true) {
      if (!(index >= 0 && index < $length))
        break;
      if (!$.$eq($.get$display$x($.get$style$x($.$index$asx($.get$children$x(this._list.element), index))), "none"))
        ;
      index += direction;
    }
  },
  "+_moveSelection:1:0": 0,
  _moveSelection$1$bailout: function(state0, direction, $length, index) {
    switch (state0) {
      case 0:
        if (this._selectedItem == null)
          return;
        index = $.indexOf$1$asx($.get$children$x(this._list.element), this._selectedItem.element);
        $length = $.get$length$asx($.get$children$x(this._list.element));
      case 1:
        state0 = 0;
        index = $.$add$ns(index, direction);
      case 2:
        var t1;
        state0 = 0;
        while (true) {
          t1 = $.getInterceptor$n(index);
          if (!(t1.$ge(index, 0) === true && t1.$lt(index, $length) === true))
            break;
          if (!$.$eq($.get$display$x($.get$style$x($.$index$asx($.get$children$x(this._list.element), index))), "none"))
            ;
          index = t1.$add(index, direction);
        }
    }
  }
},

"+TreeViewer": 0,

TreeItem: {
  "": function TreeItem(element, data, _open, ul) {
    this.element = element;
    this.data = data;
    this._open = _open;
    this.ul = ul;
  },
  "super": "Object",
  get$element: function() {
    return this.element;
  },
  set$element: function(v) {
    this.element = v;
  },
  get$data: function(receiver) {
    return this.data;
  },
  set$data: function(receiver, v) {
    this.data = v;
  },
  get$_open: function() {
    return this._open;
  },
  set$_open: function(v) {
    this._open = v;
  },
  get$ul: function() {
    return this.ul;
  },
  set$ul: function(v) {
    this.ul = v;
  },
  TreeItem$0: function() {
    var t1, t2;
    this.element = document.createElement("li");
    t1 = $.get$children$x(this.element);
    t1.add$1(t1, document.createElement("a"));
    t1 = $.get$children$x(this.element);
    t1 = $.get$children$x(t1.get$first(t1));
    t2 = new $.BSpan(null);
    t2.element = document.createElement("span");
    $.set$innerHtml$x(t2.element, "\u25b8 ");
    $.add$1$ax(t1, t2.element);
    t1 = $.get$children$x(this.element);
    $.add$1$ax($.get$children$x(t1.get$first(t1)), document.createElement("span"));
    t1 = this.element;
    t1 = $.get$children$x(t1);
    $.set$visibility$x($.get$style$x($.get$first$ax($.get$children$x(t1.get$first(t1)))), "hidden");
  }
},

"+TreeItem": 0,

_TreeViewerSection: {
  "": function _TreeViewerSection(listViewer, contentProvider, start, end) {
    this.listViewer = listViewer;
    this.contentProvider = contentProvider;
    this.start = start;
    this.end = end;
  },
  "super": "Object",
  get$listViewer: function() {
    return this.listViewer;
  },
  set$listViewer: function(v) {
    this.listViewer = v;
  },
  get$contentProvider: function() {
    return this.contentProvider;
  },
  set$contentProvider: function(v) {
    this.contentProvider = v;
  },
  get$start: function(receiver) {
    return this.start;
  },
  set$start: function(receiver, v) {
    this.start = v;
  },
  get$end: function() {
    return this.end;
  },
  set$end: function(v) {
    this.end = v;
  },
  clearAll$0: function() {
    var t1, t2, startIndex, i;
    t1 = this.start;
    t2 = this.listViewer;
    startIndex = $.indexOf$1$asx($.get$children$x(t2._list.element), t1.element);
    if (typeof startIndex !== "number")
      return this.clearAll$0$bailout(1, t2, startIndex);
    t1 = this.end;
    i = $.$sub$n($.indexOf$1$asx($.get$children$x(t2._list.element), t1.element), 1);
    if (typeof i !== "number")
      return this.clearAll$0$bailout(2, t2, startIndex, i);
    for (; i > startIndex; --i)
      $.removeAt$1$ax($.get$children$x(t2._list.element), i);
  },
  "+clearAll:0:0": 0,
  clearAll$0$bailout: function(state0, t2, startIndex, i) {
    switch (state0) {
      case 0:
        t1 = this.start;
        t2 = this.listViewer;
        startIndex = $.indexOf$1$asx($.get$children$x(t2._list.element), t1.element);
      case 1:
        state0 = 0;
        t1 = this.end;
        i = $.$sub$n($.indexOf$1$asx($.get$children$x(t2._list.element), t1.element), 1);
      case 2:
        var t1;
        state0 = 0;
        for (; t1 = $.getInterceptor$n(i), t1.$gt(i, startIndex) === true; i = t1.$sub(i, 1))
          $.removeAt$1$ax($.get$children$x(t2._list.element), i);
    }
  },
  recalc$1: function(input) {
    var t1, t2, t3, item, treeItem, t4;
    this.clearAll$0();
    if (input != null) {
      t1 = this.contentProvider;
      for (t2 = $.get$iterator$ax(t1.getRoots$1(input)), t3 = this.listViewer; t2.moveNext$0() === true;) {
        item = t2.get$current();
        treeItem = this._createTreeItem$0();
        treeItem.data = item;
        t3.labelProvider.render$2(treeItem, item);
        if (t1.hasChildren$1(item)) {
          t4 = treeItem.element;
          t4 = $.get$children$x(t4);
          $.set$visibility$x($.get$style$x($.get$first$ax($.get$children$x(t4.get$first(t4)))), "inherit");
        }
      }
    }
  },
  toggleOpen$1: function(item) {
    var t1, t2, t3, child, childItem, t4;
    t1 = $.get$children$x(item.element);
    if ($.$eq($.get$visibility$x($.get$style$x($.get$first$ax($.get$children$x(t1.get$first(t1))))), "inherit")) {
      t1 = !item._open;
      item._open = t1;
      t2 = $.get$children$x(item.element);
      t2 = $.get$first$ax($.get$children$x(t2.get$first(t2)));
      $.set$text$x(t2, t1 ? "\u25be " : "\u25b8 ");
      t1 = item._open;
      t2 = item.element;
      if (!t1) {
        t1 = $.get$children$x(t2);
        t1.remove$1(t1, item.ul);
      } else {
        t1 = new $.BUnorderedList(null);
        t1.element = $._ElementFactoryProvider_createElement_tag("ul");
        if (t2 != null) {
          t2 = $.get$children$x(t2);
          t2.add$1(t2, t1.element);
        }
        $.add$1$ax($.get$classes$x(t1.element), "nav-list");
        $.add$1$ax($.get$classes$x(t1.element), "nav");
        $.add$1$ax($.get$classes$x(t1.element), "treeViewer");
        item.ul = t1.element;
        for (t1 = this.contentProvider, t2 = $.get$iterator$ax(t1.getChildren$1(item.data)), t3 = this.listViewer; t2.moveNext$0();) {
          child = t2._liblib$_current;
          childItem = this._createSubItem$1(item.ul);
          childItem.data = child;
          t3.labelProvider.render$2(childItem, child);
          if (t1.hasChildren$1(item)) {
            t4 = childItem.element;
            t4 = $.get$children$x(t4);
            $.set$visibility$x($.get$style$x($.get$first$ax($.get$children$x(t4.get$first(t4)))), "inherit");
          }
        }
      }
    }
  },
  _createTreeItem$0: function() {
    var t1, t2, index, treeItem;
    t1 = this.end;
    t2 = this.listViewer;
    index = $.indexOf$1$asx($.get$children$x(t2._list.element), t1.element);
    treeItem = $.TreeItem$();
    $.insert$2$ax($.get$children$x(t2._list.element), index, treeItem.element);
    t2 = treeItem.element;
    t2.get$onClick;
    t2 = new $._EventStream(t2, $.EventStreamProvider_click._eventType, false);
    t2.$builtinTypeInfo = [null];
    t1 = $.getRuntimeTypeArgument(t2, t2.$as_EventStream, 0);
    t2 = new $._EventStreamSubscription(0, t2._liblib3$_target, t2._eventType, new $._TreeViewerSection__createTreeItem_closure(this, treeItem), t2._useCapture);
    t2.$builtinTypeInfo = [t1];
    t1 = t2._onData;
    if (t1 != null && !t2.get$isPaused())
      $.$$dom_addEventListener$3$x(t2._liblib3$_target, t2._eventType, t1, t2._useCapture);
    t1 = treeItem.element;
    t1.get$onDoubleClick;
    t1 = new $._EventStream(t1, $.EventStreamProvider_dblclick._eventType, false);
    t1.$builtinTypeInfo = [null];
    t2 = $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0);
    t1 = new $._EventStreamSubscription(0, t1._liblib3$_target, t1._eventType, new $._TreeViewerSection__createTreeItem_closure0(this, treeItem), t1._useCapture);
    t1.$builtinTypeInfo = [t2];
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._liblib3$_target, t1._eventType, t2, t1._useCapture);
    t1 = $.get$children$x(treeItem.element);
    $.get$onClick$x($.get$first$ax($.get$children$x(t1.get$first(t1)))).listen$1(new $._TreeViewerSection__createTreeItem_closure1(this, treeItem));
    return treeItem;
  },
  "+_createTreeItem:0:0": 0,
  _createSubItem$1: function(ul) {
    var treeItem, t1, t2;
    treeItem = $.TreeItem$();
    $.add$1$ax($.get$children$x(ul), treeItem.element);
    t1 = treeItem.element;
    t1.get$onClick;
    t1 = new $._EventStream(t1, $.EventStreamProvider_click._eventType, false);
    t1.$builtinTypeInfo = [null];
    t2 = $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0);
    t1 = new $._EventStreamSubscription(0, t1._liblib3$_target, t1._eventType, new $._TreeViewerSection__createSubItem_closure(this, treeItem), t1._useCapture);
    t1.$builtinTypeInfo = [t2];
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._liblib3$_target, t1._eventType, t2, t1._useCapture);
    t1 = treeItem.element;
    t1.get$onDoubleClick;
    t1 = new $._EventStream(t1, $.EventStreamProvider_dblclick._eventType, false);
    t1.$builtinTypeInfo = [null];
    t2 = $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0);
    t1 = new $._EventStreamSubscription(0, t1._liblib3$_target, t1._eventType, new $._TreeViewerSection__createSubItem_closure0(this, treeItem), t1._useCapture);
    t1.$builtinTypeInfo = [t2];
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._liblib3$_target, t1._eventType, t2, t1._useCapture);
    t1 = $.get$children$x(treeItem.element);
    $.get$onClick$x($.get$first$ax($.get$children$x(t1.get$first(t1)))).listen$1(new $._TreeViewerSection__createSubItem_closure1(this, treeItem));
    return treeItem;
  },
  "+_createSubItem:1:0": 0
},

"+_TreeViewerSection": 0,

_TreeViewerSection__createTreeItem_closure: {
  "": function _TreeViewerSection__createTreeItem_closure(this_0, treeItem_1) {
    this.this_0 = this_0;
    this.treeItem_1 = treeItem_1;
  },
  "super": "Closure",
  call$1: function(e) {
    $.stopImmediatePropagation$0$x(e);
    this.this_0.get$listViewer()._selected$1(this.treeItem_1);
  },
  $isFunction: true
},

"+_TreeViewerSection__createTreeItem_closure": 0,

_TreeViewerSection__createTreeItem_closure0: {
  "": function _TreeViewerSection__createTreeItem_closure(this_2, treeItem_3) {
    this.this_2 = this_2;
    this.treeItem_3 = treeItem_3;
  },
  "super": "Closure",
  call$1: function(e) {
    $.stopImmediatePropagation$0$x(e);
    this.this_2.get$listViewer()._selected$2(this.treeItem_3, true);
  },
  $isFunction: true
},

"+_TreeViewerSection__createTreeItem_closure": 0,

_TreeViewerSection__createTreeItem_closure1: {
  "": function _TreeViewerSection__createTreeItem_closure(this_4, treeItem_5) {
    this.this_4 = this_4;
    this.treeItem_5 = treeItem_5;
  },
  "super": "Closure",
  call$1: function(e) {
    $.stopImmediatePropagation$0$x(e);
    this.this_4.toggleOpen$1(this.treeItem_5);
  },
  $isFunction: true
},

"+_TreeViewerSection__createTreeItem_closure": 0,

_TreeViewerSection__createSubItem_closure: {
  "": function _TreeViewerSection__createSubItem_closure(this_0, treeItem_1) {
    this.this_0 = this_0;
    this.treeItem_1 = treeItem_1;
  },
  "super": "Closure",
  call$1: function(e) {
    $.stopImmediatePropagation$0$x(e);
    this.this_0.get$listViewer()._selected$1(this.treeItem_1);
  },
  $isFunction: true
},

"+_TreeViewerSection__createSubItem_closure": 0,

_TreeViewerSection__createSubItem_closure0: {
  "": function _TreeViewerSection__createSubItem_closure(this_2, treeItem_3) {
    this.this_2 = this_2;
    this.treeItem_3 = treeItem_3;
  },
  "super": "Closure",
  call$1: function(e) {
    $.stopImmediatePropagation$0$x(e);
    this.this_2.get$listViewer()._selected$2(this.treeItem_3, true);
  },
  $isFunction: true
},

"+_TreeViewerSection__createSubItem_closure": 0,

_TreeViewerSection__createSubItem_closure1: {
  "": function _TreeViewerSection__createSubItem_closure(this_4, treeItem_5) {
    this.this_4 = this_4;
    this.treeItem_5 = treeItem_5;
  },
  "super": "Closure",
  call$1: function(e) {
    $.stopImmediatePropagation$0$x(e);
    this.this_4.toggleOpen$1(this.treeItem_5);
  },
  $isFunction: true
},

"+_TreeViewerSection__createSubItem_closure": 0,

KeyBinding$: function(str) {
  var t1 = new $.HashSet(0, null, null, null, null);
  t1.$builtinTypeInfo = [$.JSInt];
  t1 = new $.KeyBinding(t1, null);
  t1.KeyBinding$1(str);
  return t1;
},

"+new KeyBinding:1:0": 0,

YesNoDialog$: function(dialogTitle, dialogMessage, buttonText) {
  var t1, t2;
  t1 = null;
  t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
  t2.$builtinTypeInfo = [t1];
  t2 = new $._AsyncCompleter(t2, false);
  t2.$builtinTypeInfo = [t1];
  t1 = t2.future._zone;
  t1._openCallbacks = t1._openCallbacks + 1;
  t2 = new $.YesNoDialog(t2, null, null, null);
  t2.element = document.createElement("div");
  $.add$1$ax($.get$classes$x(t2.element), "alert");
  t2.YesNoDialog$3(dialogTitle, dialogMessage, buttonText);
  return t2;
},

"+new YesNoDialog:2:1": 0,

TreeItem$: function() {
  var t1 = new $.TreeItem(null, null, false, null);
  t1.TreeItem$0();
  return t1;
},

"+new TreeItem:0:0": 0}],
["workbench", "../lib/workbench.dart", , {
Workbench: {
  "": function Workbench(eventStream, _liblib8$_stream, titleArea, statusLine, leftNav, messageArea, bottomNav, _editorManager, _workspace, _filesView, _outlineView, _consoleView, _problemsView, _liblib8$_aceEditor, navigatorContainer, outlineContainer, outputContainer, actionMap, jobManager, contentManager) {
    this.eventStream = eventStream;
    this._liblib8$_stream = _liblib8$_stream;
    this.titleArea = titleArea;
    this.statusLine = statusLine;
    this.leftNav = leftNav;
    this.messageArea = messageArea;
    this.bottomNav = bottomNav;
    this._editorManager = _editorManager;
    this._workspace = _workspace;
    this._filesView = _filesView;
    this._outlineView = _outlineView;
    this._consoleView = _consoleView;
    this._problemsView = _problemsView;
    this._liblib8$_aceEditor = _liblib8$_aceEditor;
    this.navigatorContainer = navigatorContainer;
    this.outlineContainer = outlineContainer;
    this.outputContainer = outputContainer;
    this.actionMap = actionMap;
    this.jobManager = jobManager;
    this.contentManager = contentManager;
  },
  "super": "Object",
  get$eventStream: function() {
    return this.eventStream;
  },
  set$eventStream: function(v) {
    this.eventStream = v;
  },
  get$_liblib8$_stream: function() {
    return this._liblib8$_stream;
  },
  set$_liblib8$_stream: function(v) {
    this._liblib8$_stream = v;
  },
  get$titleArea: function() {
    return this.titleArea;
  },
  set$titleArea: function(v) {
    this.titleArea = v;
  },
  get$statusLine: function() {
    return this.statusLine;
  },
  set$statusLine: function(v) {
    this.statusLine = v;
  },
  get$leftNav: function() {
    return this.leftNav;
  },
  set$leftNav: function(v) {
    this.leftNav = v;
  },
  get$messageArea: function() {
    return this.messageArea;
  },
  set$messageArea: function(v) {
    this.messageArea = v;
  },
  get$bottomNav: function() {
    return this.bottomNav;
  },
  set$bottomNav: function(v) {
    this.bottomNav = v;
  },
  get$_editorManager: function() {
    return this._editorManager;
  },
  set$_editorManager: function(v) {
    this._editorManager = v;
  },
  get$_workspace: function() {
    return this._workspace;
  },
  set$_workspace: function(v) {
    this._workspace = v;
  },
  get$_filesView: function() {
    return this._filesView;
  },
  set$_filesView: function(v) {
    this._filesView = v;
  },
  get$_outlineView: function() {
    return this._outlineView;
  },
  set$_outlineView: function(v) {
    this._outlineView = v;
  },
  get$_consoleView: function() {
    return this._consoleView;
  },
  set$_consoleView: function(v) {
    this._consoleView = v;
  },
  get$_problemsView: function() {
    return this._problemsView;
  },
  set$_problemsView: function(v) {
    this._problemsView = v;
  },
  get$_liblib8$_aceEditor: function() {
    return this._liblib8$_aceEditor;
  },
  set$_liblib8$_aceEditor: function(v) {
    this._liblib8$_aceEditor = v;
  },
  get$navigatorContainer: function() {
    return this.navigatorContainer;
  },
  set$navigatorContainer: function(v) {
    this.navigatorContainer = v;
  },
  get$outlineContainer: function() {
    return this.outlineContainer;
  },
  set$outlineContainer: function(v) {
    this.outlineContainer = v;
  },
  get$outputContainer: function() {
    return this.outputContainer;
  },
  set$outputContainer: function(v) {
    this.outputContainer = v;
  },
  get$actionMap: function() {
    return this.actionMap;
  },
  set$actionMap: function(v) {
    this.actionMap = v;
  },
  get$jobManager: function() {
    return this.jobManager;
  },
  set$jobManager: function(v) {
    this.jobManager = v;
  },
  get$contentManager: function() {
    return this.contentManager;
  },
  set$contentManager: function(v) {
    this.contentManager = v;
  },
  get$onChange: function(_) {
    return this._liblib8$_stream;
  },
  get$aceEditor: function() {
    return this._liblib8$_aceEditor;
  },
  _liblib8$_handleKeyEvent$1: function($event) {
    var t1, t2, t3, t4, t5, action;
    t1 = $.getInterceptor$x($event);
    if (t1.get$altKey($event) !== true && t1.get$ctrlKey($event) !== true && t1.get$metaKey($event) !== true)
      return;
    t2 = this.actionMap;
    t2 = t2.get$values(t2);
    t3 = t2._iterable;
    t3 = t3.get$iterator(t3);
    t4 = $.getRuntimeTypeArgument(t2, t2.$asMappedIterable, 0);
    t5 = $.getRuntimeTypeArgument(t2, t2.$asMappedIterable, 1);
    t2 = new $.MappedIterator(null, t3, t2._f);
    t2.$builtinTypeInfo = [t4, t5];
    for (; t2.moveNext$0();) {
      action = t2._liblib$_current;
      if ($.matches$1$x(action, $event) === true) {
        t1.preventDefault$0($event);
        if (action.get$enabled() === true)
          action.invoke$0();
      }
    }
  },
  get$_liblib8$_handleKeyEvent: function() {
    return new $.BoundClosure$1(this, "_liblib8$_handleKeyEvent$1", null);
  },
  _initializeWorkspace$0: function() {
    var t1, t2;
    t1 = $.get$fileSystemManager();
    t1 = t1._fileSystems;
    t1.$indexSet(t1, "sdk", $.get$sdkFileSystem());
    t1 = new $.Workspace([], null);
    t1._store = $.get$chromePrefsLocal();
    this._workspace = t1;
    t1 = this._workspace;
    t1.initialize$0;
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [null];
    t2._state = 4;
    t2._resultOrListeners = t1;
    t2.then$1(new $.Workbench__initializeWorkspace_closure(this));
  },
  "+_initializeWorkspace:0:0": 0,
  _initJobsListener$0: function() {
    this.jobManager._liblib23$_stream.listen$1(new $.Workbench__initJobsListener_closure(this));
  },
  "+_initJobsListener:0:0": 0,
  _initDefaultContentTypes$0: function() {
    var t1 = this.contentManager;
    t1.register$1(t1, new $.DefaultContentHandler("css", ["css"]));
    t1.register$1(t1, new $.DefaultContentHandler("dart", ["dart"]));
    t1.register$1(t1, new $.DefaultContentHandler("html", ["html"]));
    t1.register$1(t1, new $.DefaultContentHandler("javascript", ["javascript"]));
    t1.register$1(t1, new $.DefaultContentHandler("json", ["json"]));
    t1.register$1(t1, new $.DefaultContentHandler("less", ["less"]));
    t1.register$1(t1, new $.DefaultContentHandler("markdown", ["md"]));
    t1.register$1(t1, new $.DefaultContentHandler("text", ["txt", "text"]));
    t1.register$1(t1, new $.DefaultContentHandler("xml", ["xml"]));
    t1.register$1(t1, new $.DefaultContentHandler("yaml", ["yaml"]));
  },
  "+_initDefaultContentTypes:0:0": 0,
  Workbench$instantiate$1: function(body) {
    var t1, t2, t3, t4;
    $.workbench = this;
    this._liblib8$_stream = this.eventStream._stream.asBroadcastStream$0();
    this._initializeWorkspace$0();
    t1 = new $.TitleArea(null, null, null);
    t1._header = document.querySelector("header");
    t2 = new $.Toolbar(null);
    t2.container = $.query("#toolbar");
    t1._toolbar = t2;
    t2 = $.List_List($, $.BMenu);
    t2.$builtinTypeInfo = [$.BMenu];
    t2 = new $.BMenubar(null, t2);
    t2._liblib5$_element = $.BUnorderedList$(null).nav$0().element;
    t1._menubar = t2;
    t2 = t1._toolbar;
    t3 = t1._menubar._liblib5$_element;
    t2 = $.get$children$x(t2.container);
    t2.add$1(t2, t3);
    this.titleArea = t1;
    this.navigatorContainer = $.ViewPartContainer$(this, document.querySelector("#leftNav"));
    t1 = new $.MessageArea(null);
    t1._messageElement = document.querySelector("#messageArea");
    this.messageArea = t1;
    document.querySelector("#editorArea");
    t1 = new $.Expando(null);
    t1.$builtinTypeInfo = [$.BTab];
    t2 = $.List_List($, $.EditorPart);
    t2.$builtinTypeInfo = [$.EditorPart];
    t1 = new $._EditorManager(this, null, t1, t2, null);
    t1.tabContainer = $.BTabContainer$(document.querySelector("#editorArea"));
    t1.tabContainer.listeners.push(t1);
    this._editorManager = t1;
    this.outlineContainer = $.ViewPartContainer$(this, document.querySelector("#rightNav"));
    this.outputContainer = $.ViewPartContainer$(this, document.querySelector("#bottomNav"));
    $.get$FlexLayout_child();
    t1 = document.querySelector("#bottomNav").style;
    t1.set$minHeight;
    $.setProperty$3$x(t1, "min-height", "10em", "");
    this.statusLine = $.StatusLine$(body);
    this._initJobsListener$0();
    this._initDefaultContentTypes$0();
    t1 = this.navigatorContainer;
    t2 = $.workbench;
    t3 = $.WorkbenchPartEvent;
    t3 = t3;
    t4 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t4.$builtinTypeInfo = [t3];
    t4._stream = $._ControllerStream$(t4, t3);
    t3 = t4;
    t2 = new $.FilesView(null, null, t3, t2, null, null, null);
    t2._liblib8$_stream = t2.eventStream._stream.asBroadcastStream$0();
    t2._liblib8$_name = "Files";
    this._filesView = t1.add$1(t1, t2);
    t2 = this.outlineContainer;
    t1 = $.workbench;
    t3 = $.WorkbenchPartEvent;
    t3 = t3;
    t4 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t4.$builtinTypeInfo = [t3];
    t4._stream = $._ControllerStream$(t4, t3);
    t3 = t4;
    t1 = new $.OutlineView(null, null, null, null, t3, t1, null, null, null);
    t1._liblib8$_stream = t1.eventStream._stream.asBroadcastStream$0();
    t1._liblib8$_name = "Outline";
    this._outlineView = t2.add$1(t2, t1);
    t1 = this.outputContainer;
    t2 = $.workbench;
    t3 = $.WorkbenchPartEvent;
    t3 = t3;
    t4 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t4.$builtinTypeInfo = [t3];
    t4._stream = $._ControllerStream$(t4, t3);
    t3 = t4;
    t2 = new $.ProblemsView(null, t3, t2, null, null, null);
    t2._liblib8$_stream = t2.eventStream._stream.asBroadcastStream$0();
    t2._liblib8$_name = "Problems";
    this._problemsView = t1.add$1(t1, t2);
    t2 = this.outputContainer;
    t1 = $.workbench;
    t3 = $.WorkbenchPartEvent;
    t3 = t3;
    t4 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t4.$builtinTypeInfo = [t3];
    t4._stream = $._ControllerStream$(t4, t3);
    t3 = t4;
    t1 = new $.ConsoleView(null, t3, t1, null, null, null);
    t1._liblib8$_stream = t1.eventStream._stream.asBroadcastStream$0();
    t1._liblib8$_name = "Output";
    this._consoleView = t2.add$1(t2, t1);
    this._liblib8$_aceEditor = $.AceEditor$(this._editorManager.tabContainer);
    t1 = new $._EventStream(document, $.EventStreamProvider_keydown._eventType, false);
    t1.$builtinTypeInfo = [null];
    t2 = this.get$_liblib8$_handleKeyEvent();
    t3 = $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0);
    t1 = new $._EventStreamSubscription(0, t1._liblib3$_target, t1._eventType, t2, t1._useCapture);
    t1.$builtinTypeInfo = [t3];
    t2 = t1._onData;
    if (t2 != null && !t1.get$isPaused())
      $.$$dom_addEventListener$3$x(t1._liblib3$_target, t1._eventType, t2, t1._useCapture);
  }
},

"+Workbench": 0,

Workbench__initializeWorkspace_closure: {
  "": function Workbench__initializeWorkspace_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(workspace) {
    if ($.get$isEmpty$asx(workspace.getChildren$0()) === true)
      this.this_0.get$_workspace().link$1($.get$sdkFileSystem()._root);
  },
  $isFunction: true
},

"+Workbench__initializeWorkspace_closure": 0,

Workbench__initJobsListener_closure: {
  "": function Workbench__initJobsListener_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(e) {
    var t1, t2, t3;
    if (e.get$started() === true) {
      t1 = this.this_0;
      t2 = t1.get$statusLine();
      t3 = $.$add$ns($.get$name$x(e.get$job()), "...");
      t2.setStatus$1;
      $.text$1$x($.get$statusText$x(t2), t3);
      t1.get$statusLine().get$progress().setIndeterminate$1(false);
      $.set$value$x(t1.get$statusLine().get$progress(), 0);
      $.visibility$1$x($.get$statusText$x(t1.get$statusLine()), true);
      $.visibility$1$x(t1.get$statusLine().get$progress(), true);
    } else if (e.get$finished() === true) {
      t1 = this.this_0;
      t2 = t1.get$statusLine();
      t2.clearStatus$0;
      $.innerHtml$1$x($.get$statusText$x(t2), "&nbsp;");
      $.visibility$1$x($.get$statusText$x(t1.get$statusLine()), false);
      $.visibility$1$x(t1.get$statusLine().get$progress(), false);
    } else {
      t1 = this.this_0;
      if ($.get$indeterminate$x(e) === true)
        t1.get$statusLine().get$progress().setIndeterminate$1(true);
      else
        $.set$value$x(t1.get$statusLine().get$progress(), $.toInt$0$nx($.$mul$n(e.get$progress(), 100)));
    }
  },
  $isFunction: true
},

"+Workbench__initJobsListener_closure": 0,

WorkbenchAction: {
  "": function WorkbenchAction(workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "Action",
  get$workbench: function() {
    return this.workbench;
  },
  set$workbench: function(v) {
    this.workbench = v;
  },
  updateEnabled$0: function() {
  },
  WorkbenchAction$3: function(workbench, id, $name) {
    this.workbench._liblib8$_stream.listen$1(new $.WorkbenchAction_closure(this));
    this.updateEnabled$0();
  }
},

"+WorkbenchAction": 0,

WorkbenchAction_closure: {
  "": function WorkbenchAction_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function($event) {
    this.this_0.updateEnabled$0();
  },
  $isFunction: true
},

"+WorkbenchAction_closure": 0,

WorkbenchEvent: {
  "": function WorkbenchEvent() {
  },
  "super": "Object"
},

"+WorkbenchEvent": 0,

EditorAction: {
  "": function EditorAction(workbench, streamController, _liblib7$_stream, id, name, _enabled, binding) {
    this.workbench = workbench;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
    this.id = id;
    this.name = name;
    this._enabled = _enabled;
    this.binding = binding;
  },
  "super": "WorkbenchAction",
  invoke$0: function() {
    var t1, editor;
    t1 = $.workbench;
    t1.getActiveEditor$0;
    t1 = t1._editorManager;
    t1.get$activeEditor;
    editor = t1._activeEditor;
    if (editor != null)
      this.invokeEditor$1(editor);
  },
  invokeEditor$1: function(editor) {
  },
  updateEnabled$0: function() {
    var t1, t2, t3;
    t1 = $.workbench;
    t1.getActiveEditor$0;
    t1 = t1._editorManager;
    t1.get$activeEditor;
    t1 = t1._activeEditor != null;
    if (this._enabled !== t1) {
      this._enabled = t1;
      t1 = this.streamController;
      t2 = t1._state;
      if ((t2 & 2) !== 0)
        $.throwExpression(new $.StateError("Adding event after close"));
      if (t1._subscription != null)
        t1._sendData$1(this);
      else if ((t2 & 1) === 0) {
        t2 = $.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0);
        t3 = new $._DelayedData(this, null);
        t3.$builtinTypeInfo = [t2];
        t1._addPendingEvent$1(t3);
      }
    }
  }
},

"+EditorAction": 0,

_EditorManager: {
  "": function _EditorManager(workbench, tabContainer, editorTabExpando, editors, _activeEditor) {
    this.workbench = workbench;
    this.tabContainer = tabContainer;
    this.editorTabExpando = editorTabExpando;
    this.editors = editors;
    this._activeEditor = _activeEditor;
  },
  "super": "BTabContainerListener",
  get$workbench: function() {
    return this.workbench;
  },
  set$workbench: function(v) {
    this.workbench = v;
  },
  get$tabContainer: function() {
    return this.tabContainer;
  },
  set$tabContainer: function(v) {
    this.tabContainer = v;
  },
  get$editorTabExpando: function() {
    return this.editorTabExpando;
  },
  set$editorTabExpando: function(v) {
    this.editorTabExpando = v;
  },
  get$editors: function() {
    return this.editors;
  },
  set$editors: function(v) {
    this.editors = v;
  },
  get$_activeEditor: function() {
    return this._activeEditor;
  },
  set$_activeEditor: function(v) {
    this._activeEditor = v;
  },
  addEditor$1: function(editor) {
    var t1, t2, t3, values;
    this.editors.push(editor);
    editor.contentDiv = editor.createContent$1(this.tabContainer._content);
    t1 = this.editorTabExpando;
    t2 = this.tabContainer;
    t1.$indexSet(t1, editor, t2.add$1(t2, $.BTab$("")));
    this._updateEditorState$1(editor);
    editor._liblib8$_stream.listen$1(new $._EditorManager_addEditor_closure(this, editor));
    if (!$.$eq(this._activeEditor, editor)) {
      t2 = this._activeEditor;
      if (t2 != null)
        t2.handleDeactivated$0();
      this._activeEditor = editor;
      t2 = this._activeEditor;
      if (t2 != null) {
        t3 = this.tabContainer;
        values = $.Primitives_getProperty(t2, "expando$values");
        t3.setActive$1(values == null ? null : $.Primitives_getProperty(values, t1._getKey$0()));
        t2.handleActivated$0();
      }
      t1 = this.workbench.eventStream;
      t2 = new $.WorkbenchEvent();
      t3 = t1._state;
      if ((t3 & 2) !== 0)
        $.throwExpression(new $.StateError("Adding event after close"));
      if (t1._subscription != null)
        t1._sendData$1(t2);
      else if ((t3 & 1) === 0) {
        t2 = new $._DelayedData(t2, null);
        $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0)]);
        t1._addPendingEvent$1(t2);
      }
    }
  },
  "+addEditor:1:0": 0,
  closeEditor$1: function(editor) {
    var t1, values, tab, t2, t3;
    t1 = this.editorTabExpando;
    values = $.Primitives_getProperty(editor, "expando$values");
    tab = values == null ? null : $.Primitives_getProperty(values, t1._getKey$0());
    this.selectRighthandTab$0();
    $.JSArray_methods.remove$1(this.editors, editor);
    t2 = this.tabContainer;
    $.JSArray_methods.remove$1(t2.tabs, tab);
    $.remove$1$ax($.get$children$x(t2._liblib5$_element), tab.get$headerElement());
    editor.dispose$0();
    if ($.$eq(this._activeEditor, editor)) {
      t2 = this._activeEditor;
      t3 = t2 != null;
      if (t3) {
        if (t3)
          t2.handleDeactivated$0();
        this._activeEditor = null;
        t2 = this._activeEditor;
        if (t2 != null) {
          t3 = this.tabContainer;
          values = $.Primitives_getProperty(t2, "expando$values");
          t3.setActive$1(values == null ? null : $.Primitives_getProperty(values, t1._getKey$0()));
          t2.handleActivated$0();
        }
        t1 = this.workbench.eventStream;
        t2 = new $.WorkbenchEvent();
        t3 = t1._state;
        if ((t3 & 2) !== 0)
          $.throwExpression(new $.StateError("Adding event after close"));
        if (t1._subscription != null)
          t1._sendData$1(t2);
        else if ((t3 & 1) === 0) {
          t2 = new $._DelayedData(t2, null);
          $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0)]);
          t1._addPendingEvent$1(t2);
        }
      }
    }
  },
  "+closeEditor:1:0": 0,
  _activate$1: function(part) {
    var t1, values;
    if (part != null) {
      t1 = this.tabContainer;
      values = $.Primitives_getProperty(part, "expando$values");
      t1.setActive$1(values == null ? null : $.Primitives_getProperty(values, this.editorTabExpando._getKey$0()));
      part.handleActivated$0();
    }
  },
  selectNextTab$0: function() {
    var t1, t2, index, values, t3;
    t1 = this.editors;
    t2 = t1.length;
    if (t2 > 1) {
      index = $.$add$ns($.Arrays_indexOf(t1, this._activeEditor, 0, t2), 1);
      if ($.$ge$n(index, t1.length) === true)
        index = 0;
      if (index >>> 0 !== index || index >= t1.length)
        throw $.ioore(index);
      t1 = t1[index];
      if (!$.$eq(this._activeEditor, t1)) {
        t2 = this._activeEditor;
        if (t2 != null)
          t2.handleDeactivated$0();
        this._activeEditor = t1;
        t1 = this._activeEditor;
        if (t1 != null) {
          t2 = this.tabContainer;
          values = $.Primitives_getProperty(t1, "expando$values");
          t2.setActive$1(values == null ? null : $.Primitives_getProperty(values, this.editorTabExpando._getKey$0()));
          t1.handleActivated$0();
        }
        t1 = this.workbench.eventStream;
        t2 = new $.WorkbenchEvent();
        t3 = t1._state;
        if ((t3 & 2) !== 0)
          $.throwExpression(new $.StateError("Adding event after close"));
        if (t1._subscription != null)
          t1._sendData$1(t2);
        else if ((t3 & 1) === 0) {
          t2 = new $._DelayedData(t2, null);
          $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0)]);
          t1._addPendingEvent$1(t2);
        }
      }
    }
  },
  "+selectNextTab:0:0": 0,
  selectPreviousTab$0: function() {
    var t1, t2, index, values, t3;
    t1 = this.editors;
    t2 = t1.length;
    if (t2 > 1) {
      index = $.$sub$n($.Arrays_indexOf(t1, this._activeEditor, 0, t2), 1);
      if ($.$lt$n(index, 0) === true)
        index = t1.length - 1;
      if (index >>> 0 !== index || index >= t1.length)
        throw $.ioore(index);
      t1 = t1[index];
      if (!$.$eq(this._activeEditor, t1)) {
        t2 = this._activeEditor;
        if (t2 != null)
          t2.handleDeactivated$0();
        this._activeEditor = t1;
        t1 = this._activeEditor;
        if (t1 != null) {
          t2 = this.tabContainer;
          values = $.Primitives_getProperty(t1, "expando$values");
          t2.setActive$1(values == null ? null : $.Primitives_getProperty(values, this.editorTabExpando._getKey$0()));
          t1.handleActivated$0();
        }
        t1 = this.workbench.eventStream;
        t2 = new $.WorkbenchEvent();
        t3 = t1._state;
        if ((t3 & 2) !== 0)
          $.throwExpression(new $.StateError("Adding event after close"));
        if (t1._subscription != null)
          t1._sendData$1(t2);
        else if ((t3 & 1) === 0) {
          t2 = new $._DelayedData(t2, null);
          $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0)]);
          t1._addPendingEvent$1(t2);
        }
      }
    }
  },
  "+selectPreviousTab:0:0": 0,
  selectRighthandTab$0: function() {
    var t1, t2, index, values, t3;
    t1 = this.editors;
    t2 = t1.length;
    if (t2 > 1) {
      index = $.$add$ns($.Arrays_indexOf(t1, this._activeEditor, 0, t2), 1);
      t2 = $.getInterceptor$n(index);
      if (t2.$ge(index, t1.length) === true)
        index = t2.$sub(index, 2);
      if (index >>> 0 !== index || index >= t1.length)
        throw $.ioore(index);
      t1 = t1[index];
      if (!$.$eq(this._activeEditor, t1)) {
        t2 = this._activeEditor;
        if (t2 != null)
          t2.handleDeactivated$0();
        this._activeEditor = t1;
        t1 = this._activeEditor;
        if (t1 != null) {
          t2 = this.tabContainer;
          values = $.Primitives_getProperty(t1, "expando$values");
          t2.setActive$1(values == null ? null : $.Primitives_getProperty(values, this.editorTabExpando._getKey$0()));
          t1.handleActivated$0();
        }
        t1 = this.workbench.eventStream;
        t2 = new $.WorkbenchEvent();
        t3 = t1._state;
        if ((t3 & 2) !== 0)
          $.throwExpression(new $.StateError("Adding event after close"));
        if (t1._subscription != null)
          t1._sendData$1(t2);
        else if ((t3 & 1) === 0) {
          t2 = new $._DelayedData(t2, null);
          $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0)]);
          t1._addPendingEvent$1(t2);
        }
      }
    }
  },
  "+selectRighthandTab:0:0": 0,
  focusRequest$1: function(tab) {
    var t1, t2, values, t3;
    t1 = this._getEditorForTab$1(tab);
    if (!$.$eq(this._activeEditor, t1)) {
      t2 = this._activeEditor;
      if (t2 != null)
        t2.handleDeactivated$0();
      this._activeEditor = t1;
      t1 = this._activeEditor;
      if (t1 != null) {
        t2 = this.tabContainer;
        values = $.Primitives_getProperty(t1, "expando$values");
        t2.setActive$1(values == null ? null : $.Primitives_getProperty(values, this.editorTabExpando._getKey$0()));
        t1.handleActivated$0();
      }
      t1 = this.workbench.eventStream;
      t2 = new $.WorkbenchEvent();
      t3 = t1._state;
      if ((t3 & 2) !== 0)
        $.throwExpression(new $.StateError("Adding event after close"));
      if (t1._subscription != null)
        t1._sendData$1(t2);
      else if ((t3 & 1) === 0) {
        t2 = new $._DelayedData(t2, null);
        $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0)]);
        t1._addPendingEvent$1(t2);
      }
    }
  },
  closeRequest$1: function(tab) {
    $.close$0$x(this._getEditorForTab$1(tab));
  },
  _getEditorForTab$1: function(tab) {
    var t1, t2, part, values;
    t1 = this.editors;
    t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    t2 = this.editorTabExpando;
    for (; t1.moveNext$0();) {
      part = t1._liblib$_current;
      values = $.Primitives_getProperty(part, "expando$values");
      if ($.$eq(values == null ? null : $.Primitives_getProperty(values, t2._getKey$0()), tab))
        return part;
    }
    return;
  },
  "+_getEditorForTab:1:0": 0,
  _updateEditorState$1: function(editor) {
    var t1, values, t2;
    t1 = this.editorTabExpando;
    values = $.Primitives_getProperty(editor, "expando$values");
    t2 = values == null ? null : $.Primitives_getProperty(values, t1._getKey$0());
    t2.setName$1(editor._liblib8$_name);
    if (!!$.getInterceptor(editor).$isTextEditorPart) {
      values = $.Primitives_getProperty(editor, "expando$values");
      t1 = values == null ? null : $.Primitives_getProperty(values, t1._getKey$0());
      t1.setDirty$1(editor._dirty);
    }
  }
},

"+_EditorManager": 0,

_EditorManager_addEditor_closure: {
  "": function _EditorManager_addEditor_closure(this_0, editor_1) {
    this.this_0 = this_0;
    this.editor_1 = editor_1;
  },
  "super": "Closure",
  call$1: function($event) {
    this.this_0._updateEditorState$1(this.editor_1);
  },
  $isFunction: true
},

"+_EditorManager_addEditor_closure": 0,

WorkbenchPart: {
  "": function WorkbenchPart(eventStream, workbench, _liblib8$_stream, _liblib8$_name, contentDiv) {
    this.eventStream = eventStream;
    this.workbench = workbench;
    this._liblib8$_stream = _liblib8$_stream;
    this._liblib8$_name = _liblib8$_name;
    this.contentDiv = contentDiv;
  },
  "super": "Object",
  get$eventStream: function() {
    return this.eventStream;
  },
  set$eventStream: function(v) {
    this.eventStream = v;
  },
  get$workbench: function() {
    return this.workbench;
  },
  set$workbench: function(v) {
    this.workbench = v;
  },
  get$_liblib8$_stream: function() {
    return this._liblib8$_stream;
  },
  set$_liblib8$_stream: function(v) {
    this._liblib8$_stream = v;
  },
  get$_liblib8$_name: function() {
    return this._liblib8$_name;
  },
  set$_liblib8$_name: function(v) {
    this._liblib8$_name = v;
  },
  get$contentDiv: function() {
    return this.contentDiv;
  },
  set$contentDiv: function(v) {
    this.contentDiv = v;
  },
  handleActivated$0: function() {
    $.set$display$x($.get$style$x(this.contentDiv), "-webkit-flex");
    $.focus$0$x(this.contentDiv);
  },
  handleDeactivated$0: function() {
    $.set$display$x($.get$style$x(this.contentDiv), "none");
  },
  dispose$0: function() {
    var t1 = this.eventStream;
    t1.close$0(t1);
    t1 = this.contentDiv;
    if (t1 != null && $.get$parent$x(t1) != null)
      $.remove$1$ax($.get$children$x($.get$parent$x(this.contentDiv)), this.contentDiv);
  },
  get$name: function(_) {
    return this._liblib8$_name;
  }
},

"+WorkbenchPart": 0,

ViewPartContainer: {
  "": function ViewPartContainer(workbench, header, content, _activePart, partMap) {
    this.workbench = workbench;
    this.header = header;
    this.content = content;
    this._activePart = _activePart;
    this.partMap = partMap;
  },
  "super": "Object",
  get$workbench: function() {
    return this.workbench;
  },
  set$workbench: function(v) {
    this.workbench = v;
  },
  get$header: function() {
    return this.header;
  },
  set$header: function(v) {
    this.header = v;
  },
  get$content: function(receiver) {
    return this.content;
  },
  set$content: function(receiver, v) {
    this.content = v;
  },
  get$_activePart: function() {
    return this._activePart;
  },
  set$_activePart: function(v) {
    this._activePart = v;
  },
  get$partMap: function() {
    return this.partMap;
  },
  set$partMap: function(v) {
    this.partMap = v;
  },
  add$1: function(_, part) {
    var t1, listItem, t2;
    part.set$viewPartContainer(this);
    t1 = this.header;
    listItem = new $.BListItem(null);
    listItem.element = document.createElement("li");
    if (t1 != null)
      $.add$1$ax($.get$children$x(t1), listItem.element);
    t1 = new $.BElement(null);
    t1.element = document.createElement("a");
    t2 = $.get$name$x(part);
    $.set$text$x(t1.element, t2);
    $.add$1$ax($.get$children$x(listItem.element), t1.element);
    t1 = this.partMap;
    t1.$indexSet(t1, part, listItem);
    t2 = this._activePart;
    if (t2 == null)
      if (!$.$eq(t2, part)) {
        t2 = this._activePart;
        if (t2 != null) {
          t1.$index(t1, t2).toggleActive$0();
          t2.handleDeactivated$0();
          this._activePart = null;
        }
        this._activate$1(part);
      }
    $.get$onClick$x(listItem.element).listen$1(new $.ViewPartContainer_add_closure(this, part));
    return part;
  },
  _activate$1: function(part) {
    var t1;
    if (part != null) {
      this._activePart = part;
      if (part.get$contentDiv() == null)
        part.set$contentDiv(part.createContent$1(this.content));
      part.handleActivated$0();
      t1 = this.partMap;
      t1.$index(t1, part).toggleActive$0();
    }
  },
  ViewPartContainer$2: function(workbench, $parent) {
    var t1, t2, t3;
    t1 = new $.BUnorderedList(null);
    t1.element = document.createElement("ul");
    t2 = $parent != null;
    if (t2) {
      t3 = $.get$children$x($parent);
      t3.add$1(t3, t1.element);
    }
    $.add$1$ax($.get$classes$x(t1.element), "nav-pills");
    $.add$1$ax($.get$classes$x(t1.element), "nav");
    this.header = t1.element;
    t1 = new $.BDiv(null);
    t1.element = document.createElement("div");
    if (t2) {
      t2 = $.get$children$x($parent);
      t2.add$1(t2, t1.element);
    }
    $.add$1$ax($.get$classes$x(t1.element), "well");
    $.add$1$ax($.get$classes$x(t1.element), "viewContent");
    this.content = t1.element;
    $.get$FlexLayout_container();
    t1 = this.content;
    t2 = $.getInterceptor$x(t1);
    $.set$display$x(t2.get$style(t1), "-webkit-flex");
    $.set$flexDirection$x(t2.get$style(t1), "column");
    $.get$FlexLayout_child();
    $.set$flex$x($.get$style$x(this.content), "20");
  }
},

"+ViewPartContainer": 0,

ViewPartContainer_add_closure: {
  "": function ViewPartContainer_add_closure(this_0, part_1) {
    this.this_0 = this_0;
    this.part_1 = part_1;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1, t2, t3;
    t1 = this.this_0;
    t2 = this.part_1;
    if (!$.$eq(t1.get$_activePart(), t2)) {
      t3 = t1.get$_activePart();
      if (t3 != null) {
        $.$index$asx(t1.get$partMap(), t3).toggleActive$0();
        t3.handleDeactivated$0();
        t1.set$_activePart(null);
      }
      t1._activate$1(t2);
    }
  },
  $isFunction: true
},

"+ViewPartContainer_add_closure": 0,

ViewPart: {
  "": function ViewPart(viewPartContainer, eventStream, workbench, _liblib8$_stream, _liblib8$_name, contentDiv) {
    this.viewPartContainer = viewPartContainer;
    this.eventStream = eventStream;
    this.workbench = workbench;
    this._liblib8$_stream = _liblib8$_stream;
    this._liblib8$_name = _liblib8$_name;
    this.contentDiv = contentDiv;
  },
  "super": "WorkbenchPart",
  get$viewPartContainer: function() {
    return this.viewPartContainer;
  },
  set$viewPartContainer: function(v) {
    this.viewPartContainer = v;
  },
  createContent$1: function(container) {
    var div, t1, t2;
    div = new $.BDiv(null);
    div.element = document.createElement("div");
    if (container != null)
      $.add$1$ax($.get$children$x(container), div.element);
    this.createViewContent$1(div.element);
    $.get$FlexLayout_container();
    t1 = div.element;
    t2 = $.getInterceptor$x(t1);
    $.set$display$x(t2.get$style(t1), "-webkit-flex");
    $.set$flexDirection$x(t2.get$style(t1), "column");
    $.get$FlexLayout_child();
    $.set$flex$x($.get$style$x(div.element), "20");
    return div.element;
  },
  createViewContent$1: function($content) {
  },
  "+createViewContent:1:0": 0
},

"+ViewPart": 0,

EditorPart: {
  "": function EditorPart(_dirty, _reconcileTimer) {
    this._dirty = _dirty;
    this._reconcileTimer = _reconcileTimer;
  },
  "super": "WorkbenchPart",
  get$_dirty: function() {
    return this._dirty;
  },
  set$_dirty: function(v) {
    this._dirty = v;
  },
  get$_reconcileTimer: function() {
    return this._reconcileTimer;
  },
  set$_reconcileTimer: function(v) {
    this._reconcileTimer = v;
  },
  save$0: function() {
    var t1 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t1.$builtinTypeInfo = [null];
    t1._state = 4;
    t1._resultOrListeners = this;
    return t1;
  },
  get$dirty: function() {
    return this._dirty;
  },
  fireReconcileEvent$0: function() {
    var t1, t2, t3;
    t1 = this.eventStream;
    t2 = new $.EditorReconcileEvent();
    t3 = t1._state;
    if ((t3 & 2) !== 0)
      $.throwExpression(new $.StateError("Adding event after close"));
    if (t1._subscription != null)
      t1._sendData$1(t2);
    else if ((t3 & 1) === 0) {
      t3 = $.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0);
      t2 = new $._DelayedData(t2, null);
      t2.$builtinTypeInfo = [t3];
      t1._addPendingEvent$1(t2);
    }
  },
  "+fireReconcileEvent:0:0": 0,
  get$fireReconcileEvent: function() {
    return new $.BoundClosure$0(this, "fireReconcileEvent$0", null);
  },
  close$0: function(_) {
    var dialog, t1;
    if (this._dirty === true) {
      dialog = $.YesNoDialog$("Close File", "Save file changes?", ["Save Changes", "Discard Changes", "Cancel"]);
      t1 = $.workbench.messageArea;
      t1.add$1;
      t1 = $.get$children$x(t1._messageElement);
      t1.add$1(t1, dialog.element);
      dialog._completer.future.then$1(new $.EditorPart_close_closure(this));
    } else
      $.workbench._editorManager.closeEditor$1(this);
  },
  dispose$0: function() {
    var t1, t2;
    t1 = this._reconcileTimer;
    if (t1 != null) {
      t1.cancel$0;
      if (!t1._isDone) {
        t2 = t1._zone;
        t2._openCallbacks = t2._openCallbacks - 1;
        if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
          ;
      }
      t1._isDone = true;
      t1._timer.cancel$0();
      this._reconcileTimer = null;
    }
    $.WorkbenchPart.prototype.dispose$0.call(this);
  }
},

"+EditorPart": 0,

EditorPart_close_closure: {
  "": function EditorPart_close_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(response) {
    var t1 = $.getInterceptor(response);
    if (t1.$eq(response, 0)) {
      t1 = this.this_0;
      t1.save$0().then$1(new $.EditorPart_close__closure(t1));
    } else if (t1.$eq(response, 1))
      $.workbench._editorManager.closeEditor$1(this.this_0);
  },
  $isFunction: true
},

"+EditorPart_close_closure": 0,

EditorPart_close__closure: {
  "": function EditorPart_close__closure(this_1) {
    this.this_1 = this_1;
  },
  "super": "Closure",
  call$1: function(_) {
    $.workbench._editorManager.closeEditor$1(this.this_1);
  },
  $isFunction: true
},

"+EditorPart_close__closure": 0,

WorkbenchPartEvent: {
  "": function WorkbenchPartEvent() {
  },
  "super": "Object"
},

"+WorkbenchPartEvent": 0,

EditorReconcileEvent: {
  "": function EditorReconcileEvent() {
  },
  "super": "WorkbenchPartEvent",
  $isEditorReconcileEvent: true
},

"+EditorReconcileEvent": 0,

TextEditorPart: {
  "": function TextEditorPart() {
  },
  "super": "EditorPart",
  $isTextEditorPart: true
},

"+TextEditorPart": 0,

TitleArea: {
  "": function TitleArea(_header, _toolbar, _menubar) {
    this._header = _header;
    this._toolbar = _toolbar;
    this._menubar = _menubar;
  },
  "super": "Object",
  get$_header: function() {
    return this._header;
  },
  set$_header: function(v) {
    this._header = v;
  },
  get$_toolbar: function() {
    return this._toolbar;
  },
  set$_toolbar: function(v) {
    this._toolbar = v;
  },
  get$_menubar: function() {
    return this._menubar;
  },
  set$_menubar: function(v) {
    this._menubar = v;
  }
},

"+TitleArea": 0,

MessageArea: {
  "": function MessageArea(_messageElement) {
    this._messageElement = _messageElement;
  },
  "super": "Object",
  get$_messageElement: function() {
    return this._messageElement;
  },
  set$_messageElement: function(v) {
    this._messageElement = v;
  },
  add$1: function(_, element) {
    var t1 = $.get$children$x(this._messageElement);
    t1.add$1(t1, element.get$element());
  }
},

"+MessageArea": 0,

StatusLine: {
  "": function StatusLine(_statusLine, statusText, progress) {
    this._statusLine = _statusLine;
    this.statusText = statusText;
    this.progress = progress;
  },
  "super": "Object",
  get$_statusLine: function() {
    return this._statusLine;
  },
  set$_statusLine: function(v) {
    this._statusLine = v;
  },
  get$statusText: function(receiver) {
    return this.statusText;
  },
  set$statusText: function(receiver, v) {
    this.statusText = v;
  },
  get$progress: function() {
    return this.progress;
  },
  set$progress: function(v) {
    this.progress = v;
  },
  StatusLine$1: function($parent) {
    var t1, ul, li, t2;
    this._statusLine = document.querySelector("#statusLine");
    t1 = this._statusLine;
    ul = new $.BUnorderedList(null);
    ul.element = document.createElement("ul");
    if (t1 != null) {
      t1 = $.get$children$x(t1);
      t1.add$1(t1, ul.element);
    }
    $.add$1$ax($.get$classes$x(ul.element), "nav");
    $.add$1$ax($.get$classes$x(ul.element), "pull-right");
    $.set$marginTop$x($.get$style$x(ul.element), "0.5em");
    li = new $.BListItem(null);
    li.element = document.createElement("li");
    $.add$1$ax($.get$children$x(ul.element), li.element);
    t1 = new $.BElement(null);
    t1.element = document.createElement("p");
    this.statusText = li.add$1(li, t1);
    $.innerHtml$1$x(this.statusText, "&nbsp;");
    li = new $.BListItem(null);
    li.element = document.createElement("li");
    $.add$1$ax($.get$children$x(ul.element), li.element);
    t1 = new $.BElement(null);
    t1.element = document.createElement("p");
    $.set$innerHtml$x(t1.element, "&nbsp;&nbsp;");
    li.add$1(li, t1);
    li = new $.BListItem(null);
    li.element = document.createElement("li");
    $.add$1$ax($.get$children$x(ul.element), li.element);
    t1 = new $.BProgress(null, null);
    t1.element = document.createElement("div");
    $.add$1$ax($.get$classes$x(t1.element), "progress");
    t2 = new $.BDiv(null);
    t2.element = $.DivElement_DivElement();
    t2.setParent$1(null);
    $.add$1$ax($.get$classes$x(t2.element), "bar");
    $.add$1$ax($.get$children$x(t1.element), t2.element);
    t1._bar = t2.element;
    $.setProperty$2$x($.get$style$x(t1.element), "width", "15em");
    this.progress = li.add$1(li, t1);
    $.set$value$x(this.progress, 30);
    $.visibility$1$x(this.statusText, false);
    $.visibility$1$x(this.progress, false);
  }
},

"+StatusLine": 0,

FilesView: {
  "": function FilesView(treeViewer, viewPartContainer, eventStream, workbench, _liblib8$_stream, _liblib8$_name, contentDiv) {
    this.treeViewer = treeViewer;
    this.viewPartContainer = viewPartContainer;
    this.eventStream = eventStream;
    this.workbench = workbench;
    this._liblib8$_stream = _liblib8$_stream;
    this._liblib8$_name = _liblib8$_name;
    this.contentDiv = contentDiv;
  },
  "super": "ViewPart",
  get$treeViewer: function() {
    return this.treeViewer;
  },
  set$treeViewer: function(v) {
    this.treeViewer = v;
  },
  createViewContent$1: function(container) {
    var t1, t2, t3, t4, t5;
    t1 = $.List_List($, $._TreeViewerSection);
    t1.$builtinTypeInfo = [$._TreeViewerSection];
    t2 = $.SelectionEvent;
    t2 = t2;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t2];
    t3._stream = $._ControllerStream$(t3, t2);
    t2 = t3;
    t3 = new $.TreeLabelProvider();
    t3.$builtinTypeInfo = [null];
    t1 = new $.TreeViewer(null, t1, null, null, t2, t3);
    t2 = new $.BUnorderedList(null);
    t2.element = $.Element_Element$tag("ul");
    t2.setParent$1(container);
    $.add$1$ax($.get$classes$x(t2.element), "nav-list");
    $.add$1$ax($.get$classes$x(t2.element), "nav");
    $.add$1$ax($.get$classes$x(t2.element), "treeViewer");
    t1._list = t2;
    $.get$onKeyPress$x(t1._list.element).listen$1(t1.get$_handleKeyEvent());
    this.treeViewer = t1;
    this.treeViewer.labelProvider = new $.ResourceLabelProvider();
    t1 = this.treeViewer;
    t1.addHeader$1;
    t1 = t1._list;
    t2 = new $.BListItem(null);
    t2.element = $.document().createElement("li");
    $.add$1$ax($.get$classes$x(t2.element), "nav-header");
    $.set$text$x(t2.element, "Loose Files");
    $.add$1$ax($.get$children$x(t1.element), t2.element);
    t1 = this.treeViewer;
    t2 = $.List_List($, null);
    t3 = null;
    t3 = t3;
    t4 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t4.$builtinTypeInfo = [t3];
    t4._stream = $._ControllerStream$(t4, t3);
    t3 = t4;
    t3 = new $.FilesContentProvider(t2, t3, null);
    t3._liblib7$_stream = t3.streamController._stream.asBroadcastStream$0();
    t1.addContentProvider$1;
    t2 = t1._sections;
    t3 = new $._TreeViewerSection(t1, t3, null, null);
    t1 = new $.BListItem(null);
    t1.BListItem$1(null);
    $.set$display$x($.get$style$x(t1.element), "none");
    t3.start = t1;
    t1 = t3.listViewer;
    t4 = t1._list;
    t5 = t3.start;
    $.add$1$ax($.get$children$x(t4.element), t5.element);
    t5 = new $.BListItem(null);
    t5.BListItem$1(null);
    $.set$display$x($.get$style$x(t5.element), "none");
    t3.end = t5;
    t1 = t1._list;
    t5 = t3.end;
    $.add$1$ax($.get$children$x(t1.element), t5.element);
    t2.push(t3);
    t3 = this.treeViewer;
    t3.addHeader$1;
    t3 = t3._list;
    t2 = new $.BListItem(null);
    t2.element = $.document().createElement("li");
    $.add$1$ax($.get$classes$x(t2.element), "nav-header");
    $.set$text$x(t2.element, "Folders");
    $.add$1$ax($.get$children$x(t3.element), t2.element);
    t1 = this.treeViewer;
    t2 = $.List_List($, null);
    t3 = null;
    t3 = t3;
    t4 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t4.$builtinTypeInfo = [t3];
    t4._stream = $._ControllerStream$(t4, t3);
    t3 = t4;
    t3 = new $.FoldersContentProvider(t2, null, t3, null);
    t3._liblib7$_stream = t3.streamController._stream.asBroadcastStream$0();
    t1.addContentProvider$1;
    t2 = t1._sections;
    t3 = new $._TreeViewerSection(t1, t3, null, null);
    t1 = new $.BListItem(null);
    t1.BListItem$1(null);
    $.set$display$x($.get$style$x(t1.element), "none");
    t3.start = t1;
    t1 = t3.listViewer;
    t4 = t1._list;
    t5 = t3.start;
    $.add$1$ax($.get$children$x(t4.element), t5.element);
    t5 = new $.BListItem(null);
    t5.BListItem$1(null);
    $.set$display$x($.get$style$x(t5.element), "none");
    t3.end = t5;
    t1 = t1._list;
    t5 = t3.end;
    $.add$1$ax($.get$children$x(t1.element), t5.element);
    t2.push(t3);
    t3 = this.treeViewer;
    t3.addDivider$0;
    t3 = t3._list;
    t2 = new $.BListItem(null);
    t2.element = $.document().createElement("li");
    $.add$1$ax($.get$classes$x(t2.element), "divider");
    $.add$1$ax($.get$children$x(t3.element), t2.element);
    t1 = this.treeViewer;
    t1.addHeader$1;
    t1 = t1._list;
    t2 = new $.BListItem(null);
    t2.element = $.document().createElement("li");
    $.add$1$ax($.get$classes$x(t2.element), "nav-header");
    $.set$text$x(t2.element, "Dart SDK");
    $.add$1$ax($.get$children$x(t1.element), t2.element);
    t1 = this.treeViewer;
    t2 = $.List_List($, null);
    t3 = null;
    t3 = t3;
    t4 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t4.$builtinTypeInfo = [t3];
    t4._stream = $._ControllerStream$(t4, t3);
    t3 = t4;
    t3 = new $.FoldersContentProvider(t2, true, t3, null);
    t3._liblib7$_stream = t3.streamController._stream.asBroadcastStream$0();
    t1.addContentProvider$1;
    t2 = t1._sections;
    t3 = new $._TreeViewerSection(t1, t3, null, null);
    t1 = new $.BListItem(null);
    t1.BListItem$1(null);
    $.set$display$x($.get$style$x(t1.element), "none");
    t3.start = t1;
    t1 = t3.listViewer;
    t4 = t1._list;
    t5 = t3.start;
    $.add$1$ax($.get$children$x(t4.element), t5.element);
    t5 = new $.BListItem(null);
    t5.BListItem$1(null);
    $.set$display$x($.get$style$x(t5.element), "none");
    t3.end = t5;
    t1 = t1._list;
    t5 = t3.end;
    $.add$1$ax($.get$children$x(t1.element), t5.element);
    t2.push(t3);
    $.get$FlexLayout_child();
    t3 = this.treeViewer;
    t3.get$element;
    $.set$flex$x($.get$style$x(t3._list.element), "20");
  }
},

"+FilesView": 0,

OutlineView: {
  "": function OutlineView(treeViewer, focusedEditor, editorSubscription, viewPartContainer, eventStream, workbench, _liblib8$_stream, _liblib8$_name, contentDiv) {
    this.treeViewer = treeViewer;
    this.focusedEditor = focusedEditor;
    this.editorSubscription = editorSubscription;
    this.viewPartContainer = viewPartContainer;
    this.eventStream = eventStream;
    this.workbench = workbench;
    this._liblib8$_stream = _liblib8$_stream;
    this._liblib8$_name = _liblib8$_name;
    this.contentDiv = contentDiv;
  },
  "super": "ViewPart",
  get$treeViewer: function() {
    return this.treeViewer;
  },
  set$treeViewer: function(v) {
    this.treeViewer = v;
  },
  get$focusedEditor: function() {
    return this.focusedEditor;
  },
  set$focusedEditor: function(v) {
    this.focusedEditor = v;
  },
  get$editorSubscription: function() {
    return this.editorSubscription;
  },
  set$editorSubscription: function(v) {
    this.editorSubscription = v;
  },
  createViewContent$1: function(container) {
    var t1, t2, t3, t4, t5;
    t1 = $.List_List($, $._TreeViewerSection);
    t1.$builtinTypeInfo = [$._TreeViewerSection];
    t2 = $.SelectionEvent;
    t2 = t2;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t2];
    t3._stream = $._ControllerStream$(t3, t2);
    t2 = t3;
    t3 = new $.TreeLabelProvider();
    t3.$builtinTypeInfo = [null];
    t1 = new $.TreeViewer(null, t1, null, null, t2, t3);
    t2 = new $.BUnorderedList(null);
    t2.element = $.Element_Element$tag("ul");
    t2.setParent$1(container);
    $.add$1$ax($.get$classes$x(t2.element), "nav-list");
    $.add$1$ax($.get$classes$x(t2.element), "nav");
    $.add$1$ax($.get$classes$x(t2.element), "treeViewer");
    t1._list = t2;
    $.get$onKeyPress$x(t1._list.element).listen$1(t1.get$_handleKeyEvent());
    this.treeViewer = t1;
    this.treeViewer.labelProvider = new $.AstLabelProvider();
    t1 = this.treeViewer;
    t2 = $.List_List($, null);
    t3 = null;
    t3 = t3;
    t4 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t4.$builtinTypeInfo = [t3];
    t4._stream = $._ControllerStream$(t4, t3);
    t3 = t4;
    t3 = new $.AstContentProvider(t2, t3, null);
    t3._liblib7$_stream = t3.streamController._stream.asBroadcastStream$0();
    t1.addContentProvider$1;
    t2 = t1._sections;
    t3 = new $._TreeViewerSection(t1, t3, null, null);
    t1 = new $.BListItem(null);
    t1.BListItem$1(null);
    $.set$display$x($.get$style$x(t1.element), "none");
    t3.start = t1;
    t1 = t3.listViewer;
    t4 = t1._list;
    t5 = t3.start;
    $.add$1$ax($.get$children$x(t4.element), t5.element);
    t5 = new $.BListItem(null);
    t5.BListItem$1(null);
    $.set$display$x($.get$style$x(t5.element), "none");
    t3.end = t5;
    t1 = t1._list;
    t5 = t3.end;
    $.add$1$ax($.get$children$x(t1.element), t5.element);
    t2.push(t3);
    t3 = this.treeViewer;
    t3.get$onSelectionChange;
    t3._streamController._stream.listen$1(this.get$_handleSelectionChanged());
    $.get$FlexLayout_child();
    t3 = this.treeViewer;
    t3.get$element;
    $.set$flex$x($.get$style$x(t3._list.element), "20");
    t3 = $.workbench;
    t3.get$onChange;
    t3._liblib8$_stream.listen$1(this.get$_activeEditorChange());
  },
  setInput$1: function(input) {
    this.treeViewer.setInput$1(input);
  },
  _activeEditorChange$1: function($event) {
    var editor, t1, t2;
    editor = this.getCurrentEditor$0();
    t1 = this.focusedEditor;
    if (editor == null ? t1 == null : editor === t1)
      return;
    if (t1 != null) {
      this.editorSubscription.cancel$0();
      this.editorSubscription = null;
    }
    this.focusedEditor = editor;
    t1 = this.focusedEditor;
    if (t1 != null) {
      t1.get$onEvent;
      t1 = t1._liblib8$_stream;
      t2 = $.getRuntimeTypeArgument(t1, t1.$asStream, 0);
      t1 = new $._WhereStream(new $.OutlineView__activeEditorChange_closure(), t1);
      t1.$builtinTypeInfo = [t2];
      this.editorSubscription = t1.listen$1(new $.OutlineView__activeEditorChange_closure0(this));
    }
    this._doParse$0();
  },
  "+_activeEditorChange:1:0": 0,
  get$_activeEditorChange: function() {
    return new $.BoundClosure$1(this, "_activeEditorChange$1", null);
  },
  _doParse$0: function() {
    var t1, t2;
    t1 = this.focusedEditor;
    if (t1 != null) {
      t1.getContentHandler$0;
      t1 = $.workbench.contentManager.getHandlerForName$1(t1._liblib8$_name).get$isDartMode() === true;
    } else
      t1 = false;
    if (t1) {
      t1 = this.focusedEditor.get$contents();
      t2 = this.focusedEditor;
      $.analysisParseString(t1, t2.get$file(t2)).then$1(new $.OutlineView__doParse_closure());
    } else
      this.treeViewer.setInput$1(null);
  },
  dispose$0: function() {
    var t1 = this.editorSubscription;
    if (t1 != null) {
      t1.cancel$0();
      this.editorSubscription = null;
    }
    $.WorkbenchPart.prototype.dispose$0.call(this);
  },
  getCurrentEditor$0: function() {
    var t1, editor;
    t1 = $.workbench;
    t1.getActiveEditor$0;
    t1 = t1._editorManager;
    t1.get$activeEditor;
    editor = t1._activeEditor;
    if (typeof editor === "object" && editor !== null && !!$.getInterceptor(editor).$isTextEditorPart)
      return editor;
    else
      return;
  },
  "+getCurrentEditor:0:0": 0,
  _handleSelectionChanged$1: function($event) {
    var node, t1, part, t2, t3, t4, values;
    node = this._getMoreSpecificNode$1($.get$single$ax($event.get$selection()));
    t1 = this.workbench;
    t1.getActiveEditor$0;
    t1 = t1._editorManager;
    t1.get$activeEditor;
    part = t1._activeEditor;
    if (typeof part === "object" && part !== null && !!$.getInterceptor(part).$isTextEditorPart) {
      t1 = $.getInterceptor$x(node);
      part.select$2(part, t1.get$offset(node), t1.get$length(node));
      if ($event.get$doubleClick() === true) {
        t1 = this.workbench;
        t1.setActiveEditor$1;
        t1 = t1._editorManager;
        t1.setActive$1;
        if (!$.$eq(t1._activeEditor, part)) {
          t2 = t1._activeEditor;
          if (t2 != null)
            t2.handleDeactivated$0();
          t1._activeEditor = part;
          t2 = t1._activeEditor;
          if (t2 != null) {
            t3 = t1.tabContainer;
            t4 = t1.editorTabExpando;
            values = $.Primitives_getProperty(t2, "expando$values");
            t3.setActive$1(values == null ? null : $.Primitives_getProperty(values, t4._getKey$0()));
            t2.handleActivated$0();
          }
          t1 = t1.workbench.eventStream;
          t2 = new $.WorkbenchEvent();
          if (t1.get$isClosed())
            $.throwExpression($.StateError$("Adding event after close"));
          if (t1._subscription != null)
            t1._sendData$1(t2);
          else if (!t1.get$_isCancelled())
            t1._addPendingEvent$1($._DelayedData$(t2, $.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0)));
        }
      }
    }
  },
  "+_handleSelectionChanged:1:0": 0,
  get$_handleSelectionChanged: function() {
    return new $.BoundClosure$1(this, "_handleSelectionChanged$1", null);
  },
  _getMoreSpecificNode$1: function(node) {
    var t1;
    if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isClassDeclaration)
      return node._liblib4$_name;
    else if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isFunctionDeclaration)
      return node._liblib4$_name;
    else if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isConstructorDeclaration) {
      t1 = node._liblib4$_name;
      if (t1 == null)
        return node._returnType;
      else
        return t1;
    } else if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isMethodDeclaration)
      return node._liblib4$_name;
    return node;
  },
  "+_getMoreSpecificNode:1:0": 0
},

"+OutlineView": 0,

OutlineView__activeEditorChange_closure: {
  "": function OutlineView__activeEditorChange_closure() {
  },
  "super": "Closure",
  call$1: function(e) {
    return typeof e === "object" && e !== null && !!$.getInterceptor(e).$isEditorReconcileEvent;
  },
  $isFunction: true
},

"+OutlineView__activeEditorChange_closure": 0,

OutlineView__activeEditorChange_closure0: {
  "": function OutlineView__activeEditorChange_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(e) {
    this.this_0._doParse$0();
  },
  $isFunction: true
},

"+OutlineView__activeEditorChange_closure": 0,

OutlineView__doParse_closure: {
  "": function OutlineView__doParse_closure() {
  },
  "super": "Closure",
  call$1: function(result) {
    var t1 = $.workbench;
    t1.get$outline;
    t1._outlineView.setInput$1(result.get$ast());
  },
  $isFunction: true
},

"+OutlineView__doParse_closure": 0,

ProblemsView: {
  "": function ProblemsView(viewPartContainer, eventStream, workbench, _liblib8$_stream, _liblib8$_name, contentDiv) {
    this.viewPartContainer = viewPartContainer;
    this.eventStream = eventStream;
    this.workbench = workbench;
    this._liblib8$_stream = _liblib8$_stream;
    this._liblib8$_name = _liblib8$_name;
    this.contentDiv = contentDiv;
  },
  "super": "ViewPart",
  createViewContent$1: function(container) {
    var t1, t2, table, row;
    t1 = new $.BTable(null, null);
    t1.element = document.createElement("table");
    $.add$1$ax($.get$classes$x(t1.element), "table");
    t2 = new $.BElement(null);
    t2.element = $.Element_Element$tag("tbody");
    t2.setParent$1(null);
    $.add$1$ax($.get$children$x(t1.element), t2.element);
    t1.tbody = t2;
    if (container != null)
      $.add$1$ax($.get$children$x(container), t1.element);
    $.add$1$ax($.get$classes$x(t1.element), "table-hover");
    table = t1.tableCondensed$0();
    $.add$1$ax($.get$classes$x(table.element), "problemsView");
    row = table.createRow$0();
    $.innerHtml$1$x(table.createCell$1(row), "<span class=\"label label-important\">error</span>");
    $.innerHtml$1$x(table.createCell$1(row), "Foo bar baz <span class=\"muted\">workbench.dart:1</span>");
    row = table.createRow$0();
    $.innerHtml$1$x(table.createCell$1(row), "<span class=\"label label-warning\">warning</span>");
    $.innerHtml$1$x(table.createCell$1(row), "Foo bar baz <span class=\"muted\">workbench.dart:4</span>");
    row = table.createRow$0();
    $.innerHtml$1$x(table.createCell$1(row), "<span class=\"label label-warning\">warning</span>");
    $.innerHtml$1$x(table.createCell$1(row), "Lorem ipsum dolor sit amet, consectetur adipisicing elit <span class=\"muted\">workbench.dart:12</span>");
    row = table.createRow$0();
    $.innerHtml$1$x(table.createCell$1(row), "<span class=\"label label-warning\">warning</span>");
    $.innerHtml$1$x(table.createCell$1(row), "Foo bar baz <span class=\"muted\">workbench.dart:4</span>");
    row = table.createRow$0();
    $.innerHtml$1$x(table.createCell$1(row), "<span class=\"label label-info\">todo</span>");
    $.innerHtml$1$x(table.createCell$1(row), "Foo bar baz <span class=\"muted\">workbench.dart:3</span>");
    $.get$FlexLayout_child();
    $.set$flex$x($.get$style$x(table.element), "20");
  }
},

"+ProblemsView": 0,

ConsoleView: {
  "": function ConsoleView(viewPartContainer, eventStream, workbench, _liblib8$_stream, _liblib8$_name, contentDiv) {
    this.viewPartContainer = viewPartContainer;
    this.eventStream = eventStream;
    this.workbench = workbench;
    this._liblib8$_stream = _liblib8$_stream;
    this._liblib8$_name = _liblib8$_name;
    this.contentDiv = contentDiv;
  },
  "super": "ViewPart",
  createViewContent$1: function(container) {
    $.add$1$ax($.get$classes$x(container), "consoleOut");
  },
  append$1: function(_, text) {
    var t1, t2, t3, t4;
    t1 = this.viewPartContainer;
    t1.activate$1;
    if (!$.$eq(t1._activePart, this)) {
      t2 = t1._activePart;
      if (t2 != null) {
        t3 = t1.partMap;
        t3.$index(t3, t2).toggleActive$0();
        t2.handleDeactivated$0();
        t1._activePart = null;
      }
      t1._activate$1(this);
    }
    t1 = this.contentDiv;
    t2 = $.getInterceptor$x(t1);
    t3 = t2.get$text(t1);
    if (typeof t3 !== "number")
      return this.append$1$bailout(1, text, t2, t3, t1);
    t4 = $.S(text) + "\n";
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t2.set$text(t1, t3 + t4);
  },
  append$1$bailout: function(state0, text, t2, t3, t1) {
    t2.set$text(t1, $.$add$ns(t3, $.S(text) + "\n"));
  }
},

"+ConsoleView": 0,

Toolbar: {
  "": function Toolbar(container) {
    this.container = container;
  },
  "super": "Object",
  get$container: function() {
    return this.container;
  },
  set$container: function(v) {
    this.container = v;
  },
  add$1: function(_, element) {
    var t1 = $.get$children$x(this.container);
    t1.add$1(t1, element);
  }
},

"+Toolbar": 0,

AceEditorPart: {
  "": function AceEditorPart(_file, aceEditor, session, _dirty, _reconcileTimer, eventStream, workbench, _liblib8$_stream, _liblib8$_name, contentDiv) {
    this._file = _file;
    this.aceEditor = aceEditor;
    this.session = session;
    this._dirty = _dirty;
    this._reconcileTimer = _reconcileTimer;
    this.eventStream = eventStream;
    this.workbench = workbench;
    this._liblib8$_stream = _liblib8$_stream;
    this._liblib8$_name = _liblib8$_name;
    this.contentDiv = contentDiv;
  },
  "super": "TextEditorPart",
  get$_file: function(receiver) {
    return this._file;
  },
  set$_file: function(receiver, v) {
    this._file = v;
  },
  get$aceEditor: function() {
    return this.aceEditor;
  },
  set$aceEditor: function(v) {
    this.aceEditor = v;
  },
  get$session: function() {
    return this.session;
  },
  set$session: function(v) {
    this.session = v;
  },
  get$file: function(_) {
    return this._file;
  },
  "+file": 0,
  file$1: function($receiver, arg0) {
    return this.get$file($receiver).call$1(arg0);
  },
  get$contents: function() {
    var t1 = this.session;
    t1.getDocument$0;
    t1 = t1.document;
    t1.getValue$0;
    return $.propertyTypeCast(t1.documentProxy, "$isProxy0").getValue$0();
  },
  gotoLine$1: function(line) {
    var t1 = this.aceEditor;
    t1.gotoLine$3;
    t1._aceEditor.gotoLine$3(line, 0, false);
  },
  "+gotoLine:1:0": 0,
  select$2: function(_, offset, $length) {
    var t1, obj, start, t2, end, range;
    t1 = this.session;
    t1.getDocument$0;
    t1 = t1.document;
    t1.indexToPosition$1;
    obj = $.propertyTypeCast(t1.documentProxy, "$isProxy0").indexToPosition$2(offset, 0);
    start = new $.Point(obj.get$column(), obj.get$row());
    t1 = this.session;
    t1.getDocument$0;
    t1 = t1.document;
    t2 = $.$add$ns(offset, $length);
    t1.indexToPosition$1;
    obj = $.propertyTypeCast(t1.documentProxy, "$isProxy0").indexToPosition$2(t2, 0);
    end = new $.Point(obj.get$column(), obj.get$row());
    t2 = this.session;
    t2.getSelection$0;
    t2 = t2.selection;
    t2.setSelectionRange$3;
    t2 = t2.proxy;
    t1 = $.getInterceptor$ax(t2);
    range = t1.getRange$0(t2);
    range.setStart$2(start.y, start.x);
    range.setEnd$2(end.y, end.x);
    t1.setSelectionRange$2(t2, range, false);
  },
  "+select:2:0": 0,
  createContent$1: function(container) {
    var t1 = this._file;
    if (t1 != null)
      t1.readContents$0().then$1(new $.AceEditorPart_createContent_closure(this));
    t1 = this.aceEditor;
    t1.get$aceContainer;
    return t1._aceContainer;
  },
  handleActivated$0: function() {
    var t1, t2;
    t1 = this.aceEditor;
    t2 = this.session;
    t1.setSession$1;
    t1._session = t2;
    t1._aceEditor.setSession$1(t1._session.get$proxy());
    t1 = this.aceEditor;
    t1.show$0;
    $.set$display$x($.get$style$x(t1._otherContainer), "none");
    $.set$display$x($.get$style$x(t1._aceContainer), "block");
    t1 = this.aceEditor;
    t1.resize$0;
    $.resize$0$x(t1._aceEditor);
    t1 = this.aceEditor;
    t1.focus$0;
    $.focus$0$x(t1._aceEditor);
  },
  save$0: function() {
    var t1, t2, completer, futureImpl;
    if (this._file == null)
      return this.saveAs$0();
    t1 = null;
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [t1];
    completer = new $._AsyncCompleter(t2, false);
    completer.$builtinTypeInfo = [t1];
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    if (this._dirty === true) {
      t1 = this._file;
      t2 = this.session;
      t2.getDocument$0;
      t2 = t2.document;
      t2.getValue$0;
      t1.writeContents$1($.propertyTypeCast(t2.documentProxy, "$isProxy0").getValue$0()).then$1(new $.AceEditorPart_save_closure(this, completer)).catchError$1(new $.AceEditorPart_save_closure0(this, completer));
    }
    return futureImpl;
  },
  saveAs$0: function() {
    var t1, t2, completer, futureImpl;
    t1 = null;
    t2 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t2.$builtinTypeInfo = [t1];
    completer = new $._AsyncCompleter(t2, false);
    completer.$builtinTypeInfo = [t1];
    futureImpl = completer.future;
    t1 = futureImpl._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    $.get$fileSystem().chooseSaveFile$0().then$1(new $.AceEditorPart_saveAs_closure(this, completer));
    return futureImpl;
  },
  "+saveAs:0:0": 0,
  handleDeactivated$0: function() {
    var t1 = this.aceEditor;
    t1.hide$0;
    $.set$display$x($.get$style$x(t1._aceContainer), "none");
    $.set$display$x($.get$style$x(t1._otherContainer), "block");
  },
  dispose$0: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.eventStream;
    t1.close$0(t1);
    t1 = this._file;
    if (t1 != null)
      t1.dispose$0();
    t1 = this.session;
    t1.dispose$0;
    $.jsRelease(t1.proxy);
    t2 = t1.document;
    t2.dispose$0;
    $.jsRelease(t2.documentProxy);
    t2 = t1.undoManager;
    t2.dispose$0;
    $.jsRelease(t2.proxy);
    t2 = t1.selection;
    t2.dispose$0;
    $.jsRelease(t2.proxy);
    t2 = t1.changeListener;
    t2.dispose$0;
    t3 = $.get$_proxiedObjectTable0();
    t2 = t2._liblib20$_id;
    t4 = t3._liblib20$_registry;
    t4.$index(t4, t2);
    t5 = t3._liblib20$_globalIds;
    t5.remove$1(t5, t2);
    t4.remove$1(t4, t2);
    t3._liblib20$_deletedCount = t3._liblib20$_deletedCount + 1;
    t1 = t1.streamController;
    t1.close$0(t1);
  },
  AceEditorPart$2: function(workbench, file) {
    var t1, t2, t3;
    this._file = file;
    t1 = this._file;
    t1 = t1 == null ? "untitled" : $.get$name$x(t1);
    if (!$.$eq(this._liblib8$_name, t1)) {
      this._liblib8$_name = t1;
      t1 = this.eventStream;
      t2 = new $.WorkbenchPartEvent();
      t3 = t1._state;
      if ((t3 & 2) !== 0)
        $.throwExpression(new $.StateError("Adding event after close"));
      if (t1._subscription != null)
        t1._sendData$1(t2);
      else if ((t3 & 1) === 0) {
        t2 = new $._DelayedData(t2, null);
        $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0)]);
        t1._addPendingEvent$1(t2);
      }
    }
    workbench.get$aceEditor;
    this.aceEditor = workbench._liblib8$_aceEditor;
    this.session = $.AceEditSession$();
    t1 = this.session;
    t2 = $.workbench.contentManager.getHandlerForName$1(this._liblib8$_name).get$aceMode();
    t1.setMode$1;
    t1.proxy.setMode$1(t2);
    t2 = this.session;
    t2.get$onChange;
    t2.streamController._stream.listen$1(new $.AceEditorPart_closure(this));
  }
},

"+AceEditorPart": 0,

AceEditorPart_closure: {
  "": function AceEditorPart_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function($event) {
    var t1, t2, t3, t4;
    t1 = this.this_0;
    if (!$.$eq(t1.get$_dirty(), true)) {
      t1.set$_dirty(true);
      t2 = t1.get$eventStream();
      t3 = new $.WorkbenchPartEvent();
      t4 = t2.get$_state();
      if (typeof t4 !== "number")
        throw t4.$and();
      if ((t4 & 2) !== 0)
        $.throwExpression(new $.StateError("Adding event after close"));
      if (t2.get$_subscription() != null)
        t2._sendData$1(t3);
      else if ((t4 & 1) === 0) {
        t3 = new $._DelayedData(t3, null);
        $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(t2, t2.$as_StreamController, 0)]);
        t2._addPendingEvent$1(t3);
      }
    }
    t2 = t1.get$_reconcileTimer();
    if (t2 != null) {
      t2.cancel$0;
      if (t2.get$_isDone() !== true) {
        t3 = t2.get$_zone();
        t4 = t3.get$_openCallbacks();
        if (typeof t4 !== "number")
          throw t4.$sub();
        t3.set$_openCallbacks(t4 - 1);
        t3._checkIfDone$0();
      }
      t2.set$_isDone(true);
      t2.get$_timer().cancel$0();
    }
    t2 = $.Duration$(0, 0, 0, 500, 0, 0);
    t3 = t1.get$fireReconcileEvent();
    t1.set$_reconcileTimer($._ZoneTimer$($.get$_Zone__current(), t2, t3));
  },
  $isFunction: true
},

"+AceEditorPart_closure": 0,

AceEditorPart_createContent_closure: {
  "": function AceEditorPart_createContent_closure(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(contents) {
    var t1, t2, t3, t4;
    t1 = this.this_0;
    t2 = t1.get$session();
    t2.getDocument$0;
    t2 = $.get$document$x(t2);
    t2.setValue$1;
    $.propertyTypeCast(t2.get$documentProxy(), "$isProxy0").setValue$1(contents);
    t2 = t1.get$aceEditor();
    t2.navigateFileStart$0;
    t2.get$_aceEditor().navigateFileStart$0();
    if (!$.$eq(t1.get$_dirty(), false)) {
      t1.set$_dirty(false);
      t2 = t1.get$eventStream();
      t3 = new $.WorkbenchPartEvent();
      t4 = t2.get$_state();
      if (typeof t4 !== "number")
        throw t4.$and();
      if ((t4 & 2) !== 0)
        $.throwExpression(new $.StateError("Adding event after close"));
      if (t2.get$_subscription() != null)
        t2._sendData$1(t3);
      else if ((t4 & 1) === 0) {
        t3 = new $._DelayedData(t3, null);
        $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(t2, t2.$as_StreamController, 0)]);
        t2._addPendingEvent$1(t3);
      }
    }
    t2 = t1.get$_reconcileTimer();
    if (t2 != null) {
      t2.cancel$0;
      if (t2.get$_isDone() !== true) {
        t3 = t2.get$_zone();
        t4 = t3.get$_openCallbacks();
        if (typeof t4 !== "number")
          throw t4.$sub();
        t3.set$_openCallbacks(t4 - 1);
        t3._checkIfDone$0();
      }
      t2.set$_isDone(true);
      t2.get$_timer().cancel$0();
    }
    t2 = $.Duration$(0, 0, 0, 500, 0, 0);
    t3 = t1.get$fireReconcileEvent();
    t1.set$_reconcileTimer($._ZoneTimer$($.get$_Zone__current(), t2, t3));
    t1 = t1.get$eventStream();
    t3 = new $.EditorReconcileEvent();
    t2 = t1.get$_state();
    if (typeof t2 !== "number")
      throw t2.$and();
    if ((t2 & 2) !== 0)
      $.throwExpression(new $.StateError("Adding event after close"));
    if (t1.get$_subscription() != null)
      t1._sendData$1(t3);
    else if ((t2 & 1) === 0) {
      t2 = $.getRuntimeTypeArgument(t1, t1.$as_StreamController, 0);
      t3 = new $._DelayedData(t3, null);
      t3.$builtinTypeInfo = [t2];
      t1._addPendingEvent$1(t3);
    }
  },
  $isFunction: true
},

"+AceEditorPart_createContent_closure": 0,

AceEditorPart_save_closure: {
  "": function AceEditorPart_save_closure(this_0, completer_1) {
    this.this_0 = this_0;
    this.completer_1 = completer_1;
  },
  "super": "Closure",
  call$1: function(f) {
    var t1, t2, t3, t4;
    t1 = this.this_0;
    if (!$.$eq(t1.get$_dirty(), false)) {
      t1.set$_dirty(false);
      t2 = t1.get$eventStream();
      t3 = new $.WorkbenchPartEvent();
      t4 = t2.get$_state();
      if (typeof t4 !== "number")
        throw t4.$and();
      if ((t4 & 2) !== 0)
        $.throwExpression(new $.StateError("Adding event after close"));
      if (t2.get$_subscription() != null)
        t2._sendData$1(t3);
      else if ((t4 & 1) === 0) {
        t3 = new $._DelayedData(t3, null);
        $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(t2, t2.$as_StreamController, 0)]);
        t2._addPendingEvent$1(t3);
      }
    }
    t2 = t1.get$_reconcileTimer();
    if (t2 != null) {
      t2.cancel$0;
      if (t2.get$_isDone() !== true) {
        t3 = t2.get$_zone();
        t4 = t3.get$_openCallbacks();
        if (typeof t4 !== "number")
          throw t4.$sub();
        t3.set$_openCallbacks(t4 - 1);
        t3._checkIfDone$0();
      }
      t2.set$_isDone(true);
      t2.get$_timer().cancel$0();
    }
    t2 = $.Duration$(0, 0, 0, 500, 0, 0);
    t3 = t1.get$fireReconcileEvent();
    t1.set$_reconcileTimer($._ZoneTimer$($.get$_Zone__current(), t2, t3));
    t3 = this.completer_1;
    if (t3._isComplete)
      $.throwExpression(new $.StateError("Future already completed"));
    t3._isComplete = true;
    t2 = t3.future._zone;
    t2._openCallbacks = t2._openCallbacks - 1;
    if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
      ;
    t3._setFutureValue$1(t1);
  },
  $isFunction: true
},

"+AceEditorPart_save_closure": 0,

AceEditorPart_save_closure0: {
  "": function AceEditorPart_save_closure(this_2, completer_3) {
    this.this_2 = this_2;
    this.completer_3 = completer_3;
  },
  "super": "Closure",
  call$1: function(error) {
    var t1, t2, t3, t4;
    t1 = $.workbench.messageArea;
    t2 = "Error Saving " + $.S(this.this_2.get$_liblib8$_name());
    t3 = $.toString$0(error);
    t1.showErrorAlert$2;
    t1 = t1._messageElement;
    t4 = new $.BAlert(null, null, null);
    t4.element = $.document().createElement("div");
    $.add$1$ax($.get$classes$x(t4.element), "alert");
    if (t1 != null) {
      t1 = $.get$children$x(t1);
      t1.add$1(t1, t4.element);
    }
    t1 = new $.BElement(null);
    t1.element = $.Element_Element$tag("strong");
    t1.setParent$1(null);
    $.add$1$ax($.get$children$x(t4.element), t1.element);
    t4._titleSpan = t1.element;
    t1 = new $.BSpan(null);
    t1.element = $.Element_Element$tag("span");
    t1.setParent$1(null);
    t1.innerHtml$1(t1, "&nbsp;");
    $.add$1$ax($.get$children$x(t4.element), t1.element);
    t1 = new $.BSpan(null);
    t1.element = $.Element_Element$tag("span");
    t1.setParent$1(null);
    $.add$1$ax($.get$children$x(t4.element), t1.element);
    t4._messageSpan = t1.element;
    $.set$innerHtml$x(t4._titleSpan, t2);
    $.set$innerHtml$x(t4._messageSpan, t3);
    $.add$1$ax($.get$classes$x(t4.element), "alert-error");
    t4.closeButton$0();
    this.completer_3.completeError$1(error);
  },
  $isFunction: true
},

"+AceEditorPart_save_closure": 0,

AceEditorPart_saveAs_closure: {
  "": function AceEditorPart_saveAs_closure(this_0, completer_1) {
    this.this_0 = this_0;
    this.completer_1 = completer_1;
  },
  "super": "Closure",
  call$1: function(file) {
    var t1, t2, t3, t4, handler;
    if (file != null) {
      t1 = this.this_0;
      t2 = $.getInterceptor$x(t1);
      t2.set$_file(t1, file);
      t2 = $.get$name$x(t2.get$_file(t1));
      if (!$.$eq(t1.get$_liblib8$_name(), t2)) {
        t1.set$_liblib8$_name(t2);
        t2 = t1.get$eventStream();
        t3 = new $.WorkbenchPartEvent();
        t4 = t2.get$_state();
        if (typeof t4 !== "number")
          throw t4.$and();
        if ((t4 & 2) !== 0)
          $.throwExpression(new $.StateError("Adding event after close"));
        if (t2.get$_subscription() != null)
          t2._sendData$1(t3);
        else if ((t4 & 1) === 0) {
          t3 = new $._DelayedData(t3, null);
          $.setRuntimeTypeInfo(t3, [$.getRuntimeTypeArgument(t2, t2.$as_StreamController, 0)]);
          t2._addPendingEvent$1(t3);
        }
      }
      handler = t1.get$workbench().get$contentManager().getHandlerForName$1(t1.get$_liblib8$_name());
      t2 = t1.get$session();
      t3 = handler.get$aceMode();
      t2.setMode$1;
      t2.get$proxy().setMode$1(t3);
      t3 = this.completer_1;
      t1.save$0().then$1(new $.AceEditorPart_saveAs__closure(t3)).catchError$1(new $.AceEditorPart_saveAs__closure0(t3));
    } else {
      t1 = this.completer_1;
      if (t1._isComplete)
        $.throwExpression(new $.StateError("Future already completed"));
      t1._isComplete = true;
      t2 = t1.future._zone;
      t2._openCallbacks = t2._openCallbacks - 1;
      if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
        ;
      t1._setFutureValue$1(null);
    }
  },
  $isFunction: true
},

"+AceEditorPart_saveAs_closure": 0,

AceEditorPart_saveAs__closure: {
  "": function AceEditorPart_saveAs__closure(completer_2) {
    this.completer_2 = completer_2;
  },
  "super": "Closure",
  call$1: function(result) {
    var t1, t2;
    t1 = this.completer_2;
    if (t1._isComplete)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._isComplete = true;
    t2 = t1.future._zone;
    t2._openCallbacks = t2._openCallbacks - 1;
    if (!t2._isExecutingCallback && t2._openCallbacks === 0 && t2._children.length === 0)
      ;
    t1._setFutureValue$1(result);
  },
  $isFunction: true
},

"+AceEditorPart_saveAs__closure": 0,

AceEditorPart_saveAs__closure0: {
  "": function AceEditorPart_saveAs__closure(completer_3) {
    this.completer_3 = completer_3;
  },
  "super": "Closure",
  call$1: function(error) {
    this.completer_3.completeError$1(error);
  },
  $isFunction: true
},

"+AceEditorPart_saveAs__closure": 0,

ResourceLabelProvider: {
  "": function ResourceLabelProvider() {
  },
  "super": "TreeLabelProvider",
  render$2: function(treeItem, resource) {
    var t1 = $.get$children$x(treeItem.element);
    t1 = $.get$children$x(t1.get$first(t1));
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.render$2$bailout1(1, resource, t1);
    if (1 >= t1.length)
      throw $.ioore(1);
    $.set$text$x(t1[1], $.get$name$x(resource));
  },
  render$2$bailout1: function(state0, resource, t1) {
    $.set$text$x($.$index$asx(t1, 1), $.get$name$x(resource));
  },
  $asTreeLabelProvider: function() { return [null]; }
},

"+ResourceLabelProvider": 0,

AstLabelProvider: {
  "": function AstLabelProvider() {
  },
  "super": "TreeLabelProvider",
  render$2: function(treeItem, node) {
    var text, vars, t1, t2;
    if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isClassDeclaration)
      text = $.toString$0(node._liblib4$_name);
    else if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isFunctionDeclaration)
      text = $.S(node._liblib4$_name) + "()";
    else if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isTopLevelVariableDeclaration) {
      vars = node._variableList.get$variables();
      t1 = $.getInterceptor$asx(vars);
      if (t1.get$isEmpty(vars) === true)
        text = "";
      else {
        t2 = t1.get$length(vars);
        if (typeof t2 !== "number")
          return this.render$2$bailout1(1, treeItem, vars, t1, t2);
        if (t2 === 1) {
          text = $.toString$0($.get$name$x(t1.get$first(vars)));
          if (typeof text !== "string")
            return this.render$2$bailout1(2, treeItem, 0, 0, 0, text);
        } else
          text = $.S($.toString$0($.get$name$x(t1.get$first(vars)))) + ", ...";
      }
    } else if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isLibraryDirective)
      text = $.S(node._liblib4$_libraryToken) + " " + $.S(node._liblib4$_name);
    else if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isPartOfDirective)
      text = "part of " + $.S(node._liblib4$_libraryName);
    else if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isUriBasedDirective)
      text = $.S(node.get$keyword()) + " " + $.S($.analysisLiteralToString(node._uri));
    else if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isFieldDeclaration) {
      vars = node._fieldList.get$variables();
      t1 = $.getInterceptor$asx(vars);
      if (t1.get$isEmpty(vars) === true)
        text = "";
      else {
        t2 = t1.get$length(vars);
        if (typeof t2 !== "number")
          return this.render$2$bailout1(3, treeItem, vars, t1, t2);
        if (t2 === 1) {
          text = $.toString$0($.get$name$x(t1.get$first(vars)));
          if (typeof text !== "string")
            return this.render$2$bailout1(4, treeItem, 0, 0, 0, text);
        } else
          text = $.S($.toString$0($.get$name$x(t1.get$first(vars)))) + ", ...";
      }
    } else if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isConstructorDeclaration) {
      t1 = node._liblib4$_name;
      t2 = node._returnType;
      text = t1 == null ? $.S(t2) + "()" : $.S(t2) + "{ctor.name}()";
    } else if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isMethodDeclaration)
      text = $.S(node._liblib4$_name) + "()";
    else {
      t1 = $.getInterceptor(node);
      $.Primitives_printString($.toString$0($.toString$0(t1.get$runtimeType(node))));
      text = t1.toString$0(node);
      if (typeof text !== "string")
        return this.render$2$bailout1(5, treeItem, 0, 0, 0, text);
    }
    t1 = $.get$children$x(treeItem.element);
    t1 = $.get$children$x(t1.get$first(t1));
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.render$2$bailout1(6, 0, 0, t1, 0, text);
    if (1 >= t1.length)
      throw $.ioore(1);
    $.set$text$x(t1[1], text);
  },
  render$2$bailout1: function(state0, treeItem, vars, t1, t2, text) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 0 && typeof node === "object" && node !== null && !!$.getInterceptor(node).$isClassDeclaration)
          text = $.toString$0(node._liblib4$_name);
        else
          switch (state0) {
            case 0:
            default:
              if (state0 === 0 && typeof node === "object" && node !== null && !!$.getInterceptor(node).$isFunctionDeclaration)
                text = $.S(node._liblib4$_name) + "()";
              else
                switch (state0) {
                  case 0:
                  default:
                    if (state0 === 2 || state0 === 1 || state0 === 0 && typeof node === "object" && node !== null && !!$.getInterceptor(node).$isTopLevelVariableDeclaration)
                      switch (state0) {
                        case 0:
                          vars = node._variableList.get$variables();
                          t1 = $.getInterceptor$asx(vars);
                        default:
                          if (state0 === 0 && t1.get$isEmpty(vars) === true)
                            text = "";
                          else
                            switch (state0) {
                              case 0:
                                t2 = t1.get$length(vars);
                              case 1:
                                state0 = 0;
                              case 2:
                                if (state0 === 2 || state0 === 0 && $.$eq(t2, 1))
                                  switch (state0) {
                                    case 0:
                                      text = $.toString$0($.get$name$x(t1.get$first(vars)));
                                    case 2:
                                      state0 = 0;
                                  }
                                else
                                  text = $.S($.toString$0($.get$name$x(t1.get$first(vars)))) + ", ...";
                            }
                      }
                    else
                      switch (state0) {
                        case 0:
                        default:
                          if (state0 === 0 && typeof node === "object" && node !== null && !!$.getInterceptor(node).$isLibraryDirective)
                            text = $.S(node._liblib4$_libraryToken) + " " + $.S(node._liblib4$_name);
                          else
                            switch (state0) {
                              case 0:
                              default:
                                if (state0 === 0 && typeof node === "object" && node !== null && !!$.getInterceptor(node).$isPartOfDirective)
                                  text = "part of " + $.S(node._liblib4$_libraryName);
                                else
                                  switch (state0) {
                                    case 0:
                                    default:
                                      if (state0 === 0 && typeof node === "object" && node !== null && !!$.getInterceptor(node).$isUriBasedDirective)
                                        text = $.S(node.get$keyword()) + " " + $.S($.analysisLiteralToString(node._uri));
                                      else
                                        switch (state0) {
                                          case 0:
                                          default:
                                            if (state0 === 4 || state0 === 3 || state0 === 0 && typeof node === "object" && node !== null && !!$.getInterceptor(node).$isFieldDeclaration)
                                              switch (state0) {
                                                case 0:
                                                  vars = node._fieldList.get$variables();
                                                  t1 = $.getInterceptor$asx(vars);
                                                default:
                                                  if (state0 === 0 && t1.get$isEmpty(vars) === true)
                                                    text = "";
                                                  else
                                                    switch (state0) {
                                                      case 0:
                                                        t2 = t1.get$length(vars);
                                                      case 3:
                                                        state0 = 0;
                                                      case 4:
                                                        if (state0 === 4 || state0 === 0 && $.$eq(t2, 1))
                                                          switch (state0) {
                                                            case 0:
                                                              text = $.toString$0($.get$name$x(t1.get$first(vars)));
                                                            case 4:
                                                              state0 = 0;
                                                          }
                                                        else
                                                          text = $.S($.toString$0($.get$name$x(t1.get$first(vars)))) + ", ...";
                                                    }
                                              }
                                            else
                                              switch (state0) {
                                                case 0:
                                                case 5:
                                                  if (state0 === 0 && typeof node === "object" && node !== null && !!$.getInterceptor(node).$isConstructorDeclaration) {
                                                    t1 = node._liblib4$_name;
                                                    t2 = node._returnType;
                                                    text = t1 == null ? $.S(t2) + "()" : $.S(t2) + "{ctor.name}()";
                                                  } else
                                                    switch (state0) {
                                                      case 0:
                                                      case 5:
                                                        if (state0 === 0 && typeof node === "object" && node !== null && !!$.getInterceptor(node).$isMethodDeclaration)
                                                          text = $.S(node._liblib4$_name) + "()";
                                                        else
                                                          switch (state0) {
                                                            case 0:
                                                              t1 = $.getInterceptor(node);
                                                              $.Primitives_printString($.toString$0($.toString$0(t1.get$runtimeType(node))));
                                                              text = t1.toString$0(node);
                                                            case 5:
                                                              state0 = 0;
                                                          }
                                                    }
                                              }
                                        }
                                  }
                            }
                      }
                }
          }
        t1 = $.get$children$x(treeItem.element);
        t1 = $.get$children$x(t1.get$first(t1));
      case 6:
        state0 = 0;
        $.set$text$x($.$index$asx(t1, 1), text);
    }
  },
  $asTreeLabelProvider: function() { return [null]; }
},

"+AstLabelProvider": 0,

FilesContentProvider: {
  "": function FilesContentProvider(emptyList, streamController, _liblib7$_stream) {
    this.emptyList = emptyList;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
  },
  "super": "ContentProvider",
  get$emptyList: function() {
    return this.emptyList;
  },
  set$emptyList: function(v) {
    this.emptyList = v;
  },
  getRoots$1: function(workspace) {
    return $.where$1$ax(workspace.getChildren$0(), new $.FilesContentProvider_getRoots_closure());
  },
  "+getRoots:1:0": 0,
  hasChildren$1: function(node) {
    return false;
  },
  "+hasChildren:1:0": 0,
  getChildren$1: function(node) {
    return this.emptyList;
  },
  "+getChildren:1:0": 0,
  $asContentProvider: function() { return [null]; }
},

"+FilesContentProvider": 0,

FilesContentProvider_getRoots_closure: {
  "": function FilesContentProvider_getRoots_closure() {
  },
  "super": "Closure",
  call$1: function(r) {
    return typeof r === "object" && r !== null && !!$.getInterceptor(r).$isFile;
  },
  $isFunction: true
},

"+FilesContentProvider_getRoots_closure": 0,

FoldersContentProvider: {
  "": function FoldersContentProvider(emptyList, readOnly, streamController, _liblib7$_stream) {
    this.emptyList = emptyList;
    this.readOnly = readOnly;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
  },
  "super": "ContentProvider",
  get$emptyList: function() {
    return this.emptyList;
  },
  set$emptyList: function(v) {
    this.emptyList = v;
  },
  get$readOnly: function(receiver) {
    return this.readOnly;
  },
  set$readOnly: function(receiver, v) {
    this.readOnly = v;
  },
  getRoots$1: function(workspace) {
    return $.where$1$ax(workspace.getChildren$0(), new $.FoldersContentProvider_getRoots_closure());
  },
  hasChildren$1: function(node) {
    return true;
  },
  getChildren$1: function(node) {
    return this.emptyList;
  },
  $asContentProvider: function() { return [null]; }
},

"+FoldersContentProvider": 0,

FoldersContentProvider_getRoots_closure: {
  "": function FoldersContentProvider_getRoots_closure() {
  },
  "super": "Closure",
  call$1: function(r) {
    return typeof r === "object" && r !== null && !!$.getInterceptor(r).$isFolder;
  },
  $isFunction: true
},

"+FoldersContentProvider_getRoots_closure": 0,

AstContentProvider: {
  "": function AstContentProvider(emptyList, streamController, _liblib7$_stream) {
    this.emptyList = emptyList;
    this.streamController = streamController;
    this._liblib7$_stream = _liblib7$_stream;
  },
  "super": "ContentProvider",
  get$emptyList: function() {
    return this.emptyList;
  },
  set$emptyList: function(v) {
    this.emptyList = v;
  },
  getRoots$1: function(unit) {
    var list = $.List_List($, null);
    $.JSArray_methods.addAll$1(list, unit.get$directives());
    $.JSArray_methods.addAll$1(list, unit.get$declarations());
    return list;
  },
  hasChildren$1: function(node) {
    var t1;
    if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isClassDeclaration) {
      t1 = node._members;
      return !t1.get$isEmpty(t1);
    } else
      return false;
  },
  getChildren$1: function(node) {
    if (typeof node === "object" && node !== null && !!$.getInterceptor(node).$isClassDeclaration)
      return node._members;
    else
      return this.emptyList;
  },
  $asContentProvider: function() { return [null]; }
},

"+AstContentProvider": 0,

ContentManager: {
  "": function ContentManager(_handlerMap, textContentHandler) {
    this._handlerMap = _handlerMap;
    this.textContentHandler = textContentHandler;
  },
  "super": "Object",
  get$_handlerMap: function() {
    return this._handlerMap;
  },
  set$_handlerMap: function(v) {
    this._handlerMap = v;
  },
  get$textContentHandler: function() {
    return this.textContentHandler;
  },
  set$textContentHandler: function(v) {
    this.textContentHandler = v;
  },
  register$1: function(_, handler) {
    var t1, t2;
    t1 = handler.extensions;
    t2 = $.getRuntimeTypeArgument(t1, t1.$asJSArray, 0);
    t1 = new $.ListIterator(t1, t1.length, 0, null);
    t1.$builtinTypeInfo = [t2];
    t2 = this._handlerMap;
    for (; t1.moveNext$0();)
      t2.$indexSet(t2, t1._liblib$_current, handler);
  },
  "+register:1:0": 0,
  getHandlerForName$1: function($name) {
    var t1, index, t2;
    t1 = $.getInterceptor$asx($name);
    index = t1.lastIndexOf$1($name, ".");
    t2 = $.getInterceptor(index);
    if (t2.$eq(index, -1))
      return this.getHandlerForExtension$1($name);
    else
      return this.getHandlerForExtension$1(t1.substring$1($name, t2.$add(index, 1)));
  },
  getHandlerForExtension$1: function(ext) {
    var t1 = this._handlerMap;
    if (t1.containsKey$1(ext))
      return t1.$index(t1, $.toLowerCase$0$s(ext));
    else
      return this.textContentHandler;
  },
  "+getHandlerForExtension:1:0": 0
},

"+ContentManager": 0,

ContentHandler: {
  "": function ContentHandler(id, extensions) {
    this.id = id;
    this.extensions = extensions;
  },
  "super": "Object",
  get$id: function(receiver) {
    return this.id;
  },
  set$id: function(receiver, v) {
    this.id = v;
  },
  get$extensions: function() {
    return this.extensions;
  },
  set$extensions: function(v) {
    this.extensions = v;
  },
  get$aceMode: function() {
    return "ace/mode/text";
  },
  get$isDartMode: function() {
    return this.id === "dart";
  }
},

"+ContentHandler": 0,

DefaultContentHandler: {
  "": function DefaultContentHandler(id, extensions) {
    this.id = id;
    this.extensions = extensions;
  },
  "super": "ContentHandler",
  get$aceMode: function() {
    return "ace/mode/" + this.id;
  }
},

"+DefaultContentHandler": 0,

TextContentHandler: {
  "": function TextContentHandler(id, extensions) {
    this.id = id;
    this.extensions = extensions;
  },
  "super": "ContentHandler"
},

"+TextContentHandler": 0,

Workbench$instantiate: function(body) {
  var t1, t2, t3, t4;
  t1 = $.WorkbenchEvent;
  t1 = t1;
  t2 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
  t2.$builtinTypeInfo = [t1];
  t3 = new $._ControllerStream(t2, false);
  $.setRuntimeTypeInfo(t3, [t1]);
  t2._stream = t3;
  t1 = t2;
  t2 = new $.HashMap(0, null, null, null, null);
  t2.$builtinTypeInfo = [$.JSString, $.Action];
  t3 = $.JobManagerEvent;
  t3 = t3;
  t4 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
  t4.$builtinTypeInfo = [t3];
  t4._stream = $._ControllerStream$(t4, t3);
  t3 = t4;
  t4 = $.List_List($, $.Job);
  t4.$builtinTypeInfo = [$.Job];
  t3 = new $.JobManager(t3, null, null, t4);
  t3._liblib23$_stream = t3._liblib23$_streamController._stream.asBroadcastStream$0();
  t4 = new $.HashMap(0, null, null, null, null);
  t4.$builtinTypeInfo = [null, null];
  t1 = new $.Workbench(t1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t2, t3, new $.ContentManager(t4, new $.TextContentHandler("text", ["txt", "text"])));
  t1.Workbench$instantiate$1(body);
  return t1;
},

"+new Workbench$instantiate:1:0": 0,

ViewPartContainer$: function(workbench, $parent) {
  var t1 = new $.HashMap(0, null, null, null, null);
  t1.$builtinTypeInfo = [$.ViewPart, $.BListItem];
  t1 = new $.ViewPartContainer(workbench, null, null, null, t1);
  t1.ViewPartContainer$2(workbench, $parent);
  return t1;
},

"+new ViewPartContainer:2:0": 0,

WorkbenchPartEvent$: function() {
  return new $.WorkbenchPartEvent();
},

"+new WorkbenchPartEvent:0:0": 0,

StatusLine$: function($parent) {
  var t1 = new $.StatusLine(null, null, null);
  t1.StatusLine$1($parent);
  return t1;
},

"+new StatusLine:1:0": 0,

AceEditorPart$: function(workbench, file) {
  var t1, t2, t3;
  t1 = $.WorkbenchPartEvent;
  t1 = t1;
  t2 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
  t2.$builtinTypeInfo = [t1];
  t3 = new $._ControllerStream(t2, false);
  $.setRuntimeTypeInfo(t3, [t1]);
  t2._stream = t3;
  t1 = t2;
  t1 = new $.AceEditorPart(null, null, null, null, null, t1, workbench, null, null, null);
  t1._liblib8$_stream = t1.eventStream._stream.asBroadcastStream$0();
  t1._liblib8$_name = null;
  t1.AceEditorPart$2(workbench, file);
  return t1;
},

"+new AceEditorPart:1:1": 0}],
["workbench_test", "../test/workbench_test.dart", , {
main_closure0: {
  "": function main_closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.test("exists", new $.main__closure3());
    $.test("active part events", new $.main__closure4());
  },
  $isFunction: true
},

"+main_closure": 0,

main__closure3: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.expect($.workbench, $.C__IsNotNull, null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure4: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1, future, t2, t3, editor;
    t1 = $.workbench;
    t1.get$onChange;
    t1 = t1._liblib8$_stream;
    t1.take$1;
    t1 = new $._TakeStream(2, t1);
    t1.$builtinTypeInfo = [null];
    future = t1.toList$0(t1).then$1(new $.main___closure());
    t1 = $.workbench;
    t2 = $.WorkbenchPartEvent;
    t2 = t2;
    t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
    t3.$builtinTypeInfo = [t2];
    t3._stream = $._ControllerStream$(t3, t2);
    t2 = t3;
    editor = new $.MockEditorPart(null, null, t2, t1, null, null, null);
    t1 = editor.eventStream;
    editor._liblib8$_stream = t1._stream.asBroadcastStream$0();
    editor._liblib8$_name = null;
    if (!$.$eq(editor._liblib8$_name, "MockEditorPart")) {
      editor._liblib8$_name = "MockEditorPart";
      t1.add$1(t1, $.WorkbenchPartEvent$());
    }
    t1 = $.workbench;
    t1.addEditor$1;
    t1._editorManager.addEditor$1(editor);
    editor.close$0(editor);
    $.expect(future, $._Completes_PGb, null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main___closure: {
  "": function main___closure() {
  },
  "super": "Closure",
  call$1: function(events) {
    var t1, e;
    t1 = $.getInterceptor$ax(events);
    e = t1.removeAt$1(events, 0);
    $.expect(e, $.C__IsNotNull, null, null, false);
    $.Primitives_printString($.toString$0(e));
    e = t1.removeAt$1(events, 0);
    $.expect(e, $.C__IsNotNull, null, null, false);
    $.Primitives_printString($.toString$0(e));
  },
  $isFunction: true
},

"+main___closure": 0,

MockEditorPart: {
  "": function MockEditorPart(_dirty, _reconcileTimer, eventStream, workbench, _liblib8$_stream, _liblib8$_name, contentDiv) {
    this._dirty = _dirty;
    this._reconcileTimer = _reconcileTimer;
    this.eventStream = eventStream;
    this.workbench = workbench;
    this._liblib8$_stream = _liblib8$_stream;
    this._liblib8$_name = _liblib8$_name;
    this.contentDiv = contentDiv;
  },
  "super": "EditorPart",
  createContent$1: function(container) {
    var label = document.createElement("label");
    label.textContent = "foo";
    $.add$1$ax($.get$children$x(container), label);
    return label;
  }
},

"+MockEditorPart": 0,

main6: function() {
  $.group("workbench", new $.main_closure0());
}}],
["workspace", "../lib/workspace.dart", , {
Workspace: {
  "": function Workspace(_liblib12$_children, _store) {
    this._liblib12$_children = _liblib12$_children;
    this._store = _store;
  },
  "super": "Object",
  get$_liblib12$_children: function(receiver) {
    return this._liblib12$_children;
  },
  set$_liblib12$_children: function(receiver, v) {
    this._liblib12$_children = v;
  },
  get$_store: function() {
    return this._store;
  },
  set$_store: function(v) {
    this._store = v;
  },
  get$name: function(_) {
    return;
  },
  get$parent: function(_) {
    return;
  },
  link$1: function(entity) {
    var children = this.getChildren$0();
    children.push(new $.Folder(null, this, entity));
    this._flush$0();
  },
  getChildren$0: function() {
    return this._liblib12$_children;
  },
  _flush$0: function() {
    var t1, token;
    t1 = new $.MappedListIterable(this._liblib12$_children, new $.Workspace__flush_closure());
    t1.$builtinTypeInfo = [null, null];
    token = t1.join$1(t1, ";");
    this._store.setValue$2("resources", token);
  },
  "+_flush:0:0": 0
},

"+Workspace": 0,

Workspace__flush_closure: {
  "": function Workspace__flush_closure() {
  },
  "super": "Closure",
  call$1: function(r) {
    var t1, entityPickle;
    $.get$fileSystemManager();
    t1 = r.get$_fileEntry();
    entityPickle = t1.get$fileSystem().pickle$1(t1);
    return $.S($.get$id$x(t1.get$fileSystem())) + ":" + $.S(entityPickle);
  },
  $isFunction: true
},

"+Workspace__flush_closure": 0,

Container: {
  "": function Container(_liblib12$_children) {
    this._liblib12$_children = _liblib12$_children;
  },
  "super": "Resource",
  get$_liblib12$_children: function(receiver) {
    return this._liblib12$_children;
  },
  set$_liblib12$_children: function(receiver, v) {
    this._liblib12$_children = v;
  },
  getChildren$0: function() {
    var t1 = this._liblib12$_children;
    if (t1 != null)
      return t1;
    else {
      this._liblib12$_children = [];
      return this._liblib12$_children;
    }
  }
},

"+Container": 0,

Resource: {
  "": function Resource(_liblib12$_parent, _fileEntry) {
    this._liblib12$_parent = _liblib12$_parent;
    this._fileEntry = _fileEntry;
  },
  "super": "Object",
  get$_liblib12$_parent: function() {
    return this._liblib12$_parent;
  },
  set$_liblib12$_parent: function(v) {
    this._liblib12$_parent = v;
  },
  get$_fileEntry: function() {
    return this._fileEntry;
  },
  set$_fileEntry: function(v) {
    this._fileEntry = v;
  },
  get$name: function(_) {
    var t1 = this._fileEntry;
    t1.get$name;
    return t1._liblib11$_name;
  },
  get$parent: function(_) {
    return this._liblib12$_parent;
  }
},

"+Resource": 0,

Folder: {
  "": function Folder(_liblib12$_children, _liblib12$_parent, _fileEntry) {
    this._liblib12$_children = _liblib12$_children;
    this._liblib12$_parent = _liblib12$_parent;
    this._fileEntry = _fileEntry;
  },
  "super": "Container",
  $isFolder: true
},

"+Folder": 0,

File: {
  "": function File(_liblib12$_parent, _fileEntry) {
    this._liblib12$_parent = _liblib12$_parent;
    this._fileEntry = _fileEntry;
  },
  "super": "Resource",
  $isFile: true
},

"+File": 0}],
["workspace_test", "../test/workspace_test.dart", , {
main_closure: {
  "": function main_closure() {
  },
  "super": "Closure",
  call$0: function() {
    $.test("exists", new $.main__closure());
    $.test("parent is null", new $.main__closure0());
    $.test("name is null", new $.main__closure1());
    $.test("has child list", new $.main__closure2());
  },
  $isFunction: true
},

"+main_closure": 0,

main__closure: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.workbench;
    t1.get$workspace;
    $.expect(t1._workspace, $.C__IsNotNull, null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure0: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.workbench;
    t1.get$workspace;
    t1._workspace.get$parent;
    $.expect(null, $.C__IsNull, null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure1: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.workbench;
    t1.get$workspace;
    t1._workspace.get$name;
    $.expect(null, $.C__IsNull, null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main__closure2: {
  "": function main__closure() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.workbench;
    t1.get$workspace;
    $.expect(t1._workspace.getChildren$0(), $.C__IsNotNull, null, null, false);
  },
  $isFunction: true
},

"+main__closure": 0,

main7: function() {
  $.group("workspace", new $.main_closure());
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

$.IsolateNatives__processWorkerMessage$closure = new $.Closure$_processWorkerMessage($.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
$.Primitives__throwFormatException$closure = new $.Closure$_throwFormatException($.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
$.wrapException$closure = new $.Closure$wrapException($.wrapException, "wrapException$closure");
$.DartError_toStringWrapper$closure = new $.Closure$toStringWrapper($.DartError_toStringWrapper, "DartError_toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$._matchString$closure = new $.Closure$_matchString($._matchString, "_matchString$closure");
$._stringIdentity$closure = new $.Closure$_stringIdentity($._stringIdentity, "_stringIdentity$closure");
$._asyncRunCallback$closure = new $.Closure$_asyncRunCallback($._asyncRunCallback, "_asyncRunCallback$closure");
$._nullDataHandler$closure = new $.Closure$_nullDataHandler($._nullDataHandler, "_nullDataHandler$closure");
$._nullErrorHandler$closure = new $.Closure$_nullErrorHandler($._nullErrorHandler, "_nullErrorHandler$closure");
$._nullDoneHandler$closure = new $.Closure$_nullDoneHandler($._nullDoneHandler, "_nullDoneHandler$closure");
$.Comparable_compare$closure = new $.Closure$compare($.Comparable_compare, "Comparable_compare$closure");
$._completeMicrotasks$closure = new $.Closure$_completeMicrotasks($._completeMicrotasks, "_completeMicrotasks$closure");
$.Proxy__serializeDataTree0$closure = new $.Closure$_serializeDataTree($.Proxy__serializeDataTree0, "Proxy__serializeDataTree0$closure");
$._serialize0$closure = new $.Closure$_serialize($._serialize0, "_serialize0$closure");
$._deserialize0$closure = new $.Closure$_deserialize($._deserialize0, "_deserialize0$closure");
$.Proxy__serializeDataTree$closure = new $.Closure$_serializeDataTree0($.Proxy__serializeDataTree, "Proxy__serializeDataTree$closure");
$._serialize$closure = new $.Closure$_serialize0($._serialize, "_serialize$closure");
$._deserialize$closure = new $.Closure$_deserialize0($._deserialize, "_deserialize$closure");
$._defaultErrorFormatter$closure = new $.Closure$_defaultErrorFormatter($._defaultErrorFormatter, "_defaultErrorFormatter$closure");
$.runTests$closure = new $.Closure$runTests($.runTests, "runTests$closure");
$.escapeString$closure = new $.Closure$escapeString($.escapeString, "escapeString$closure");
$._escapeChar$closure = new $.Closure$_escapeChar($._escapeChar, "_escapeChar$closure");
$.main8$closure = new $.Closure$main($.main8, "main8$closure");
$.AnalysisError.$isAnalysisError = true;
$.Source.$isSource = true;
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$nx = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.DomName_6FR0 = new $.DomName("SVGFECompositeElement.k1");
$.DomName_gbY = new $.DomName("HTMLTableElement.HTMLTableElement");
$.DomName_8g6 = new $.DomName("ClientRect.top");
$.DomName_eYh = new $.DomName("SVGSVGElement.currentView");
$.DomName_8aB = new $.DomName("FileEntry.file");
$.DomName_5e8 = new $.DomName("SVGFETurbulenceElement.x");
$.DomName_Ogs = new $.DomName("Window.close");
$.DomName_WebGLDepthTexture = new $.DomName("WebGLDepthTexture");
$.DomName_7A3 = new $.DomName("HTMLButtonElement.validity");
$.DomName_iz6 = new $.DomName("HTMLFieldSetElement.form");
$.DomName_9uD = new $.DomName("SVGFEGaussianBlurElement.x");
$.DomName_8Wd = new $.DomName("SVGRectElement.externalResourcesRequired");
$.DomName_HTMLAnchorElement = new $.DomName("HTMLAnchorElement");
$.JSName_createEvent = new $.JSName("createEvent");
$.DomName_omC = new $.DomName("HTMLScriptElement.type");
$.Duration_0 = new $.Duration(0);
$.DomName_ssD = new $.DomName("MIDIConnectionEvent.port");
$.JSName_oldURL = new $.JSName("oldURL");
$.C_NullThrownError = new $.NullThrownError();
$.DomName_RTCIceCandidate = new $.DomName("RTCIceCandidate");
$.DomName_XtO = new $.DomName("CSSFontFaceLoadEvent.error");
$.DomName_eAf = new $.DomName("Navigator.vendorSub");
$.DomName_WebKitCSSKeyframeRule = new $.DomName("WebKitCSSKeyframeRule");
$.JSName_webkitClosedCaptionsVisible = new $.JSName("webkitClosedCaptionsVisible");
$.DomName_Rlj = new $.DomName("Document.webkitPointerLockElement");
$.DomName_Wfd = new $.DomName("SVGEllipseElement.xmlspace");
$.DomName_8x2 = new $.DomName("Document.preferredStylesheetSet");
$.DomName_IsU = new $.DomName("SVGFESpecularLightingElement.x");
$.DomName_MediaStreamAudioSourceNode = new $.DomName("MediaStreamAudioSourceNode");
$.DomName_w5T = new $.DomName("SVGForeignObjectElement.requiredFeatures");
$.DomName_8aB0 = new $.DomName("AudioContext.createOscillator");
$.DomName_A9C = new $.DomName("XMLHttpRequest.withCredentials");
$.DomName_HTMLMarqueeElement = new $.DomName("HTMLMarqueeElement");
$.DomName_XMLHttpRequestUpload = new $.DomName("XMLHttpRequestUpload");
$.DomName_AuK = new $.DomName("MutationEvent.prevValue");
$.DomName_Fme = new $.DomName("SVGPathElement.normalizedPathSegList");
$.DomName_oGx = new $.DomName("SVGRectElement.systemLanguage");
$.DomName_3uR1 = new $.DomName("Window.screenY");
$.DomName_MYu = new $.DomName("HTMLQuoteElement.cite");
$.DomName_8aB1 = new $.DomName("XMLHttpRequest.onerror");
$.DomName_KEX = new $.DomName("SVGPolygonElement.nearestViewportElement");
$.DomName_SVGPathElement = new $.DomName("SVGPathElement");
$.DomName_GamepadList = new $.DomName("GamepadList");
$.DomName_RTCDataChannel = new $.DomName("RTCDataChannel");
$.DomName_VzM = new $.DomName("SVGUseElement.xmlspace");
$.DomName_QBJ = new $.DomName("SVGFECompositeElement.in1");
$.C_JSUnknown = new $.JSUnknown();
$.DomName_4CA = new $.DomName("DeviceOrientationEvent.alpha");
$.DomName_efW = new $.DomName("Window.onchange");
$.DomName_SPV = new $.DomName("OscillatorNode.start");
$.DomName_AKW0 = new $.DomName("MutationRecord.previousSibling");
$.DomName_SQLTransactionSync = new $.DomName("SQLTransactionSync");
$.JSName_preferredStylesheetSet = new $.JSName("preferredStylesheetSet");
$.JSName_parentElement = new $.JSName("parentElement");
$.DomName_K1t = new $.DomName("HTMLParamElement.value");
$.DomName_FeV = new $.DomName("HTMLIFrameElement.src");
$.DomName_SVGMatrix = new $.DomName("SVGMatrix");
$.DomName_Gco = new $.DomName("SVGAElement.requiredExtensions");
$.DomName_HTMLOptionsCollection = new $.DomName("HTMLOptionsCollection");
$.DomName_Xdq = new $.DomName("Document.selectedStylesheetSet");
$.DomName_OscillatorNode = new $.DomName("OscillatorNode");
$.DomName_gc6 = new $.DomName("SVGForeignObjectElement.nearestViewportElement");
$.DomName_ad2 = new $.DomName("HTMLMetaElement.name");
$.DomName_ciW = new $.DomName("HTMLMeterElement.labels");
$.DomName_ur1 = new $.DomName("Window.innerHeight");
$.DomName_UJh = new $.DomName("Document.lastElementChild");
$.DomName_eMT = new $.DomName("CSSFontFaceLoadEvent.fontface");
$.Type_woc = $.createRuntimeType('Null');
$.DomName_Iik = new $.DomName("SVGFETurbulenceElement.width");
$.DomName_wEo = new $.DomName("KeyboardEvent.metaKey");
$.DomName_vdt = new $.DomName("SVGStopElement.offset");
$.DomName_eAf0 = new $.DomName("HTMLTextAreaElement.placeholder");
$.DomName_lbd = new $.DomName("SVGMarkerElement.orientType");
$.DomName_u61 = new $.DomName("SVGFEPointLightElement.y");
$.DomName_itQ = new $.DomName("Window.CSS");
$.DomName_SVGPolylineElement = new $.DomName("SVGPolylineElement");
$.DomName_QpY = new $.DomName("HTMLInputElement.form");
$.DomName_KZz = new $.DomName("HTMLTrackElement.kind");
$.DomName_Dns = new $.DomName("Entry.filesystem");
$.JSName_top = new $.JSName("top");
$.DomName_CSSFontFaceRule = new $.DomName("CSSFontFaceRule");
$.DomName_8k8 = new $.DomName("SVGAnimatedLength.baseVal");
$.DomName_RGBColor = new $.DomName("RGBColor");
$.DomName_uVP = new $.DomName("SVGUseElement.requiredFeatures");
$.DomName_QgH = new $.DomName("Window.onkeydown");
$.DomName_y8z = new $.DomName("XMLHttpRequest.errorEvent");
$.JSName_source = new $.JSName("source");
$.DomName_DOMFileSystem = new $.DomName("DOMFileSystem");
$.DomName_ASc = new $.DomName("SVGFEDiffuseLightingElement.in1");
$.DomName_ASw = new $.DomName("MouseEvent.clientX");
$.DomName_SQLResultSet = new $.DomName("SQLResultSet");
$.DomName_SVGFontElement = new $.DomName("SVGFontElement");
$.DomName_ydE = new $.DomName("Document.styleSheets");
$.DomName_aB5 = new $.DomName("SVGMaskElement.maskUnits");
$.DomName_AudioParam = new $.DomName("AudioParam");
$.DomName_DTA = new $.DomName("MouseEvent.ctrlKey");
$.DomName_HTMLFormElement = new $.DomName("HTMLFormElement");
$.DomName_1mP = new $.DomName("HTMLBodyElement.onmessage");
$.DomName_SVGColor = new $.DomName("SVGColor");
$.DomName_wnc = new $.DomName("SVGFEMergeElement.width");
$.DomName_g8I = new $.DomName("SVGZoomEvent.newScale");
$.DomName_0wo = new $.DomName("Element.isContentEditable");
$.DomName_chs = new $.DomName("Window.ondblclick");
$.DomName_CanvasPattern = new $.DomName("CanvasPattern");
$.DomName_2A2 = new $.DomName("HTMLMediaElement.buffered");
$.DomName_YX3 = new $.DomName("Document.domain");
$.DomName_kMT = new $.DomName("Node.firstChild");
$.DomName_nZd = new $.DomName("SVGGradientElement.externalResourcesRequired");
$.DomName_WebGLActiveInfo = new $.DomName("WebGLActiveInfo");
$.DomName_C0t = new $.DomName("HTMLScriptElement.crossOrigin");
$.DomName_uIG = new $.DomName("HTMLObjectElement.validity");
$.DomName_0 = new $.DomName("SVGPolylineElement.requiredExtensions");
$.DomName_Mo2 = new $.DomName("HTMLScriptElement.defer");
$.DomName_2JC = new $.DomName("MediaStream.label");
$.DomName_NodeFilter = new $.DomName("NodeFilter");
$.DomName_ClientRectList = new $.DomName("ClientRectList");
$.DomName_HTMLOutputElement = new $.DomName("HTMLOutputElement");
$.DomName_HTMLTrackElement = new $.DomName("HTMLTrackElement");
$.DomName_SVGAnimateColorElement = new $.DomName("SVGAnimateColorElement");
$.DomName_AudioListener = new $.DomName("AudioListener");
$.DomName_oWp = new $.DomName("SVGCircleElement.cx");
$.DomName_IEE = new $.DomName("HTMLProgressElement.labels");
$.DomName_SVGCursorElement = new $.DomName("SVGCursorElement");
$.DomName_SecurityPolicyViolationEvent = new $.DomName("SecurityPolicyViolationEvent");
$.DomName_aBG = new $.DomName("BarProp.visible");
$.DomName_SVGSwitchElement = new $.DomName("SVGSwitchElement");
$.DomName_int = new $.DomName("MutationEvent.attrName");
$.DomName_XPathExpression = new $.DomName("XPathExpression");
$.DomName_PerformanceNavigation = new $.DomName("PerformanceNavigation");
$.DomName_cD9 = new $.DomName("HTMLTextAreaElement.selectionStart");
$.DomName_Y6D0 = new $.DomName("TouchEvent.shiftKey");
$.DomName_EW9 = new $.DomName("Event.stopPropagation");
$.DomName_SpeechRecognitionAlternative = new $.DomName("SpeechRecognitionAlternative");
$.DomName_1KU = new $.DomName("MouseEvent.screenX");
$.DomName_VWS = new $.DomName("SVGFEImageElement.xmllang");
$.DomName_ia3 = new $.DomName("TouchEvent.altKey");
$.DomName_f51 = new $.DomName("SVGAnimatedEnumeration.animVal");
$.DomName_cJC = new $.DomName("Entry.name");
$.C__DelayedDone = new $._DelayedDone();
$.DomName_SqY = new $.DomName("MutationRecord.attributeNamespace");
$.DomName_FileWriter = new $.DomName("FileWriter");
$.DomName_71d = new $.DomName("HTMLTextAreaElement.maxLength");
$.DomName_43h = new $.DomName("Document.onerror");
$.DomName_WebGLCompressedTextureS3TC = new $.DomName("WebGLCompressedTextureS3TC");
$.DomName_zPV = new $.DomName("SVGFilterElement.filterUnits");
$.DomName_a99 = new $.DomName("Element.contentEditable");
$.DomName_3Kn = new $.DomName("SVGMaskElement.xmllang");
$.DomName_QKd = new $.DomName("HTMLInputElement.selectionEnd");
$.DomName_uLq = new $.DomName("XMLHttpRequest.XMLHttpRequest");
$.DomName_u5T = new $.DomName("Selection.anchorOffset");
$.DomName_SVGTRefElement = new $.DomName("SVGTRefElement");
$.Creates_8Gl = new $.Creates("num|String|bool|=List|=Object|Blob|File|ByteBuffer|TypedData");
$.DomName_SVGFEFloodElement = new $.DomName("SVGFEFloodElement");
$.DomName_XPathEvaluator = new $.DomName("XPathEvaluator");
$.DomName_EcO = new $.DomName("HTMLMediaElement.loop");
$.DomName_ydq = new $.DomName("Node.localName");
$.Returns_NQk = new $.Returns("num|String|bool|=List|=Object|Blob|File|ByteBuffer|TypedData");
$.DomName_woc = new $.DomName("SVGClipPathElement.externalResourcesRequired");
$.JSName_pageY = new $.JSName("pageY");
$.C_CloseToken = new $.CloseToken();
$.DomName_AudioNode = new $.DomName("AudioNode");
$.DomName_cBV = new $.DomName("HTMLInputElement.accept");
$.DomName_SVGVKernElement = new $.DomName("SVGVKernElement");
$.DomName_UW2 = new $.DomName("StorageEvent.url");
$.DomName_WDS = new $.DomName("SVGFEGaussianBlurElement.stdDeviationY");
$.DomName_gj2 = new $.DomName("HTMLVideoElement.webkitDecodedFrameCount");
$.DomName_gkc = new $.DomName("SVGImageElement.nearestViewportElement");
$.DomName_B8J0 = new $.DomName("SVGAnimatedNumber.animVal");
$.DomName_IDBObjectStore = new $.DomName("IDBObjectStore");
$.DomName_SVGFEMergeElement = new $.DomName("SVGFEMergeElement");
$.DomName_OA2 = new $.DomName("UIEvent.which");
$.DomName_yHZ = new $.DomName("Window.self");
$.DomName_EKW = new $.DomName("HashChangeEvent.oldURL");
$.SupportedBrowser_Firefox_null = new $.SupportedBrowser("Firefox", null);
$.DomName_6FR = new $.DomName("Document.createElement");
$.DomName_TransitionEvent = new $.DomName("TransitionEvent");
$.DomName_ACe = new $.DomName("SVGLineElement.xmlspace");
$.DomName_TextMetrics = new $.DomName("TextMetrics");
$.DomName_iDZ0 = new $.DomName("Element.clickEvent");
$.DomName_HTMLAppletElement = new $.DomName("HTMLAppletElement");
$.DomName_SVGFontFaceElement = new $.DomName("SVGFontFaceElement");
$.DomName_0kY = new $.DomName("Document.onchange");
$.DomName_SVGAnimatedString = new $.DomName("SVGAnimatedString");
$.Type_a9w = $.createRuntimeType('bool');
$.DomName_q22 = new $.DomName("MouseEvent.metaKey");
$.DomName_Y7N = new $.DomName("HTMLTableRowElement.rowIndex");
$.JSNumber_methods = $.JSNumber.prototype;
$.DomName_oCX = new $.DomName("HTMLButtonElement.form");
$.DomName_oCX0 = new $.DomName("MutationRecord.type");
$.DomName_Svv = new $.DomName("Element.webkitShadowRoot");
$.DomName_eVL = new $.DomName("DeviceMotionEvent.rotationRate");
$.DomName_gc60 = new $.DomName("SVGScriptElement.href");
$.JSName_removeChild = new $.JSName("removeChild");
$.DomName_fJC = new $.DomName("SVGFEComponentTransferElement.height");
$.DomName_PluginArray = new $.DomName("PluginArray");
$.DomName_ahM = new $.DomName("SVGCircleElement.transform");
$.DomName_ejw = new $.DomName("HTMLMediaElement.webkitAudioDecodedByteCount");
$.DomName_inH = new $.DomName("Window.scrollX");
$.DomName_Mhf = new $.DomName("SVGFECompositeElement.x");
$.DomName_Canvas2DContextAttributes = new $.DomName("Canvas2DContextAttributes");
$.DomName_7Lo = new $.DomName("HTMLDialogElement.open");
$.DomName_j7R = new $.DomName("SVGRadialGradientElement.cx");
$.Type_cGl = $.createRuntimeType('double');
$.DomName_SVGFontFaceSrcElement = new $.DomName("SVGFontFaceSrcElement");
$.JSName_webkitStorageInfo = new $.JSName("webkitStorageInfo");
$.DomName_Notification = new $.DomName("Notification");
$.DomName_mdn = new $.DomName("FileException.name");
$.DomName_Clipboard = new $.DomName("Clipboard");
$.DomName_TAp = new $.DomName("SVGLineElement.y2");
$.DomName_O9i = new $.DomName("SVGRectElement.x");
$.DomName_Oh2 = new $.DomName("SVGSymbolElement.preserveAspectRatio");
$.DomName_cQL = new $.DomName("SVGFEOffsetElement.y");
$.DomName_MYA = new $.DomName("SVGFESpecularLightingElement.specularConstant");
$.DomName_6TA = new $.DomName("HTMLScriptElement.nonce");
$.JSInt_methods = $.JSInt.prototype;
$.DomName_SWJ = new $.DomName("SVGFEFloodElement.x");
$.DomName_CwR = new $.DomName("SVGUseElement.systemLanguage");
$.DomName_WebKitCSSMixFunctionValue = new $.DomName("WebKitCSSMixFunctionValue");
$.DomName_HTMLAreaElement = new $.DomName("HTMLAreaElement");
$.DomName_HJC = new $.DomName("SVGAltGlyphElement.href");
$.DomName_sZG = new $.DomName("MessageEvent.origin");
$.EventStreamProvider_progress = $.setRuntimeTypeInfo(new $.EventStreamProvider("progress"), [$.ProgressEvent]);
$.DomName_SVGFEFuncGElement = new $.DomName("SVGFEFuncGElement");
$.DomName_OLZ = new $.DomName("HTMLAnchorElement.download");
$.DomName_TextTrackList = new $.DomName("TextTrackList");
$.DomName_Djp = new $.DomName("HTMLAreaElement.hostname");
$.DomName_chs0 = new $.DomName("HTMLInputElement.src");
$.JSName_responseXML = new $.JSName("responseXML");
$.DomName_wEo0 = new $.DomName("HTMLInputElement.max");
$.DomName_MYE = new $.DomName("SpeechRecognitionError.error");
$.DomName_HTMLTableCaptionElement = new $.DomName("HTMLTableCaptionElement");
$.DomName_SVGAnimatedLength = new $.DomName("SVGAnimatedLength");
$.DomName_JO4 = new $.DomName("HTMLMetaElement.content");
$.DomName_kyU = new $.DomName("SVGLinearGradientElement.y2");
$.JSDouble_methods = $.JSDouble.prototype;
$.DomName_SVGDefsElement = new $.DomName("SVGDefsElement");
$.DomName_Emx = new $.DomName("SVGPatternElement.y");
$.DomName_ifH = new $.DomName("Window.navigator");
$.DomName_00 = new $.DomName("HTMLKeygenElement.name");
$.DomName_kyy = new $.DomName("HTMLObjectElement.form");
$.DomName_SVGPathSegClosePath = new $.DomName("SVGPathSegClosePath");
$.DomName_46y = new $.DomName("CloseEvent.wasClean");
$.DomName_woc0 = new $.DomName("SVGFilterElement.filterResY");
$.DomName_uwZ = new $.DomName("HTMLTextAreaElement.cols");
$.DomName_6i0 = new $.DomName("SVGStyleElement.media");
$.DomName_Bzd = new $.DomName("Element.clientTop");
$.DomName_WUz = new $.DomName("SVGClipPathElement.farthestViewportElement");
$.DomName_Spk = new $.DomName("SVGSVGElement.y");
$.DomName_2No = new $.DomName("CSSStyleDeclaration.getPropertyValue");
$.DomName_bTZ = new $.DomName("SVGLineElement.xmllang");
$.DomName_e9z = new $.DomName("HTMLMediaElement.pause");
$.DomName_465 = new $.DomName("Node.removeChild");
$.DomName_Odg = new $.DomName("Console.group");
$.DomName_80L = new $.DomName("CSSStyleDeclaration.parentRule");
$.DomName_DelayNode = new $.DomName("DelayNode");
$.DomName_Skj = new $.DomName("MediaStream.id");
$.DomName_EJR = new $.DomName("SVGViewElement.zoomAndPan");
$.DomName_MSh = new $.DomName("SVGPatternElement.xmlspace");
$.JSName_webkitdirectory = new $.JSName("webkitdirectory");
$.DomName_W6F = new $.DomName("KeyboardEvent.altGraphKey");
$.JSString_methods = $.JSString.prototype;
$.DomName_Screen = new $.DomName("Screen");
$.DomName_nAM = new $.DomName("Node.contains");
$.DomName_5QF = new $.DomName("SVGAnimatedEnumeration.baseVal");
$.DomName_ScriptProcessorNode = new $.DomName("ScriptProcessorNode");
$.DomName_ACL = new $.DomName("HTMLSourceElement.media");
$.DomName_v1K = new $.DomName("HTMLTextAreaElement.readOnly");
$.DomName_ugX = new $.DomName("UIEvent.layerY");
$.DomName_YGI = new $.DomName("SVGFEDistantLightElement.elevation");
$.DomName_VoidCallback = new $.DomName("VoidCallback");
$.DomName_71d0 = new $.DomName("Event.bubbles");
$.DomName_Gamepad = new $.DomName("Gamepad");
$.DomName_Worker = new $.DomName("Worker");
$.DomName_Rwv = new $.DomName("SVGCircleElement.externalResourcesRequired");
$.DomName_Xdi = new $.DomName("HTMLTableElement.tHead");
$.DomName_SVGFEImageElement = new $.DomName("SVGFEImageElement");
$.DomName_ES1 = new $.DomName("HTMLScriptElement.event");
$.DomName_H37 = new $.DomName("CSSStyleDeclaration.length");
$.DomName_qTT = new $.DomName("HTMLInputElement.formMethod");
$.DomName_SVGPathSegLinetoVerticalAbs = new $.DomName("SVGPathSegLinetoVerticalAbs");
$.DomName_ACG = new $.DomName("SpeechRecognitionError.message");
$.DomName_SVGAnimatedInteger = new $.DomName("SVGAnimatedInteger");
$.DomName_sBE = new $.DomName("SVGSVGElement.requiredExtensions");
$.DomName_PgW = new $.DomName("HTMLInputElement.selectionStart");
$.DomName_AeS = new $.DomName("HTMLVideoElement.width");
$.DomName_ASm0 = new $.DomName("HTMLOutputElement.htmlFor");
$.DomName_SQLException = new $.DomName("SQLException");
$.DomName_i09 = new $.DomName("Window.removeEventListener");
$.DomName_SVGPathSegArcRel = new $.DomName("SVGPathSegArcRel");
$.DomName_WebGLContextAttributes = new $.DomName("WebGLContextAttributes");
$.DomName_thZ = new $.DomName("Navigator.vendor");
$.DomName_ZKG = new $.DomName("Element.localName");
$.DomName_oyn = new $.DomName("HTMLOutputElement.validationMessage");
$.DomName_SVGFilterElement = new $.DomName("SVGFilterElement");
$.DomName_EKj = new $.DomName("Element.dir");
$.DomName_Glc = new $.DomName("SVGAElement.requiredFeatures");
$.DomName_g21 = new $.DomName("HTMLTrackElement.label");
$.DomName_CHK = new $.DomName("SVGEllipseElement.ry");
$.DomName_oyU = new $.DomName("HTMLTextAreaElement.disabled");
$.DomName_cD90 = new $.DomName("HTMLImageElement.isMap");
$.DomName_sQd = new $.DomName("HTMLMediaElement.initialTime");
$.DomName_kOG = new $.DomName("SVGEllipseElement.requiredExtensions");
$.DomName_gc61 = new $.DomName("Window.personalbar");
$.DomName_01 = new $.DomName("DocumentFragment.querySelector");
$.DomName_A4L = new $.DomName("AudioNode.dispatchEvent");
$.DomName_UIEvent = new $.DomName("UIEvent");
$.DomName_Jsp = new $.DomName("SVGPatternElement.width");
$.DomName_yPV = new $.DomName("ShadowRoot.getSelection");
$.JSName_namespaceURI = new $.JSName("namespaceURI");
$.DomName_43h0 = new $.DomName("Document.body");
$.DomName_OfflineAudioContext = new $.DomName("OfflineAudioContext");
$.DomName_SVGPathSegCurvetoCubicRel = new $.DomName("SVGPathSegCurvetoCubicRel");
$.DomName_HTMLCanvasElement = new $.DomName("HTMLCanvasElement");
$.DomName_ElementTraversal = new $.DomName("ElementTraversal");
$.DomName_02 = new $.DomName("MediaKeyError.systemCode");
$.DomName_ww8 = new $.DomName("SVGAnimatedNumberList.animVal");
$.DomName_SVGLength = new $.DomName("SVGLength");
$.DomName_UqR = new $.DomName("Element.changeEvent");
$.DomName_Gxg = new $.DomName("SVGFESpotLightElement.z");
$.DomName_jnr = new $.DomName("Selection.toString");
$.DomName_QkU = new $.DomName("HTMLAnchorElement.hash");
$.DomName_SVGElementInstance = new $.DomName("SVGElementInstance");
$.DomName_OESTextureFloatLinear = new $.DomName("OESTextureFloatLinear");
$.DomName_cMm = new $.DomName("SVGMaskElement.x");
$.DomName_MediaKeyMessageEvent = new $.DomName("MediaKeyMessageEvent");
$.DomName_ChannelSplitterNode = new $.DomName("ChannelSplitterNode");
$.DomName_StyleSheetList = new $.DomName("StyleSheetList");
$.DomName_CustomEvent = new $.DomName("CustomEvent");
$.DomName_SXh = new $.DomName("HTMLTrackElement.src");
$.DomName_HTMLUnknownElement = new $.DomName("HTMLUnknownElement");
$.DomName_MUB = new $.DomName("HTMLTextAreaElement.name");
$.DomName_8Gl = new $.DomName("SVGMarkerElement.refX");
$.DomName_cdS = new $.DomName("SVGFEMorphologyElement.height");
$.DomName_LyZ = new $.DomName("XPathException.toString");
$.DomName_8lB = new $.DomName("HTMLDialogElement.show");
$.DomName_CSSSupportsRule = new $.DomName("CSSSupportsRule");
$.DomName_SVGPathSeg = new $.DomName("SVGPathSeg");
$.DomName_OESTextureFloat = new $.DomName("OESTextureFloat");
$.DomName_SVGAnimatedRect = new $.DomName("SVGAnimatedRect");
$.DomName_Opr = new $.DomName("SVGTextContentElement.xmllang");
$.DomName_HTMLDivElement = new $.DomName("HTMLDivElement");
$.DomName_abN = new $.DomName("ProgressEvent.lengthComputable");
$.JSName_lastChild = new $.JSName("lastChild");
$.DomName_8aB2 = new $.DomName("Element.onerror");
$.DomName_ChannelMergerNode = new $.DomName("ChannelMergerNode");
$.DomName_f6U = new $.DomName("MediaKeyEvent.systemCode");
$.DomName_DirectoryReader = new $.DomName("DirectoryReader");
$.DomName_i2t = new $.DomName("SVGAnimatedString.animVal");
$.DomName_H370 = new $.DomName("HTMLLinkElement.rel");
$.DomName_SVGAnimatedEnumeration = new $.DomName("SVGAnimatedEnumeration");
$.DomName_YHK = new $.DomName("SVGDefsElement.farthestViewportElement");
$.DomName_43h1 = new $.DomName("SVGSVGElement.xmlspace");
$.JSName_relatedTarget = new $.JSName("relatedTarget");
$.DomName_KHA = new $.DomName("XMLHttpRequest.readyState");
$.DomName_Okw = new $.DomName("HTMLMediaElement.currentTime");
$.DomName_ACe0 = new $.DomName("Document.title");
$.DomName_SVGPathSegCurvetoQuadraticAbs = new $.DomName("SVGPathSegCurvetoQuadraticAbs");
$.DomName_U86 = new $.DomName("Element.onkeydown");
$.DomName_CWk0 = new $.DomName("SVGLineElement.externalResourcesRequired");
$.DomName_RTCDTMFSender = new $.DomName("RTCDTMFSender");
$.DomName_KrU = new $.DomName("HTMLVideoElement.webkitDisplayingFullscreen");
$.DomName_kGu = new $.DomName("SVGLineElement.transform");
$.DomName_hSO = new $.DomName("SVGImageElement.transform");
$.DomName_MIDIConnectionEvent = new $.DomName("MIDIConnectionEvent");
$.DomName_HTMLProgressElement = new $.DomName("HTMLProgressElement");
$.DomName_rhw = new $.DomName("SVGFECompositeElement.height");
$.DomName_HTMLHeadElement = new $.DomName("HTMLHeadElement");
$.DomName_KLe = new $.DomName("HTMLObjectElement.validationMessage");
$.DomName_Y6D = new $.DomName("EventException.toString");
$.DomName_HTMLBRElement = new $.DomName("HTMLBRElement");
$.DomName_SVGForeignObjectElement = new $.DomName("SVGForeignObjectElement");
$.DomName_CSSPageRule = new $.DomName("CSSPageRule");
$.DomName_OEt = new $.DomName("Window.status");
$.JSName_content = new $.JSName("content");
$.DomName_vww = new $.DomName("SVGPolygonElement.transform");
$.DomName_4VO = new $.DomName("Event.cancelable");
$.JSName_pageX = new $.JSName("pageX");
$.DomName_DocumentFragment = new $.DomName("DocumentFragment");
$.DomName_UoK = new $.DomName("SVGAnimatedLength.animVal");
$.DomName_DataTransferItemList = new $.DomName("DataTransferItemList");
$.DomName_CWk = new $.DomName("NodeList.length");
$.DomName_MediaList = new $.DomName("MediaList");
$.DomName_EWB = new $.DomName("Element.querySelector");
$.JSName_webkitMovementX = new $.JSName("webkitMovementX");
$.DomName_DedicatedWorkerContext = new $.DomName("DedicatedWorkerContext");
$.DomName_8aB3 = new $.DomName("SVGAElement.nearestViewportElement");
$.DomName_04A = new $.DomName("Document.onselectionchange");
$.DomName_Hhc = new $.DomName("KeyboardEvent.altKey");
$.DomName_Yuf = new $.DomName("XMLHttpRequest.progressEvent");
$.DomName_k45 = new $.DomName("HTMLTableCellElement.headers");
$.JSName_localName = new $.JSName("localName");
$.DomName_MessagePort = new $.DomName("MessagePort");
$.DomName_UzM = new $.DomName("SVGForeignObjectElement.farthestViewportElement");
$.DomName_acq = new $.DomName("HTMLFormElement.HTMLFormElement");
$.DomName_MjY = new $.DomName("AudioNode.removeEventListener");
$.DomName_zPV0 = new $.DomName("SecurityPolicyViolationEvent.violatedDirective");
$.DomName_2C1 = new $.DomName("HTMLFieldSetElement.type");
$.DomName_ZIv = new $.DomName("HTMLAreaElement.target");
$.DomName_kqK = new $.DomName("SVGMaskElement.height");
$.DomName_SVGZoomAndPan = new $.DomName("SVGZoomAndPan");
$.DomName_v6h = new $.DomName("Window.screenLeft");
$.DomName_IVQ = new $.DomName("SVGPolylineElement.systemLanguage");
$.DomName_c0h = new $.DomName("MutationEvent.relatedNode");
$.Type_8aB = $.createRuntimeType('int');
$.DomName_GFl = new $.DomName("SVGFEGaussianBlurElement.height");
$.DomName_9ht = new $.DomName("Document.cookie");
$.DomName_YiR = new $.DomName("SVGUseElement.animatedInstanceRoot");
$.DomName_HTMLObjectElement = new $.DomName("HTMLObjectElement");
$.JSName_webkitDecodedFrameCount = new $.JSName("webkitDecodedFrameCount");
$.JSName_webkitHidden = new $.JSName("webkitHidden");
$.DomName_69P = new $.DomName("SVGFEDisplacementMapElement.x");
$.DomName_AHF = new $.DomName("SVGPolygonElement.animatedPoints");
$.JSName_self = new $.JSName("self");
$.DomName_cJC0 = new $.DomName("HTMLSelectElement.multiple");
$.DomName_8TW = new $.DomName("HTMLKeygenElement.disabled");
$.DomName_gj20 = new $.DomName("HTMLVideoElement.webkitDroppedFrameCount");
$.DomName_UH2 = new $.DomName("HTMLAreaElement.coords");
$.DomName_oCX1 = new $.DomName("SVGFEMergeElement.x");
$.DomName_oyU0 = new $.DomName("HTMLFormElement.encoding");
$.DomName_SVGGradientElement = new $.DomName("SVGGradientElement");
$.DomName_8kG = new $.DomName("SVGFEConvolveMatrixElement.divisor");
$.JSArray_methods = $.JSArray.prototype;
$.DomName_FileWriterSync = new $.DomName("FileWriterSync");
$.DomName_kI3 = new $.DomName("SVGPolylineElement.points");
$.DomName_6m4 = new $.DomName("SVGUseElement.nearestViewportElement");
$.DomName_int0 = new $.DomName("SVGAnimationElement.requiredFeatures");
$.DomName_SVGElementInstanceList = new $.DomName("SVGElementInstanceList");
$.JSName_querySelectorAll = new $.JSName("querySelectorAll");
$.DomName_nrL = new $.DomName("SVGAElement.externalResourcesRequired");
$.DomName_P98 = new $.DomName("SVGPatternElement.externalResourcesRequired");
$.DomName_FormData = new $.DomName("FormData");
$.DomName_Gqt = new $.DomName("SVGSwitchElement.requiredExtensions");
$.DomName_SVGFETileElement = new $.DomName("SVGFETileElement");
$.DomName_CSSStyleDeclaration = new $.DomName("CSSStyleDeclaration");
$.DomName_iZu = new $.DomName("HTMLButtonElement.formMethod");
$.DomName_YHK0 = new $.DomName("NavigatorUserMediaError.constraintName");
$.DomName_SpeechSynthesisUtterance = new $.DomName("SpeechSynthesisUtterance");
$.DomName_XPathResult = new $.DomName("XPathResult");
$.DomName_SVGFEFuncAElement = new $.DomName("SVGFEFuncAElement");
$.DomName_mGR = new $.DomName("HTMLSelectElement.willValidate");
$.DomName_HTMLTableElement = new $.DomName("HTMLTableElement");
$.JSName_webkitPersistentStorage = new $.JSName("webkitPersistentStorage");
$.DomName_NO4 = new $.DomName("HTMLIFrameElement.height");
$.DomName_TreeWalker = new $.DomName("TreeWalker");
$.DomName_O16 = new $.DomName("SQLException.message");
$.DomName_fPs = new $.DomName("KeyboardEvent.keyLocation");
$.DomName_Imr = new $.DomName("Element.onclick");
$.DomName_86y = new $.DomName("WebKitAnimationEvent.animationName");
$.DomName_SVGDocument = new $.DomName("SVGDocument");
$.DomName_MQu = new $.DomName("Document.webkitHidden");
$.DomName_SVGUnitTypes = new $.DomName("SVGUnitTypes");
$.DomName_0ne = new $.DomName("MediaStreamTrackEvent.track");
$.DomName_8QI = new $.DomName("SecurityPolicyViolationEvent.columnNumber");
$.DomName_MLc = new $.DomName("SVGFEPointLightElement.x");
$.DomName_ClientRect = new $.DomName("ClientRect");
$.DomName_INd = new $.DomName("SVGForeignObjectElement.xmlspace");
$.DomName_ProgressEvent = new $.DomName("ProgressEvent");
$.DomName_8kG0 = new $.DomName("Element.tagName");
$.DomName_MediaController = new $.DomName("MediaController");
$.JSName_webkitRelativePath = new $.JSName("webkitRelativePath");
$.DomName_wFZ = new $.DomName("SVGSwitchElement.transform");
$.DomName_MessageChannel = new $.DomName("MessageChannel");
$.DomName_S8Y = new $.DomName("SVGFEBlendElement.y");
$.DomName_Zmf = new $.DomName("SVGMarkerElement.xmllang");
$.DomName_Jsp0 = new $.DomName("HTMLMediaElement.muted");
$.DomName_K72 = new $.DomName("Window.onerror");
$.DomName_Yeo = new $.DomName("SVGMarkerElement.xmlspace");
$.DomName_Cy2 = new $.DomName("StorageEvent.storageArea");
$.DomName_FRv = new $.DomName("Window.top");
$.DomName_7FR = new $.DomName("HTMLSelectElement.HTMLSelectElement");
$.DomName_23h = new $.DomName("SVGElement.ownerSVGElement");
$.DomName_BSD = new $.DomName("HTMLInputElement.required");
$.JSName_replaceChild = new $.JSName("replaceChild");
$.DomName_MouseEvent = new $.DomName("MouseEvent");
$.JSName_defaultView = new $.JSName("defaultView");
$.DomName_CanvasRenderingContext = new $.DomName("CanvasRenderingContext");
$.DomName_bd2 = new $.DomName("HTMLTableElement.rows");
$.DomName_gfn = new $.DomName("SVGFEBlendElement.mode");
$.DomName_QOR = new $.DomName("SVGPathSegCurvetoQuadraticSmoothRel");
$.DomName_Composition = new $.DomName("Composition");
$.DomName_VmT = new $.DomName("SVGFEConvolveMatrixElement.width");
$.DomName_yL6 = new $.DomName("HTMLInputElement.webkitEntries");
$.DomName_SpeechSynthesisEvent = new $.DomName("SpeechSynthesisEvent");
$.DomName_43h2 = new $.DomName("SVGFEConvolveMatrixElement.targetY");
$.DomName_SQLResultSetRowList = new $.DomName("SQLResultSetRowList");
$.DomName_mXu = new $.DomName("SVGFEGaussianBlurElement.width");
$.JSName_charCode = new $.JSName("charCode");
$.DomName_KDi = new $.DomName("SVGAElement.target");
$.DomName_ccK = new $.DomName("HTMLImageElement.height");
$.DomName_WebGLProgram = new $.DomName("WebGLProgram");
$.DomName_u2Y = new $.DomName("SVGFilterElement.xmllang");
$.DomName_SVGPatternElement = new $.DomName("SVGPatternElement");
$.DomName_SVGAltGlyphItemElement = new $.DomName("SVGAltGlyphItemElement");
$.DomName_jSl = new $.DomName("SVGFECompositeElement.k2");
$.DomName_TBz = new $.DomName("HTMLOptionElement.disabled");
$.DomName_SVGFEMorphologyElement = new $.DomName("SVGFEMorphologyElement");
$.DomName_OfflineAudioCompletionEvent = new $.DomName("OfflineAudioCompletionEvent");
$.DomName_MediaStreamTrack = new $.DomName("MediaStreamTrack");
$.DomName_VPH = new $.DomName("HTMLVideoElement.webkitSupportsFullscreen");
$.DomName_Y7X = new $.DomName("Document.charset");
$.JSName_webkitShadowRoot = new $.JSName("webkitShadowRoot");
$.DomName_MXO = new $.DomName("SVGUseElement.externalResourcesRequired");
$.DomName_atK = new $.DomName("HTMLInputElement.useMap");
$.DomName_SVGPaint = new $.DomName("SVGPaint");
$.DomName_23h0 = new $.DomName("HTMLStyleElement.media");
$.DomName_MIDIAccess = new $.DomName("MIDIAccess");
$.DomName_ynv = new $.DomName("SecurityPolicyViolationEvent.originalPolicy");
$.DomName_TAp0 = new $.DomName("SVGLineElement.x1");
$.DomName_P12 = new $.DomName("SVGPolylineElement.requiredFeatures");
$.DomName_SVGFETurbulenceElement = new $.DomName("SVGFETurbulenceElement");
$.DomName_Window = new $.DomName("Window");
$.DomName_xw8 = new $.DomName("SVGEllipseElement.cy");
$.DomName_SVGAnimatedLengthList = new $.DomName("SVGAnimatedLengthList");
$.DomName_HTMLMenuElement = new $.DomName("HTMLMenuElement");
$.DomName_Bwr = new $.DomName("HTMLContentElement.resetStyleInheritance");
$.DomName_2mB = new $.DomName("SVGFEConvolveMatrixElement.in1");
$.DomName_Gsa = new $.DomName("EventException.code");
$.DomName_SVGPointList = new $.DomName("SVGPointList");
$.Type_IYi = $.createRuntimeType('String');
$.JSName_opener = new $.JSName("opener");
$.DomName_woc1 = new $.DomName("HTMLOptGroupElement.label");
$.DomName_1JB = new $.DomName("Window.screen");
$.EventStreamProvider_keydown = $.setRuntimeTypeInfo(new $.EventStreamProvider("keydown"), [$.KeyboardEvent]);
$.DomName_CCG = new $.DomName("XMLHttpRequestProgressEvent.position");
$.DomName_Touch = new $.DomName("Touch");
$.DomName_Database = new $.DomName("Database");
$.DomName_ssD0 = new $.DomName("SVGPathElement.animatedPathSegList");
$.DomName_IDBRequest = new $.DomName("IDBRequest");
$.DomName_SVGViewSpec = new $.DomName("SVGViewSpec");
$.DomName_TextTrack = new $.DomName("TextTrack");
$.DomName_FFX = new $.DomName("HTMLImageElement.alt");
$.JSName_firstChild = new $.JSName("firstChild");
$.DomName_7dz = new $.DomName("SVGGradientElement.gradientTransform");
$.DomName_cw1 = new $.DomName("XPathException.code");
$.DomName_CanvasGradient = new $.DomName("CanvasGradient");
$.DomName_gap = new $.DomName("OscillatorNode.frequency");
$.DomName_HTMLScriptElement = new $.DomName("HTMLScriptElement");
$.DomName_Mpb = new $.DomName("SVGFESpecularLightingElement.width");
$.DomName_ad7 = new $.DomName("Element.focus");
$.DomName_SVGAnimatedNumberList = new $.DomName("SVGAnimatedNumberList");
$.DomName_WebGLShaderPrecisionFormat = new $.DomName("WebGLShaderPrecisionFormat");
$.DomName_4YB = new $.DomName("Element.scrollTop");
$.DomName_b1T = new $.DomName("ShadowRoot.cloneNode");
$.DomName_MAi = new $.DomName("HTMLFormElement.length");
$.DomName_DOMApplicationCache = new $.DomName("DOMApplicationCache");
$.DomName_JQO = new $.DomName("SVGForeignObjectElement.x");
$.DomName_84u = new $.DomName("HTMLObjectElement.width");
$.DomName_Iik0 = new $.DomName("SVGMarkerElement.preserveAspectRatio");
$.DomName_aut = new $.DomName("SVGPathElement.nearestViewportElement");
$.DomName_Metadata = new $.DomName("Metadata");
$.DomName_W8O0 = new $.DomName("ProcessingInstruction.data");
$.DomName_8S3 = new $.DomName("MessageEvent.lastEventId");
$.DomName_ValidityState = new $.DomName("ValidityState");
$.DomName_SQp = new $.DomName("DeviceOrientationEvent.absolute");
$.DomName_gaI = new $.DomName("SVGZoomEvent.zoomRectScreen");
$.DomName_SVGTextElement = new $.DomName("SVGTextElement");
$.DomName_IoM = new $.DomName("HTMLProgressElement.max");
$.DomName_MUB0 = new $.DomName("HTMLTextAreaElement.type");
$.DomName_DirectoryReaderSync = new $.DomName("DirectoryReaderSync");
$.DomName_3uR2 = new $.DomName("SVGPolygonElement.xmlspace");
$.DomName_SVGGlyphElement = new $.DomName("SVGGlyphElement");
$.DomName_woc2 = new $.DomName("SVGFilterElement.filterResX");
$.DomName_6F1 = new $.DomName("SVGFETurbulenceElement.result");
$.DomName_SVGPathSegMovetoAbs = new $.DomName("SVGPathSegMovetoAbs");
$.DomName_SVGMetadataElement = new $.DomName("SVGMetadataElement");
$.DomName_HTMLPreElement = new $.DomName("HTMLPreElement");
$.DomName_zPV1 = new $.DomName("HTMLVideoElement.videoWidth");
$.DomName_IRf = new $.DomName("ClientRect.height");
$.DomName_yL60 = new $.DomName("Attr.name");
$.DomName_E9d = new $.DomName("Selection.baseNode");
$.DomName_HTMLTableSectionElement = new $.DomName("HTMLTableSectionElement");
$.DomName_pMC = new $.DomName("HTMLSourceElement.src");
$.DomName_AudioProcessingEvent = new $.DomName("AudioProcessingEvent");
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.DomName_DocumentType = new $.DomName("DocumentType");
$.DomName_2No0 = new $.DomName("HTMLOutputElement.defaultValue");
$.C__Undefined = new $._Undefined0();
$.DomName_YUI = new $.DomName("Element.clientWidth");
$.DomName_2Zs = new $.DomName("Element.childElementCount");
$.DomName_UfG = new $.DomName("HTMLKeygenElement.validationMessage");
$.DomName_ClF = new $.DomName("HTMLFieldSetElement.elements");
$.DomName_XSLTProcessor = new $.DomName("XSLTProcessor");
$.DomName_SVGURIReference = new $.DomName("SVGURIReference");
$.DomName_AHF0 = new $.DomName("Element.scrollWidth");
$.SupportedBrowser_4zV = new $.SupportedBrowser("Chrome", "25");
$.DomName_yvr = new $.DomName("HTMLMediaElement.mediaGroup");
$.DomName_G7N = new $.DomName("SVGFEDiffuseLightingElement.kernelUnitLengthY");
$.DomName_QBQ = new $.DomName("Navigator.webkitTemporaryStorage");
$.DomName_iDZ1 = new $.DomName("HTMLLabelElement.htmlFor");
$.DomName_PerformanceEntry = new $.DomName("PerformanceEntry");
$.JSName_layerY = new $.JSName("layerY");
$.JSName_firstElementChild = new $.JSName("firstElementChild");
$.DomName_aOh = new $.DomName("HTMLSpanElement.HTMLSpanElement");
$.DomName_SVGTextContentElement = new $.DomName("SVGTextContentElement");
$.DomName_FileEntrySync = new $.DomName("FileEntrySync");
$.DomName_03 = new $.DomName("HTMLScriptElement.async");
$.DomName_Location = new $.DomName("Location");
$.DomName_QXN = new $.DomName("SVGViewElement.preserveAspectRatio");
$.DomName_SpeechRecognitionEvent = new $.DomName("SpeechRecognitionEvent");
$.DomName_SecurityPolicy = new $.DomName("SecurityPolicy");
$.DomName_Rect = new $.DomName("Rect");
$.DomName_WebSocket = new $.DomName("WebSocket");
$.DomName_FileCallback = new $.DomName("FileCallback");
$.JSName_webkitPointerLockElement = new $.JSName("webkitPointerLockElement");
$.DomName_mKQ = new $.DomName("SVGLineElement.systemLanguage");
$.DomName_Geolocation = new $.DomName("Geolocation");
$.Creates_FileList = new $.Creates("FileList");
$.DomName_MediaKeyEvent = new $.DomName("MediaKeyEvent");
$.DomName_04 = new $.DomName("HTMLOptionElement.value");
$.DomName_jSl0 = new $.DomName("DocumentFragment.querySelectorAll");
$.DomName_MimeType = new $.DomName("MimeType");
$.Returns_FileList = new $.Returns("FileList");
$.DomName_S7K = new $.DomName("Event.currentTarget");
$.DomName_SVGPathSegList = new $.DomName("SVGPathSegList");
$.DomName_kpg = new $.DomName("DocumentFragment.firstElementChild");
$.JSName_BYTES_PER_ELEMENT = new $.JSName("BYTES_PER_ELEMENT");
$.DomName_uwd = new $.DomName("SVGAnimationElement.requiredExtensions");
$.DomName_ASw0 = new $.DomName("MouseEvent.clientY");
$.DomName_69t = new $.DomName("HTMLOptionElement.index");
$.DomName_w0N = new $.DomName("HTMLInputElement.dirName");
$.DomName_GxI = new $.DomName("HTMLLinkElement.type");
$.DomName_ZeP = new $.DomName("AudioContext.activeSourceCount");
$.DomName_DataTransferItem = new $.DomName("DataTransferItem");
$.DomName_MPk = new $.DomName("HTMLMediaElement.currentSrc");
$.DomName_Lx4 = new $.DomName("SVGFEConvolveMatrixElement.x");
$.DomName_rBh = new $.DomName("HTMLMediaElement.progressEvent");
$.DomName_SVGFEDisplacementMapElement = new $.DomName("SVGFEDisplacementMapElement");
$.C__IsNotNull = new $._IsNotNull();
$.C__IsTrue = new $._IsTrue();
$.DomName_B6W = new $.DomName("MouseEvent.button");
$.DomName_Nm5 = new $.DomName("Window.styleMedia");
$.C__Empty = new $._Empty();
$.C__IsNull = new $._IsNull();
$.DomName_Z9b = new $.DomName("HTMLMeterElement.max");
$.DomName_CSSRule = new $.DomName("CSSRule");
$.DomName_mF3 = new $.DomName("HTMLAnchorElement.ping");
$.DomName_k2M = new $.DomName("HTMLMediaElement.seekable");
$.DomName_SpeechRecognitionError = new $.DomName("SpeechRecognitionError");
$.JSName_selectedStylesheetSet = new $.JSName("selectedStylesheetSet");
$.DomName_4ez = new $.DomName("SVGMaskElement.maskContentUnits");
$.DomName_ZaB = new $.DomName("Element.onkeypress");
$.DomName_DOMFileSystemSync = new $.DomName("DOMFileSystemSync");
$.DomName_rJr = new $.DomName("HTMLLegendElement.form");
$.DomName_RTCSessionDescription = new $.DomName("RTCSessionDescription");
$.DomName_OF2 = new $.DomName("HTMLTemplateElement.content");
$.DomName_05 = new $.DomName("Element.lang");
$.DomName_cD91 = new $.DomName("HTMLKeygenElement.autofocus");
$.DomName_SVGFontFaceNameElement = new $.DomName("SVGFontFaceNameElement");
$.DomName_MediaKeys = new $.DomName("MediaKeys");
$.DomName_YPU = new $.DomName("SVGLineElement.farthestViewportElement");
$.DomName_yzJ = new $.DomName("SVGMaskElement.width");
$.DomName_IJC = new $.DomName("Element.dblclickEvent");
$.DomName_CTk = new $.DomName("Document.webkitFullscreenEnabled");
$.DomName_zXi = new $.DomName("Node.parentElement");
$.DomName_Qsx = new $.DomName("SVGFESpecularLightingElement.y");
$.JSName_byteLength = new $.JSName("byteLength");
$.DomName_PMG = new $.DomName("Window.event");
$.DomName_a1W = new $.DomName("Node.previousSibling");
$.DomName_kUZ = new $.DomName("Element.hidden");
$.DomName_SharedWorkerContext = new $.DomName("SharedWorkerContext");
$.DomName_okb = new $.DomName("SVGDefsElement.nearestViewportElement");
$.DomName_Blob = new $.DomName("Blob");
$.DomName_EntryArray = new $.DomName("EntryArray");
$.DomName_lbd0 = new $.DomName("Navigator.cookieEnabled");
$.DomName_AudioDestinationNode = new $.DomName("AudioDestinationNode");
$.DomName_7dr = new $.DomName("Element.children");
$.DomName_7nw = new $.DomName("HTMLAnchorElement.search");
$.DomName_fJC0 = new $.DomName("SVGFEComponentTransferElement.result");
$.DomName_GJj = new $.DomName("Element.nextElementSibling");
$.DomName_IW0 = new $.DomName("HTMLLinkElement.hreflang");
$.DomName_ki2 = new $.DomName("UIEvent.pageX");
$.DomName_DirectoryEntry = new $.DomName("DirectoryEntry");
$.DomName_WebGLDebugRendererInfo = new $.DomName("WebGLDebugRendererInfo");
$.DomName_UcQ = new $.DomName("CSSStyleDeclaration.item");
$.DomName_DOMParser = new $.DomName("DOMParser");
$.DomName_gg40 = new $.DomName("SVGSymbolElement.xmllang");
$.DomName_coJ = new $.DomName("HTMLObjectElement.name");
$.DomName_L1G = new $.DomName("HTMLInputElement.min");
$.DomName_o6N = new $.DomName("SVGFEBlendElement.height");
$.DomName_hwv = new $.DomName("Navigator.platform");
$.DomName_ddj = new $.DomName("SVGEllipseElement.externalResourcesRequired");
$.DomName_CSSValue = new $.DomName("CSSValue");
$.DomName_mnX = new $.DomName("CloseEvent.code");
$.DomName_oWp0 = new $.DomName("SVGFESpecularLightingElement.result");
$.DomName_Eer = new $.DomName("SVGGradientElement.href");
$.DomName_HTMLHRElement = new $.DomName("HTMLHRElement");
$.DomName_Usy = new $.DomName("MutationEvent.attrChange");
$.DomName_efl = new $.DomName("Element.getBoundingClientRect");
$.DomName_HTMLOptGroupElement = new $.DomName("HTMLOptGroupElement");
$.DomName_MetadataCallback = new $.DomName("MetadataCallback");
$.DomName_bdS = new $.DomName("HTMLAreaElement.ping");
$.DomName_SQLError = new $.DomName("SQLError");
$.DomName_dvT = new $.DomName("PositionError.message");
$.DomName_QfR = new $.DomName("ErrorEvent.message");
$.DomName_8lB0 = new $.DomName("HTMLTextAreaElement.dirName");
$.DomName_XMLHttpRequestProgressEvent = new $.DomName("XMLHttpRequestProgressEvent");
$.DomName_DirectoryEntrySync = new $.DomName("DirectoryEntrySync");
$.DomName_UAO = new $.DomName("SVGFEConvolveMatrixElement.orderY");
$.DomName_gg41 = new $.DomName("HTMLScriptElement.HTMLScriptElement");
$.DomName_U1z = new $.DomName("SVGRectElement.requiredExtensions");
$.DomName_VfQ = new $.DomName("SVGFETurbulenceElement.stitchTiles");
$.DomName_PTv = new $.DomName("SVGSVGElement.transform");
$.DomName_qtf = new $.DomName("HashChangeEvent.newURL");
$.DomName_PopStateEvent = new $.DomName("PopStateEvent");
$.JSName_yXa = new $.JSName("webkitDirectionInvertedFromDevice");
$.DomName_Ipg = new $.DomName("Window.postMessage");
$.DomName_IsK = new $.DomName("HTMLMediaElement.defaultPlaybackRate");
$.DomName_VGD = new $.DomName("SVGTextPositioningElement.rotate");
$.DomName_XPathNSResolver = new $.DomName("XPathNSResolver");
$.DomName_SVGStopElement = new $.DomName("SVGStopElement");
$.DomName_HTMLDataListElement = new $.DomName("HTMLDataListElement");
$.DomName_MediaStreamEvent = new $.DomName("MediaStreamEvent");
$.DomName_CSSRuleList = new $.DomName("CSSRuleList");
$.DomName_MMm = new $.DomName("HTMLTextAreaElement.autofocus");
$.DomName_SVGPreserveAspectRatio = new $.DomName("SVGPreserveAspectRatio");
$.DomName_AudioBufferCallback = new $.DomName("AudioBufferCallback");
$.DomName_4AN = new $.DomName("WebGLContextEvent.statusMessage");
$.DomName_ez4 = new $.DomName("SVGImageElement.externalResourcesRequired");
$.DomName_23h1 = new $.DomName("SVGSVGElement.x");
$.DomName_aF8 = new $.DomName("SVGImageElement.width");
$.DomName_LDY = new $.DomName("SVGTextPositioningElement.y");
$.JSName_CSS = new $.JSName("CSS");
$.DomName_Performance = new $.DomName("Performance");
$.DomName_kO8 = new $.DomName("AudioNode.channelInterpretation");
$.DomName_2rX = new $.DomName("HTMLInputElement.setSelectionRange");
$.DomName_DOF = new $.DomName("SVGAElement.farthestViewportElement");
$.DomName_TrackEvent = new $.DomName("TrackEvent");
$.DomName_HTMLContentElement = new $.DomName("HTMLContentElement");
$.DomName_SVGSetElement = new $.DomName("SVGSetElement");
$.DomName_6FR1 = new $.DomName("HTMLFormElement.action");
$.DomName_06 = new $.DomName("SVGCircleElement.requiredFeatures");
$.DomName_WorkerNavigator = new $.DomName("WorkerNavigator");
$.DomName_IB4 = new $.DomName("HTMLTextAreaElement.validity");
$.DomName_AgZ = new $.DomName("Entity.publicId");
$.DomName_Tbo = new $.DomName("Event.defaultPrevented");
$.DomName_uva = new $.DomName("MouseEvent.toElement");
$.DomName_U8c = new $.DomName("TransitionEvent.pseudoElement");
$.DomName_3uR0 = new $.DomName("HTMLOptionElement.HTMLOptionElement");
$.DomName_3uR3 = new $.DomName("HTMLScriptElement.src");
$.JSName_removeAttribute = new $.JSName("removeAttribute");
$.DomName_Kj8 = new $.DomName("SVGFEFloodElement.y");
$.DomName_Ugm = new $.DomName("Event.cancelBubble");
$.DomName_nxd = new $.DomName("HTMLCollection.length");
$.DomName_LFH = new $.DomName("DOMError.name");
$.DomName_PTL = new $.DomName("EntryArray.length");
$.DomName_QGa = new $.DomName("Attr.value");
$.DomName_Gfy = new $.DomName("HTMLSelectElement.size");
$.DomName_6Vn = new $.DomName("HTMLLinkElement.disabled");
$.EventStreamProvider_keypress = $.setRuntimeTypeInfo(new $.EventStreamProvider("keypress"), [$.KeyboardEvent]);
$.DomName_WebKitCSSKeyframesRule = new $.DomName("WebKitCSSKeyframesRule");
$.DomName_Art = new $.DomName("SVGPathSegCurvetoCubicSmoothAbs");
$.DomName_xcN = new $.DomName("HTMLInputElement.webkitdirectory");
$.DomName_yrN = new $.DomName("HTMLSelectElement.autofocus");
$.DomName_Aqf = new $.DomName("SVGFEDiffuseLightingElement.diffuseConstant");
$.DomName_f510 = new $.DomName("SVGForeignObjectElement.externalResourcesRequired");
$.DomName_6YB = new $.DomName("HTMLAnchorElement.pathname");
$.DomName_bEE = new $.DomName("Window.outerWidth");
$.DomName_07 = new $.DomName("Blob.size");
$.DomName_CSSHostRule = new $.DomName("CSSHostRule");
$.DomName_MediaElementAudioSourceNode = new $.DomName("MediaElementAudioSourceNode");
$.DomName_4QF = new $.DomName("SVGSVGElement.currentTranslate");
$.DomName_rvT = new $.DomName("HTMLTableCellElement.HTMLTableCellElement");
$.DomName_PrM = new $.DomName("Node.insertBefore");
$.DomName_apl0 = new $.DomName("AudioNode.numberOfInputs");
$.DomName_6G3 = new $.DomName("SVGFECompositeElement.k4");
$.DomName_TimeoutHandler = new $.DomName("TimeoutHandler");
$.DomName_G3O = new $.DomName("MouseEvent.webkitMovementX");
$.DomName_08 = new $.DomName("XMLHttpRequest.responseXML");
$.DomName_4CA0 = new $.DomName("ResourceProgressEvent.url");
$.DomName_HTMLMetaElement = new $.DomName("HTMLMetaElement");
$.DomName_f511 = new $.DomName("HTMLOutputElement.form");
$.DomName_WebKitAnimationEvent = new $.DomName("WebKitAnimationEvent");
$.DomName_Zui = new $.DomName("HTMLInputElement.multiple");
$.DomName_bh5 = new $.DomName("DOMException.toString");
$.DomName_atK0 = new $.DomName("XMLHttpRequestProgressEvent.totalSize");
$.DomName_HTMLDialogElement = new $.DomName("HTMLDialogElement");
$.DomName_ACG0 = new $.DomName("SVGPathElement.farthestViewportElement");
$.DomName_HTMLButtonElement = new $.DomName("HTMLButtonElement");
$.DomName_IDBOpenDBRequest = new $.DomName("IDBOpenDBRequest");
$.DomName_IDBDatabase = new $.DomName("IDBDatabase");
$.DomName_HTMLSourceElement = new $.DomName("HTMLSourceElement");
$.JSName_innerHTML = new $.JSName("innerHTML");
$.Creates_8BJ = new $.Creates("=List");
$.DomName_sxw = new $.DomName("HTMLInputElement.files");
$.DomName_G37 = new $.DomName("HTMLInputElement.incremental");
$.DomName_SVGExternalResourcesRequired = new $.DomName("SVGExternalResourcesRequired");
$.DomName_spT = new $.DomName("TouchEvent.targetTouches");
$.DomName_JSL = new $.DomName("Event.path");
$.DomName_inH0 = new $.DomName("Window.scrollY");
$.DomName_Db0 = new $.DomName("Navigator.appName");
$.DomName_sEV = new $.DomName("HTMLFieldSetElement.HTMLFieldSetElement");
$.DomName_SQLTransaction = new $.DomName("SQLTransaction");
$.DomName_mqm = new $.DomName("HTMLTableElement.caption");
$.DomName_BYc = new $.DomName("HTMLObjectElement.useMap");
$.DomName_Tr0 = new $.DomName("SVGFEOffsetElement.in1");
$.DomName_J2O = new $.DomName("SVGImageElement.height");
$.DomName_Kgv = new $.DomName("HTMLInputElement.willValidate");
$.DomName_gsm = new $.DomName("SVGSymbolElement.viewBox");
$.DomName_U0y = new $.DomName("Element.draggable");
$.DomName_SVGPathSegArcAbs = new $.DomName("SVGPathSegArcAbs");
$.DomName_ouf = new $.DomName("TouchEvent.ctrlKey");
$.DomName_ECG = new $.DomName("SVGFEGaussianBlurElement.stdDeviationX");
$.DomName_4651 = new $.DomName("HTMLVideoElement.videoHeight");
$.DomName_YWX = new $.DomName("HTMLParamElement.name");
$.DomName_SVGPathSegLinetoHorizontalAbs = new $.DomName("SVGPathSegLinetoHorizontalAbs");
$.DomName_HEg = new $.DomName("HTMLAnchorElement.target");
$.DomName_CanvasRenderingContext2D = new $.DomName("CanvasRenderingContext2D");
$.DomName_GIy = new $.DomName("SVGPolygonElement.requiredExtensions");
$.DomName_DatabaseSync = new $.DomName("DatabaseSync");
$.DomName_c1W = new $.DomName("HTMLTableElement.border");
$.DomName_lPx = new $.DomName("SVGLineElement.requiredFeatures");
$.DomName_gnu = new $.DomName("UIEvent.view");
$.DomName_C5Z = new $.DomName("ShadowRoot.applyAuthorStyles");
$.DomName_MIo = new $.DomName("HTMLImageElement.x");
$.DomName_ET7 = new $.DomName("SVGFEImageElement.xmlspace");
$.DomName_MhV = new $.DomName("SVGFEMorphologyElement.x");
$.DomName_FileSystemCallback = new $.DomName("FileSystemCallback");
$.DomName_Ucj = new $.DomName("DeviceMotionEvent.accelerationIncludingGravity");
$.DomName_5eO = new $.DomName("XMLHttpRequest.statusText");
$.DomName_izi = new $.DomName("HTMLBodyElement.errorEvent");
$.DomName_MAi0 = new $.DomName("SecurityPolicyViolationEvent.blockedURI");
$.DomName_eXR = new $.DomName("HTMLSelectElement.labels");
$.DomName_SpeechGrammarList = new $.DomName("SpeechGrammarList");
$.DomName_FocusEvent = new $.DomName("FocusEvent");
$.DomName_IVQ0 = new $.DomName("SVGPatternElement.preserveAspectRatio");
$.DomName_Mhf0 = new $.DomName("SVGFECompositeElement.y");
$.DomName_1KU0 = new $.DomName("MouseEvent.screenY");
$.Returns_ato = new $.Returns("Window|=Object");
$.DomName_HTMLDListElement = new $.DomName("HTMLDListElement");
$.DomName_omH = new $.DomName("SVGDefsElement.xmlspace");
$.DomName_WaveShaperNode = new $.DomName("WaveShaperNode");
$.Creates_27D = new $.Creates("Window|=Object");
$.DomName_Bzd0 = new $.DomName("SpeechRecognitionEvent.interpretation");
$.DomName_SVGAElement = new $.DomName("SVGAElement");
$.DomName_E9d0 = new $.DomName("HTMLSelectElement.disabled");
$.DomName_tEW = new $.DomName("SVGFEDisplacementMapElement.width");
$.DomName_RTCStatsResponse = new $.DomName("RTCStatsResponse");
$.DomName_sey = new $.DomName("HTMLKeygenElement.validity");
$.DomName_WebKitPoint = new $.DomName("WebKitPoint");
$.DomName_iA4 = new $.DomName("SVGFEGaussianBlurElement.in1");
$.DomName_m5H = new $.DomName("SVGViewElement.viewTarget");
$.DomName_cQL0 = new $.DomName("SVGFEOffsetElement.x");
$.DomName_zPV2 = new $.DomName("CharacterData.length");
$.DomName_2D9 = new $.DomName("SVGAltGlyphElement.format");
$.DomName_j7R0 = new $.DomName("SVGRadialGradientElement.cy");
$.DomName_WJE = new $.DomName("OverflowEvent.horizontalOverflow");
$.DomName_ugX0 = new $.DomName("UIEvent.layerX");
$.DomName_HTMLDirectoryElement = new $.DomName("HTMLDirectoryElement");
$.DomName_B8J = new $.DomName("CustomEvent.initCustomEvent");
$.DomName_dCN = new $.DomName("FileException.toString");
$.DomName_cw10 = new $.DomName("XPathException.name");
$.SupportedBrowser_Chrome_null = new $.SupportedBrowser("Chrome", null);
$.DomName_Pds = new $.DomName("SVGForeignObjectElement.height");
$.DomName_O9i0 = new $.DomName("SVGRectElement.y");
$.DomName_Entity = new $.DomName("Entity");
$.DomName_yvP0 = new $.DomName("Document.documentElement");
$.DomName_HTMLLabelElement = new $.DomName("HTMLLabelElement");
$.DomName_Geoposition = new $.DomName("Geoposition");
$.DomName_9ht0 = new $.DomName("Element.offsetHeight");
$.DomName_MYA0 = new $.DomName("SVGFESpecularLightingElement.height");
$.DomName_Jsp1 = new $.DomName("HTMLOListElement.start");
$.DomName_8lB1 = new $.DomName("HTMLAreaElement.host");
$.SupportedBrowser_0 = new $.SupportedBrowser("Firefox", "15");
$.DomName_ibz = new $.DomName("SVGFECompositeElement.operator");
$.DomName_OKd = new $.DomName("SVGAElement.systemLanguage");
$.DomName_HB4 = new $.DomName("HTMLCanvasElement.height");
$.DomName_ErrorEvent = new $.DomName("ErrorEvent");
$.DomName_yjx = new $.DomName("HTMLTextAreaElement.labels");
$.DomName_60Q = new $.DomName("SecurityPolicyViolationEvent.effectiveDirective");
$.DomName_2Sa = new $.DomName("ClientRect.left");
$.JSName_webkitPseudo = new $.JSName("webkitPseudo");
$.DomName_CSS = new $.DomName("CSS");
$.DomName_Ptg = new $.DomName("HTMLStyleElement.scoped");
$.DomName_HTMLBodyElement = new $.DomName("HTMLBodyElement");
$.DomName_2C10 = new $.DomName("HTMLFieldSetElement.name");
$.DomName_WebGLShader = new $.DomName("WebGLShader");
$.DomName_sEs = new $.DomName("UIEvent.keyCode");
$.DomName_xw80 = new $.DomName("HTMLBaseElement.target");
$.DomName_HJC0 = new $.DomName("SVGFESpecularLightingElement.surfaceScale");
$.DomName_HTMLStyleElement = new $.DomName("HTMLStyleElement");
$.DomName_Zwd = new $.DomName("Window.messageEvent");
$.DomName_JMV = new $.DomName("Entry.fullPath");
$.DomName_2nU = new $.DomName("SVGFEComponentTransferElement.width");
$.DomName_7Nz = new $.DomName("MIDIMessageEvent.data");
$.DomName_PannerNode = new $.DomName("PannerNode");
$.DomName_7oG = new $.DomName("HTMLButtonElement.type");
$.JSName_webkitGrammar = new $.JSName("webkitGrammar");
$.DomName_HTMLTitleElement = new $.DomName("HTMLTitleElement");
$.DomName_wMy = new $.DomName("ClientRect.bottom");
$.DomName_MutationRecord = new $.DomName("MutationRecord");
$.DomName_8c4 = new $.DomName("HTMLMediaElement.controller");
$.JSName_cells = new $.JSName("cells");
$.DomName_CKH = new $.DomName("SVGFEImageElement.x");
$.DomName_kjl = new $.DomName("FileException.code");
$.DomName_wsa = new $.DomName("Document.onkeypress");
$.DomName_HTMLTextAreaElement = new $.DomName("HTMLTextAreaElement");
$.DomName_qzd = new $.DomName("SVGSymbolElement.externalResourcesRequired");
$.DomName_RTCPeerConnection = new $.DomName("RTCPeerConnection");
$.DomName_6NC = new $.DomName("MediaKeyMessageEvent.message");
$.DomName_ADx = new $.DomName("HTMLAnchorElement.hostname");
$.DomName_Gv2 = new $.DomName("SVGAnimatedLengthList.baseVal");
$.DomName_OKv = new $.DomName("HTMLInputElement.webkitGrammar");
$.DomName_KMB = new $.DomName("HTMLMediaElement.startTime");
$.DomName_69t0 = new $.DomName("Window.statusbar");
$.C__Undefined0 = new $._Undefined();
$.DomName_sAZ = new $.DomName("SVGForeignObjectElement.systemLanguage");
$.DomName_OESElementIndexUint = new $.DomName("OESElementIndexUint");
$.DomName_PositionError = new $.DomName("PositionError");
$.DomName_GNd = new $.DomName("Element.title");
$.DomName_8FR = new $.DomName("SVGFEMorphologyElement.result");
$.DomName_4QF0 = new $.DomName("SVGPatternElement.height");
$.JSName_data = new $.JSName("data");
$.JSName_parent = new $.JSName("parent");
$.DomName_86y0 = new $.DomName("XMLHttpRequest.upload");
$.DomName_bkm = new $.DomName("HTMLFormElement.target");
$.DomName_rty = new $.DomName("SVGAltGlyphElement.glyphRef");
$.DomName_ha2 = new $.DomName("SVGFilterElement.height");
$.JSName_previousSibling = new $.JSName("previousSibling");
$.DomName_Event = new $.DomName("Event");
$.DomName_86y1 = new $.DomName("SVGCircleElement.xmllang");
$.DomName_AHF1 = new $.DomName("MutationRecord.addedNodes");
$.DomName_SVGFEFuncBElement = new $.DomName("SVGFEFuncBElement");
$.DomName_YG0 = new $.DomName("SVGGElement.transform");
$.DomName_SVGException = new $.DomName("SVGException");
$.DomName_HTMLTableColElement = new $.DomName("HTMLTableColElement");
$.DomName_MediaStreamTrackEvent = new $.DomName("MediaStreamTrackEvent");
$.DomName_G7N0 = new $.DomName("SVGFEDiffuseLightingElement.kernelUnitLengthX");
$.DomName_RXb = new $.DomName("ClientRect.right");
$.DomName_HTMLModElement = new $.DomName("HTMLModElement");
$.DomName_mfA = new $.DomName("XMLHttpRequest.responseType");
$.DomName_Bej = new $.DomName("DocumentFragment.lastElementChild");
$.DomName_TimeRanges = new $.DomName("TimeRanges");
$.DomName_Una = new $.DomName("HTMLInputElement.name");
$.JSName_webkitDroppedFrameCount = new $.JSName("webkitDroppedFrameCount");
$.DomName_PerformanceMark = new $.DomName("PerformanceMark");
$.DomName_IMK = new $.DomName("SVGPathElement.xmllang");
$.DomName_QCl = new $.DomName("TouchEvent.touches");
$.DomName_ifx = new $.DomName("WebKitAnimationEvent.elapsedTime");
$.DomName_eRy = new $.DomName("HTMLInputElement.autocomplete");
$.DomName_gYw = new $.DomName("Event.clipboardData");
$.DomName_ftx = new $.DomName("RTCIceCandidateEvent.candidate");
$.DomName_EVt = new $.DomName("ProcessingInstruction.target");
$.DomName_SVGRenderingIntent = new $.DomName("SVGRenderingIntent");
$.DomName_EntryArraySync = new $.DomName("EntryArraySync");
$.DomName_7FR0 = new $.DomName("Element.translate");
$.DomName_sAA = new $.DomName("Window.console");
$.DomName_rR4 = new $.DomName("SVGFEDisplacementMapElement.in1");
$.DomName_TAp1 = new $.DomName("SVGLineElement.x2");
$.DomName_JQO0 = new $.DomName("SVGForeignObjectElement.y");
$.DomName_y0E = new $.DomName("SVGEllipseElement.farthestViewportElement");
$.DomName_6Rj = new $.DomName("SVGFEColorMatrixElement.height");
$.DomName_4vx = new $.DomName("SVGPolylineElement.farthestViewportElement");
$.DomName_wIq = new $.DomName("SVGPatternElement.patternTransform");
$.DomName_uZQ = new $.DomName("Window.screenTop");
$.DomName_uiC = new $.DomName("HTMLVideoElement.poster");
$.DomName_ejU = new $.DomName("HTMLButtonElement.disabled");
$.EventStreamProvider_load = $.setRuntimeTypeInfo(new $.EventStreamProvider("load"), [$.ProgressEvent]);
$.DomName_mfA0 = new $.DomName("XMLHttpRequest.responseText");
$.DomName_eDa = new $.DomName("SVGGElement.requiredFeatures");
$.DomName_WebKitMediaSource = new $.DomName("WebKitMediaSource");
$.DomName_865 = new $.DomName("HTMLObjectElement.willValidate");
$.DomName_j7R1 = new $.DomName("SVGRadialGradientElement.fy");
$.DomName_AHg = new $.DomName("Document.createDocumentFragment");
$.DomName_Ngp = new $.DomName("SVGPatternElement.requiredFeatures");
$.DomName_wEo1 = new $.DomName("SVGFETileElement.height");
$.DomName_oZ3 = new $.DomName("SVGUseElement.xmllang");
$.DomName_ZAJ = new $.DomName("SVGRectElement.height");
$.DomName_ebI = new $.DomName("MediaStreamEvent.stream");
$.DomName_woc3 = new $.DomName("PositionError.code");
$.DomName_QkU0 = new $.DomName("HTMLAnchorElement.host");
$.DomName_HashChangeEvent = new $.DomName("HashChangeEvent");
$.DomName_aJt = new $.DomName("HTMLLIElement.type");
$.DomName_WPD = new $.DomName("HTMLOptGroupElement.disabled");
$.JSName_lastElementChild = new $.JSName("lastElementChild");
$.DomName_PrM0 = new $.DomName("SVGPolygonElement.requiredFeatures");
$.DomName_k2a = new $.DomName("SVGSVGElement.pixelUnitToMillimeterX");
$.DomName_PagePopupController = new $.DomName("PagePopupController");
$.JSName_default = new $.JSName("default");
$.DomName_qJx = new $.DomName("NavigatorUserMediaSuccessCallback");
$.DomName_Fcu = new $.DomName("HTMLTableCellElement.rowSpan");
$.DomName_SVGFEComponentTransferElement = new $.DomName("SVGFEComponentTransferElement");
$.DomName_HTMLVideoElement = new $.DomName("HTMLVideoElement");
$.DomName_AKA = new $.DomName("Element.scrollHeight");
$.DomName_gsm0 = new $.DomName("HTMLOutputElement.value");
$.SupportedBrowser_Opera_null = new $.SupportedBrowser("Opera", null);
$.DomName_ki20 = new $.DomName("UIEvent.pageY");
$.DomName_qVS = new $.DomName("HTMLProgressElement.value");
$.DomName_SVGSymbolElement = new $.DomName("SVGSymbolElement");
$.JSName_lastModifiedDate = new $.JSName("lastModifiedDate");
$.DomName_WVA = new $.DomName("SpeechRecognitionEvent.emma");
$.DomName_qmq = new $.DomName("SVGClipPathElement.xmllang");
$.DomName_gg42 = new $.DomName("HTMLInputElement.placeholder");
$.DomName_2nr = new $.DomName("MouseEvent.relatedTarget");
$.Returns_yxt = new $.Returns("ByteBuffer|Null");
$.DomName_Kqg = new $.DomName("HTMLAreaElement.search");
$.DomName_MQk = new $.DomName("AudioProcessingEvent.inputBuffer");
$.DomName_DynamicsCompressorNode = new $.DomName("DynamicsCompressorNode");
$.DomName_WebKitCSSFilterValue = new $.DomName("WebKitCSSFilterValue");
$.DomName_6tX = new $.DomName("HTMLOListElement.reversed");
$.DomName_8aB4 = new $.DomName("SVGGElement.xmlspace");
$.DomName_UAO0 = new $.DomName("SVGFEConvolveMatrixElement.orderX");
$.DomName_FYo = new $.DomName("SVGLineElement.requiredExtensions");
$.DomName_FileEntry = new $.DomName("FileEntry");
$.DomName_CGY = new $.DomName("SVGPolygonElement.farthestViewportElement");
$.DomName_xw81 = new $.DomName("SVGEllipseElement.cx");
$.DomName_46y0 = new $.DomName("SVGCircleElement.xmlspace");
$.DomName_SbS = new $.DomName("AutocompleteErrorEvent.reason");
$.DomName_8Gl0 = new $.DomName("HTMLFieldSetElement.validity");
$.DomName_PPR = new $.DomName("SVGForeignObjectElement.xmllang");
$.DomName_BYc0 = new $.DomName("HTMLInputElement.valueAsDate");
$.DomName_StorageQuota = new $.DomName("StorageQuota");
$.JSName_getAttribute = new $.JSName("getAttribute");
$.DomName_kmC = new $.DomName("Element.errorEvent");
$.JSName_webkitNotifications = new $.JSName("webkitNotifications");
$.DomName_SVGZoomEvent = new $.DomName("SVGZoomEvent");
$.DomName_WebGLVertexArrayObjectOES = new $.DomName("WebGLVertexArrayObjectOES");
$.DomName_EVt0 = new $.DomName("Window.defaultstatus");
$.SupportedBrowser_jyx = new $.SupportedBrowser("Internet Explorer", "10");
$.DomName_DOMImplementation = new $.DomName("DOMImplementation");
$.DomName_09 = new $.DomName("SVGTextContentElement.requiredFeatures");
$.DomName_QuW = new $.DomName("HTMLOptionElement.label");
$.DomName_Met = new $.DomName("HTMLOptionElement.defaultSelected");
$.DomName_SVGFEPointLightElement = new $.DomName("SVGFEPointLightElement");
$.DomName_Isr = new $.DomName("HTMLAnchorElement.protocol");
$.JSName_webkitVisibilityState = new $.JSName("webkitVisibilityState");
$.DomName_gsm1 = new $.DomName("SVGFEOffsetElement.result");
$.DomName_s2g = new $.DomName("Document.webkitRegister");
$.DomName_TF9 = new $.DomName("SVGTextContentElement.requiredExtensions");
$.DomName_wKL = new $.DomName("Window.onclick");
$.DomName_g78 = new $.DomName("SVGImageElement.requiredExtensions");
$.DomName_HTMLOListElement = new $.DomName("HTMLOListElement");
$.DomName_JfL = new $.DomName("SVGFETurbulenceElement.numOctaves");
$.DomName_6QF = new $.DomName("SVGScriptElement.externalResourcesRequired");
$.DomName_EXTTextureFilterAnisotropic = new $.DomName("EXTTextureFilterAnisotropic");
$.DomName_kWM = new $.DomName("SVGRectElement.width");
$.DomName_gg43 = new $.DomName("SVGSVGElement.zoomAndPan");
$.DomName_XPathException = new $.DomName("XPathException");
$.DomName_MEg = new $.DomName("XMLHttpRequest.send");
$.DomName_9yJ = new $.DomName("HTMLEmbedElement.width");
$.DomName_eHw = new $.DomName("Node.dispatchEvent");
$.DomName_HTMLParagraphElement = new $.DomName("HTMLParagraphElement");
$.DomName_SVGLineElement = new $.DomName("SVGLineElement");
$.DomName_FileList = new $.DomName("FileList");
$.DomName_4mo = new $.DomName("SVGGElement.xmllang");
$.DomName_Qs5 = new $.DomName("SVGClipPathElement.systemLanguage");
$.DomName_6TA0 = new $.DomName("Element.webkitRegionOverset");
$.DomName_d0o = new $.DomName("SVGFEDisplacementMapElement.height");
$.DomName_SVGAnimateMotionElement = new $.DomName("SVGAnimateMotionElement");
$.DomName_OESVertexArrayObject = new $.DomName("OESVertexArrayObject");
$.DomName_skt = new $.DomName("Node.namespaceURI");
$.DomName_SVGStyledElement = new $.DomName("SVGStyledElement");
$.DomName_HTMLLinkElement = new $.DomName("HTMLLinkElement");
$.DomName_ATp = new $.DomName("HTMLSelectElement.value");
$.DomName_Y0l = new $.DomName("SVGFESpotLightElement.pointsAtZ");
$.DomName_SVGLocatable = new $.DomName("SVGLocatable");
$.DomName_apl = new $.DomName("AudioNode.addEventListener");
$.SupportedBrowser_pqE = new $.SupportedBrowser("Chrome", "26");
$.DomName_efl0 = new $.DomName("SVGComponentTransferFunctionElement");
$.DomName_2KU = new $.DomName("RTCDataChannelEvent.channel");
$.DomName_CjA = new $.DomName("BeforeLoadEvent.url");
$.DomName_j7R2 = new $.DomName("SVGRadialGradientElement.fr");
$.DomName_NQk = new $.DomName("HTMLInputElement.valueAsNumber");
$.DomName_66f = new $.DomName("HTMLSelectElement.form");
$.DomName_adS = new $.DomName("SVGAnimatedLengthList.animVal");
$.DomName_ztr = new $.DomName("Navigator.appVersion");
$.DomName_HTMLImageElement = new $.DomName("HTMLImageElement");
$.DomName_QBz = new $.DomName("Window.webkitStorageInfo");
$.DomName_enb = new $.DomName("SVGPathElement.systemLanguage");
$.DomName_JqC = new $.DomName("ErrorEvent.lineno");
$.DomName_oyU1 = new $.DomName("SVGDefsElement.requiredExtensions");
$.DomName_HTMLTemplateElement = new $.DomName("HTMLTemplateElement");
$._Completes_PGb = new $._Completes(null, "");
$.DomName_kUZ0 = new $.DomName("AudioDestinationNode.maxChannelCount");
$.DomName_8Gl1 = new $.DomName("HTMLKeygenElement.labels");
$.DomName_4AN0 = new $.DomName("MediaStream.dispatchEvent");
$.DomName_HTMLMapElement = new $.DomName("HTMLMapElement");
$.DomName_B8J1 = new $.DomName("HTMLAnchorElement.name");
$.DomName_waD = new $.DomName("HTMLIFrameElement.srcdoc");
$.DomName_SVGFitToViewBox = new $.DomName("SVGFitToViewBox");
$.DomName_8Oh = new $.DomName("HTMLLinkElement.sizes");
$.DomName_qFy = new $.DomName("SVGSVGElement.nearestViewportElement");
$.DomName_AnalyserNode = new $.DomName("AnalyserNode");
$.DomName_fRf = new $.DomName("SVGFEColorMatrixElement.x");
$.DomName_5cM = new $.DomName("SVGException.name");
$.DomName_HNA = new $.DomName("SVGFEConvolveMatrixElement.kernelUnitLengthY");
$.DomName_f1j = new $.DomName("HTMLInputElement.defaultValue");
$.DomName_ACG1 = new $.DomName("SVGSVGElement.screenPixelToMillimeterY");
$.DomName_VAg = new $.DomName("HTMLKeygenElement.willValidate");
$.DomName_Xt8 = new $.DomName("Element.style");
$.DomName_66I = new $.DomName("HTMLTrackElement.default");
$.DomName_oPa = new $.DomName("HTMLIFrameElement.sandbox");
$.DomName_8D4 = new $.DomName("HTMLFormElement.autocomplete");
$.DomName_MutationObserver = new $.DomName("MutationObserver");
$.DomName_CpJ = new $.DomName("AudioNode.numberOfOutputs");
$.DomName_qx4 = new $.DomName("HTMLIFrameElement.contentWindow");
$.DomName_mnK = new $.DomName("HTMLKeygenElement.keytype");
$.JSName_removeEventListener = new $.JSName("removeEventListener");
$.DomName_ibu = new $.DomName("HTMLSelectElement.name");
$.DomName_4QF1 = new $.DomName("SVGUseElement.instanceRoot");
$.DomName_Gsa0 = new $.DomName("EventException.name");
$.DomName_u5C = new $.DomName("HTMLInputElement.readOnly");
$.DomName_SVGPathSegLinetoHorizontalRel = new $.DomName("SVGPathSegLinetoHorizontalRel");
$.DomName_c8P = new $.DomName("SVGFEGaussianBlurElement.result");
$.DomName_CCx = new $.DomName("HTMLLabelElement.HTMLLabelElement");
$.DomName_Ww7 = new $.DomName("HTMLLinkElement.href");
$.DomName_05A = new $.DomName("HTMLEmbedElement.src");
$.DomName_SVGHKernElement = new $.DomName("SVGHKernElement");
$.DomName_Ccd = new $.DomName("Element.hasAttribute");
$.DomName_I2I = new $.DomName("SVGFEMergeElement.result");
$.DomName_zPV3 = new $.DomName("SVGFEBlendElement.x");
$.DomName_TouchEvent = new $.DomName("TouchEvent");
$.DomName_DatabaseCallback = new $.DomName("DatabaseCallback");
$.DomName_mJI = new $.DomName("Console.clear");
$.DomName_WebGLLoseContext = new $.DomName("WebGLLoseContext");
$.DomName_Ucj0 = new $.DomName("HTMLMediaElement.webkitHasClosedCaptions");
$.DomName_WebKitCSSMatrix = new $.DomName("WebKitCSSMatrix");
$.JSName_webkitRegionOverset = new $.JSName("webkitRegionOverset");
$.DomName_3uR4 = new $.DomName("HTMLInputElement.size");
$.DomName_OFS = new $.DomName("SVGGElement.farthestViewportElement");
$.DomName_C3O = new $.DomName("Element.offsetTop");
$.DomName_sWu = new $.DomName("HTMLImageElement.complete");
$.DomName_IVQ1 = new $.DomName("SVGPolylineElement.externalResourcesRequired");
$.DomName_UHu = new $.DomName("SVGImageElement.farthestViewportElement");
$.DomName_G3O0 = new $.DomName("HTMLMetaElement.httpEquiv");
$.DomName_DOMTokenList = new $.DomName("DOMTokenList");
$.DomName_AKW = new $.DomName("XMLHttpRequest.removeEventListener");
$.DomName_HTMLInputElement = new $.DomName("HTMLInputElement");
$.DomName_OX8 = new $.DomName("HTMLCanvasElement.width");
$.DomName_SVGAnimatedNumber = new $.DomName("SVGAnimatedNumber");
$.JSName_title = new $.JSName("title");
$.DomName_HTMLParamElement = new $.DomName("HTMLParamElement");
$.DomName_okI = new $.DomName("HTMLTableColElement.span");
$.DomName_4650 = new $.DomName("Node.removeEventListener");
$.DomName_IMK0 = new $.DomName("HTMLLabelElement.control");
$.DomName_FileError = new $.DomName("FileError");
$.DomName_fZG = new $.DomName("Window.offscreenBuffering");
$.DomName_6pl = new $.DomName("HTMLEmbedElement.name");
$.DomName_8lB2 = new $.DomName("SVGFEConvolveMatrixElement.result");
$.DomName_OeL = new $.DomName("SVGFETileElement.y");
$.DomName_69P0 = new $.DomName("XMLHttpRequest.dispatchEvent");
$.DomName_Yq8 = new $.DomName("Element.onchange");
$.DomName_HRW = new $.DomName("HTMLOListElement.type");
$.DomName_HTMLDetailsElement = new $.DomName("HTMLDetailsElement");
$.JSName_defaultURL = new $.JSName("defaultURL");
$.DomName_L4B = new $.DomName("StorageEvent.oldValue");
$.DomName_gfn0 = new $.DomName("XMLHttpRequest.response");
$.DomName_CKa = new $.DomName("SVGDefsElement.externalResourcesRequired");
$.DomName_ato = new $.DomName("SVGUseElement.y");
$.DomName_0aD = new $.DomName("SVGSwitchElement.farthestViewportElement");
$.DomName_CustomElementConstructor = new $.DomName("CustomElementConstructor");
$.DomName_TouchList = new $.DomName("TouchList");
$.DomName_SpeechInputEvent = new $.DomName("SpeechInputEvent");
$.DomName_6Hv = new $.DomName("HTMLEmbedElement.height");
$.DomName_613 = new $.DomName("SVGMaskElement.xmlspace");
$.DomName_PIY = new $.DomName("DeviceMotionEvent.interval");
$.DomName_icQ = new $.DomName("Element.loadEvent");
$.DomName_5uk = new $.DomName("Event.eventPhase");
$.DomName_SVGCircleElement = new $.DomName("SVGCircleElement");
$.DomName_eD3 = new $.DomName("HTMLAreaElement.href");
$.DomName_AudioBufferSourceNode = new $.DomName("AudioBufferSourceNode");
$.DomName_rJT = new $.DomName("HTMLIFrameElement.seamless");
$.DomName_s4m = new $.DomName("Element.innerHTML");
$.DomName_HTMLBaseFontElement = new $.DomName("HTMLBaseFontElement");
$.DomName_CSSImportRule = new $.DomName("CSSImportRule");
$.DomName_HTMLAudioElement = new $.DomName("HTMLAudioElement");
$.Type_0 = $.createRuntimeType('Experimental');
$.DomName_KDX = new $.DomName("MessageEvent.ports");
$.DomName_muD = new $.DomName("Document.children");
$.DomName_WheelEvent = new $.DomName("WheelEvent");
$.DomName_oQ5 = new $.DomName("OverflowEvent.orient");
$.DomName_Z3d = new $.DomName("SVGPolygonElement.xmllang");
$.DomName_AKW1 = new $.DomName("SVGException.code");
$.DomName_EkK = new $.DomName("CSSStyleDeclaration.setProperty");
$.DomName_gWR = new $.DomName("Element.offsetLeft");
$.DomName_IDBKeyRange = new $.DomName("IDBKeyRange");
$.DomName_4AN1 = new $.DomName("File.name");
$.DomName_Ikh = new $.DomName("OverflowEvent.verticalOverflow");
$.DomName_46c = new $.DomName("SVGFEMorphologyElement.y");
$.DomName_ADx0 = new $.DomName("HTMLAnchorElement.hreflang");
$.DomName_NamedNodeMap = new $.DomName("NamedNodeMap");
$.DomName_XRg = new $.DomName("HTMLAreaElement.alt");
$.DomName_G04 = new $.DomName("HTMLIFrameElement.name");
$.DomName_AO3 = new $.DomName("MutationRecord.nextSibling");
$.Type_cOY = $.createRuntimeType('DocsEditable');
$.DomName_SVGLinearGradientElement = new $.DomName("SVGLinearGradientElement");
$.JSName_hasAttribute = new $.JSName("hasAttribute");
$.EventStreamProvider_change = $.setRuntimeTypeInfo(new $.EventStreamProvider("change"), [$.Event]);
$.DomName_SVGPathSegLinetoAbs = new $.DomName("SVGPathSegLinetoAbs");
$.DomName_6r2 = new $.DomName("HTMLStyleElement.HTMLStyleElement");
$.DomName_MIo0 = new $.DomName("HTMLImageElement.y");
$.DomName_SVGPathSegCurvetoCubicAbs = new $.DomName("SVGPathSegCurvetoCubicAbs");
$.Type_AyI = $.createRuntimeType('Unstable');
$.DomName_27I = new $.DomName("SVGPolylineElement.animatedPoints");
$.DomName_SVGFEFuncRElement = new $.DomName("SVGFEFuncRElement");
$.DomName_qVS0 = new $.DomName("Element.webkitdropzone");
$.DomName_UeR = new $.DomName("HTMLAreaElement.port");
$.JSName_screenX = new $.JSName("screenX");
$.DomName_HTMLSpanElement = new $.DomName("HTMLSpanElement");
$.DomName_DeviceAcceleration = new $.DomName("DeviceAcceleration");
$.DomName_k2a0 = new $.DomName("SVGTextElement.farthestViewportElement");
$.DomName_EW90 = new $.DomName("ProcessingInstruction.sheet");
$.DomName_EVt1 = new $.DomName("SVGRadialGradientElement.r");
$.DomName_AWI = new $.DomName("SVGException.message");
$.DomName_XdM = new $.DomName("HTMLInputElement.pattern");
$.DomName_Isr0 = new $.DomName("SVGRectElement.farthestViewportElement");
$.DomName_SVGLengthList = new $.DomName("SVGLengthList");
$.DomName_QkU1 = new $.DomName("HTMLAnchorElement.href");
$.DomName_WebKitSourceBufferList = new $.DomName("WebKitSourceBufferList");
$.DomName_ProcessingInstruction = new $.DomName("ProcessingInstruction");
$.DomName_WPD0 = new $.DomName("Notation.publicId");
$.DomName_yY4 = new $.DomName("Navigator.doNotTrack");
$.JSName_webkitEntries = new $.JSName("webkitEntries");
$.DomName_u3w = new $.DomName("SVGSVGElement.useCurrentView");
$.Creates_ByteBuffer = new $.Creates("ByteBuffer");
$.DomName_ZIv0 = new $.DomName("SVGTextContentElement.xmlspace");
$.DomName_fRf0 = new $.DomName("SVGFEColorMatrixElement.y");
$.DomName_687 = new $.DomName("HTMLTableRowElement.HTMLTableRowElement");
$.DomName_K61 = new $.DomName("XMLHttpRequest.loadEvent");
$.DomName_I5O = new $.DomName("CompositionEvent.data");
$.JSName_webkitTemporaryStorage = new $.JSName("webkitTemporaryStorage");
$.DomName_iUw = new $.DomName("SVGImageElement.xmllang");
$.DomName_MLc0 = new $.DomName("XMLHttpRequest.onprogress");
$.DomName_CzY = new $.DomName("SVGClipPathElement.nearestViewportElement");
$.JSName_postMessage = new $.JSName("postMessage");
$.DomName_U8J = new $.DomName("SVGFEMergeElement.height");
$.DomName_Qye = new $.DomName("SVGTitleElement.xmlspace");
$.DomName_wmx = new $.DomName("HTMLImageElement.naturalHeight");
$.DomName_EuN = new $.DomName("MediaKeyEvent.defaultURL");
$.DomName_H9C = new $.DomName("Window.history");
$.DomName_46y1 = new $.DomName("HTMLMediaElement.controls");
$.DomName_2O3 = new $.DomName("SVGViewElement.viewBox");
$.DomName_bdS0 = new $.DomName("Element.spellcheck");
$.DomName_gg4 = new $.DomName("KeyboardEvent.keyCode");
$.JSName_webkitPreservesPitch = new $.JSName("webkitPreservesPitch");
$.DomName_cct = new $.DomName("SpeechSynthesisEvent.elapsedTime");
$.DomName_Y6D1 = new $.DomName("Document.createEvent");
$.DomName_DeviceMotionEvent = new $.DomName("DeviceMotionEvent");
$.DomName_Comment = new $.DomName("Comment");
$.JSName_state = new $.JSName("state");
$.DomName_OverflowEvent = new $.DomName("OverflowEvent");
$.DomName_gc62 = new $.DomName("MediaKeyEvent.keySystem");
$.DomName_4aj = new $.DomName("SVGElement.viewportElement");
$.DomName_46y2 = new $.DomName("OfflineAudioCompletionEvent.renderedBuffer");
$.JSName_webkitFullscreenEnabled = new $.JSName("webkitFullscreenEnabled");
$.DomName_SVGMaskElement = new $.DomName("SVGMaskElement");
$.DomName_Ktb = new $.DomName("SVGFEImageElement.width");
$.DomName_O92 = new $.DomName("Console.error");
$.DomName_2jN0 = new $.DomName("SVGTextPathElement.method");
$.DomName_GC3 = new $.DomName("SpeechRecognitionEvent.resultIndex");
$.DomName_OdR = new $.DomName("HTMLTextAreaElement.willValidate");
$.DomName_UE7 = new $.DomName("Element.clientLeft");
$.DomName_TJV = new $.DomName("Window.getSelection");
$.DomName_CHK0 = new $.DomName("SVGEllipseElement.rx");
$.DomName_3uR5 = new $.DomName("HTMLInputElement.list");
$.DomName_010 = new $.DomName("NavigatorUserMediaErrorCallback");
$.DomName_e3S = new $.DomName("Element.offsetWidth");
$.DomName_FIw = new $.DomName("HTMLMediaElement.seeking");
$.DomName_SVGPathSegLinetoRel = new $.DomName("SVGPathSegLinetoRel");
$.DomName_MediaKeyError = new $.DomName("MediaKeyError");
$.DomName_WPD1 = new $.DomName("HTMLLinkElement.import");
$.DomName_ayw = new $.DomName("SVGSVGElement.width");
$.DomName_CompositionEvent = new $.DomName("CompositionEvent");
$.DomName_G3O1 = new $.DomName("MouseEvent.webkitMovementY");
$.DomName_Glc0 = new $.DomName("DOMException.message");
$.DomName_eZ8 = new $.DomName("HTMLDivElement.HTMLDivElement");
$.DomName_SVGMarkerElement = new $.DomName("SVGMarkerElement");
$.DomName_uQ9 = new $.DomName("HTMLAreaElement.pathname");
$.DomName_pF6 = new $.DomName("SVGMarkerElement.markerWidth");
$.JSName_file = new $.JSName("file");
$.DomName_mtF = new $.DomName("SVGImageElement.y");
$.DomName_cMb = new $.DomName("MouseEvent.dataTransfer");
$.DomName_5UD = new $.DomName("HTMLBodyElement.loadEvent");
$.DomName_WfA = new $.DomName("SVGRectElement.ry");
$.EventStreamProvider_dblclick = $.setRuntimeTypeInfo(new $.EventStreamProvider("dblclick"), [$.Event]);
$.DomName_86y2 = new $.DomName("XMLHttpRequest.onload");
$.DomName_oRp = new $.DomName("HTMLMediaElement.webkitVideoDecodedByteCount");
$.DomName_irU = new $.DomName("SVGFECompositeElement.k3");
$.DomName_HTMLFormControlsCollection = new $.DomName("HTMLFormControlsCollection");
$.DomName_2Vu = new $.DomName("SVGFESpotLightElement.specularExponent");
$.DomName_wKi = new $.DomName("SVGGElement.requiredExtensions");
$.DomName_AT1 = new $.DomName("Document.fontloader");
$.DomName_mCz = new $.DomName("SVGFilterPrimitiveStandardAttributes");
$.DomName_IDBVersionChangeEvent = new $.DomName("IDBVersionChangeEvent");
$.JSName_outerHTML = new $.JSName("outerHTML");
$.DomName_Iot = new $.DomName("Element.outerHTML");
$.DomName_G5g = new $.DomName("HTMLMediaElement.autoplay");
$.DomName_2Vk = new $.DomName("SVGTextPathElement.startOffset");
$.DomName_qRH = new $.DomName("SVGDescElement.xmllang");
$.DomName_s4r = new $.DomName("HTMLFormElement.enctype");
$.DomName_6FR2 = new $.DomName("SVGSymbolElement.xmlspace");
$.DomName_MIDIOutput = new $.DomName("MIDIOutput");
$.DomName_MUB1 = new $.DomName("SVGFETileElement.width");
$.JSName_appendChild = new $.JSName("appendChild");
$.DomName_UBc = new $.DomName("SVGSVGElement.externalResourcesRequired");
$.DomName_Ktb0 = new $.DomName("HTMLMediaElement.played");
$.DomName_CDATASection = new $.DomName("CDATASection");
$.DomName_SVGPathSegLinetoVerticalRel = new $.DomName("SVGPathSegLinetoVerticalRel");
$.DomName_QWq = new $.DomName("Document.onkeydown");
$.DomName_SVGClipPathElement = new $.DomName("SVGClipPathElement");
$.DomName_ej4 = new $.DomName("Event.target");
$.DomName_yjH = new $.DomName("Window.pageYOffset");
$.DomName_SVGFESpecularLightingElement = new $.DomName("SVGFESpecularLightingElement");
$.DomName_CSX = new $.DomName("HTMLTableElement.tBodies");
$.DomName_SVGDescElement = new $.DomName("SVGDescElement");
$.DomName_87v = new $.DomName("Element.id");
$.DomName_yLX = new $.DomName("HTMLSelectElement.length");
$.DomName_K6Q = new $.DomName("HTMLMediaElement.error");
$.DomName_0Bz = new $.DomName("HTMLInputElement.step");
$.DomName_8Oh0 = new $.DomName("MediaKeyMessageEvent.destinationURL");
$.EventStreamProvider_message = $.setRuntimeTypeInfo(new $.EventStreamProvider("message"), [$.MessageEvent]);
$.DomName_FileException = new $.DomName("FileException");
$.DomName_rrs = new $.DomName("HTMLTableRowElement.sectionRowIndex");
$.DomName_woc4 = new $.DomName("Window.localStorage");
$.JSName_documentURI = new $.JSName("documentURI");
$.DomName_NodeIterator = new $.DomName("NodeIterator");
$.DomName_oN7 = new $.DomName("HTMLDocument.activeElement");
$.DomName_csW = new $.DomName("SVGPathElement.requiredFeatures");
$.DomName_SVGFEDistantLightElement = new $.DomName("SVGFEDistantLightElement");
$.DomName_WNt = new $.DomName("Navigator.geolocation");
$.DomName_SVGAnimatedAngle = new $.DomName("SVGAnimatedAngle");
$.DomName_Selection = new $.DomName("Selection");
$.DomName_AudioBuffer = new $.DomName("AudioBuffer");
$.DomName_c8P0 = new $.DomName("ProgressEvent.loaded");
$.DomName_HTMLSelectElement = new $.DomName("HTMLSelectElement");
$.DomName_qRa = new $.DomName("HTMLKeygenElement.challenge");
$.DomName_F9M = new $.DomName("HTMLMediaElement.mediaKeys");
$.DomName_DOMStringList = new $.DomName("DOMStringList");
$.DomName_EventTarget = new $.DomName("EventTarget");
$.DomName_yLX0 = new $.DomName("HTMLButtonElement.formAction");
$.DomName_W8O1 = new $.DomName("SVGSVGElement.viewBox");
$.DomName_oRN = new $.DomName("SVGDocument.rootElement");
$.DomName_E6l = new $.DomName("SVGClipPathElement.transform");
$.DomName_4QF2 = new $.DomName("Element.getAttribute");
$.DomName_ga7 = new $.DomName("Attr.isId");
$.DomName_SgZ = new $.DomName("SVGForeignObjectElement.transform");
$.DomName_cHS = new $.DomName("AudioContext.sampleRate");
$.DomName_WaveTable = new $.DomName("WaveTable");
$.DomName_sJO = new $.DomName("Window.pageXOffset");
$.DomName_SharedWorker = new $.DomName("SharedWorker");
$.DomName_woc5 = new $.DomName("SVGFEDiffuseLightingElement.y");
$.DomName_vhs = new $.DomName("FocusEvent.relatedTarget");
$.DomName_atK1 = new $.DomName("SVGFEComponentTransferElement.in1");
$.DomName_SVGAnimateElement = new $.DomName("SVGAnimateElement");
$.DomName_Uav = new $.DomName("MediaStreamAudioDestinationNode");
$.DomName_oPa0 = new $.DomName("Window.crypto");
$.DomName_SpeechRecognitionResult = new $.DomName("SpeechRecognitionResult");
$.DomName_Jsp2 = new $.DomName("Element.keypressEvent");
$.DomName_Entry = new $.DomName("Entry");
$.DomName_8kG1 = new $.DomName("SVGTextPathElement.spacing");
$.DomName_OeL0 = new $.DomName("Document.readyState");
$.JSName_getPropertyValue = new $.JSName("getPropertyValue");
$.DomName_Sby = new $.DomName("Window.devicePixelRatio");
$.DomName_011 = new $.DomName("Navigator.product");
$.DomName_aF80 = new $.DomName("SVGViewElement.externalResourcesRequired");
$.Creates_a42 = new $.Creates("ByteBuffer|Blob|Document|=Object|=List|String|num");
$.DomName_012 = new $.DomName("SVGSwitchElement.nearestViewportElement");
$.DomName_CSSValueList = new $.DomName("CSSValueList");
$.DomName_ijJ = new $.DomName("HTMLTextAreaElement.value");
$.DomName_lZs = new $.DomName("SVGEllipseElement.requiredFeatures");
$.JSName_webkitAudioDecodedByteCount = new $.JSName("webkitAudioDecodedByteCount");
$.DomName_HTMLHtmlElement = new $.DomName("HTMLHtmlElement");
$.DomName_Plj = new $.DomName("SVGFEImageElement.externalResourcesRequired");
$.DomName_69t1 = new $.DomName("Selection.baseOffset");
$.DomName_Rfd = new $.DomName("ShadowRoot.resetStyleInheritance");
$.JSName_webkitIsFullScreen = new $.JSName("webkitIsFullScreen");
$.JSName_webkitSpeech = new $.JSName("webkitSpeech");
$.DomName_u5T0 = new $.DomName("SVGFETileElement.in1");
$.DomName_Y0l0 = new $.DomName("SVGFESpotLightElement.pointsAtX");
$.DomName_OLF = new $.DomName("HTMLSelectElement.required");
$.DomName_WebGLTexture = new $.DomName("WebGLTexture");
$.DomName_WebKitNamedFlowCollection = new $.DomName("WebKitNamedFlowCollection");
$.DomName_KeyboardEvent = new $.DomName("KeyboardEvent");
$.DomName_h4i = new $.DomName("SVGForeignObjectElement.width");
$.DomName_LNw = new $.DomName("HTMLAnchorElement.toString");
$.DomName_kyU0 = new $.DomName("SVGLinearGradientElement.y1");
$.DomName_Uu7 = new $.DomName("Document.window");
$.DomName_gkJ = new $.DomName("SVGRectElement.requiredFeatures");
$.DomName_86y3 = new $.DomName("SVGFEMergeNodeElement.in1");
$.DomName_9hp = new $.DomName("Entry.isFile");
$.DomName_atK2 = new $.DomName("Element.onload");
$.DomName_evX = new $.DomName("SVGFETurbulenceElement.type");
$.DomName_StorageInfo = new $.DomName("StorageInfo");
$.DomName_8aB5 = new $.DomName("HTMLMediaElement.webkitClosedCaptionsVisible");
$.DomName_SVGTransformable = new $.DomName("SVGTransformable");
$.DomName_HTMLFrameSetElement = new $.DomName("HTMLFrameSetElement");
$.DomName_CSSPrimitiveValue = new $.DomName("CSSPrimitiveValue");
$.DomName_c0B = new $.DomName("SVGZoomEvent.newTranslate");
$.DomName_guh = new $.DomName("SVGPolygonElement.systemLanguage");
$.DomName_CHK1 = new $.DomName("Element.attributes");
$.DomName_DFB = new $.DomName("TrackEvent.track");
$.DomName_DeviceRotationRate = new $.DomName("DeviceRotationRate");
$.DomName_YZQ = new $.DomName("Node.cloneNode");
$.DomName_u5T1 = new $.DomName("Navigator.plugins");
$.JSName_offset = new $.JSName("offset");
$.DomName_SVGStyleElement = new $.DomName("SVGStyleElement");
$.DomName_3je = new $.DomName("Element.tabIndex");
$.DomName_MediaKeySession = new $.DomName("MediaKeySession");
$.DomName_9ht1 = new $.DomName("SVGFilterElement.y");
$.DomName_Mvk = new $.DomName("HTMLButtonElement.autofocus");
$.DomName_7Nz0 = new $.DomName("MediaKeyEvent.sessionId");
$.DomName_BCG = new $.DomName("SpeechSynthesisEvent.charIndex");
$.DomName_SVGTSpanElement = new $.DomName("SVGTSpanElement");
$.DomName_Iqz = new $.DomName("SVGPolylineElement.xmlspace");
$.DomName_Ozi = new $.DomName("SVGGElement.nearestViewportElement");
$.DomName_OXX = new $.DomName("HTMLInputElement.disabled");
$.DomName_TSw = new $.DomName("SVGTextPathElement.href");
$.DomName_013 = new $.DomName("CloseEvent.reason");
$.DomName_GZS = new $.DomName("SVGSVGElement.currentScale");
$.DomName_SVGStringList = new $.DomName("SVGStringList");
$.DomName_SpeechSynthesisVoice = new $.DomName("SpeechSynthesisVoice");
$.DomName_Lx40 = new $.DomName("SVGSVGElement.requiredFeatures");
$.DomName_yvP = new $.DomName("EventTarget.removeEventListener");
$.DomName_PerformanceTiming = new $.DomName("PerformanceTiming");
$.DomName_kaS = new $.DomName("SVGSVGElement.contentScriptType");
$.DomName_fDi = new $.DomName("HTMLFieldSetElement.disabled");
$.DomName_qNA = new $.DomName("SVGFEOffsetElement.width");
$.DomName_EventException = new $.DomName("EventException");
$.DomName_ACe1 = new $.DomName("Navigator.mimeTypes");
$.DomName_SVGAltGlyphDefElement = new $.DomName("SVGAltGlyphDefElement");
$.DomName_qTT0 = new $.DomName("HTMLInputElement.formAction");
$.DomName_JpJ = new $.DomName("SVGFEColorMatrixElement.width");
$.DomName_Crypto = new $.DomName("Crypto");
$.DomName_Ujq = new $.DomName("MouseEvent.altKey");
$.DomName_yBF = new $.DomName("SpeechRecognitionEvent.results");
$.DomName_YUp = new $.DomName("HTMLTextAreaElement.setSelectionRange");
$.EventStreamProvider_error = $.setRuntimeTypeInfo(new $.EventStreamProvider("error"), [$.ProgressEvent]);
$.DomName_URK = new $.DomName("HTMLVideoElement.height");
$.JSName_contentWindow = new $.JSName("contentWindow");
$.DomName_210 = new $.DomName("Element.removeAttribute");
$.DomName_FZB = new $.DomName("XMLHttpRequest.addEventListener");
$.DomName_SVGTransform = new $.DomName("SVGTransform");
$.DomName_C5Z0 = new $.DomName("KeyboardEvent.shiftKey");
$.DomName_WebGLBuffer = new $.DomName("WebGLBuffer");
$.DomName_yKz = new $.DomName("SVGFEDiffuseLightingElement.height");
$.DomName_QGQ = new $.DomName("SVGUseElement.transform");
$.DomName_eBI = new $.DomName("SVGCircleElement.requiredExtensions");
$.DomName_dtK = new $.DomName("SVGDocument.createEvent");
$.DomName_Art0 = new $.DomName("Selection.extentOffset");
$.DomName_EBV = new $.DomName("SVGFEColorMatrixElement.in1");
$.DomName_Glc1 = new $.DomName("HTMLBodyElement.messageEvent");
$.DomName_Qcj = new $.DomName("Selection.type");
$.DomName_Kro = new $.DomName("HTMLAreaElement.protocol");
$.DomName_DOMError = new $.DomName("DOMError");
$.DomName_lMg = new $.DomName("Node.childNodes");
$.DomName_HNA0 = new $.DomName("SVGFEConvolveMatrixElement.kernelUnitLengthX");
$.DomName_IJC0 = new $.DomName("HTMLInputElement.webkitSpeech");
$.DomName_cD92 = new $.DomName("HTMLMeterElement.high");
$.DomName_1Gf = new $.DomName("Entity.systemId");
$.DomName_SVGRect = new $.DomName("SVGRect");
$.DomName_ola = new $.DomName("HTMLLinkElement.sheet");
$.DomName_Ms6 = new $.DomName("IDBVersionChangeEvent.newVersion");
$.JSName_remove = new $.JSName("remove");
$.DomName_HTMLTableCellElement = new $.DomName("HTMLTableCellElement");
$.DomName_xw82 = new $.DomName("HTMLMediaElement.textTracks");
$.DomName_gg44 = new $.DomName("HTMLTextAreaElement.wrap");
$.DomName_KYr = new $.DomName("HTMLInputElement.autofocus");
$.DomName_eZE = new $.DomName("SecurityPolicyViolationEvent.sourceFile");
$.DomName_sxw0 = new $.DomName("HTMLInputElement.width");
$.DomName_ew1 = new $.DomName("HTMLMeterElement.low");
$.JSName_initCustomEvent = new $.JSName("initCustomEvent");
$.DomName_s8k = new $.DomName("UIEvent.charCode");
$.DomName_IDBIndex = new $.DomName("IDBIndex");
$.DomName_RTCDataChannelEvent = new $.DomName("RTCDataChannelEvent");
$.DomName_AdS = new $.DomName("Window.toString");
$.DomName_FeV0 = new $.DomName("MessageEvent.data");
$.DomName_ElementTimeControl = new $.DomName("ElementTimeControl");
$.DomName_Ktb1 = new $.DomName("Document.head");
$.DomName_M6i = new $.DomName("HTMLImageElement.lowsrc");
$.DomName_SVGUseElement = new $.DomName("SVGUseElement");
$.DomName_OCB = new $.DomName("SVGForeignObjectElement.requiredExtensions");
$.DomName_OKd0 = new $.DomName("MediaKeyError.code");
$.DomName_HTMLDocument = new $.DomName("HTMLDocument");
$.DomName_2fz = new $.DomName("MediaError.code");
$.DomName_Qo8 = new $.DomName("Window.performance");
$.DomName_WebGLUniformLocation = new $.DomName("WebGLUniformLocation");
$.JSName_clientX = new $.JSName("clientX");
$.DomName_RUC = new $.DomName("HTMLAnchorElement.origin");
$.DomName_History = new $.DomName("History");
$.DomName_Db00 = new $.DomName("SVGFilterElement.xmlspace");
$.DomName_SVGMissingGlyphElement = new $.DomName("SVGMissingGlyphElement");
$.DomName_nMC = new $.DomName("Window.addEventListener");
$.DomName_I31 = new $.DomName("HTMLInputElement.alt");
$.DomName_4aQ = new $.DomName("HTMLOptionElement.form");
$.DomName_atK3 = new $.DomName("HTMLSelectElement.selectedIndex");
$.DomName_WfP = new $.DomName("SVGTextContentElement.lengthAdjust");
$.DomName_RTCStatsReport = new $.DomName("RTCStatsReport");
$.JSName_children = new $.JSName("children");
$.DomName_w91 = new $.DomName("AudioContext.destination");
$.DomName_ZIv1 = new $.DomName("Window.name");
$.DomName_SVGFEColorMatrixElement = new $.DomName("SVGFEColorMatrixElement");
$.DomName_M6i0 = new $.DomName("HTMLImageElement.border");
$.DomName_2jN = new $.DomName("HTMLDialogElement.close");
$.DomName_D34 = new $.DomName("Window.applicationCache");
$.Returns_cUN = new $.Returns("int|String|Null");
$.DomName_gnu0 = new $.DomName("Element.lastElementChild");
$.DomName_ha20 = new $.DomName("SVGPathSegCurvetoCubicSmoothRel");
$.Creates_sj1 = new $.Creates("int|String|Null");
$.DomName_cGl = new $.DomName("HTMLTableRowElement.cells");
$.DomName_yLM = new $.DomName("SVGFETurbulenceElement.seed");
$.DomName_OhK = new $.DomName("HTMLInputElement.formEnctype");
$.JSName_body = new $.JSName("body");
$.DomName_q1N = new $.DomName("SVGMaskElement.systemLanguage");
$.DomName_mtF0 = new $.DomName("SVGImageElement.x");
$.DomName_Notation = new $.DomName("Notation");
$.DomName_PerformanceMeasure = new $.DomName("PerformanceMeasure");
$.DomName_FileReader = new $.DomName("FileReader");
$.DomName_Tng = new $.DomName("SVGFEImageElement.preserveAspectRatio");
$.DomName_Svm = new $.DomName("HTMLOutputElement.type");
$.DomName_44c = new $.DomName("PageTransitionEvent.persisted");
$.DomName_erL = new $.DomName("Window.scrollbars");
$.JSName_observe = new $.JSName("observe");
$.DomName_HTMLMediaElement = new $.DomName("HTMLMediaElement");
$.DomName_qJx0 = new $.DomName("SVGSVGElement.farthestViewportElement");
$.DomName_Iao = new $.DomName("HTMLInputElement.validity");
$.DomName_Ii7 = new $.DomName("SVGPolygonElement.points");
$.DomName_bl8 = new $.DomName("SVGSVGElement.xmllang");
$.DomName_HTMLKeygenElement = new $.DomName("HTMLKeygenElement");
$.DomName_StorageEvent = new $.DomName("StorageEvent");
$.DomName_qNA0 = new $.DomName("File.webkitRelativePath");
$.DomName_Counter = new $.DomName("Counter");
$.DomName_Ii70 = new $.DomName("CharacterData.data");
$.DomName_SVGNumberList = new $.DomName("SVGNumberList");
$.DomName_cSk = new $.DomName("HTMLAnchorElement.rel");
$.DomName_rVS = new $.DomName("TransitionEvent.elapsedTime");
$.DomName_1Yf = new $.DomName("Window.speechSynthesis");
$.DomName_yrD = new $.DomName("Document.implementation");
$.DomName_WPt = new $.DomName("SVGSwitchElement.xmlspace");
$.DomName_zzN = new $.DomName("Window.onmessage");
$.DomName_MemoryInfo = new $.DomName("MemoryInfo");
$.DomName_SVGFEDiffuseLightingElement = new $.DomName("SVGFEDiffuseLightingElement");
$.DomName_Vmp = new $.DomName("SVGFEOffsetElement.dx");
$.DomName_ckJ = new $.DomName("SVGTextContentElement.systemLanguage");
$.DomName_SVGFECompositeElement = new $.DomName("SVGFECompositeElement");
$.DomName_rLL = new $.DomName("HTMLButtonElement.labels");
$.DomName_EOZ = new $.DomName("Element.firstElementChild");
$.DomName_WJY = new $.DomName("SVGTitleElement.xmllang");
$.DomName_MutationCallback = new $.DomName("MutationCallback");
$.DomName_PageTransitionEvent = new $.DomName("PageTransitionEvent");
$.DomName_SVGFEDropShadowElement = new $.DomName("SVGFEDropShadowElement");
$.DomName_MBt = new $.DomName("HTMLMediaElement.paused");
$.DomName_6Vn0 = new $.DomName("SVGSVGElement.viewport");
$.DomName_9zo = new $.DomName("Element.clientHeight");
$.JSName_keyIdentifier = new $.JSName("keyIdentifier");
$.DomName_qd4 = new $.DomName("SVGFEBlendElement.in2");
$.DomName_WebGLCompressedTextureATC = new $.DomName("WebGLCompressedTextureATC");
$.DomName_DOMException = new $.DomName("DOMException");
$.JSName_tBodies = new $.JSName("tBodies");
$.DomName_SpeechInputResultList = new $.DomName("SpeechInputResultList");
$.DomName_Lx41 = new $.DomName("SVGFEConvolveMatrixElement.y");
$.DomName_osO = new $.DomName("AudioNode.connect");
$.DomName_SEN = new $.DomName("SVGClipPathElement.clipPathUnits");
$.JSName_childElementCount = new $.JSName("childElementCount");
$.DomName_Q96 = new $.DomName("SVGImageElement.systemLanguage");
$.JSName_target = new $.JSName("target");
$.EventStreamProvider_click = $.setRuntimeTypeInfo(new $.EventStreamProvider("click"), [$.MouseEvent]);
$.JSName_view = new $.JSName("view");
$.DomName_UqR0 = new $.DomName("Window.outerHeight");
$.DomName_EXTDrawBuffers = new $.DomName("EXTDrawBuffers");
$.DomName_rR40 = new $.DomName("SVGFEDisplacementMapElement.in2");
$.DomName_mnK0 = new $.DomName("HTMLImageElement.src");
$.DomName_jnD = new $.DomName("SVGFEConvolveMatrixElement.kernelMatrix");
$.DomName_Q1t = new $.DomName("Document.childElementCount");
$.DomName_SpeechSynthesis = new $.DomName("SpeechSynthesis");
$.DomName_6L0 = new $.DomName("Event.stopImmediatePropagation");
$.DomName_sEX = new $.DomName("Document.ondblclick");
$.JSName_webkitRegister = new $.JSName("webkitRegister");
$.DomName_OPN = new $.DomName("SVGSVGElement.height");
$.DomName_Element = new $.DomName("Element");
$.DomName_qYh = new $.DomName("HTMLObjectElement.height");
$.DomName_2mB0 = new $.DomName("SVGFEImageElement.height");
$.DomName_HTMLBaseElement = new $.DomName("HTMLBaseElement");
$.DomName_qmq0 = new $.DomName("HTMLMediaElement.defaultMuted");
$.DomName_c9P = new $.DomName("HTMLFieldSetElement.validationMessage");
$.DomName_izR = new $.DomName("AudioProcessingEvent.outputBuffer");
$.JSName_ownerDocument = new $.JSName("ownerDocument");
$.DomName_8lB3 = new $.DomName("SVGImageElement.xmlspace");
$.DomName_62s = new $.DomName("MutationRecord.oldValue");
$.DomName_CloseEvent = new $.DomName("CloseEvent");
$.DomName_Y6D2 = new $.DomName("Node.nextSibling");
$.DomName_a27 = new $.DomName("EventException.message");
$.DomName_okh = new $.DomName("SVGAnimatedNumberList.baseVal");
$.DomName_CCs = new $.DomName("SVGPolylineElement.nearestViewportElement");
$.DomName_kF6 = new $.DomName("SVGClipPathElement.requiredFeatures");
$.DomName_kGg = new $.DomName("TransitionEvent.propertyName");
$.DomName_URL = new $.DomName("URL");
$.DomName_qTB = new $.DomName("SVGFEConvolveMatrixElement.preserveAlpha");
$.DomName_AudioContext = new $.DomName("AudioContext");
$.DomName_I5O0 = new $.DomName("SVGFEFloodElement.height");
$.JSName_webkitVideoDecodedByteCount = new $.JSName("webkitVideoDecodedByteCount");
$.DomName_Plugin = new $.DomName("Plugin");
$.DomName_efl1 = new $.DomName("Element.setAttribute");
$.DomName_Fup = new $.DomName("HTMLInputElement.maxLength");
$.DomName_File = new $.DomName("File");
$.DomName_ali = new $.DomName("SVGFECompositeElement.width");
$.DomName_C5d = new $.DomName("AudioContext.listener");
$.DomName_sAb = new $.DomName("Entry.isDirectory");
$.DomName_IDBAny = new $.DomName("IDBAny");
$.DomName_YAl = new $.DomName("SVGFEColorMatrixElement.type");
$.DomName_pEM = new $.DomName("SVGFEDiffuseLightingElement.width");
$.DomName_Gxg0 = new $.DomName("SVGFESpotLightElement.x");
$.DomName_SVGViewElement = new $.DomName("SVGViewElement");
$.DomName_cMm0 = new $.DomName("SVGMaskElement.y");
$.DomName_43h3 = new $.DomName("SVGPolylineElement.transform");
$.DomName_mes = new $.DomName("SVGAElement.xmlspace");
$.DomName_ShadowRoot = new $.DomName("ShadowRoot");
$.DomName_k2a1 = new $.DomName("HTMLStyleElement.type");
$.DomName_Odg0 = new $.DomName("SVGFilterElement.href");
$.DomName_I5O1 = new $.DomName("SVGFEBlendElement.result");
$.DomName_bA6 = new $.DomName("CustomEvent.detail");
$.DomName_eDw = new $.DomName("SVGPatternElement.systemLanguage");
$.DomName_Yio = new $.DomName("SVGFEDistantLightElement.azimuth");
$.DomName_23v = new $.DomName("ShadowRoot.activeElement");
$.DomName_3uR6 = new $.DomName("HTMLMediaElement.webkitPreservesPitch");
$.DomName_IRf0 = new $.DomName("HTMLMediaElement.networkState");
$.DomName_MUx = new $.DomName("SVGMarkerElement.externalResourcesRequired");
$.DomName_W7u = new $.DomName("SVGPatternElement.patternUnits");
$.DomName_APm = new $.DomName("SVGCircleElement.r");
$.DomName_yvn = new $.DomName("SVGFESpecularLightingElement.in1");
$.DomName_3je0 = new $.DomName("Navigator.userAgent");
$.DomName_SpeechRecognition = new $.DomName("SpeechRecognition");
$.DomName_ogX = new $.DomName("HTMLBaseElement.href");
$.DomName_SVGAnimatedPreserveAspectRatio = new $.DomName("SVGAnimatedPreserveAspectRatio");
$.DomName_SVGFESpotLightElement = new $.DomName("SVGFESpotLightElement");
$.DomName_AutocompleteErrorEvent = new $.DomName("AutocompleteErrorEvent");
$.DomName_Console = new $.DomName("Console");
$.DomName_LTZ = new $.DomName("HTMLDataListElement.options");
$.DomName_Qyo = new $.DomName("HTMLSelectElement.validationMessage");
$.DomName_B8J2 = new $.DomName("SVGPolygonElement.externalResourcesRequired");
$.JSName_attributes = new $.JSName("attributes");
$.DomName_SVGAnimationElement = new $.DomName("SVGAnimationElement");
$.DomName_IDBTransaction = new $.DomName("IDBTransaction");
$.DomName_xg3 = new $.DomName("Selection.focusNode");
$.DomName_BarProp = new $.DomName("BarProp");
$.DomName_uwZ0 = new $.DomName("HTMLTextAreaElement.rows");
$.DomName_CSSMediaRule = new $.DomName("CSSMediaRule");
$.DomName_ifx0 = new $.DomName("StorageEvent.newValue");
$.JSName_textContent = new $.JSName("textContent");
$.DomName_RTCIceCandidateEvent = new $.DomName("RTCIceCandidateEvent");
$.DomName_8lB4 = new $.DomName("HTMLAreaElement.hash");
$.DomName_HF7 = new $.DomName("HTMLMediaElement.onprogress");
$.DomName_hSO0 = new $.DomName("OscillatorNode.type");
$.DomName_2jN1 = new $.DomName("SVGFEMorphologyElement.radiusY");
$.DomName_QOg = new $.DomName("SVGGradientElement.gradientUnits");
$.DomName_Document = new $.DomName("Document");
$.DomName_MediaStream = new $.DomName("MediaStream");
$.DomName_wIv = new $.DomName("HTMLContentElement.select");
$.DomName_SVGElement = new $.DomName("SVGElement");
$.DomName_MessageEvent = new $.DomName("MessageEvent");
$.DomName_nzM = new $.DomName("SVGMarkerElement.markerUnits");
$.JSName_querySelector = new $.JSName("querySelector");
$.DomName_6TA1 = new $.DomName("SVGFEComponentTransferElement.y");
$.DomName_6FR3 = new $.DomName("HTMLFormElement.method");
$.DomName_oCJ = new $.DomName("OscillatorNode.detune");
$.DomName_yPP = new $.DomName("Selection.focusOffset");
$.DomName_aTW = new $.DomName("AudioNode.channelCountMode");
$.DomName_SVGEllipseElement = new $.DomName("SVGEllipseElement");
$.DomName_Q1t0 = new $.DomName("SVGDescElement.xmlspace");
$.DomName_SVGFontFaceFormatElement = new $.DomName("SVGFontFaceFormatElement");
$.DomName_CKg = new $.DomName("Window.parent");
$.DomName_KNu = new $.DomName("HTMLInputElement.validationMessage");
$.DomName_V7S = new $.DomName("IDBVersionChangeEvent.oldVersion");
$.DomName_Imr0 = new $.DomName("Document.querySelectorAll");
$.DomName_USZ = new $.DomName("HTMLImageElement.width");
$.DomName_f4E = new $.DomName("Window.window");
$.DomName_AbstractWorker = new $.DomName("AbstractWorker");
$.DomName_ResourceProgressEvent = new $.DomName("ResourceProgressEvent");
$.DomName_EW91 = new $.DomName("SVGAnimationElement.targetElement");
$.DomName_WorkerLocation = new $.DomName("WorkerLocation");
$.DomName_kWO = new $.DomName("Node.addEventListener");
$.DomName_soA = new $.DomName("KeyboardEvent.keyIdentifier");
$.DomName_WebKitCSSFilterRule = new $.DomName("WebKitCSSFilterRule");
$.DomName_V2z = new $.DomName("SQLError.code");
$.DomName_kyU1 = new $.DomName("SVGLinearGradientElement.x1");
$.DomName_6hf = new $.DomName("SVGFEImageElement.y");
$.DomName_IVQ2 = new $.DomName("Node.nodeType");
$.DomName_MEg0 = new $.DomName("SVGFEBlendElement.width");
$.DomName_j7R3 = new $.DomName("SVGRadialGradientElement.fx");
$.DomName_SVGMPathElement = new $.DomName("SVGMPathElement");
$.DomName_SVGGlyphRefElement = new $.DomName("SVGGlyphRefElement");
$.JSName_keyCode = new $.JSName("keyCode");
$.DomName_2Zi = new $.DomName("HTMLScriptElement.htmlFor");
$.DomName_TAp2 = new $.DomName("SVGLineElement.y1");
$.DomName_SVGRadialGradientElement = new $.DomName("SVGRadialGradientElement");
$.DomName_O9i1 = new $.DomName("FileError.code");
$.DomName_NAp = new $.DomName("HTMLButtonElement.name");
$.DomName_gQW = new $.DomName("Element.keydownEvent");
$.DomName_Dni = new $.DomName("SVGTextPositioningElement.dy");
$.DomName_6Rj0 = new $.DomName("SVGFEColorMatrixElement.result");
$.JSName_createHTMLDocument = new $.JSName("createHTMLDocument");
$.DomName_2No1 = new $.DomName("SVGStyleElement.xmlspace");
$.DomName_ELu = new $.DomName("Document.webkitIsFullScreen");
$.DomName_3RQ = new $.DomName("SVGMaskElement.requiredExtensions");
$.List_Yes_No = Isolate.makeConstantList(["Yes", "No"]);
$.DomName_AHF2 = new $.DomName("HTMLFormElement.name");
$.DomName_KuA = new $.DomName("Node.appendChild");
$.DomName_WebKitCSSTransformValue = new $.DomName("WebKitCSSTransformValue");
$.JSName_styleSheets = new $.JSName("styleSheets");
$.DomName_nyU = new $.DomName("SVGAElement.transform");
$.DomName_SVGFEGaussianBlurElement = new $.DomName("SVGFEGaussianBlurElement");
$.DomName_RTCDTMFToneChangeEvent = new $.DomName("RTCDTMFToneChangeEvent");
$.NodeList_methods = $.NodeList0.prototype;
$.DomName_rBc = new $.DomName("SVGFEMorphologyElement.radiusX");
$.DomName_Q2g = new $.DomName("HTMLInputElement.formTarget");
$.DomName_zPV4 = new $.DomName("HTMLFieldSetElement.willValidate");
$.DomName_SVGPolygonElement = new $.DomName("SVGPolygonElement");
$.DomName_Fb0 = new $.DomName("SVGPatternElement.x");
$.DomName_46y3 = new $.DomName("HTMLTableCellElement.colSpan");
$.DomName_i7B = new $.DomName("Element.offsetParent");
$.JSName_byteOffset = new $.JSName("byteOffset");
$.DomName_ACG2 = new $.DomName("HTMLLabelElement.form");
$.DomName_CuK = new $.DomName("HTMLAreaElement.shape");
$.DomName_SVGFontFaceUriElement = new $.DomName("SVGFontFaceUriElement");
$.DomName_CSSUnknownRule = new $.DomName("CSSUnknownRule");
$.DomName_MQk0 = new $.DomName("SVGUseElement.farthestViewportElement");
$.DomName_cD93 = new $.DomName("SVGFETurbulenceElement.height");
$.DomName_LB7 = new $.DomName("Document.webkitVisibilityState");
$.DomName_A9C0 = new $.DomName("XPathException.message");
$.Creates_Node = new $.Creates("Node");
$.DomName_f88 = new $.DomName("Blob.type");
$.DomName_IDBCursor = new $.DomName("IDBCursor");
$.DomName_QoX = new $.DomName("HTMLModElement.cite");
$.DomName_vFz = new $.DomName("HTMLLIElement.HTMLLIElement");
$.DomName_izR0 = new $.DomName("SVGCircleElement.cy");
$.DomName_SVGRectElement = new $.DomName("SVGRectElement");
$.DomName_7sl = new $.DomName("SVGRectElement.transform");
$.DomName_eDw0 = new $.DomName("Window.onload");
$.DomName_XjJ = new $.DomName("SVGFEPointLightElement.z");
$.DomName_3uR7 = new $.DomName("Document.lastModified");
$.DomName_doz = new $.DomName("HTMLTextAreaElement.required");
$.JSName_referrer = new $.JSName("referrer");
$.DomName_dgt = new $.DomName("HTMLTextAreaElement.selectionEnd");
$.DomName_m9O = new $.DomName("SVGTextContentElement.externalResourcesRequired");
$.DomName_Suq = new $.DomName("Navigator.productSub");
$.DomName_fTF = new $.DomName("Window.opener");
$.DomName_InputMethodContext = new $.DomName("InputMethodContext");
$.DomName_Fup0 = new $.DomName("HTMLKeygenElement.form");
$.DomName_k2a2 = new $.DomName("SVGSVGElement.pixelUnitToMillimeterY");
$.DomName_MediaKeyNeededEvent = new $.DomName("MediaKeyNeededEvent");
$.DomName_FJj = new $.DomName("HTMLMediaElement.playbackRate");
$.DomName_FileReaderSync = new $.DomName("FileReaderSync");
$.DomName_6sr = new $.DomName("Window.closed");
$.DomName_IoN = new $.DomName("HTMLSourceElement.type");
$.JSName_screenY = new $.JSName("screenY");
$.DomName_g780 = new $.DomName("XMLHttpRequest.overrideMimeType");
$.DomName_3uR = new $.DomName("EventTarget.addEventListener");
$.DomName_6Fb = new $.DomName("OscillatorNode.playbackState");
$.DomName_2Vk0 = new $.DomName("MediaStream.ended");
$.DomName_gvY = new $.DomName("Document.onclick");
$.DomName_46y4 = new $.DomName("AudioNode.channelCount");
$.DomName_23h2 = new $.DomName("SVGAnimationElement.externalResourcesRequired");
$.DomName_OeL1 = new $.DomName("SVGFETileElement.x");
$.DomName_TextEvent = new $.DomName("TextEvent");
$.DomName_AHF3 = new $.DomName("CharacterData.previousElementSibling");
$.Returns__StyleSheetList = new $.Returns("_StyleSheetList");
$.DomName_KeE = new $.DomName("SVGUseElement.requiredExtensions");
$.DomName_QOR0 = new $.DomName("SVGPathSegCurvetoQuadraticSmoothAbs");
$.Creates__StyleSheetList = new $.Creates("_StyleSheetList");
$.DomName_BeforeLoadEvent = new $.DomName("BeforeLoadEvent");
$.DomName_GainNode = new $.DomName("GainNode");
$.DomName_7N7 = new $.DomName("Document.securityPolicy");
$.DomName_ByI = new $.DomName("SVGAElement.href");
$.DomName_W79 = new $.DomName("HTMLMeterElement.optimum");
$.DomName_j17 = new $.DomName("SVGFETurbulenceElement.baseFrequencyX");
$.DomName_1J5 = new $.DomName("SVGPatternElement.viewBox");
$.DomName_oEK = new $.DomName("Window.sessionStorage");
$.DomName_6Xy = new $.DomName("SpeechSynthesisEvent.name");
$.DomName_Gyn = new $.DomName("FileException.message");
$.DomName_8D40 = new $.DomName("SVGFEConvolveMatrixElement.bias");
$.DomName_DeviceOrientationEvent = new $.DomName("DeviceOrientationEvent");
$.DomName_MIDIInput = new $.DomName("MIDIInput");
$.DomName_MYA1 = new $.DomName("HTMLInputElement.selectionDirection");
$.DomName_yHF = new $.DomName("HTMLObjectElement.code");
$.DomName_EventSource = new $.DomName("EventSource");
$.JSName_webkitSupportsFullscreen = new $.JSName("webkitSupportsFullscreen");
$.DomName_WebGLDebugShaders = new $.DomName("WebGLDebugShaders");
$.DomName_014 = new $.DomName("SVGZoomEvent.previousScale");
$.DomName_WVl = new $.DomName("SVGPathElement.animatedNormalizedPathSegList");
$.DomName_SVGFEOffsetElement = new $.DomName("SVGFEOffsetElement");
$.DomName_HTMLHeadingElement = new $.DomName("HTMLHeadingElement");
$.DomName_MMS = new $.DomName("SVGCircleElement.nearestViewportElement");
$.DomName_uZ4 = new $.DomName("SVGStyleElement.type");
$.DomName_d0o0 = new $.DomName("SVGFEDisplacementMapElement.result");
$.DomName_8aB6 = new $.DomName("HTMLBodyElement.onload");
$.DomName_3uR8 = new $.DomName("Window.screenX");
$.DomName_CharacterData = new $.DomName("CharacterData");
$.DomName_nz5 = new $.DomName("HTMLImageElement.crossOrigin");
$.DomName_uVP0 = new $.DomName("HTMLButtonElement.value");
$.DomName_jfn = new $.DomName("HTMLMediaElement.preload");
$.DomName_irB = new $.DomName("HTMLTextAreaElement.textLength");
$.DomName_PerformanceResourceTiming = new $.DomName("PerformanceResourceTiming");
$.JSName_blockedURI = new $.JSName("blockedURI");
$.DomName_Gfp = new $.DomName("Document.referrer");
$.DomName_u5T2 = new $.DomName("Node.nodeValue");
$.DomName_MediaError = new $.DomName("MediaError");
$.DomName_HTMLFieldSetElement = new $.DomName("HTMLFieldSetElement");
$.DomName_CNx = new $.DomName("Selection.rangeCount");
$.JSName_createElement = new $.JSName("createElement");
$.DomName_WebKitCSSRegionRule = new $.DomName("WebKitCSSRegionRule");
$.DomName_IXo = new $.DomName("Selection.extentNode");
$.DomName_FontLoader = new $.DomName("FontLoader");
$.DomName_gkJ0 = new $.DomName("HTMLMeterElement.min");
$.DomName_ASm = new $.DomName("NamedNodeMap.length");
$.DomName_LDY0 = new $.DomName("SVGTextPositioningElement.x");
$.DomName_015 = new $.DomName("RTCDTMFToneChangeEvent.tone");
$.DomName_Gxg1 = new $.DomName("SVGFESpotLightElement.y");
$.DomName_gkc0 = new $.DomName("MediaKeyEvent.errorCode");
$.DomName_W8O = new $.DomName("Entry.remove");
$.DomName_omC0 = new $.DomName("SecurityPolicyViolationEvent.referrer");
$.DomName_6TA2 = new $.DomName("Selection.anchorNode");
$.DomName_EIy = new $.DomName("HTMLTextAreaElement.selectionDirection");
$.DomName_4a0 = new $.DomName("SVGFEDisplacementMapElement.yChannelSelector");
$.DomName_S7o = new $.DomName("TextEvent.data");
$.JSName_destinationURL = new $.JSName("destinationURL");
$.DomName_IVQ3 = new $.DomName("SVGPatternElement.patternContentUnits");
$.DomName_Attr = new $.DomName("Attr");
$.DomName_2fF = new $.DomName("MutationRecord.removedNodes");
$.DomName_CSSCharsetRule = new $.DomName("CSSCharsetRule");
$.DomName_FileWriterCallback = new $.DomName("FileWriterCallback");
$.DomName_wAg = new $.DomName("SVGFEDiffuseLightingElement.surfaceScale");
$.DomName_HTMLAllCollection = new $.DomName("HTMLAllCollection");
$.DomName_6xV = new $.DomName("SVGImageElement.requiredFeatures");
$.DomName_2jN2 = new $.DomName("MutationEvent.newValue");
$.DomName_gnI = new $.DomName("Window.locationbar");
$.DomName_woc6 = new $.DomName("SVGFEDiffuseLightingElement.x");
$.JSName_webkitFullscreenElement = new $.JSName("webkitFullscreenElement");
$.DomName_WebGLRenderingContext = new $.DomName("WebGLRenderingContext");
$.JSName_webkitMovementY = new $.JSName("webkitMovementY");
$.DomName_SVGPathSegCurvetoQuadraticRel = new $.DomName("SVGPathSegCurvetoQuadraticRel");
$.JSName_className = new $.JSName("className");
$.JSName_valueAsDate = new $.JSName("valueAsDate");
$.DomName_69t2 = new $.DomName("SVGGElement.systemLanguage");
$.DomName_SVGFEMergeNodeElement = new $.DomName("SVGFEMergeNodeElement");
$.DomName_soA0 = new $.DomName("Attr.ownerElement");
$.DomName_WYt = new $.DomName("MutationRecord.attributeName");
$.DomName_aWd = new $.DomName("SVGStyleElement.xmllang");
$.DomName_4AN2 = new $.DomName("SVGEllipseElement.transform");
$.DomName_Lhq = new $.DomName("MouseEvent.shiftKey");
$.DomName_RT8 = new $.DomName("EntryArray.item");
$.DomName_Svm0 = new $.DomName("Window.menubar");
$.DomName_L9F = new $.DomName("SVGAnimatedNumber.baseVal");
$.DomName_o5r = new $.DomName("Event.timeStamp");
$.DomName_8QI0 = new $.DomName("SVGZoomEvent.previousTranslate");
$.DomName_eO7 = new $.DomName("SQLException.code");
$.DomName_HTMLMeterElement = new $.DomName("HTMLMeterElement");
$.DomName_OESStandardDerivatives = new $.DomName("OESStandardDerivatives");
$.DomName_GC30 = new $.DomName("SVGFESpecularLightingElement.specularExponent");
$.DomName_dAN = new $.DomName("Element.ondblclick");
$.DomName_wM5 = new $.DomName("SVGLineElement.nearestViewportElement");
$.DomName_NavigatorUserMediaError = new $.DomName("NavigatorUserMediaError");
$.DomName_ErrorCallback = new $.DomName("ErrorCallback");
$.DomName_9ht2 = new $.DomName("SVGFilterElement.x");
$.DomName_IDBCursorWithValue = new $.DomName("IDBCursorWithValue");
$.DomName_VoA = new $.DomName("SVGAElement.xmllang");
$.DomName_GnZ = new $.DomName("SVGFEColorMatrixElement.values");
$.DomName_ds3 = new $.DomName("DeviceMotionEvent.acceleration");
$.DomName_SVGPathSegMovetoRel = new $.DomName("SVGPathSegMovetoRel");
$.DomName_wnK = new $.DomName("SVGTextContentElement.textLength");
$.DomName_SVGTitleElement = new $.DomName("SVGTitleElement");
$.DomName_AudioSourceNode = new $.DomName("AudioSourceNode");
$.DomName_Qx4 = new $.DomName("HTMLTableSectionElement.rows");
$.DomName_gkc1 = new $.DomName("SVGSVGElement.screenPixelToMillimeterX");
$.DomName_CSSStyleRule = new $.DomName("CSSStyleRule");
$.DomName_SRn = new $.DomName("Element.scrollLeft");
$.DomName_qvR = new $.DomName("Window.toolbar");
$.DomName_Db01 = new $.DomName("Selection.isCollapsed");
$.DomName_IJC1 = new $.DomName("SVGPathElement.pathSegList");
$.DomName_IJC2 = new $.DomName("SVGMarkerElement.orientAngle");
$.DomName_6FR4 = new $.DomName("SQLError.message");
$.DomName_SVGScriptElement = new $.DomName("SVGScriptElement");
$.DomName_mRh = new $.DomName("SVGDefsElement.xmllang");
$.DomName_QBJ0 = new $.DomName("SVGFECompositeElement.in2");
$.DomName_CSSStyleSheet = new $.DomName("CSSStyleSheet");
$.DomName_SVGAngle = new $.DomName("SVGAngle");
$.DomName_sgq = new $.DomName("HTMLEmbedElement.align");
$.DomName_Exl = new $.DomName("SVGFETurbulenceElement.y");
$.DomName_E4y = new $.DomName("Attr.specified");
$.DomName_kq4 = new $.DomName("SVGFEConvolveMatrixElement.edgeMode");
$.DomName_3BB = new $.DomName("OscillatorNode.stop");
$.DomName_8aB7 = new $.DomName("SVGFEImageElement.href");
$.DomName_kml = new $.DomName("SVGDefsElement.transform");
$.DomName_CWk1 = new $.DomName("HTMLInputElement.type");
$.DomName_aXM = new $.DomName("HTMLDetailsElement.open");
$.DomName_EK0 = new $.DomName("HTMLPreElement.wrap");
$.DomName_EXTFragDepth = new $.DomName("EXTFragDepth");
$.DomName_HTMLCollection = new $.DomName("HTMLCollection");
$.DomName_ASw1 = new $.DomName("SVGFEMorphologyElement.operator");
$.DomName_4CA1 = new $.DomName("Element.webkitPseudo");
$.DomName_iCd = new $.DomName("SVGElement.xmlbase");
$.DomName_Jt6 = new $.DomName("SVGFilterElement.externalResourcesRequired");
$.DomName_inN = new $.DomName("HTMLTrackElement.track");
$.DomName_MQ1 = new $.DomName("SVGFEMorphologyElement.in1");
$.DomName_MQk1 = new $.DomName("HTMLCollection.item");
$.Creates__EntryArray = new $.Creates("_EntryArray");
$.DomName_cI8 = new $.DomName("HTMLIFrameElement.width");
$.Returns__EntryArray = new $.Returns("_EntryArray");
$.DomName_SVGAnimatedTransformList = new $.DomName("SVGAnimatedTransformList");
$.DomName_MIDIMessageEvent = new $.DomName("MIDIMessageEvent");
$.DomName_mBr = new $.DomName("HTMLLinkElement.media");
$.DomName_SVGFEConvolveMatrixElement = new $.DomName("SVGFEConvolveMatrixElement");
$.DomName_MIDIPort = new $.DomName("MIDIPort");
$.DomName_2jN3 = new $.DomName("SVGUseElement.href");
$.DomName_6dr = new $.DomName("Navigator.appCodeName");
$.DomName_9ht3 = new $.DomName("SVGEllipseElement.xmllang");
$.DomName_HTMLQuoteElement = new $.DomName("HTMLQuoteElement");
$.DomName_8Gl2 = new $.DomName("SVGMarkerElement.refY");
$.DomName_u33 = new $.DomName("DocumentFragment.childElementCount");
$.DomName_SVGTransformList = new $.DomName("SVGTransformList");
$.DomName_Jsp3 = new $.DomName("HTMLSelectElement.validity");
$.Returns_NodeList = new $.Returns("NodeList");
$.DomName_wQ8 = new $.DomName("Node.parentNode");
$.DomName_wDt = new $.DomName("HTMLStyleElement.sheet");
$.SupportedBrowser_Safari_null = new $.SupportedBrowser("Safari", null);
$.DomName_KVZ = new $.DomName("HTMLInputElement.value");
$.DomName_i7B0 = new $.DomName("Notation.systemId");
$.Creates_NodeList = new $.Creates("NodeList");
$.DomName_IqX = new $.DomName("HTMLOptionElement.selected");
$.DomName_SpeechGrammar = new $.DomName("SpeechGrammar");
$.DomName_Range = new $.DomName("Range");
$.DomName_SVGSVGElement = new $.DomName("SVGSVGElement");
$.DomName_VmT0 = new $.DomName("HTMLInputElement.formNoValidate");
$.DomName_NQI = new $.DomName("WheelEvent.webkitDirectionInvertedFromDevice");
$.DomName_SVGPoint = new $.DomName("SVGPoint");
$.DomName_csC = new $.DomName("Document.webkitFullscreenElement");
$.DomName_gg45 = new $.DomName("HTMLTableElement.tFoot");
$.DomName_Y0l1 = new $.DomName("SVGFESpotLightElement.pointsAtY");
$.DomName_DFB0 = new $.DomName("SVGFEFloodElement.width");
$.DomName_DOMSettableTokenList = new $.DomName("DOMSettableTokenList");
$.DomName_woc7 = new $.DomName("MediaKeyEvent.message");
$.DomName_ACG3 = new $.DomName("File.lastModifiedDate");
$.DomName_aZ7 = new $.DomName("Node.textContent");
$.DomName_efW0 = new $.DomName("Window.webkitNotifications");
$.DomName_Coordinates = new $.DomName("Coordinates");
$.DomName_gkJ1 = new $.DomName("HTMLButtonElement.formEnctype");
$.DomName_SC2 = new $.DomName("HTMLButtonElement.formNoValidate");
$.DomName_XMLHttpRequest = new $.DomName("XMLHttpRequest");
$.DomName_6NC0 = new $.DomName("SVGClipPathElement.xmlspace");
$.DomName_HVI = new $.DomName("Document.firstElementChild");
$.DomName_9uD0 = new $.DomName("SVGFEGaussianBlurElement.y");
$.DomName_43h4 = new $.DomName("CharacterData.nextElementSibling");
$.DomName_rhw0 = new $.DomName("SVGFECompositeElement.result");
$.DomName_dCN0 = new $.DomName("Navigator.webkitPersistentStorage");
$.DomName_IAG = new $.DomName("SVGGElement.externalResourcesRequired");
$.DomName_WebGLCompressedTexturePVRTC = new $.DomName("WebGLCompressedTexturePVRTC");
$.DomName_n6u = new $.DomName("HTMLButtonElement.formTarget");
$.DomName_Yel = new $.DomName("SVGMaskElement.requiredFeatures");
$.DomName_WfA0 = new $.DomName("SVGRectElement.rx");
$.JSName_window = new $.JSName("window");
$.DomName_016 = new $.DomName("MediaKeyNeededEvent.initData");
$.JSName_rows = new $.JSName("rows");
$.DomName_gQW0 = new $.DomName("SVGSwitchElement.systemLanguage");
$.DomName_HTMLLegendElement = new $.DomName("HTMLLegendElement");
$.DomName_WebGLContextEvent = new $.DomName("WebGLContextEvent");
$.DomName_HTMLLIElement = new $.DomName("HTMLLIElement");
$.DomName_Mal = new $.DomName("SVGFEFloodElement.result");
$.DomName_WebGLRenderbuffer = new $.DomName("WebGLRenderbuffer");
$.DomName_mhn = new $.DomName("SVGDefsElement.requiredFeatures");
$.DomName_WRA = new $.DomName("SVGUseElement.height");
$.DomName_Skj0 = new $.DomName("HTMLMediaElement.duration");
$.DomName_i2t0 = new $.DomName("HTMLSelectElement.type");
$.DomName_EcO0 = new $.DomName("HTMLFormElement.reset");
$.DomName_WebGLFramebuffer = new $.DomName("WebGLFramebuffer");
$.DomName_MYA2 = new $.DomName("SVGFEConvolveMatrixElement.height");
$.DomName_9Op = new $.DomName("Window.onkeypress");
$.DomName_oyU2 = new $.DomName("HTMLOutputElement.validity");
$.DomName_aqt = new $.DomName("SVGTextElement.nearestViewportElement");
$.DomName_0sf = new $.DomName("Node.ownerDocument");
$.DomName_cw11 = new $.DomName("KeyboardEvent.ctrlKey");
$.JSName_nextSibling = new $.JSName("nextSibling");
$.DomName_SVGImageElement = new $.DomName("SVGImageElement");
$.DomName_j170 = new $.DomName("SVGFETurbulenceElement.baseFrequencyY");
$.DomName_MutationEvent = new $.DomName("MutationEvent");
$.DomName_mB9 = new $.DomName("SVGAnimatedString.baseVal");
$.DomName_Pjw = new $.DomName("SecurityPolicyViolationEvent.documentURI");
$.DomName_4a00 = new $.DomName("SVGFEDisplacementMapElement.xChannelSelector");
$.DomName_jiZ = new $.DomName("Node.replaceChild");
$.DomName_OESTextureHalfFloat = new $.DomName("OESTextureHalfFloat");
$.DomName_kI30 = new $.DomName("Document.querySelector");
$.DomName_TBz0 = new $.DomName("HTMLTextAreaElement.validationMessage");
$.Window_methods = $.Window.prototype;
$.DomName_O5r = new $.DomName("HTMLTableCellElement.cellIndex");
$.DomName_C04 = new $.DomName("MediaStream.addEventListener");
$.DomName_E4S = new $.DomName("SVGPolylineElement.xmllang");
$.DomName_ytW = new $.DomName("HTMLMapElement.areas");
$.DomName_vZn = new $.DomName("EventTarget.dispatchEvent");
$.Creates__SpeechInputResultList = new $.Creates("_SpeechInputResultList");
$.Returns__SpeechInputResultList = new $.Returns("_SpeechInputResultList");
$.DomName_6TA3 = new $.DomName("HTMLBodyElement.onerror");
$.DomName_y5T = new $.DomName("SVGImageElement.href");
$.JSName_webkitdropzone = new $.JSName("webkitdropzone");
$.DomName_cE4 = new $.DomName("SVGTextElement.transform");
$.DomName_SVGNumber = new $.DomName("SVGNumber");
$.DomName_6L00 = new $.DomName("Document.selectionchangeEvent");
$.DomName_Text = new $.DomName("Text");
$.DomName_RequestAnimationFrameCallback = new $.DomName("RequestAnimationFrameCallback");
$.DomName_ia30 = new $.DomName("SVGRectElement.xmlspace");
$.DomName_HTMLUListElement = new $.DomName("HTMLUListElement");
$.DomName_8650 = new $.DomName("DeviceOrientationEvent.gamma");
$.DomName_mF30 = new $.DomName("HTMLAnchorElement.port");
$.DomName_ImageData = new $.DomName("ImageData");
$.DomName_HTMLShadowElement = new $.DomName("HTMLShadowElement");
$.DomName_a990 = new $.DomName("HTMLShadowElement.olderShadowRoot");
$.DomName_U06 = new $.DomName("HTMLButtonElement.validationMessage");
$.DomName_jSl1 = new $.DomName("SVGFESpotLightElement.limitingConeAngle");
$.DomName_a1T = new $.DomName("SecurityPolicyViolationEvent.lineNumber");
$.DomName_86y4 = new $.DomName("HTMLImageElement.naturalWidth");
$.DomName_cp4 = new $.DomName("HTMLProgressElement.position");
$.DomName_Vmp0 = new $.DomName("SVGFEOffsetElement.dy");
$.DomName_lUe = new $.DomName("SVGPatternElement.href");
$.DomName_Y7N0 = new $.DomName("NamedNodeMap.item");
$.JSName_childNodes = new $.JSName("childNodes");
$.DomName_Aie = new $.DomName("HTMLMediaElement.ended");
$.DomName_wEo2 = new $.DomName("SVGFETileElement.result");
$.DomName_O98 = new $.DomName("Entity.notationName");
$.DomName_KMB0 = new $.DomName("HTMLObjectElement.type");
$.DomName_62m = new $.DomName("SVGPathElement.requiredExtensions");
$.DomName_K7Z = new $.DomName("SVGFilterElement.primitiveUnits");
$.DomName_wyb = new $.DomName("ShadowRoot.innerHTML");
$.Returns__SpeechRecognitionResultList = new $.Returns("_SpeechRecognitionResultList");
$.DomName_ccv = new $.DomName("SVGPatternElement.requiredExtensions");
$.DomName_EntryCallback = new $.DomName("EntryCallback");
$.DomName_1uv = new $.DomName("NavigatorUserMediaError.message");
$.DomName_7BT = new $.DomName("Element.querySelectorAll");
$.DomName_muX = new $.DomName("Window.dispatchEvent");
$.DomName_ELS = new $.DomName("SVGGradientElement.spreadMethod");
$.DomName_0iF = new $.DomName("HTMLInputElement.labels");
$.DomName_0q0 = new $.DomName("SVGImageElement.preserveAspectRatio");
$.DomName_6TA4 = new $.DomName("SVGFEComponentTransferElement.x");
$.DomName_XMLSerializer = new $.DomName("XMLSerializer");
$.DomName_B8J3 = new $.DomName("SVGCircleElement.systemLanguage");
$.DomName_NodeList = new $.DomName("NodeList");
$.DomName_23h3 = new $.DomName("SVGRectElement.nearestViewportElement");
$.DomName_WebKitSourceBuffer = new $.DomName("WebKitSourceBuffer");
$.DomName_lyU = new $.DomName("HTMLStyleElement.disabled");
$.DomName_qVS1 = new $.DomName("PopStateEvent.state");
$.DomName_tto = new $.DomName("SVGSVGElement.preserveAspectRatio");
$.DomName_bGB = new $.DomName("HTMLFormElement.acceptCharset");
$.DomName_6JY = new $.DomName("MouseEvent.fromElement");
$.Creates__SpeechRecognitionResultList = new $.Creates("_SpeechRecognitionResultList");
$.DomName_SVGTextPathElement = new $.DomName("SVGTextPathElement");
$.JSName_currentTarget = new $.JSName("currentTarget");
$.DomName_yKz0 = new $.DomName("SVGFEDiffuseLightingElement.result");
$.DomName_StyleSheet = new $.DomName("StyleSheet");
$.DomName_MimeTypeArray = new $.DomName("MimeTypeArray");
$.DomName_gc63 = new $.DomName("SVGFEDisplacementMapElement.scale");
$.DomName_ylU = new $.DomName("MediaStream.removeEventListener");
$.DomName_8D41 = new $.DomName("ErrorEvent.filename");
$.DomName_QIl = new $.DomName("Element.className");
$.DomName_AeS0 = new $.DomName("HTMLTrackElement.readyState");
$.JSName_ownerSVGElement = new $.JSName("ownerSVGElement");
$.DomName_HTMLEmbedElement = new $.DomName("HTMLEmbedElement");
$.DomName_Path = new $.DomName("Path");
$.DomName_6TA5 = new $.DomName("SVGFEMorphologyElement.width");
$.DomName_Xt7 = new $.DomName("HTMLMediaElement.readyState");
$.DomName_EcO1 = new $.DomName("XMLHttpRequest.status");
$.DomName_skV = new $.DomName("XMLHttpRequest.open");
$.Returns_i4E = new $.Returns("EventTarget|=Object");
$.DomName_qJx1 = new $.DomName("HTMLFormElement.noValidate");
$.DomName_9ht4 = new $.DomName("HTMLKeygenElement.type");
$.DomName_mgB = new $.DomName("SVGEllipseElement.nearestViewportElement");
$.DomName_NotificationCenter = new $.DomName("NotificationCenter");
$.DomName_EcO2 = new $.DomName("MessageEvent.source");
$.DomName_gc64 = new $.DomName("HTMLShadowElement.resetStyleInheritance");
$.DomName_Tr00 = new $.DomName("SVGSVGElement.contentStyleType");
$.DomName_wFZ0 = new $.DomName("HTMLOutputElement.name");
$.DomName_z9s = new $.DomName("AudioContext.currentTime");
$.DomName_UYK = new $.DomName("HTMLLegendElement.HTMLLegendElement");
$.Creates_Null = new $.Creates("Null");
$.DomName_SpeechInputResult = new $.DomName("SpeechInputResult");
$.DomName_SVGAnimatedBoolean = new $.DomName("SVGAnimatedBoolean");
$.DomName_SVGFEBlendElement = new $.DomName("SVGFEBlendElement");
$.DomName_69P1 = new $.DomName("SVGFEDisplacementMapElement.y");
$.DomName_niE = new $.DomName("HTMLScriptElement.charset");
$.DomName_ELS0 = new $.DomName("SVGFEImageElement.result");
$.DomName_zg4 = new $.DomName("DOMImplementation.createHTMLDocument");
$.DomName_WrZ = new $.DomName("CSSStyleDeclaration.cssText");
$.DomName_EntrySync = new $.DomName("EntrySync");
$.DomName_sQa = new $.DomName("HTMLMapElement.name");
$.DomName_7N70 = new $.DomName("HTMLInputElement.checked");
$.DomName_TextTrackCue = new $.DomName("TextTrackCue");
$.DomName_8sC = new $.DomName("Navigator.onLine");
$.DomName_8g60 = new $.DomName("SVGClipPathElement.requiredExtensions");
$.DomName_u5T3 = new $.DomName("HTMLSelectElement.item");
$.DomName_ZKG0 = new $.DomName("HTMLInputElement.indeterminate");
$.DomName_oNz = new $.DomName("HTMLOutputElement.labels");
$.DomName_rFe = new $.DomName("SVGCircleElement.farthestViewportElement");
$.DomName_MY7 = new $.DomName("SVGStyleElement.disabled");
$.DomName_QGa0 = new $.DomName("XMLHttpRequest.setRequestHeader");
$.JSName_cloneNode = new $.JSName("cloneNode");
$.DomName_gGN = new $.DomName("SVGSwitchElement.externalResourcesRequired");
$.DomName_017 = new $.DomName("UIEvent.detail");
$.DomName_iDZ = new $.DomName("Event.preventDefault");
$.DomName_ConvolverNode = new $.DomName("ConvolverNode");
$.DomName_SPV0 = new $.DomName("SVGEllipseElement.systemLanguage");
$.DomName_Navigator = new $.DomName("Navigator");
$.DomName_SVGGElement = new $.DomName("SVGGElement");
$.DomName_MediaQueryList = new $.DomName("MediaQueryList");
$.DomName_sY1 = new $.DomName("MutationRecord.target");
$.DomName_SVGTextPositioningElement = new $.DomName("SVGTextPositioningElement");
$.JSName_addEventListener = new $.JSName("addEventListener");
$.DomName_kyU2 = new $.DomName("SVGLinearGradientElement.x2");
$.DomName_2Pr = new $.DomName("SVGRectElement.xmllang");
$.DomName_NaB = new $.DomName("HTMLImageElement.HTMLImageElement");
$.DomName_WorkerContext = new $.DomName("WorkerContext");
$.DomName_QSU = new $.DomName("SVGPathElement.pathLength");
$.DomName_apl1 = new $.DomName("SVGScriptElement.type");
$.JSName_setAttribute = new $.JSName("setAttribute");
$.DomName_osO0 = new $.DomName("AudioNode.context");
$.DomName_CSSFontFaceLoadEvent = new $.DomName("CSSFontFaceLoadEvent");
$.DomName_Node = new $.DomName("Node");
$.DomName_MhV0 = new $.DomName("SVGPathElement.xmlspace");
$.JSName_head = new $.JSName("head");
$.DomName_YDe = new $.DomName("SVGSVGElement.systemLanguage");
$.DomName_6FR5 = new $.DomName("HTMLButtonElement.willValidate");
$.DomName_yWl = new $.DomName("HTMLAnchorElement.type");
$.DomName_qBb = new $.DomName("HTMLEmbedElement.type");
$.DomName_qd40 = new $.DomName("SVGFEBlendElement.in1");
$.DomName_OTB = new $.DomName("SVGMaskElement.externalResourcesRequired");
$.DomName_SVGAltGlyphElement = new $.DomName("SVGAltGlyphElement");
$.DomName_MUB2 = new $.DomName("HTMLMeterElement.value");
$.DomName_E8U = new $.DomName("Window.defaultStatus");
$.DomName_Dni0 = new $.DomName("SVGTextPositioningElement.dx");
$.DomName_YX30 = new $.DomName("TouchEvent.changedTouches");
$.DomName_OESTextureHalfFloatLinear = new $.DomName("OESTextureHalfFloatLinear");
$.DomName_KVZ0 = new $.DomName("SVGPathElement.transform");
$.DomName_iDZ2 = new $.DomName("SVGSwitchElement.xmllang");
$.DomName_mhX = new $.DomName("HTMLLIElement.value");
$.DomName_HTMLFontElement = new $.DomName("HTMLFontElement");
$.DomName_whP = new $.DomName("HTMLButtonElement.HTMLButtonElement");
$.DomName_woc8 = new $.DomName("Window.innerWidth");
$.DomName_aBG0 = new $.DomName("SVGAnimationElement.systemLanguage");
$.DomName_Met0 = new $.DomName("SVGFEMergeElement.y");
$.DomName_ICA = new $.DomName("ProgressEvent.total");
$.DomName_0Ir = new $.DomName("Element.previousElementSibling");
$.DomName_Iik1 = new $.DomName("MediaKeyEvent.initData");
$.DomName_qbj = new $.DomName("TouchEvent.metaKey");
$.DomName_StyleMedia = new $.DomName("StyleMedia");
$.DomName_yGw = new $.DomName("SVGSwitchElement.requiredFeatures");
$.DomName_YX31 = new $.DomName("SVGMarkerElement.viewBox");
$.DomName_SVGTests = new $.DomName("SVGTests");
$.DomName_BiquadFilterNode = new $.DomName("BiquadFilterNode");
$.DomName_9ST = new $.DomName("Document.onload");
$.DomName_6FR6 = new $.DomName("SVGPathElement.externalResourcesRequired");
$.DomName_GxI0 = new $.DomName("SVGPatternElement.xmllang");
$.DomName_gzi = new $.DomName("SpeechInputEvent.results");
$.DomName_8aE = new $.DomName("SVGUseElement.x");
$.DomName_IVQ4 = new $.DomName("StorageEvent.key");
$.DomName_cE5 = new $.DomName("DeviceOrientationEvent.beta");
$.DomName_sfz = new $.DomName("HTMLObjectElement.data");
$.DomName_TextTrackCueList = new $.DomName("TextTrackCueList");
$.DomName_gc65 = new $.DomName("NavigatorUserMediaError.name");
$.DomName_HTMLOptionElement = new $.DomName("HTMLOptionElement");
$.DomName_qam = new $.DomName("HTMLModElement.dateTime");
$.DomName_HTMLFrameElement = new $.DomName("HTMLFrameElement");
$.DomName_b1T0 = new $.DomName("HTMLOutputElement.willValidate");
$.JSName_webkitHasClosedCaptions = new $.JSName("webkitHasClosedCaptions");
$.DomName_Y6D3 = new $.DomName("SVGFEOffsetElement.height");
$.DomName_Cpt = new $.DomName("HTMLInputElement.defaultChecked");
$.DomName_elL = new $.DomName("SVGDefsElement.systemLanguage");
$.DomName_DK5 = new $.DomName("HTMLTextAreaElement.form");
$.SupportedBrowser_0v9 = new $.SupportedBrowser("Internet Explorer", null);
$.DomName_HTMLTableRowElement = new $.DomName("HTMLTableRowElement");
$.DomName_SVGAnimateTransformElement = new $.DomName("SVGAnimateTransformElement");
$.DomName_efl2 = new $.DomName("HTMLTrackElement.srclang");
$.DomName_IvX = new $.DomName("ClientRect.width");
$.DomName_mJM = new $.DomName("SVGUseElement.width");
$.DomName_IDBFactory = new $.DomName("IDBFactory");
$.DomName_2Vk1 = new $.DomName("Text.wholeText");
$.DomName_SVGLangSpace = new $.DomName("SVGLangSpace");
$.DomName_Au4 = new $.DomName("SVGException.toString");
$.DomName_QOg0 = new $.DomName("MIDIMessageEvent.receivedTime");
$.JSName_lastModified = new $.JSName("lastModified");
$.DomName_wmx0 = new $.DomName("SVGMarkerElement.markerHeight");
$.DomName_0PM = new $.DomName("HTMLTextAreaElement.defaultValue");
$.DomName_g781 = new $.DomName("SVGFilterElement.width");
$.DomName_atn = new $.DomName("Node.lastChild");
$.DomName_2Z4 = new $.DomName("HTMLImageElement.useMap");
$.DomName_HTMLIFrameElement = new $.DomName("HTMLIFrameElement");
$.DomName_Storage = new $.DomName("Storage");
$.JSName_newURL = new $.JSName("newURL");
$.Creates_k6K = new $.Creates("Window|=Object|Null");
$.JSName_webkitDisplayingFullscreen = new $.JSName("webkitDisplayingFullscreen");
$.DomName_43h5 = new $.DomName("SVGFEConvolveMatrixElement.targetX");
$.JSNull_methods = $.JSNull.prototype;
$.DomName_U43 = new $.DomName("HTMLMediaElement.src");
$.DomName_Nhy = new $.DomName("HTMLInputElement.height");
$.DomName_U0y0 = new $.DomName("HTMLMediaElement.volume");
$.DomName_SpeechRecognitionResultList = new $.DomName("SpeechRecognitionResultList");
$.DomName_WebKitNamedFlow = new $.DomName("WebKitNamedFlow");
$.JSName_layerX = new $.JSName("layerX");
$.DomName_gEo = new $.DomName("Event.type");
$.JSName_clientY = new $.JSName("clientY");
$.Returns_27z = new $.Returns("Window|=Object|Null");
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$._testsDefined = null;
$._callbacksAreEnqueued = false;
$.Expando__keyCount = 0;
$.ReceivePortSync__portMap = null;
$.ReceivePortSync__portIdCount = null;
$.ReceivePortSync__cachedIsolateId = null;
$._pendingMicrotasks = null;
$._microtaskScheduler = null;
$.AnalysisEngine_SUFFIX_HTM = "htm";
$.AnalysisEngine_SUFFIX_HTML = "html";
$.DartEntryImpl__LAUNCHABLE = 2;
$.DartEntryImpl__CLIENT_CODE = 4;
$.AnalysisContextImpl__MAX_CACHE_SIZE = 64;
$.ASTNode__hashCodeGenerator = 0;
$.Parser__HIDE = "hide";
$.Parser__OF = "of";
$.Parser__ON = "on";
$.Parser__SHOW = "show";
$.Parser__NATIVE = "native";
$.AbstractScanner__$NBSP = 160;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__isWebKit = null;
$.Device__cachedCssPrefix = null;
$.UUID___nextId = 0;
$._jsPortSync0 = null;
$._jsPortCreate0 = null;
$._jsPortProxyCount0 = null;
$._jsPortEquals0 = null;
$._jsPortInstanceof0 = null;
$._jsPortDeleteProperty0 = null;
$._jsPortConvert0 = null;
$._jsEnterJavaScriptScope0 = null;
$._jsExitJavaScriptScope0 = null;
$._jsGlobalize0 = null;
$._jsInvalidate0 = null;
$._dartEnterDartScope0 = null;
$._dartExitDartScope0 = null;
$._localNextElementId0 = 0;
$._jsPortSync = null;
$._jsPortCreate = null;
$._jsPortProxyCount = null;
$._jsPortEquals = null;
$._jsPortInstanceof = null;
$._jsPortDeleteProperty = null;
$._jsPortConvert = null;
$._jsEnterJavaScriptScope = null;
$._jsExitJavaScriptScope = null;
$._jsGlobalize = null;
$._jsInvalidate = null;
$._dartEnterDartScope = null;
$._dartExitDartScope = null;
$._localNextElementId = 0;
$._assertFailureHandler = null;
$._assertErrorFormatter = null;
$._config = null;
$.groupSep = " ";
$._soloNestingLevel = 0;
$._soloTestSeen = false;
$._currentTestCaseIndex = 0;
$._initialized = false;
$._uncaughtErrorMessage = null;
$._ctx = null;
$.TestJob__count = 1;
$.workbench = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_initCustomEvent$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).$$dom_initCustomEvent$4(receiver, a0, a1, a2, a3);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return $.getInterceptor$n(receiver).$or(receiver, a0);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$shr$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shr(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$tdiv$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
$.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return $.getInterceptor$n(receiver).$xor(receiver, a0);
};
$._liblib2$_add$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver)._liblib2$_add$1(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.accept$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).accept$1(receiver, a0);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.addAll$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
$.allMatches$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).allMatches$1(receiver, a0);
};
$.append$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).append$1(receiver, a0);
};
$.close$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).close$0(receiver);
};
$.codeUnitAt$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.contains$1$asx = function(receiver, a0) {
  return $.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
$.contains$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
$.createWriter$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).createWriter$2(receiver, a0, a1);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.endsWith$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).endsWith$1(receiver, a0);
};
$.file$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).file$1(receiver, a0);
};
$.focus$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).focus$0(receiver);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$$$dom_className$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_className(receiver);
};
$.get$Blob$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$Blob(receiver);
};
$.get$_children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$_children(receiver);
};
$.get$attributes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$attributes(receiver);
};
$.get$checked$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$checked(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$classes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$classes(receiver);
};
$.get$client$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$client(receiver);
};
$.get$currentTarget$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$currentTarget(receiver);
};
$.get$detail$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$detail(receiver);
};
$.get$display$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$display(receiver);
};
$.get$document$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$document(receiver);
};
$.get$elements$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$elements(receiver);
};
$.get$first$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$first(receiver);
};
$.get$fullPath$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$fullPath(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$indeterminate$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$indeterminate(receiver);
};
$.get$isDirectory$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$isDirectory(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$isFile$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$isFile(receiver);
};
$.get$isNotEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$kind$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$kind(receiver);
};
$.get$label$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$label(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$name$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$name(receiver);
};
$.get$offset$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$offset(receiver);
};
$.get$offsetHeight$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$offsetHeight(receiver);
};
$.get$onChange$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onChange(receiver);
};
$.get$onClick$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClick(receiver);
};
$.get$onKeyPress$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onKeyPress(receiver);
};
$.get$parent$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$parent(receiver);
};
$.get$parentNode$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$parentNode(receiver);
};
$.get$responseText$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$responseText(receiver);
};
$.get$result$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$result(receiver);
};
$.get$runtimeType$ = function(receiver) {
  return $.getInterceptor(receiver).get$runtimeType(receiver);
};
$.get$single$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$single(receiver);
};
$.get$source$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$source(receiver);
};
$.get$statusText$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$statusText(receiver);
};
$.get$style$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$style(receiver);
};
$.get$syntax$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$syntax(receiver);
};
$.get$target$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$target(receiver);
};
$.get$topLeft$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$topLeft(receiver);
};
$.get$type$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$type(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.get$visibility$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$visibility(receiver);
};
$.get$width$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$width(receiver);
};
$.get$window$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$window(receiver);
};
$.getBoundingClientRect$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
$.getSelection$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).getSelection$0(receiver);
};
$.indexOf$1$asx = function(receiver, a0) {
  return $.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
$.innerHtml$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).innerHtml$1(receiver, a0);
};
$.insert$2$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).insert$2(receiver, a0, a1);
};
$.insertAllBefore$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).insertAllBefore$2(receiver, a0, a1);
};
$.join$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).join$1(receiver, a0);
};
$.map$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).map$1(receiver, a0);
};
$.matches$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).matches$1(receiver, a0);
};
$.matches$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).matches$2(receiver, a0, a1);
};
$.modify$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).modify$1(receiver, a0);
};
$.observe$2$attributes$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).observe$2$attributes(receiver, a0, a1);
};
$.on$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).on$2(receiver, a0, a1);
};
$.open$3$async$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).open$3$async(receiver, a0, a1, a2);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.remove$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
$.remove$2$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).remove$2(receiver, a0, a1);
};
$.removeAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
};
$.replaceAll$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.resize$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).resize$0(receiver);
};
$.send$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
$.set$$$dom_className$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$$$dom_className(receiver, value);
};
$.set$checked$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$checked(receiver, value);
};
$.set$display$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$display(receiver, value);
};
$.set$document$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$document(receiver, value);
};
$.set$flex$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$flex(receiver, value);
};
$.set$flexDirection$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$flexDirection(receiver, value);
};
$.set$innerHtml$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
$.set$left$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$left(receiver, value);
};
$.set$length$asx = function(receiver, value) {
  return $.getInterceptor$asx(receiver).set$length(receiver, value);
};
$.set$marginTop$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$marginTop(receiver, value);
};
$.set$menubar$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$menubar(receiver, value);
};
$.set$parent$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$parent(receiver, value);
};
$.set$text$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$text(receiver, value);
};
$.set$top$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$top(receiver, value);
};
$.set$type$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$type(receiver, value);
};
$.set$value$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$value(receiver, value);
};
$.set$visibility$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$visibility(receiver, value);
};
$.set$width$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$width(receiver, value);
};
$.setProperty$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).setProperty$2(receiver, a0, a1);
};
$.setProperty$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).setProperty$3(receiver, a0, a1, a2);
};
$.show$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).show$0(receiver);
};
$.skip$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).skip$1(receiver, a0);
};
$.split$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).split$1(receiver, a0);
};
$.startsWith$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
$.stopImmediatePropagation$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).stopImmediatePropagation$0(receiver);
};
$.stopPropagation$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).stopPropagation$0(receiver);
};
$.substring$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).substring$1(receiver, a0);
};
$.substring$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
$.text$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).text$1(receiver, a0);
};
$.toInt$0$nx = function(receiver) {
  return $.getInterceptor$nx(receiver).toInt$0(receiver);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toLowerCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.toStringAsFixed$1$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).toStringAsFixed$1(receiver, a0);
};
$.toUpperCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toUpperCase$0(receiver);
};
$.trim$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).trim$0(receiver);
};
$.union$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).union$1(receiver, a0);
};
$.visibility$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).visibility$1(receiver, a0);
};
$.where$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).where$1(receiver, a0);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
}, function() {
  return $.globalThis;
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
}, function() {
  return $.globalWindow;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
}, function() {
  return $.globalWorker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
}, function() {
  return $.globalPostMessageDefined;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
}, function() {
  return $.IsolateNatives_thisScript;
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  var t1 = new $.Expando(null);
  t1.$builtinTypeInfo = [$.JSInt];
  return t1;
}, function() {
  return $.IsolateNatives_workerIds;
});
Isolate.$lazy($, "bootstrapManager", "bootstrapManager", "get$bootstrapManager", function() {
  return new $.BootstrapManager();
}, function() {
  return $.bootstrapManager;
});
Isolate.$lazy($, "app", "app", "get$app", function() {
  return new $.ChromeApp(new $.ChromeWindow(null));
}, function() {
  return $.app;
});
Isolate.$lazy($, "fileSystem", "fileSystem", "get$fileSystem", function() {
  return new $.ChromeFileSystem();
}, function() {
  return $.fileSystem;
});
Isolate.$lazy($, "i18n", "i18n", "get$i18n", function() {
  return new $.ChromeI18n();
}, function() {
  return $.i18n;
});
Isolate.$lazy($, "TCP", "ChromeSocketType_TCP", "get$ChromeSocketType_TCP", function() {
  return new $.ChromeSocketType("tcp");
}, function() {
  return $.ChromeSocketType_TCP;
});
Isolate.$lazy($, "storage", "storage", "get$storage", function() {
  return new $.ChromeStorage(new $.StorageArea("local"), new $.SyncStorageArea("sync"));
}, function() {
  return $.storage;
});
Isolate.$lazy($, "mangledNames", "mangledNames", "get$mangledNames", function() {
  return $.computeMangledNames(init.mangledNames);
}, function() {
  return $.mangledNames;
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  var t1 = new $.Expando("asynchronous error");
  t1.$builtinTypeInfo = [null];
  return t1;
}, function() {
  return $._stackTraceExpando;
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return $.ListQueue$(null, {func: true, retvoid: true});
}, function() {
  return $._asyncCallbacks;
});
Isolate.$lazy($, "_current", "_Zone__current", "get$_Zone__current", function() {
  return new $._DefaultZone(null, [], 0, false);
}, function() {
  return $._Zone__current;
});
Isolate.$lazy($, "_UniqueInstance", "AnalysisEngine__UniqueInstance", "get$AnalysisEngine__UniqueInstance", function() {
  return new $.AnalysisEngine($.get$Logger_NULL());
}, function() {
  return $.AnalysisEngine__UniqueInstance;
});
Isolate.$lazy($, "ELEMENT", "DartEntry_ELEMENT", "get$DartEntry_ELEMENT", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [$.LibraryElement];
  t1._liblib16$_name = "DartEntry.ELEMENT";
  return t1;
}, function() {
  return $.DartEntry_ELEMENT;
});
Isolate.$lazy($, "REFERENCED_LIBRARIES", "DartEntry_REFERENCED_LIBRARIES", "get$DartEntry_REFERENCED_LIBRARIES", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [[$.JSArray, $.Source]];
  t1._liblib16$_name = "DartEntry.REFERENCED_LIBRARIES";
  return t1;
}, function() {
  return $.DartEntry_REFERENCED_LIBRARIES;
});
Isolate.$lazy($, "INCLUDED_PARTS", "DartEntry_INCLUDED_PARTS", "get$DartEntry_INCLUDED_PARTS", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [[$.JSArray, $.Source]];
  t1._liblib16$_name = "DartEntry.INCLUDED_PARTS";
  return t1;
}, function() {
  return $.DartEntry_INCLUDED_PARTS;
});
Isolate.$lazy($, "IS_CLIENT", "DartEntry_IS_CLIENT", "get$DartEntry_IS_CLIENT", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [$.JSBool];
  t1._liblib16$_name = "DartEntry.IS_CLIENT";
  return t1;
}, function() {
  return $.DartEntry_IS_CLIENT;
});
Isolate.$lazy($, "IS_LAUNCHABLE", "DartEntry_IS_LAUNCHABLE", "get$DartEntry_IS_LAUNCHABLE", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [$.JSBool];
  t1._liblib16$_name = "DartEntry.IS_LAUNCHABLE";
  return t1;
}, function() {
  return $.DartEntry_IS_LAUNCHABLE;
});
Isolate.$lazy($, "PARSE_ERRORS", "DartEntry_PARSE_ERRORS", "get$DartEntry_PARSE_ERRORS", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [[$.JSArray, $.AnalysisError]];
  t1._liblib16$_name = "DartEntry.PARSE_ERRORS";
  return t1;
}, function() {
  return $.DartEntry_PARSE_ERRORS;
});
Isolate.$lazy($, "PARSED_UNIT", "DartEntry_PARSED_UNIT", "get$DartEntry_PARSED_UNIT", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [$.CompilationUnit];
  t1._liblib16$_name = "DartEntry.PARSED_UNIT";
  return t1;
}, function() {
  return $.DartEntry_PARSED_UNIT;
});
Isolate.$lazy($, "PUBLIC_NAMESPACE", "DartEntry_PUBLIC_NAMESPACE", "get$DartEntry_PUBLIC_NAMESPACE", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [$.Namespace];
  t1._liblib16$_name = "DartEntry.PUBLIC_NAMESPACE";
  return t1;
}, function() {
  return $.DartEntry_PUBLIC_NAMESPACE;
});
Isolate.$lazy($, "RESOLUTION_ERRORS", "DartEntry_RESOLUTION_ERRORS", "get$DartEntry_RESOLUTION_ERRORS", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [[$.JSArray, $.AnalysisError]];
  t1._liblib16$_name = "DartEntry.RESOLUTION_ERRORS";
  return t1;
}, function() {
  return $.DartEntry_RESOLUTION_ERRORS;
});
Isolate.$lazy($, "RESOLVED_UNIT", "DartEntry_RESOLVED_UNIT", "get$DartEntry_RESOLVED_UNIT", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [$.CompilationUnit];
  t1._liblib16$_name = "DartEntry.RESOLVED_UNIT";
  return t1;
}, function() {
  return $.DartEntry_RESOLVED_UNIT;
});
Isolate.$lazy($, "SOURCE_KIND", "DartEntry_SOURCE_KIND", "get$DartEntry_SOURCE_KIND", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [$.SourceKind];
  t1._liblib16$_name = "DartEntry.SOURCE_KIND";
  return t1;
}, function() {
  return $.DartEntry_SOURCE_KIND;
});
Isolate.$lazy($, "ELEMENT", "HtmlEntry_ELEMENT", "get$HtmlEntry_ELEMENT", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [$.HtmlElement];
  t1._liblib16$_name = "HtmlEntry.ELEMENT";
  return t1;
}, function() {
  return $.HtmlEntry_ELEMENT;
});
Isolate.$lazy($, "PARSED_UNIT", "HtmlEntry_PARSED_UNIT", "get$HtmlEntry_PARSED_UNIT", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [$.HtmlUnit];
  t1._liblib16$_name = "HtmlEntry.PARSED_UNIT";
  return t1;
}, function() {
  return $.HtmlEntry_PARSED_UNIT;
});
Isolate.$lazy($, "REFERENCED_LIBRARIES", "HtmlEntry_REFERENCED_LIBRARIES", "get$HtmlEntry_REFERENCED_LIBRARIES", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [[$.JSArray, $.Source]];
  t1._liblib16$_name = "HtmlEntry.REFERENCED_LIBRARIES";
  return t1;
}, function() {
  return $.HtmlEntry_REFERENCED_LIBRARIES;
});
Isolate.$lazy($, "RESOLUTION_ERRORS", "HtmlEntry_RESOLUTION_ERRORS", "get$HtmlEntry_RESOLUTION_ERRORS", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [[$.JSArray, $.AnalysisError]];
  t1._liblib16$_name = "HtmlEntry.RESOLUTION_ERRORS";
  return t1;
}, function() {
  return $.HtmlEntry_RESOLUTION_ERRORS;
});
Isolate.$lazy($, "RESOLVED_UNIT", "HtmlEntry_RESOLVED_UNIT", "get$HtmlEntry_RESOLVED_UNIT", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [$.HtmlUnit];
  t1._liblib16$_name = "HtmlEntry.RESOLVED_UNIT";
  return t1;
}, function() {
  return $.HtmlEntry_RESOLVED_UNIT;
});
Isolate.$lazy($, "LINE_INFO", "SourceEntry_LINE_INFO", "get$SourceEntry_LINE_INFO", function() {
  var t1 = new $.DataDescriptor(null);
  t1.$builtinTypeInfo = [$.LineInfo];
  t1._liblib16$_name = "SourceEntry.LINE_INFO";
  return t1;
}, function() {
  return $.SourceEntry_LINE_INFO;
});
Isolate.$lazy($, "ERROR", "CacheState_ERROR", "get$CacheState_ERROR", function() {
  return new $.CacheState("ERROR", 0);
}, function() {
  return $.CacheState_ERROR;
});
Isolate.$lazy($, "FLUSHED", "CacheState_FLUSHED", "get$CacheState_FLUSHED", function() {
  return new $.CacheState("FLUSHED", 1);
}, function() {
  return $.CacheState_FLUSHED;
});
Isolate.$lazy($, "IN_PROCESS", "CacheState_IN_PROCESS", "get$CacheState_IN_PROCESS", function() {
  return new $.CacheState("IN_PROCESS", 2);
}, function() {
  return $.CacheState_IN_PROCESS;
});
Isolate.$lazy($, "INVALID", "CacheState_INVALID", "get$CacheState_INVALID", function() {
  return new $.CacheState("INVALID", 3);
}, function() {
  return $.CacheState_INVALID;
});
Isolate.$lazy($, "VALID", "CacheState_VALID", "get$CacheState_VALID", function() {
  return new $.CacheState("VALID", 4);
}, function() {
  return $.CacheState_VALID;
});
Isolate.$lazy($, "NULL", "Logger_NULL", "get$Logger_NULL", function() {
  return new $.Logger_NullLogger();
}, function() {
  return $.Logger_NULL;
});
Isolate.$lazy($, "DOCUMENTATION", "CommentType_DOCUMENTATION", "get$CommentType_DOCUMENTATION", function() {
  return new $.CommentType("DOCUMENTATION", 2);
}, function() {
  return $.CommentType_DOCUMENTATION;
});
Isolate.$lazy($, "ERROR", "ErrorSeverity_ERROR", "get$ErrorSeverity_ERROR", function() {
  var t1 = new $.ErrorSeverity("ERROR", 3, null, null);
  t1._machineCode = "E";
  t1._displayName = "error";
  return t1;
}, function() {
  return $.ErrorSeverity_ERROR;
});
Isolate.$lazy($, "NO_ERRORS", "AnalysisError_NO_ERRORS", "get$AnalysisError_NO_ERRORS", function() {
  var t1 = $.List_List(0, $.AnalysisError);
  t1.$builtinTypeInfo = [$.AnalysisError];
  return t1;
}, function() {
  return $.AnalysisError_NO_ERRORS;
});
Isolate.$lazy($, "SYNTACTIC_ERROR", "ErrorType_SYNTACTIC_ERROR", "get$ErrorType_SYNTACTIC_ERROR", function() {
  var t1 = new $.ErrorType("SYNTACTIC_ERROR", 4, null);
  t1._severity = $.get$ErrorSeverity_ERROR();
  return t1;
}, function() {
  return $.ErrorType_SYNTACTIC_ERROR;
});
Isolate.$lazy($, "_NULL_INSTRUMENTATION_BUILDER", "Instrumentation__NULL_INSTRUMENTATION_BUILDER", "get$Instrumentation__NULL_INSTRUMENTATION_BUILDER", function() {
  return new $.InstrumentationBuilder_13();
}, function() {
  return $.Instrumentation__NULL_INSTRUMENTATION_BUILDER;
});
Isolate.$lazy($, "_NULL_LOGGER", "Instrumentation__NULL_LOGGER", "get$Instrumentation__NULL_LOGGER", function() {
  return new $.InstrumentationLogger_14();
}, function() {
  return $.Instrumentation__NULL_LOGGER;
});
Isolate.$lazy($, "_CURRENT_LOGGER", "Instrumentation__CURRENT_LOGGER", "get$Instrumentation__CURRENT_LOGGER", function() {
  return $.get$Instrumentation__NULL_LOGGER();
}, function() {
  return $.Instrumentation__CURRENT_LOGGER;
});
Isolate.$lazy($, "ABSTRACT_CLASS_MEMBER", "ParserErrorCode_ABSTRACT_CLASS_MEMBER", "get$ParserErrorCode_ABSTRACT_CLASS_MEMBER", function() {
  var t1 = new $.ParserErrorCode("ABSTRACT_CLASS_MEMBER", 0, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Members of classes cannot be declared to be 'abstract'";
  return t1;
}, function() {
  return $.ParserErrorCode_ABSTRACT_CLASS_MEMBER;
});
Isolate.$lazy($, "ABSTRACT_STATIC_METHOD", "ParserErrorCode_ABSTRACT_STATIC_METHOD", "get$ParserErrorCode_ABSTRACT_STATIC_METHOD", function() {
  var t1 = new $.ParserErrorCode("ABSTRACT_STATIC_METHOD", 1, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Static methods cannot be declared to be 'abstract'";
  return t1;
}, function() {
  return $.ParserErrorCode_ABSTRACT_STATIC_METHOD;
});
Isolate.$lazy($, "ABSTRACT_TOP_LEVEL_FUNCTION", "ParserErrorCode_ABSTRACT_TOP_LEVEL_FUNCTION", "get$ParserErrorCode_ABSTRACT_TOP_LEVEL_FUNCTION", function() {
  var t1 = new $.ParserErrorCode("ABSTRACT_TOP_LEVEL_FUNCTION", 2, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Top-level functions cannot be declared to be 'abstract'";
  return t1;
}, function() {
  return $.ParserErrorCode_ABSTRACT_TOP_LEVEL_FUNCTION;
});
Isolate.$lazy($, "ABSTRACT_TOP_LEVEL_VARIABLE", "ParserErrorCode_ABSTRACT_TOP_LEVEL_VARIABLE", "get$ParserErrorCode_ABSTRACT_TOP_LEVEL_VARIABLE", function() {
  var t1 = new $.ParserErrorCode("ABSTRACT_TOP_LEVEL_VARIABLE", 3, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Top-level variables cannot be declared to be 'abstract'";
  return t1;
}, function() {
  return $.ParserErrorCode_ABSTRACT_TOP_LEVEL_VARIABLE;
});
Isolate.$lazy($, "ABSTRACT_TYPEDEF", "ParserErrorCode_ABSTRACT_TYPEDEF", "get$ParserErrorCode_ABSTRACT_TYPEDEF", function() {
  var t1 = new $.ParserErrorCode("ABSTRACT_TYPEDEF", 4, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Type aliases cannot be declared to be 'abstract'";
  return t1;
}, function() {
  return $.ParserErrorCode_ABSTRACT_TYPEDEF;
});
Isolate.$lazy($, "BREAK_OUTSIDE_OF_LOOP", "ParserErrorCode_BREAK_OUTSIDE_OF_LOOP", "get$ParserErrorCode_BREAK_OUTSIDE_OF_LOOP", function() {
  var t1 = new $.ParserErrorCode("BREAK_OUTSIDE_OF_LOOP", 5, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "A break statement cannot be used outside of a loop or switch statement";
  return t1;
}, function() {
  return $.ParserErrorCode_BREAK_OUTSIDE_OF_LOOP;
});
Isolate.$lazy($, "CONST_AND_FINAL", "ParserErrorCode_CONST_AND_FINAL", "get$ParserErrorCode_CONST_AND_FINAL", function() {
  var t1 = new $.ParserErrorCode("CONST_AND_FINAL", 6, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Members cannot be declared to be both 'const' and 'final'";
  return t1;
}, function() {
  return $.ParserErrorCode_CONST_AND_FINAL;
});
Isolate.$lazy($, "CONST_AND_VAR", "ParserErrorCode_CONST_AND_VAR", "get$ParserErrorCode_CONST_AND_VAR", function() {
  var t1 = new $.ParserErrorCode("CONST_AND_VAR", 7, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Members cannot be declared to be both 'const' and 'var'";
  return t1;
}, function() {
  return $.ParserErrorCode_CONST_AND_VAR;
});
Isolate.$lazy($, "CONST_CLASS", "ParserErrorCode_CONST_CLASS", "get$ParserErrorCode_CONST_CLASS", function() {
  var t1 = new $.ParserErrorCode("CONST_CLASS", 8, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Classes cannot be declared to be 'const'";
  return t1;
}, function() {
  return $.ParserErrorCode_CONST_CLASS;
});
Isolate.$lazy($, "CONST_CONSTRUCTOR_WITH_BODY", "ParserErrorCode_CONST_CONSTRUCTOR_WITH_BODY", "get$ParserErrorCode_CONST_CONSTRUCTOR_WITH_BODY", function() {
  var t1 = new $.ParserErrorCode("CONST_CONSTRUCTOR_WITH_BODY", 9, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "'const' constructors cannot have a body";
  return t1;
}, function() {
  return $.ParserErrorCode_CONST_CONSTRUCTOR_WITH_BODY;
});
Isolate.$lazy($, "CONST_FACTORY", "ParserErrorCode_CONST_FACTORY", "get$ParserErrorCode_CONST_FACTORY", function() {
  var t1 = new $.ParserErrorCode("CONST_FACTORY", 10, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Only redirecting factory constructors can be declared to be 'const'";
  return t1;
}, function() {
  return $.ParserErrorCode_CONST_FACTORY;
});
Isolate.$lazy($, "CONST_METHOD", "ParserErrorCode_CONST_METHOD", "get$ParserErrorCode_CONST_METHOD", function() {
  var t1 = new $.ParserErrorCode("CONST_METHOD", 11, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Getters, setters and methods cannot be declared to be 'const'";
  return t1;
}, function() {
  return $.ParserErrorCode_CONST_METHOD;
});
Isolate.$lazy($, "CONST_TYPEDEF", "ParserErrorCode_CONST_TYPEDEF", "get$ParserErrorCode_CONST_TYPEDEF", function() {
  var t1 = new $.ParserErrorCode("CONST_TYPEDEF", 12, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Type aliases cannot be declared to be 'const'";
  return t1;
}, function() {
  return $.ParserErrorCode_CONST_TYPEDEF;
});
Isolate.$lazy($, "CONSTRUCTOR_WITH_RETURN_TYPE", "ParserErrorCode_CONSTRUCTOR_WITH_RETURN_TYPE", "get$ParserErrorCode_CONSTRUCTOR_WITH_RETURN_TYPE", function() {
  var t1 = new $.ParserErrorCode("CONSTRUCTOR_WITH_RETURN_TYPE", 13, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Constructors cannot have a return type";
  return t1;
}, function() {
  return $.ParserErrorCode_CONSTRUCTOR_WITH_RETURN_TYPE;
});
Isolate.$lazy($, "CONTINUE_OUTSIDE_OF_LOOP", "ParserErrorCode_CONTINUE_OUTSIDE_OF_LOOP", "get$ParserErrorCode_CONTINUE_OUTSIDE_OF_LOOP", function() {
  var t1 = new $.ParserErrorCode("CONTINUE_OUTSIDE_OF_LOOP", 14, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "A continue statement cannot be used outside of a loop or switch statement";
  return t1;
}, function() {
  return $.ParserErrorCode_CONTINUE_OUTSIDE_OF_LOOP;
});
Isolate.$lazy($, "CONTINUE_WITHOUT_LABEL_IN_CASE", "ParserErrorCode_CONTINUE_WITHOUT_LABEL_IN_CASE", "get$ParserErrorCode_CONTINUE_WITHOUT_LABEL_IN_CASE", function() {
  var t1 = new $.ParserErrorCode("CONTINUE_WITHOUT_LABEL_IN_CASE", 15, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "A continue statement in a switch statement must have a label as a target";
  return t1;
}, function() {
  return $.ParserErrorCode_CONTINUE_WITHOUT_LABEL_IN_CASE;
});
Isolate.$lazy($, "DIRECTIVE_AFTER_DECLARATION", "ParserErrorCode_DIRECTIVE_AFTER_DECLARATION", "get$ParserErrorCode_DIRECTIVE_AFTER_DECLARATION", function() {
  var t1 = new $.ParserErrorCode("DIRECTIVE_AFTER_DECLARATION", 17, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Directives must appear before any declarations";
  return t1;
}, function() {
  return $.ParserErrorCode_DIRECTIVE_AFTER_DECLARATION;
});
Isolate.$lazy($, "DUPLICATE_LABEL_IN_SWITCH_STATEMENT", "ParserErrorCode_DUPLICATE_LABEL_IN_SWITCH_STATEMENT", "get$ParserErrorCode_DUPLICATE_LABEL_IN_SWITCH_STATEMENT", function() {
  var t1 = new $.ParserErrorCode("DUPLICATE_LABEL_IN_SWITCH_STATEMENT", 18, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The label %s was already used in this switch statement";
  return t1;
}, function() {
  return $.ParserErrorCode_DUPLICATE_LABEL_IN_SWITCH_STATEMENT;
});
Isolate.$lazy($, "DUPLICATED_MODIFIER", "ParserErrorCode_DUPLICATED_MODIFIER", "get$ParserErrorCode_DUPLICATED_MODIFIER", function() {
  var t1 = new $.ParserErrorCode("DUPLICATED_MODIFIER", 19, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The modifier '%s' was already specified.";
  return t1;
}, function() {
  return $.ParserErrorCode_DUPLICATED_MODIFIER;
});
Isolate.$lazy($, "EXPECTED_CASE_OR_DEFAULT", "ParserErrorCode_EXPECTED_CASE_OR_DEFAULT", "get$ParserErrorCode_EXPECTED_CASE_OR_DEFAULT", function() {
  var t1 = new $.ParserErrorCode("EXPECTED_CASE_OR_DEFAULT", 20, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Expected 'case' or 'default'";
  return t1;
}, function() {
  return $.ParserErrorCode_EXPECTED_CASE_OR_DEFAULT;
});
Isolate.$lazy($, "EXPECTED_CLASS_MEMBER", "ParserErrorCode_EXPECTED_CLASS_MEMBER", "get$ParserErrorCode_EXPECTED_CLASS_MEMBER", function() {
  var t1 = new $.ParserErrorCode("EXPECTED_CLASS_MEMBER", 21, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Expected a class member";
  return t1;
}, function() {
  return $.ParserErrorCode_EXPECTED_CLASS_MEMBER;
});
Isolate.$lazy($, "EXPECTED_EXECUTABLE", "ParserErrorCode_EXPECTED_EXECUTABLE", "get$ParserErrorCode_EXPECTED_EXECUTABLE", function() {
  var t1 = new $.ParserErrorCode("EXPECTED_EXECUTABLE", 22, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Expected a method, getter, setter or operator declaration";
  return t1;
}, function() {
  return $.ParserErrorCode_EXPECTED_EXECUTABLE;
});
Isolate.$lazy($, "EXPECTED_LIST_OR_MAP_LITERAL", "ParserErrorCode_EXPECTED_LIST_OR_MAP_LITERAL", "get$ParserErrorCode_EXPECTED_LIST_OR_MAP_LITERAL", function() {
  var t1 = new $.ParserErrorCode("EXPECTED_LIST_OR_MAP_LITERAL", 23, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Expected a list or map literal";
  return t1;
}, function() {
  return $.ParserErrorCode_EXPECTED_LIST_OR_MAP_LITERAL;
});
Isolate.$lazy($, "EXPECTED_STRING_LITERAL", "ParserErrorCode_EXPECTED_STRING_LITERAL", "get$ParserErrorCode_EXPECTED_STRING_LITERAL", function() {
  var t1 = new $.ParserErrorCode("EXPECTED_STRING_LITERAL", 24, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Expected a string literal";
  return t1;
}, function() {
  return $.ParserErrorCode_EXPECTED_STRING_LITERAL;
});
Isolate.$lazy($, "EXPECTED_TOKEN", "ParserErrorCode_EXPECTED_TOKEN", "get$ParserErrorCode_EXPECTED_TOKEN", function() {
  var t1 = new $.ParserErrorCode("EXPECTED_TOKEN", 25, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Expected to find '%s'";
  return t1;
}, function() {
  return $.ParserErrorCode_EXPECTED_TOKEN;
});
Isolate.$lazy($, "EXPECTED_TWO_MAP_TYPE_ARGUMENTS", "ParserErrorCode_EXPECTED_TWO_MAP_TYPE_ARGUMENTS", "get$ParserErrorCode_EXPECTED_TWO_MAP_TYPE_ARGUMENTS", function() {
  var t1 = new $.ParserErrorCode("EXPECTED_TWO_MAP_TYPE_ARGUMENTS", 26, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Map literal requires exactly two type arguments or none, but %d found";
  return t1;
}, function() {
  return $.ParserErrorCode_EXPECTED_TWO_MAP_TYPE_ARGUMENTS;
});
Isolate.$lazy($, "EXPECTED_TYPE_NAME", "ParserErrorCode_EXPECTED_TYPE_NAME", "get$ParserErrorCode_EXPECTED_TYPE_NAME", function() {
  var t1 = new $.ParserErrorCode("EXPECTED_TYPE_NAME", 27, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Expected a type name";
  return t1;
}, function() {
  return $.ParserErrorCode_EXPECTED_TYPE_NAME;
});
Isolate.$lazy($, "EXPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", "ParserErrorCode_EXPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", "get$ParserErrorCode_EXPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", function() {
  var t1 = new $.ParserErrorCode("EXPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", 28, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Export directives must preceed part directives";
  return t1;
}, function() {
  return $.ParserErrorCode_EXPORT_DIRECTIVE_AFTER_PART_DIRECTIVE;
});
Isolate.$lazy($, "EXTERNAL_AFTER_CONST", "ParserErrorCode_EXTERNAL_AFTER_CONST", "get$ParserErrorCode_EXTERNAL_AFTER_CONST", function() {
  var t1 = new $.ParserErrorCode("EXTERNAL_AFTER_CONST", 29, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The modifier 'external' should be before the modifier 'const'";
  return t1;
}, function() {
  return $.ParserErrorCode_EXTERNAL_AFTER_CONST;
});
Isolate.$lazy($, "EXTERNAL_AFTER_FACTORY", "ParserErrorCode_EXTERNAL_AFTER_FACTORY", "get$ParserErrorCode_EXTERNAL_AFTER_FACTORY", function() {
  var t1 = new $.ParserErrorCode("EXTERNAL_AFTER_FACTORY", 30, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The modifier 'external' should be before the modifier 'factory'";
  return t1;
}, function() {
  return $.ParserErrorCode_EXTERNAL_AFTER_FACTORY;
});
Isolate.$lazy($, "EXTERNAL_AFTER_STATIC", "ParserErrorCode_EXTERNAL_AFTER_STATIC", "get$ParserErrorCode_EXTERNAL_AFTER_STATIC", function() {
  var t1 = new $.ParserErrorCode("EXTERNAL_AFTER_STATIC", 31, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The modifier 'external' should be before the modifier 'static'";
  return t1;
}, function() {
  return $.ParserErrorCode_EXTERNAL_AFTER_STATIC;
});
Isolate.$lazy($, "EXTERNAL_CLASS", "ParserErrorCode_EXTERNAL_CLASS", "get$ParserErrorCode_EXTERNAL_CLASS", function() {
  var t1 = new $.ParserErrorCode("EXTERNAL_CLASS", 32, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Classes cannot be declared to be 'external'";
  return t1;
}, function() {
  return $.ParserErrorCode_EXTERNAL_CLASS;
});
Isolate.$lazy($, "EXTERNAL_CONSTRUCTOR_WITH_BODY", "ParserErrorCode_EXTERNAL_CONSTRUCTOR_WITH_BODY", "get$ParserErrorCode_EXTERNAL_CONSTRUCTOR_WITH_BODY", function() {
  var t1 = new $.ParserErrorCode("EXTERNAL_CONSTRUCTOR_WITH_BODY", 33, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "External constructors cannot have a body";
  return t1;
}, function() {
  return $.ParserErrorCode_EXTERNAL_CONSTRUCTOR_WITH_BODY;
});
Isolate.$lazy($, "EXTERNAL_FIELD", "ParserErrorCode_EXTERNAL_FIELD", "get$ParserErrorCode_EXTERNAL_FIELD", function() {
  var t1 = new $.ParserErrorCode("EXTERNAL_FIELD", 34, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Fields cannot be declared to be 'external'";
  return t1;
}, function() {
  return $.ParserErrorCode_EXTERNAL_FIELD;
});
Isolate.$lazy($, "EXTERNAL_GETTER_WITH_BODY", "ParserErrorCode_EXTERNAL_GETTER_WITH_BODY", "get$ParserErrorCode_EXTERNAL_GETTER_WITH_BODY", function() {
  var t1 = new $.ParserErrorCode("EXTERNAL_GETTER_WITH_BODY", 35, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "External getters cannot have a body";
  return t1;
}, function() {
  return $.ParserErrorCode_EXTERNAL_GETTER_WITH_BODY;
});
Isolate.$lazy($, "EXTERNAL_METHOD_WITH_BODY", "ParserErrorCode_EXTERNAL_METHOD_WITH_BODY", "get$ParserErrorCode_EXTERNAL_METHOD_WITH_BODY", function() {
  var t1 = new $.ParserErrorCode("EXTERNAL_METHOD_WITH_BODY", 36, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "External methods cannot have a body";
  return t1;
}, function() {
  return $.ParserErrorCode_EXTERNAL_METHOD_WITH_BODY;
});
Isolate.$lazy($, "EXTERNAL_OPERATOR_WITH_BODY", "ParserErrorCode_EXTERNAL_OPERATOR_WITH_BODY", "get$ParserErrorCode_EXTERNAL_OPERATOR_WITH_BODY", function() {
  var t1 = new $.ParserErrorCode("EXTERNAL_OPERATOR_WITH_BODY", 37, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "External operators cannot have a body";
  return t1;
}, function() {
  return $.ParserErrorCode_EXTERNAL_OPERATOR_WITH_BODY;
});
Isolate.$lazy($, "EXTERNAL_SETTER_WITH_BODY", "ParserErrorCode_EXTERNAL_SETTER_WITH_BODY", "get$ParserErrorCode_EXTERNAL_SETTER_WITH_BODY", function() {
  var t1 = new $.ParserErrorCode("EXTERNAL_SETTER_WITH_BODY", 38, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "External setters cannot have a body";
  return t1;
}, function() {
  return $.ParserErrorCode_EXTERNAL_SETTER_WITH_BODY;
});
Isolate.$lazy($, "EXTERNAL_TYPEDEF", "ParserErrorCode_EXTERNAL_TYPEDEF", "get$ParserErrorCode_EXTERNAL_TYPEDEF", function() {
  var t1 = new $.ParserErrorCode("EXTERNAL_TYPEDEF", 39, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Type aliases cannot be declared to be 'external'";
  return t1;
}, function() {
  return $.ParserErrorCode_EXTERNAL_TYPEDEF;
});
Isolate.$lazy($, "FACTORY_TOP_LEVEL_DECLARATION", "ParserErrorCode_FACTORY_TOP_LEVEL_DECLARATION", "get$ParserErrorCode_FACTORY_TOP_LEVEL_DECLARATION", function() {
  var t1 = new $.ParserErrorCode("FACTORY_TOP_LEVEL_DECLARATION", 40, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Top-level declarations cannot be declared to be 'factory'";
  return t1;
}, function() {
  return $.ParserErrorCode_FACTORY_TOP_LEVEL_DECLARATION;
});
Isolate.$lazy($, "FACTORY_WITHOUT_BODY", "ParserErrorCode_FACTORY_WITHOUT_BODY", "get$ParserErrorCode_FACTORY_WITHOUT_BODY", function() {
  var t1 = new $.ParserErrorCode("FACTORY_WITHOUT_BODY", 41, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "A non-redirecting 'factory' constructor must have a body";
  return t1;
}, function() {
  return $.ParserErrorCode_FACTORY_WITHOUT_BODY;
});
Isolate.$lazy($, "FIELD_INITIALIZER_OUTSIDE_CONSTRUCTOR", "ParserErrorCode_FIELD_INITIALIZER_OUTSIDE_CONSTRUCTOR", "get$ParserErrorCode_FIELD_INITIALIZER_OUTSIDE_CONSTRUCTOR", function() {
  var t1 = new $.ParserErrorCode("FIELD_INITIALIZER_OUTSIDE_CONSTRUCTOR", 42, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Field initializers can only be used in a constructor";
  return t1;
}, function() {
  return $.ParserErrorCode_FIELD_INITIALIZER_OUTSIDE_CONSTRUCTOR;
});
Isolate.$lazy($, "FINAL_AND_VAR", "ParserErrorCode_FINAL_AND_VAR", "get$ParserErrorCode_FINAL_AND_VAR", function() {
  var t1 = new $.ParserErrorCode("FINAL_AND_VAR", 43, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Members cannot be declared to be both 'final' and 'var'";
  return t1;
}, function() {
  return $.ParserErrorCode_FINAL_AND_VAR;
});
Isolate.$lazy($, "FINAL_CLASS", "ParserErrorCode_FINAL_CLASS", "get$ParserErrorCode_FINAL_CLASS", function() {
  var t1 = new $.ParserErrorCode("FINAL_CLASS", 44, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Classes cannot be declared to be 'final'";
  return t1;
}, function() {
  return $.ParserErrorCode_FINAL_CLASS;
});
Isolate.$lazy($, "FINAL_CONSTRUCTOR", "ParserErrorCode_FINAL_CONSTRUCTOR", "get$ParserErrorCode_FINAL_CONSTRUCTOR", function() {
  var t1 = new $.ParserErrorCode("FINAL_CONSTRUCTOR", 45, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "A constructor cannot be declared to be 'final'";
  return t1;
}, function() {
  return $.ParserErrorCode_FINAL_CONSTRUCTOR;
});
Isolate.$lazy($, "FINAL_METHOD", "ParserErrorCode_FINAL_METHOD", "get$ParserErrorCode_FINAL_METHOD", function() {
  var t1 = new $.ParserErrorCode("FINAL_METHOD", 46, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Getters, setters and methods cannot be declared to be 'final'";
  return t1;
}, function() {
  return $.ParserErrorCode_FINAL_METHOD;
});
Isolate.$lazy($, "FINAL_TYPEDEF", "ParserErrorCode_FINAL_TYPEDEF", "get$ParserErrorCode_FINAL_TYPEDEF", function() {
  var t1 = new $.ParserErrorCode("FINAL_TYPEDEF", 47, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Type aliases cannot be declared to be 'final'";
  return t1;
}, function() {
  return $.ParserErrorCode_FINAL_TYPEDEF;
});
Isolate.$lazy($, "GETTER_WITH_PARAMETERS", "ParserErrorCode_GETTER_WITH_PARAMETERS", "get$ParserErrorCode_GETTER_WITH_PARAMETERS", function() {
  var t1 = new $.ParserErrorCode("GETTER_WITH_PARAMETERS", 48, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Getter should be declared without a parameter list";
  return t1;
}, function() {
  return $.ParserErrorCode_GETTER_WITH_PARAMETERS;
});
Isolate.$lazy($, "ILLEGAL_ASSIGNMENT_TO_NON_ASSIGNABLE", "ParserErrorCode_ILLEGAL_ASSIGNMENT_TO_NON_ASSIGNABLE", "get$ParserErrorCode_ILLEGAL_ASSIGNMENT_TO_NON_ASSIGNABLE", function() {
  var t1 = new $.ParserErrorCode("ILLEGAL_ASSIGNMENT_TO_NON_ASSIGNABLE", 49, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Illegal assignment to non-assignable expression";
  return t1;
}, function() {
  return $.ParserErrorCode_ILLEGAL_ASSIGNMENT_TO_NON_ASSIGNABLE;
});
Isolate.$lazy($, "IMPLEMENTS_BEFORE_EXTENDS", "ParserErrorCode_IMPLEMENTS_BEFORE_EXTENDS", "get$ParserErrorCode_IMPLEMENTS_BEFORE_EXTENDS", function() {
  var t1 = new $.ParserErrorCode("IMPLEMENTS_BEFORE_EXTENDS", 50, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The extends clause must be before the implements clause";
  return t1;
}, function() {
  return $.ParserErrorCode_IMPLEMENTS_BEFORE_EXTENDS;
});
Isolate.$lazy($, "IMPLEMENTS_BEFORE_WITH", "ParserErrorCode_IMPLEMENTS_BEFORE_WITH", "get$ParserErrorCode_IMPLEMENTS_BEFORE_WITH", function() {
  var t1 = new $.ParserErrorCode("IMPLEMENTS_BEFORE_WITH", 51, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The with clause must be before the implements clause";
  return t1;
}, function() {
  return $.ParserErrorCode_IMPLEMENTS_BEFORE_WITH;
});
Isolate.$lazy($, "IMPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", "ParserErrorCode_IMPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", "get$ParserErrorCode_IMPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", function() {
  var t1 = new $.ParserErrorCode("IMPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", 52, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Import directives must preceed part directives";
  return t1;
}, function() {
  return $.ParserErrorCode_IMPORT_DIRECTIVE_AFTER_PART_DIRECTIVE;
});
Isolate.$lazy($, "INITIALIZED_VARIABLE_IN_FOR_EACH", "ParserErrorCode_INITIALIZED_VARIABLE_IN_FOR_EACH", "get$ParserErrorCode_INITIALIZED_VARIABLE_IN_FOR_EACH", function() {
  var t1 = new $.ParserErrorCode("INITIALIZED_VARIABLE_IN_FOR_EACH", 53, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The loop variable in a for-each loop cannot be initialized";
  return t1;
}, function() {
  return $.ParserErrorCode_INITIALIZED_VARIABLE_IN_FOR_EACH;
});
Isolate.$lazy($, "INVALID_CODE_POINT", "ParserErrorCode_INVALID_CODE_POINT", "get$ParserErrorCode_INVALID_CODE_POINT", function() {
  var t1 = new $.ParserErrorCode("INVALID_CODE_POINT", 54, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The escape sequence '%s' is not a valid code point";
  return t1;
}, function() {
  return $.ParserErrorCode_INVALID_CODE_POINT;
});
Isolate.$lazy($, "INVALID_HEX_ESCAPE", "ParserErrorCode_INVALID_HEX_ESCAPE", "get$ParserErrorCode_INVALID_HEX_ESCAPE", function() {
  var t1 = new $.ParserErrorCode("INVALID_HEX_ESCAPE", 56, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "An escape sequence starting with '\\x' must be followed by 2 hexidecimal digits";
  return t1;
}, function() {
  return $.ParserErrorCode_INVALID_HEX_ESCAPE;
});
Isolate.$lazy($, "INVALID_OPERATOR", "ParserErrorCode_INVALID_OPERATOR", "get$ParserErrorCode_INVALID_OPERATOR", function() {
  var t1 = new $.ParserErrorCode("INVALID_OPERATOR", 57, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The string '%s' is not a valid operator";
  return t1;
}, function() {
  return $.ParserErrorCode_INVALID_OPERATOR;
});
Isolate.$lazy($, "INVALID_OPERATOR_FOR_SUPER", "ParserErrorCode_INVALID_OPERATOR_FOR_SUPER", "get$ParserErrorCode_INVALID_OPERATOR_FOR_SUPER", function() {
  var t1 = new $.ParserErrorCode("INVALID_OPERATOR_FOR_SUPER", 58, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The operator '%s' cannot be used with 'super'";
  return t1;
}, function() {
  return $.ParserErrorCode_INVALID_OPERATOR_FOR_SUPER;
});
Isolate.$lazy($, "INVALID_UNICODE_ESCAPE", "ParserErrorCode_INVALID_UNICODE_ESCAPE", "get$ParserErrorCode_INVALID_UNICODE_ESCAPE", function() {
  var t1 = new $.ParserErrorCode("INVALID_UNICODE_ESCAPE", 59, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "An escape sequence starting with '\\u' must be followed by 4 hexidecimal digits or from 1 to 6 digits between '{' and '}'";
  return t1;
}, function() {
  return $.ParserErrorCode_INVALID_UNICODE_ESCAPE;
});
Isolate.$lazy($, "LIBRARY_DIRECTIVE_NOT_FIRST", "ParserErrorCode_LIBRARY_DIRECTIVE_NOT_FIRST", "get$ParserErrorCode_LIBRARY_DIRECTIVE_NOT_FIRST", function() {
  var t1 = new $.ParserErrorCode("LIBRARY_DIRECTIVE_NOT_FIRST", 60, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The library directive must appear before all other directives";
  return t1;
}, function() {
  return $.ParserErrorCode_LIBRARY_DIRECTIVE_NOT_FIRST;
});
Isolate.$lazy($, "MISSING_ASSIGNABLE_SELECTOR", "ParserErrorCode_MISSING_ASSIGNABLE_SELECTOR", "get$ParserErrorCode_MISSING_ASSIGNABLE_SELECTOR", function() {
  var t1 = new $.ParserErrorCode("MISSING_ASSIGNABLE_SELECTOR", 61, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Missing selector such as \".<identifier>\" or \"[0]\"";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_ASSIGNABLE_SELECTOR;
});
Isolate.$lazy($, "MISSING_CATCH_OR_FINALLY", "ParserErrorCode_MISSING_CATCH_OR_FINALLY", "get$ParserErrorCode_MISSING_CATCH_OR_FINALLY", function() {
  var t1 = new $.ParserErrorCode("MISSING_CATCH_OR_FINALLY", 62, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "A try statement must have either a catch or finally clause";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_CATCH_OR_FINALLY;
});
Isolate.$lazy($, "MISSING_CLASS_BODY", "ParserErrorCode_MISSING_CLASS_BODY", "get$ParserErrorCode_MISSING_CLASS_BODY", function() {
  var t1 = new $.ParserErrorCode("MISSING_CLASS_BODY", 63, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "A class definition must have a body, even if it is empty";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_CLASS_BODY;
});
Isolate.$lazy($, "MISSING_CLOSING_PARENTHESIS", "ParserErrorCode_MISSING_CLOSING_PARENTHESIS", "get$ParserErrorCode_MISSING_CLOSING_PARENTHESIS", function() {
  var t1 = new $.ParserErrorCode("MISSING_CLOSING_PARENTHESIS", 64, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The closing parenthesis is missing";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_CLOSING_PARENTHESIS;
});
Isolate.$lazy($, "MISSING_CONST_FINAL_VAR_OR_TYPE", "ParserErrorCode_MISSING_CONST_FINAL_VAR_OR_TYPE", "get$ParserErrorCode_MISSING_CONST_FINAL_VAR_OR_TYPE", function() {
  var t1 = new $.ParserErrorCode("MISSING_CONST_FINAL_VAR_OR_TYPE", 65, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Variables must be declared using the keywords 'const', 'final', 'var' or a type name";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_CONST_FINAL_VAR_OR_TYPE;
});
Isolate.$lazy($, "MISSING_EXPRESSION_IN_THROW", "ParserErrorCode_MISSING_EXPRESSION_IN_THROW", "get$ParserErrorCode_MISSING_EXPRESSION_IN_THROW", function() {
  var t1 = new $.ParserErrorCode("MISSING_EXPRESSION_IN_THROW", 66, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Throw expressions must compute the object to be thrown";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_EXPRESSION_IN_THROW;
});
Isolate.$lazy($, "MISSING_FUNCTION_BODY", "ParserErrorCode_MISSING_FUNCTION_BODY", "get$ParserErrorCode_MISSING_FUNCTION_BODY", function() {
  var t1 = new $.ParserErrorCode("MISSING_FUNCTION_BODY", 67, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "A function body must be provided";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_FUNCTION_BODY;
});
Isolate.$lazy($, "MISSING_FUNCTION_PARAMETERS", "ParserErrorCode_MISSING_FUNCTION_PARAMETERS", "get$ParserErrorCode_MISSING_FUNCTION_PARAMETERS", function() {
  var t1 = new $.ParserErrorCode("MISSING_FUNCTION_PARAMETERS", 68, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Functions must have an explicit list of parameters";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_FUNCTION_PARAMETERS;
});
Isolate.$lazy($, "MISSING_IDENTIFIER", "ParserErrorCode_MISSING_IDENTIFIER", "get$ParserErrorCode_MISSING_IDENTIFIER", function() {
  var t1 = new $.ParserErrorCode("MISSING_IDENTIFIER", 69, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Expected an identifier";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_IDENTIFIER;
});
Isolate.$lazy($, "MISSING_KEYWORD_OPERATOR", "ParserErrorCode_MISSING_KEYWORD_OPERATOR", "get$ParserErrorCode_MISSING_KEYWORD_OPERATOR", function() {
  var t1 = new $.ParserErrorCode("MISSING_KEYWORD_OPERATOR", 70, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Operator declarations must be preceeded by the keyword 'operator'";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_KEYWORD_OPERATOR;
});
Isolate.$lazy($, "MISSING_NAME_IN_LIBRARY_DIRECTIVE", "ParserErrorCode_MISSING_NAME_IN_LIBRARY_DIRECTIVE", "get$ParserErrorCode_MISSING_NAME_IN_LIBRARY_DIRECTIVE", function() {
  var t1 = new $.ParserErrorCode("MISSING_NAME_IN_LIBRARY_DIRECTIVE", 71, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Library directives must include a library name";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_NAME_IN_LIBRARY_DIRECTIVE;
});
Isolate.$lazy($, "MISSING_NAME_IN_PART_OF_DIRECTIVE", "ParserErrorCode_MISSING_NAME_IN_PART_OF_DIRECTIVE", "get$ParserErrorCode_MISSING_NAME_IN_PART_OF_DIRECTIVE", function() {
  var t1 = new $.ParserErrorCode("MISSING_NAME_IN_PART_OF_DIRECTIVE", 72, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Library directives must include a library name";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_NAME_IN_PART_OF_DIRECTIVE;
});
Isolate.$lazy($, "MISSING_STATEMENT", "ParserErrorCode_MISSING_STATEMENT", "get$ParserErrorCode_MISSING_STATEMENT", function() {
  var t1 = new $.ParserErrorCode("MISSING_STATEMENT", 73, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Expected a statement";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_STATEMENT;
});
Isolate.$lazy($, "MISSING_TERMINATOR_FOR_PARAMETER_GROUP", "ParserErrorCode_MISSING_TERMINATOR_FOR_PARAMETER_GROUP", "get$ParserErrorCode_MISSING_TERMINATOR_FOR_PARAMETER_GROUP", function() {
  var t1 = new $.ParserErrorCode("MISSING_TERMINATOR_FOR_PARAMETER_GROUP", 74, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "There is no '%s' to close the parameter group";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_TERMINATOR_FOR_PARAMETER_GROUP;
});
Isolate.$lazy($, "MISSING_TYPEDEF_PARAMETERS", "ParserErrorCode_MISSING_TYPEDEF_PARAMETERS", "get$ParserErrorCode_MISSING_TYPEDEF_PARAMETERS", function() {
  var t1 = new $.ParserErrorCode("MISSING_TYPEDEF_PARAMETERS", 75, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Type aliases for functions must have an explicit list of parameters";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_TYPEDEF_PARAMETERS;
});
Isolate.$lazy($, "MISSING_VARIABLE_IN_FOR_EACH", "ParserErrorCode_MISSING_VARIABLE_IN_FOR_EACH", "get$ParserErrorCode_MISSING_VARIABLE_IN_FOR_EACH", function() {
  var t1 = new $.ParserErrorCode("MISSING_VARIABLE_IN_FOR_EACH", 76, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "A loop variable must be declared in a for-each loop before the 'in', but none were found";
  return t1;
}, function() {
  return $.ParserErrorCode_MISSING_VARIABLE_IN_FOR_EACH;
});
Isolate.$lazy($, "MIXED_PARAMETER_GROUPS", "ParserErrorCode_MIXED_PARAMETER_GROUPS", "get$ParserErrorCode_MIXED_PARAMETER_GROUPS", function() {
  var t1 = new $.ParserErrorCode("MIXED_PARAMETER_GROUPS", 77, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Cannot have both positional and named parameters in a single parameter list";
  return t1;
}, function() {
  return $.ParserErrorCode_MIXED_PARAMETER_GROUPS;
});
Isolate.$lazy($, "MULTIPLE_EXTENDS_CLAUSES", "ParserErrorCode_MULTIPLE_EXTENDS_CLAUSES", "get$ParserErrorCode_MULTIPLE_EXTENDS_CLAUSES", function() {
  var t1 = new $.ParserErrorCode("MULTIPLE_EXTENDS_CLAUSES", 78, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Each class definition can have at most one extends clause";
  return t1;
}, function() {
  return $.ParserErrorCode_MULTIPLE_EXTENDS_CLAUSES;
});
Isolate.$lazy($, "MULTIPLE_IMPLEMENTS_CLAUSES", "ParserErrorCode_MULTIPLE_IMPLEMENTS_CLAUSES", "get$ParserErrorCode_MULTIPLE_IMPLEMENTS_CLAUSES", function() {
  var t1 = new $.ParserErrorCode("MULTIPLE_IMPLEMENTS_CLAUSES", 79, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Each class definition can have at most one implements clause";
  return t1;
}, function() {
  return $.ParserErrorCode_MULTIPLE_IMPLEMENTS_CLAUSES;
});
Isolate.$lazy($, "MULTIPLE_LIBRARY_DIRECTIVES", "ParserErrorCode_MULTIPLE_LIBRARY_DIRECTIVES", "get$ParserErrorCode_MULTIPLE_LIBRARY_DIRECTIVES", function() {
  var t1 = new $.ParserErrorCode("MULTIPLE_LIBRARY_DIRECTIVES", 80, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Only one library directive may be declared in a file";
  return t1;
}, function() {
  return $.ParserErrorCode_MULTIPLE_LIBRARY_DIRECTIVES;
});
Isolate.$lazy($, "MULTIPLE_NAMED_PARAMETER_GROUPS", "ParserErrorCode_MULTIPLE_NAMED_PARAMETER_GROUPS", "get$ParserErrorCode_MULTIPLE_NAMED_PARAMETER_GROUPS", function() {
  var t1 = new $.ParserErrorCode("MULTIPLE_NAMED_PARAMETER_GROUPS", 81, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Cannot have multiple groups of named parameters in a single parameter list";
  return t1;
}, function() {
  return $.ParserErrorCode_MULTIPLE_NAMED_PARAMETER_GROUPS;
});
Isolate.$lazy($, "MULTIPLE_PART_OF_DIRECTIVES", "ParserErrorCode_MULTIPLE_PART_OF_DIRECTIVES", "get$ParserErrorCode_MULTIPLE_PART_OF_DIRECTIVES", function() {
  var t1 = new $.ParserErrorCode("MULTIPLE_PART_OF_DIRECTIVES", 82, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Only one part-of directive may be declared in a file";
  return t1;
}, function() {
  return $.ParserErrorCode_MULTIPLE_PART_OF_DIRECTIVES;
});
Isolate.$lazy($, "MULTIPLE_POSITIONAL_PARAMETER_GROUPS", "ParserErrorCode_MULTIPLE_POSITIONAL_PARAMETER_GROUPS", "get$ParserErrorCode_MULTIPLE_POSITIONAL_PARAMETER_GROUPS", function() {
  var t1 = new $.ParserErrorCode("MULTIPLE_POSITIONAL_PARAMETER_GROUPS", 83, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Cannot have multiple groups of positional parameters in a single parameter list";
  return t1;
}, function() {
  return $.ParserErrorCode_MULTIPLE_POSITIONAL_PARAMETER_GROUPS;
});
Isolate.$lazy($, "MULTIPLE_VARIABLES_IN_FOR_EACH", "ParserErrorCode_MULTIPLE_VARIABLES_IN_FOR_EACH", "get$ParserErrorCode_MULTIPLE_VARIABLES_IN_FOR_EACH", function() {
  var t1 = new $.ParserErrorCode("MULTIPLE_VARIABLES_IN_FOR_EACH", 84, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "A single loop variable must be declared in a for-each loop before the 'in', but %s were found";
  return t1;
}, function() {
  return $.ParserErrorCode_MULTIPLE_VARIABLES_IN_FOR_EACH;
});
Isolate.$lazy($, "MULTIPLE_WITH_CLAUSES", "ParserErrorCode_MULTIPLE_WITH_CLAUSES", "get$ParserErrorCode_MULTIPLE_WITH_CLAUSES", function() {
  var t1 = new $.ParserErrorCode("MULTIPLE_WITH_CLAUSES", 85, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Each class definition can have at most one with clause";
  return t1;
}, function() {
  return $.ParserErrorCode_MULTIPLE_WITH_CLAUSES;
});
Isolate.$lazy($, "NAMED_PARAMETER_OUTSIDE_GROUP", "ParserErrorCode_NAMED_PARAMETER_OUTSIDE_GROUP", "get$ParserErrorCode_NAMED_PARAMETER_OUTSIDE_GROUP", function() {
  var t1 = new $.ParserErrorCode("NAMED_PARAMETER_OUTSIDE_GROUP", 87, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Named parameters must be enclosed in curly braces ('{' and '}')";
  return t1;
}, function() {
  return $.ParserErrorCode_NAMED_PARAMETER_OUTSIDE_GROUP;
});
Isolate.$lazy($, "NON_CONSTRUCTOR_FACTORY", "ParserErrorCode_NON_CONSTRUCTOR_FACTORY", "get$ParserErrorCode_NON_CONSTRUCTOR_FACTORY", function() {
  var t1 = new $.ParserErrorCode("NON_CONSTRUCTOR_FACTORY", 89, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Only constructors can be declared to be a 'factory'";
  return t1;
}, function() {
  return $.ParserErrorCode_NON_CONSTRUCTOR_FACTORY;
});
Isolate.$lazy($, "NON_IDENTIFIER_LIBRARY_NAME", "ParserErrorCode_NON_IDENTIFIER_LIBRARY_NAME", "get$ParserErrorCode_NON_IDENTIFIER_LIBRARY_NAME", function() {
  var t1 = new $.ParserErrorCode("NON_IDENTIFIER_LIBRARY_NAME", 90, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The name of a library must be an identifier";
  return t1;
}, function() {
  return $.ParserErrorCode_NON_IDENTIFIER_LIBRARY_NAME;
});
Isolate.$lazy($, "NON_PART_OF_DIRECTIVE_IN_PART", "ParserErrorCode_NON_PART_OF_DIRECTIVE_IN_PART", "get$ParserErrorCode_NON_PART_OF_DIRECTIVE_IN_PART", function() {
  var t1 = new $.ParserErrorCode("NON_PART_OF_DIRECTIVE_IN_PART", 91, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The part-of directive must be the only directive in a part";
  return t1;
}, function() {
  return $.ParserErrorCode_NON_PART_OF_DIRECTIVE_IN_PART;
});
Isolate.$lazy($, "NON_USER_DEFINABLE_OPERATOR", "ParserErrorCode_NON_USER_DEFINABLE_OPERATOR", "get$ParserErrorCode_NON_USER_DEFINABLE_OPERATOR", function() {
  var t1 = new $.ParserErrorCode("NON_USER_DEFINABLE_OPERATOR", 92, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The operator '%s' is not user definable";
  return t1;
}, function() {
  return $.ParserErrorCode_NON_USER_DEFINABLE_OPERATOR;
});
Isolate.$lazy($, "POSITIONAL_AFTER_NAMED_ARGUMENT", "ParserErrorCode_POSITIONAL_AFTER_NAMED_ARGUMENT", "get$ParserErrorCode_POSITIONAL_AFTER_NAMED_ARGUMENT", function() {
  var t1 = new $.ParserErrorCode("POSITIONAL_AFTER_NAMED_ARGUMENT", 93, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Positional arguments must occur before named arguments";
  return t1;
}, function() {
  return $.ParserErrorCode_POSITIONAL_AFTER_NAMED_ARGUMENT;
});
Isolate.$lazy($, "POSITIONAL_PARAMETER_OUTSIDE_GROUP", "ParserErrorCode_POSITIONAL_PARAMETER_OUTSIDE_GROUP", "get$ParserErrorCode_POSITIONAL_PARAMETER_OUTSIDE_GROUP", function() {
  var t1 = new $.ParserErrorCode("POSITIONAL_PARAMETER_OUTSIDE_GROUP", 94, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Positional parameters must be enclosed in square brackets ('[' and ']')";
  return t1;
}, function() {
  return $.ParserErrorCode_POSITIONAL_PARAMETER_OUTSIDE_GROUP;
});
Isolate.$lazy($, "STATIC_AFTER_CONST", "ParserErrorCode_STATIC_AFTER_CONST", "get$ParserErrorCode_STATIC_AFTER_CONST", function() {
  var t1 = new $.ParserErrorCode("STATIC_AFTER_CONST", 95, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The modifier 'static' should be before the modifier 'const'";
  return t1;
}, function() {
  return $.ParserErrorCode_STATIC_AFTER_CONST;
});
Isolate.$lazy($, "STATIC_AFTER_FINAL", "ParserErrorCode_STATIC_AFTER_FINAL", "get$ParserErrorCode_STATIC_AFTER_FINAL", function() {
  var t1 = new $.ParserErrorCode("STATIC_AFTER_FINAL", 96, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The modifier 'static' should be before the modifier 'final'";
  return t1;
}, function() {
  return $.ParserErrorCode_STATIC_AFTER_FINAL;
});
Isolate.$lazy($, "STATIC_AFTER_VAR", "ParserErrorCode_STATIC_AFTER_VAR", "get$ParserErrorCode_STATIC_AFTER_VAR", function() {
  var t1 = new $.ParserErrorCode("STATIC_AFTER_VAR", 97, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The modifier 'static' should be before the modifier 'var'";
  return t1;
}, function() {
  return $.ParserErrorCode_STATIC_AFTER_VAR;
});
Isolate.$lazy($, "STATIC_CONSTRUCTOR", "ParserErrorCode_STATIC_CONSTRUCTOR", "get$ParserErrorCode_STATIC_CONSTRUCTOR", function() {
  var t1 = new $.ParserErrorCode("STATIC_CONSTRUCTOR", 98, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Constructors cannot be static";
  return t1;
}, function() {
  return $.ParserErrorCode_STATIC_CONSTRUCTOR;
});
Isolate.$lazy($, "STATIC_GETTER_WITHOUT_BODY", "ParserErrorCode_STATIC_GETTER_WITHOUT_BODY", "get$ParserErrorCode_STATIC_GETTER_WITHOUT_BODY", function() {
  var t1 = new $.ParserErrorCode("STATIC_GETTER_WITHOUT_BODY", 99, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "A 'static' getter must have a body";
  return t1;
}, function() {
  return $.ParserErrorCode_STATIC_GETTER_WITHOUT_BODY;
});
Isolate.$lazy($, "STATIC_OPERATOR", "ParserErrorCode_STATIC_OPERATOR", "get$ParserErrorCode_STATIC_OPERATOR", function() {
  var t1 = new $.ParserErrorCode("STATIC_OPERATOR", 100, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Operators cannot be static";
  return t1;
}, function() {
  return $.ParserErrorCode_STATIC_OPERATOR;
});
Isolate.$lazy($, "STATIC_SETTER_WITHOUT_BODY", "ParserErrorCode_STATIC_SETTER_WITHOUT_BODY", "get$ParserErrorCode_STATIC_SETTER_WITHOUT_BODY", function() {
  var t1 = new $.ParserErrorCode("STATIC_SETTER_WITHOUT_BODY", 101, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "A 'static' setter must have a body";
  return t1;
}, function() {
  return $.ParserErrorCode_STATIC_SETTER_WITHOUT_BODY;
});
Isolate.$lazy($, "STATIC_TOP_LEVEL_DECLARATION", "ParserErrorCode_STATIC_TOP_LEVEL_DECLARATION", "get$ParserErrorCode_STATIC_TOP_LEVEL_DECLARATION", function() {
  var t1 = new $.ParserErrorCode("STATIC_TOP_LEVEL_DECLARATION", 102, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Top-level declarations cannot be declared to be 'static'";
  return t1;
}, function() {
  return $.ParserErrorCode_STATIC_TOP_LEVEL_DECLARATION;
});
Isolate.$lazy($, "SWITCH_HAS_CASE_AFTER_DEFAULT_CASE", "ParserErrorCode_SWITCH_HAS_CASE_AFTER_DEFAULT_CASE", "get$ParserErrorCode_SWITCH_HAS_CASE_AFTER_DEFAULT_CASE", function() {
  var t1 = new $.ParserErrorCode("SWITCH_HAS_CASE_AFTER_DEFAULT_CASE", 103, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The 'default' case should be the last case in a switch statement";
  return t1;
}, function() {
  return $.ParserErrorCode_SWITCH_HAS_CASE_AFTER_DEFAULT_CASE;
});
Isolate.$lazy($, "SWITCH_HAS_MULTIPLE_DEFAULT_CASES", "ParserErrorCode_SWITCH_HAS_MULTIPLE_DEFAULT_CASES", "get$ParserErrorCode_SWITCH_HAS_MULTIPLE_DEFAULT_CASES", function() {
  var t1 = new $.ParserErrorCode("SWITCH_HAS_MULTIPLE_DEFAULT_CASES", 104, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The 'default' case can only be declared once";
  return t1;
}, function() {
  return $.ParserErrorCode_SWITCH_HAS_MULTIPLE_DEFAULT_CASES;
});
Isolate.$lazy($, "TOP_LEVEL_OPERATOR", "ParserErrorCode_TOP_LEVEL_OPERATOR", "get$ParserErrorCode_TOP_LEVEL_OPERATOR", function() {
  var t1 = new $.ParserErrorCode("TOP_LEVEL_OPERATOR", 105, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Operators must be declared within a class";
  return t1;
}, function() {
  return $.ParserErrorCode_TOP_LEVEL_OPERATOR;
});
Isolate.$lazy($, "UNEXPECTED_TERMINATOR_FOR_PARAMETER_GROUP", "ParserErrorCode_UNEXPECTED_TERMINATOR_FOR_PARAMETER_GROUP", "get$ParserErrorCode_UNEXPECTED_TERMINATOR_FOR_PARAMETER_GROUP", function() {
  var t1 = new $.ParserErrorCode("UNEXPECTED_TERMINATOR_FOR_PARAMETER_GROUP", 106, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "There is no '%s' to open a parameter group";
  return t1;
}, function() {
  return $.ParserErrorCode_UNEXPECTED_TERMINATOR_FOR_PARAMETER_GROUP;
});
Isolate.$lazy($, "UNEXPECTED_TOKEN", "ParserErrorCode_UNEXPECTED_TOKEN", "get$ParserErrorCode_UNEXPECTED_TOKEN", function() {
  var t1 = new $.ParserErrorCode("UNEXPECTED_TOKEN", 107, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Unexpected token '%s'";
  return t1;
}, function() {
  return $.ParserErrorCode_UNEXPECTED_TOKEN;
});
Isolate.$lazy($, "WITH_BEFORE_EXTENDS", "ParserErrorCode_WITH_BEFORE_EXTENDS", "get$ParserErrorCode_WITH_BEFORE_EXTENDS", function() {
  var t1 = new $.ParserErrorCode("WITH_BEFORE_EXTENDS", 108, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The extends clause must be before the with clause";
  return t1;
}, function() {
  return $.ParserErrorCode_WITH_BEFORE_EXTENDS;
});
Isolate.$lazy($, "WITH_WITHOUT_EXTENDS", "ParserErrorCode_WITH_WITHOUT_EXTENDS", "get$ParserErrorCode_WITH_WITHOUT_EXTENDS", function() {
  var t1 = new $.ParserErrorCode("WITH_WITHOUT_EXTENDS", 109, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The with clause cannot be used without an extends clause";
  return t1;
}, function() {
  return $.ParserErrorCode_WITH_WITHOUT_EXTENDS;
});
Isolate.$lazy($, "WRONG_SEPARATOR_FOR_NAMED_PARAMETER", "ParserErrorCode_WRONG_SEPARATOR_FOR_NAMED_PARAMETER", "get$ParserErrorCode_WRONG_SEPARATOR_FOR_NAMED_PARAMETER", function() {
  var t1 = new $.ParserErrorCode("WRONG_SEPARATOR_FOR_NAMED_PARAMETER", 110, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The default value of a named parameter should be preceeded by ':'";
  return t1;
}, function() {
  return $.ParserErrorCode_WRONG_SEPARATOR_FOR_NAMED_PARAMETER;
});
Isolate.$lazy($, "WRONG_SEPARATOR_FOR_POSITIONAL_PARAMETER", "ParserErrorCode_WRONG_SEPARATOR_FOR_POSITIONAL_PARAMETER", "get$ParserErrorCode_WRONG_SEPARATOR_FOR_POSITIONAL_PARAMETER", function() {
  var t1 = new $.ParserErrorCode("WRONG_SEPARATOR_FOR_POSITIONAL_PARAMETER", 111, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The default value of a positional parameter should be preceeded by '='";
  return t1;
}, function() {
  return $.ParserErrorCode_WRONG_SEPARATOR_FOR_POSITIONAL_PARAMETER;
});
Isolate.$lazy($, "WRONG_TERMINATOR_FOR_PARAMETER_GROUP", "ParserErrorCode_WRONG_TERMINATOR_FOR_PARAMETER_GROUP", "get$ParserErrorCode_WRONG_TERMINATOR_FOR_PARAMETER_GROUP", function() {
  var t1 = new $.ParserErrorCode("WRONG_TERMINATOR_FOR_PARAMETER_GROUP", 112, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Expected '%s' to close parameter group";
  return t1;
}, function() {
  return $.ParserErrorCode_WRONG_TERMINATOR_FOR_PARAMETER_GROUP;
});
Isolate.$lazy($, "VAR_AS_TYPE_NAME", "ParserErrorCode_VAR_AS_TYPE_NAME", "get$ParserErrorCode_VAR_AS_TYPE_NAME", function() {
  var t1 = new $.ParserErrorCode("VAR_AS_TYPE_NAME", 113, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The keyword 'var' cannot be used as a type name";
  return t1;
}, function() {
  return $.ParserErrorCode_VAR_AS_TYPE_NAME;
});
Isolate.$lazy($, "VAR_CLASS", "ParserErrorCode_VAR_CLASS", "get$ParserErrorCode_VAR_CLASS", function() {
  var t1 = new $.ParserErrorCode("VAR_CLASS", 114, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Classes cannot be declared to be 'var'";
  return t1;
}, function() {
  return $.ParserErrorCode_VAR_CLASS;
});
Isolate.$lazy($, "VAR_RETURN_TYPE", "ParserErrorCode_VAR_RETURN_TYPE", "get$ParserErrorCode_VAR_RETURN_TYPE", function() {
  var t1 = new $.ParserErrorCode("VAR_RETURN_TYPE", 115, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "The return type cannot be 'var'";
  return t1;
}, function() {
  return $.ParserErrorCode_VAR_RETURN_TYPE;
});
Isolate.$lazy($, "VAR_TYPEDEF", "ParserErrorCode_VAR_TYPEDEF", "get$ParserErrorCode_VAR_TYPEDEF", function() {
  var t1 = new $.ParserErrorCode("VAR_TYPEDEF", 116, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Type aliases cannot be declared to be 'var'";
  return t1;
}, function() {
  return $.ParserErrorCode_VAR_TYPEDEF;
});
Isolate.$lazy($, "VOID_PARAMETER", "ParserErrorCode_VOID_PARAMETER", "get$ParserErrorCode_VOID_PARAMETER", function() {
  var t1 = new $.ParserErrorCode("VOID_PARAMETER", 117, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Parameters cannot have a type of 'void'";
  return t1;
}, function() {
  return $.ParserErrorCode_VOID_PARAMETER;
});
Isolate.$lazy($, "VOID_VARIABLE", "ParserErrorCode_VOID_VARIABLE", "get$ParserErrorCode_VOID_VARIABLE", function() {
  var t1 = new $.ParserErrorCode("VOID_VARIABLE", 118, null, null);
  t1._liblib14$_severity = $.get$ErrorSeverity_ERROR();
  t1._liblib14$_message = "Variables cannot have a type of 'void'";
  return t1;
}, function() {
  return $.ParserErrorCode_VOID_VARIABLE;
});
Isolate.$lazy($, "_EMPTY_TABLE", "KeywordState__EMPTY_TABLE", "get$KeywordState__EMPTY_TABLE", function() {
  var t1 = $.List_List(26, $.KeywordState);
  t1.$builtinTypeInfo = [$.KeywordState];
  return t1;
}, function() {
  return $.KeywordState__EMPTY_TABLE;
});
Isolate.$lazy($, "KEYWORD_STATE", "KeywordState_KEYWORD_STATE", "get$KeywordState_KEYWORD_STATE", function() {
  return $.KeywordState_createKeywordStateTable();
}, function() {
  return $.KeywordState_KEYWORD_STATE;
});
Isolate.$lazy($, "ILLEGAL_CHARACTER", "ScannerErrorCode_ILLEGAL_CHARACTER", "get$ScannerErrorCode_ILLEGAL_CHARACTER", function() {
  var t1 = new $.ScannerErrorCode("ILLEGAL_CHARACTER", 0, null);
  t1._liblib9$_message = "Illegal character %x";
  return t1;
}, function() {
  return $.ScannerErrorCode_ILLEGAL_CHARACTER;
});
Isolate.$lazy($, "MISSING_DIGIT", "ScannerErrorCode_MISSING_DIGIT", "get$ScannerErrorCode_MISSING_DIGIT", function() {
  var t1 = new $.ScannerErrorCode("MISSING_DIGIT", 1, null);
  t1._liblib9$_message = "Decimal digit expected";
  return t1;
}, function() {
  return $.ScannerErrorCode_MISSING_DIGIT;
});
Isolate.$lazy($, "MISSING_HEX_DIGIT", "ScannerErrorCode_MISSING_HEX_DIGIT", "get$ScannerErrorCode_MISSING_HEX_DIGIT", function() {
  var t1 = new $.ScannerErrorCode("MISSING_HEX_DIGIT", 2, null);
  t1._liblib9$_message = "Hexidecimal digit expected";
  return t1;
}, function() {
  return $.ScannerErrorCode_MISSING_HEX_DIGIT;
});
Isolate.$lazy($, "UNTERMINATED_MULTI_LINE_COMMENT", "ScannerErrorCode_UNTERMINATED_MULTI_LINE_COMMENT", "get$ScannerErrorCode_UNTERMINATED_MULTI_LINE_COMMENT", function() {
  var t1 = new $.ScannerErrorCode("UNTERMINATED_MULTI_LINE_COMMENT", 4, null);
  t1._liblib9$_message = "Unterminated multi-line comment";
  return t1;
}, function() {
  return $.ScannerErrorCode_UNTERMINATED_MULTI_LINE_COMMENT;
});
Isolate.$lazy($, "UNTERMINATED_STRING_LITERAL", "ScannerErrorCode_UNTERMINATED_STRING_LITERAL", "get$ScannerErrorCode_UNTERMINATED_STRING_LITERAL", function() {
  var t1 = new $.ScannerErrorCode("UNTERMINATED_STRING_LITERAL", 5, null);
  t1._liblib9$_message = "Unterminated string literal";
  return t1;
}, function() {
  return $.ScannerErrorCode_UNTERMINATED_STRING_LITERAL;
});
Isolate.$lazy($, "ASSERT", "Keyword_ASSERT", "get$Keyword_ASSERT", function() {
  var t1 = new $.Keyword("ASSERT", 0, null, false);
  t1._syntax = "assert";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_ASSERT;
});
Isolate.$lazy($, "BREAK", "Keyword_BREAK", "get$Keyword_BREAK", function() {
  var t1 = new $.Keyword("BREAK", 1, null, false);
  t1._syntax = "break";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_BREAK;
});
Isolate.$lazy($, "CASE", "Keyword_CASE", "get$Keyword_CASE", function() {
  var t1 = new $.Keyword("CASE", 2, null, false);
  t1._syntax = "case";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_CASE;
});
Isolate.$lazy($, "CATCH", "Keyword_CATCH", "get$Keyword_CATCH", function() {
  var t1 = new $.Keyword("CATCH", 3, null, false);
  t1._syntax = "catch";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_CATCH;
});
Isolate.$lazy($, "CLASS", "Keyword_CLASS", "get$Keyword_CLASS", function() {
  var t1 = new $.Keyword("CLASS", 4, null, false);
  t1._syntax = "class";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_CLASS;
});
Isolate.$lazy($, "CONST", "Keyword_CONST", "get$Keyword_CONST", function() {
  var t1 = new $.Keyword("CONST", 5, null, false);
  t1._syntax = "const";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_CONST;
});
Isolate.$lazy($, "CONTINUE", "Keyword_CONTINUE", "get$Keyword_CONTINUE", function() {
  var t1 = new $.Keyword("CONTINUE", 6, null, false);
  t1._syntax = "continue";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_CONTINUE;
});
Isolate.$lazy($, "DEFAULT", "Keyword_DEFAULT", "get$Keyword_DEFAULT", function() {
  var t1 = new $.Keyword("DEFAULT", 7, null, false);
  t1._syntax = "default";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_DEFAULT;
});
Isolate.$lazy($, "DO", "Keyword_DO", "get$Keyword_DO", function() {
  var t1 = new $.Keyword("DO", 8, null, false);
  t1._syntax = "do";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_DO;
});
Isolate.$lazy($, "ELSE", "Keyword_ELSE", "get$Keyword_ELSE", function() {
  var t1 = new $.Keyword("ELSE", 9, null, false);
  t1._syntax = "else";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_ELSE;
});
Isolate.$lazy($, "ENUM", "Keyword_ENUM", "get$Keyword_ENUM", function() {
  var t1 = new $.Keyword("ENUM", 10, null, false);
  t1._syntax = "enum";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_ENUM;
});
Isolate.$lazy($, "EXTENDS", "Keyword_EXTENDS", "get$Keyword_EXTENDS", function() {
  var t1 = new $.Keyword("EXTENDS", 11, null, false);
  t1._syntax = "extends";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_EXTENDS;
});
Isolate.$lazy($, "FALSE", "Keyword_FALSE", "get$Keyword_FALSE", function() {
  var t1 = new $.Keyword("FALSE", 12, null, false);
  t1._syntax = "false";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_FALSE;
});
Isolate.$lazy($, "FINAL", "Keyword_FINAL", "get$Keyword_FINAL", function() {
  var t1 = new $.Keyword("FINAL", 13, null, false);
  t1._syntax = "final";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_FINAL;
});
Isolate.$lazy($, "FINALLY", "Keyword_FINALLY", "get$Keyword_FINALLY", function() {
  var t1 = new $.Keyword("FINALLY", 14, null, false);
  t1._syntax = "finally";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_FINALLY;
});
Isolate.$lazy($, "FOR", "Keyword_FOR", "get$Keyword_FOR", function() {
  var t1 = new $.Keyword("FOR", 15, null, false);
  t1._syntax = "for";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_FOR;
});
Isolate.$lazy($, "IF", "Keyword_IF", "get$Keyword_IF", function() {
  var t1 = new $.Keyword("IF", 16, null, false);
  t1._syntax = "if";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_IF;
});
Isolate.$lazy($, "IN", "Keyword_IN", "get$Keyword_IN", function() {
  var t1 = new $.Keyword("IN", 17, null, false);
  t1._syntax = "in";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_IN;
});
Isolate.$lazy($, "IS", "Keyword_IS", "get$Keyword_IS", function() {
  var t1 = new $.Keyword("IS", 18, null, false);
  t1._syntax = "is";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_IS;
});
Isolate.$lazy($, "NEW", "Keyword_NEW", "get$Keyword_NEW", function() {
  var t1 = new $.Keyword("NEW", 19, null, false);
  t1._syntax = "new";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_NEW;
});
Isolate.$lazy($, "NULL", "Keyword_NULL", "get$Keyword_NULL", function() {
  var t1 = new $.Keyword("NULL", 20, null, false);
  t1._syntax = "null";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_NULL;
});
Isolate.$lazy($, "RETHROW", "Keyword_RETHROW", "get$Keyword_RETHROW", function() {
  var t1 = new $.Keyword("RETHROW", 21, null, false);
  t1._syntax = "rethrow";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_RETHROW;
});
Isolate.$lazy($, "RETURN", "Keyword_RETURN", "get$Keyword_RETURN", function() {
  var t1 = new $.Keyword("RETURN", 22, null, false);
  t1._syntax = "return";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_RETURN;
});
Isolate.$lazy($, "SUPER", "Keyword_SUPER", "get$Keyword_SUPER", function() {
  var t1 = new $.Keyword("SUPER", 23, null, false);
  t1._syntax = "super";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_SUPER;
});
Isolate.$lazy($, "SWITCH", "Keyword_SWITCH", "get$Keyword_SWITCH", function() {
  var t1 = new $.Keyword("SWITCH", 24, null, false);
  t1._syntax = "switch";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_SWITCH;
});
Isolate.$lazy($, "THIS", "Keyword_THIS", "get$Keyword_THIS", function() {
  var t1 = new $.Keyword("THIS", 25, null, false);
  t1._syntax = "this";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_THIS;
});
Isolate.$lazy($, "THROW", "Keyword_THROW", "get$Keyword_THROW", function() {
  var t1 = new $.Keyword("THROW", 26, null, false);
  t1._syntax = "throw";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_THROW;
});
Isolate.$lazy($, "TRUE", "Keyword_TRUE", "get$Keyword_TRUE", function() {
  var t1 = new $.Keyword("TRUE", 27, null, false);
  t1._syntax = "true";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_TRUE;
});
Isolate.$lazy($, "TRY", "Keyword_TRY", "get$Keyword_TRY", function() {
  var t1 = new $.Keyword("TRY", 28, null, false);
  t1._syntax = "try";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_TRY;
});
Isolate.$lazy($, "VAR", "Keyword_VAR", "get$Keyword_VAR", function() {
  var t1 = new $.Keyword("VAR", 29, null, false);
  t1._syntax = "var";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_VAR;
});
Isolate.$lazy($, "VOID", "Keyword_VOID", "get$Keyword_VOID", function() {
  var t1 = new $.Keyword("VOID", 30, null, false);
  t1._syntax = "void";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_VOID;
});
Isolate.$lazy($, "WHILE", "Keyword_WHILE", "get$Keyword_WHILE", function() {
  var t1 = new $.Keyword("WHILE", 31, null, false);
  t1._syntax = "while";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_WHILE;
});
Isolate.$lazy($, "WITH", "Keyword_WITH", "get$Keyword_WITH", function() {
  var t1 = new $.Keyword("WITH", 32, null, false);
  t1._syntax = "with";
  t1._isPseudoKeyword2 = false;
  return t1;
}, function() {
  return $.Keyword_WITH;
});
Isolate.$lazy($, "ABSTRACT", "Keyword_ABSTRACT", "get$Keyword_ABSTRACT", function() {
  var t1 = new $.Keyword("ABSTRACT", 33, null, false);
  t1._syntax = "abstract";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_ABSTRACT;
});
Isolate.$lazy($, "AS", "Keyword_AS", "get$Keyword_AS", function() {
  var t1 = new $.Keyword("AS", 34, null, false);
  t1._syntax = "as";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_AS;
});
Isolate.$lazy($, "DYNAMIC", "Keyword_DYNAMIC", "get$Keyword_DYNAMIC", function() {
  var t1 = new $.Keyword("DYNAMIC", 35, null, false);
  t1._syntax = "dynamic";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_DYNAMIC;
});
Isolate.$lazy($, "EXPORT", "Keyword_EXPORT", "get$Keyword_EXPORT", function() {
  var t1 = new $.Keyword("EXPORT", 36, null, false);
  t1._syntax = "export";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_EXPORT;
});
Isolate.$lazy($, "EXTERNAL", "Keyword_EXTERNAL", "get$Keyword_EXTERNAL", function() {
  var t1 = new $.Keyword("EXTERNAL", 37, null, false);
  t1._syntax = "external";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_EXTERNAL;
});
Isolate.$lazy($, "FACTORY", "Keyword_FACTORY", "get$Keyword_FACTORY", function() {
  var t1 = new $.Keyword("FACTORY", 38, null, false);
  t1._syntax = "factory";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_FACTORY;
});
Isolate.$lazy($, "GET", "Keyword_GET", "get$Keyword_GET", function() {
  var t1 = new $.Keyword("GET", 39, null, false);
  t1._syntax = "get";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_GET;
});
Isolate.$lazy($, "IMPLEMENTS", "Keyword_IMPLEMENTS", "get$Keyword_IMPLEMENTS", function() {
  var t1 = new $.Keyword("IMPLEMENTS", 40, null, false);
  t1._syntax = "implements";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_IMPLEMENTS;
});
Isolate.$lazy($, "IMPORT", "Keyword_IMPORT", "get$Keyword_IMPORT", function() {
  var t1 = new $.Keyword("IMPORT", 41, null, false);
  t1._syntax = "import";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_IMPORT;
});
Isolate.$lazy($, "LIBRARY", "Keyword_LIBRARY", "get$Keyword_LIBRARY", function() {
  var t1 = new $.Keyword("LIBRARY", 42, null, false);
  t1._syntax = "library";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_LIBRARY;
});
Isolate.$lazy($, "OPERATOR", "Keyword_OPERATOR", "get$Keyword_OPERATOR", function() {
  var t1 = new $.Keyword("OPERATOR", 43, null, false);
  t1._syntax = "operator";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_OPERATOR;
});
Isolate.$lazy($, "PART", "Keyword_PART", "get$Keyword_PART", function() {
  var t1 = new $.Keyword("PART", 44, null, false);
  t1._syntax = "part";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_PART;
});
Isolate.$lazy($, "SET", "Keyword_SET", "get$Keyword_SET", function() {
  var t1 = new $.Keyword("SET", 45, null, false);
  t1._syntax = "set";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_SET;
});
Isolate.$lazy($, "STATIC", "Keyword_STATIC", "get$Keyword_STATIC", function() {
  var t1 = new $.Keyword("STATIC", 46, null, false);
  t1._syntax = "static";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_STATIC;
});
Isolate.$lazy($, "TYPEDEF", "Keyword_TYPEDEF", "get$Keyword_TYPEDEF", function() {
  var t1 = new $.Keyword("TYPEDEF", 47, null, false);
  t1._syntax = "typedef";
  t1._isPseudoKeyword2 = true;
  return t1;
}, function() {
  return $.Keyword_TYPEDEF;
});
Isolate.$lazy($, "values", "Keyword_values", "get$Keyword_values", function() {
  return [$.get$Keyword_ASSERT(), $.get$Keyword_BREAK(), $.get$Keyword_CASE(), $.get$Keyword_CATCH(), $.get$Keyword_CLASS(), $.get$Keyword_CONST(), $.get$Keyword_CONTINUE(), $.get$Keyword_DEFAULT(), $.get$Keyword_DO(), $.get$Keyword_ELSE(), $.get$Keyword_ENUM(), $.get$Keyword_EXTENDS(), $.get$Keyword_FALSE(), $.get$Keyword_FINAL(), $.get$Keyword_FINALLY(), $.get$Keyword_FOR(), $.get$Keyword_IF(), $.get$Keyword_IN(), $.get$Keyword_IS(), $.get$Keyword_NEW(), $.get$Keyword_NULL(), $.get$Keyword_RETHROW(), $.get$Keyword_RETURN(), $.get$Keyword_SUPER(), $.get$Keyword_SWITCH(), $.get$Keyword_THIS(), $.get$Keyword_THROW(), $.get$Keyword_TRUE(), $.get$Keyword_TRY(), $.get$Keyword_VAR(), $.get$Keyword_VOID(), $.get$Keyword_WHILE(), $.get$Keyword_WITH(), $.get$Keyword_ABSTRACT(), $.get$Keyword_AS(), $.get$Keyword_DYNAMIC(), $.get$Keyword_EXPORT(), $.get$Keyword_EXTERNAL(), $.get$Keyword_FACTORY(), $.get$Keyword_GET(), $.get$Keyword_IMPLEMENTS(), $.get$Keyword_IMPORT(), $.get$Keyword_LIBRARY(), $.get$Keyword_OPERATOR(), $.get$Keyword_PART(), $.get$Keyword_SET(), $.get$Keyword_STATIC(), $.get$Keyword_TYPEDEF()];
}, function() {
  return $.Keyword_values;
});
Isolate.$lazy($, "keywords", "Keyword_keywords", "get$Keyword_keywords", function() {
  return $.Keyword_createKeywordMap();
}, function() {
  return $.Keyword_keywords;
});
Isolate.$lazy($, "NO_CLASS", "TokenClass_NO_CLASS", "get$TokenClass_NO_CLASS", function() {
  var t1 = new $.TokenClass("NO_CLASS", 0, 0);
  t1._precedence = 0;
  return t1;
}, function() {
  return $.TokenClass_NO_CLASS;
});
Isolate.$lazy($, "ADDITIVE_OPERATOR", "TokenClass_ADDITIVE_OPERATOR", "get$TokenClass_ADDITIVE_OPERATOR", function() {
  var t1 = new $.TokenClass("ADDITIVE_OPERATOR", 1, 0);
  t1._precedence = 12;
  return t1;
}, function() {
  return $.TokenClass_ADDITIVE_OPERATOR;
});
Isolate.$lazy($, "ASSIGNMENT_OPERATOR", "TokenClass_ASSIGNMENT_OPERATOR", "get$TokenClass_ASSIGNMENT_OPERATOR", function() {
  var t1 = new $.TokenClass("ASSIGNMENT_OPERATOR", 2, 0);
  t1._precedence = 1;
  return t1;
}, function() {
  return $.TokenClass_ASSIGNMENT_OPERATOR;
});
Isolate.$lazy($, "BITWISE_AND_OPERATOR", "TokenClass_BITWISE_AND_OPERATOR", "get$TokenClass_BITWISE_AND_OPERATOR", function() {
  var t1 = new $.TokenClass("BITWISE_AND_OPERATOR", 3, 0);
  t1._precedence = 8;
  return t1;
}, function() {
  return $.TokenClass_BITWISE_AND_OPERATOR;
});
Isolate.$lazy($, "BITWISE_OR_OPERATOR", "TokenClass_BITWISE_OR_OPERATOR", "get$TokenClass_BITWISE_OR_OPERATOR", function() {
  var t1 = new $.TokenClass("BITWISE_OR_OPERATOR", 4, 0);
  t1._precedence = 6;
  return t1;
}, function() {
  return $.TokenClass_BITWISE_OR_OPERATOR;
});
Isolate.$lazy($, "BITWISE_XOR_OPERATOR", "TokenClass_BITWISE_XOR_OPERATOR", "get$TokenClass_BITWISE_XOR_OPERATOR", function() {
  var t1 = new $.TokenClass("BITWISE_XOR_OPERATOR", 5, 0);
  t1._precedence = 7;
  return t1;
}, function() {
  return $.TokenClass_BITWISE_XOR_OPERATOR;
});
Isolate.$lazy($, "CASCADE_OPERATOR", "TokenClass_CASCADE_OPERATOR", "get$TokenClass_CASCADE_OPERATOR", function() {
  var t1 = new $.TokenClass("CASCADE_OPERATOR", 6, 0);
  t1._precedence = 2;
  return t1;
}, function() {
  return $.TokenClass_CASCADE_OPERATOR;
});
Isolate.$lazy($, "CONDITIONAL_OPERATOR", "TokenClass_CONDITIONAL_OPERATOR", "get$TokenClass_CONDITIONAL_OPERATOR", function() {
  var t1 = new $.TokenClass("CONDITIONAL_OPERATOR", 7, 0);
  t1._precedence = 3;
  return t1;
}, function() {
  return $.TokenClass_CONDITIONAL_OPERATOR;
});
Isolate.$lazy($, "EQUALITY_OPERATOR", "TokenClass_EQUALITY_OPERATOR", "get$TokenClass_EQUALITY_OPERATOR", function() {
  var t1 = new $.TokenClass("EQUALITY_OPERATOR", 8, 0);
  t1._precedence = 9;
  return t1;
}, function() {
  return $.TokenClass_EQUALITY_OPERATOR;
});
Isolate.$lazy($, "LOGICAL_AND_OPERATOR", "TokenClass_LOGICAL_AND_OPERATOR", "get$TokenClass_LOGICAL_AND_OPERATOR", function() {
  var t1 = new $.TokenClass("LOGICAL_AND_OPERATOR", 9, 0);
  t1._precedence = 5;
  return t1;
}, function() {
  return $.TokenClass_LOGICAL_AND_OPERATOR;
});
Isolate.$lazy($, "LOGICAL_OR_OPERATOR", "TokenClass_LOGICAL_OR_OPERATOR", "get$TokenClass_LOGICAL_OR_OPERATOR", function() {
  var t1 = new $.TokenClass("LOGICAL_OR_OPERATOR", 10, 0);
  t1._precedence = 4;
  return t1;
}, function() {
  return $.TokenClass_LOGICAL_OR_OPERATOR;
});
Isolate.$lazy($, "MULTIPLICATIVE_OPERATOR", "TokenClass_MULTIPLICATIVE_OPERATOR", "get$TokenClass_MULTIPLICATIVE_OPERATOR", function() {
  var t1 = new $.TokenClass("MULTIPLICATIVE_OPERATOR", 11, 0);
  t1._precedence = 13;
  return t1;
}, function() {
  return $.TokenClass_MULTIPLICATIVE_OPERATOR;
});
Isolate.$lazy($, "RELATIONAL_OPERATOR", "TokenClass_RELATIONAL_OPERATOR", "get$TokenClass_RELATIONAL_OPERATOR", function() {
  var t1 = new $.TokenClass("RELATIONAL_OPERATOR", 12, 0);
  t1._precedence = 10;
  return t1;
}, function() {
  return $.TokenClass_RELATIONAL_OPERATOR;
});
Isolate.$lazy($, "SHIFT_OPERATOR", "TokenClass_SHIFT_OPERATOR", "get$TokenClass_SHIFT_OPERATOR", function() {
  var t1 = new $.TokenClass("SHIFT_OPERATOR", 13, 0);
  t1._precedence = 11;
  return t1;
}, function() {
  return $.TokenClass_SHIFT_OPERATOR;
});
Isolate.$lazy($, "UNARY_POSTFIX_OPERATOR", "TokenClass_UNARY_POSTFIX_OPERATOR", "get$TokenClass_UNARY_POSTFIX_OPERATOR", function() {
  var t1 = new $.TokenClass("UNARY_POSTFIX_OPERATOR", 14, 0);
  t1._precedence = 15;
  return t1;
}, function() {
  return $.TokenClass_UNARY_POSTFIX_OPERATOR;
});
Isolate.$lazy($, "UNARY_PREFIX_OPERATOR", "TokenClass_UNARY_PREFIX_OPERATOR", "get$TokenClass_UNARY_PREFIX_OPERATOR", function() {
  var t1 = new $.TokenClass("UNARY_PREFIX_OPERATOR", 15, 0);
  t1._precedence = 14;
  return t1;
}, function() {
  return $.TokenClass_UNARY_PREFIX_OPERATOR;
});
Isolate.$lazy($, "EOF", "TokenType_EOF", "get$TokenType_EOF", function() {
  var t1 = new $.TokenType_EOF0("EOF", 0, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = "";
  return t1;
}, function() {
  return $.TokenType_EOF;
});
Isolate.$lazy($, "DOUBLE", "TokenType_DOUBLE", "get$TokenType_DOUBLE", function() {
  var t1, t2;
  t1 = new $.TokenType("DOUBLE", 1, null, null);
  t2 = $.get$TokenClass_NO_CLASS();
  t1._tokenClass = t2;
  t1._lexeme = null;
  return t1;
}, function() {
  return $.TokenType_DOUBLE;
});
Isolate.$lazy($, "HEXADECIMAL", "TokenType_HEXADECIMAL", "get$TokenType_HEXADECIMAL", function() {
  var t1, t2;
  t1 = new $.TokenType("HEXADECIMAL", 2, null, null);
  t2 = $.get$TokenClass_NO_CLASS();
  t1._tokenClass = t2;
  t1._lexeme = null;
  return t1;
}, function() {
  return $.TokenType_HEXADECIMAL;
});
Isolate.$lazy($, "IDENTIFIER", "TokenType_IDENTIFIER", "get$TokenType_IDENTIFIER", function() {
  var t1, t2;
  t1 = new $.TokenType("IDENTIFIER", 3, null, null);
  t2 = $.get$TokenClass_NO_CLASS();
  t1._tokenClass = t2;
  t1._lexeme = null;
  return t1;
}, function() {
  return $.TokenType_IDENTIFIER;
});
Isolate.$lazy($, "INT", "TokenType_INT", "get$TokenType_INT", function() {
  var t1, t2;
  t1 = new $.TokenType("INT", 4, null, null);
  t2 = $.get$TokenClass_NO_CLASS();
  t1._tokenClass = t2;
  t1._lexeme = null;
  return t1;
}, function() {
  return $.TokenType_INT;
});
Isolate.$lazy($, "KEYWORD", "TokenType_KEYWORD", "get$TokenType_KEYWORD", function() {
  var t1, t2;
  t1 = new $.TokenType("KEYWORD", 5, null, null);
  t2 = $.get$TokenClass_NO_CLASS();
  t1._tokenClass = t2;
  t1._lexeme = null;
  return t1;
}, function() {
  return $.TokenType_KEYWORD;
});
Isolate.$lazy($, "MULTI_LINE_COMMENT", "TokenType_MULTI_LINE_COMMENT", "get$TokenType_MULTI_LINE_COMMENT", function() {
  var t1, t2;
  t1 = new $.TokenType("MULTI_LINE_COMMENT", 6, null, null);
  t2 = $.get$TokenClass_NO_CLASS();
  t1._tokenClass = t2;
  t1._lexeme = null;
  return t1;
}, function() {
  return $.TokenType_MULTI_LINE_COMMENT;
});
Isolate.$lazy($, "SCRIPT_TAG", "TokenType_SCRIPT_TAG", "get$TokenType_SCRIPT_TAG", function() {
  var t1, t2;
  t1 = new $.TokenType("SCRIPT_TAG", 7, null, null);
  t2 = $.get$TokenClass_NO_CLASS();
  t1._tokenClass = t2;
  t1._lexeme = null;
  return t1;
}, function() {
  return $.TokenType_SCRIPT_TAG;
});
Isolate.$lazy($, "SINGLE_LINE_COMMENT", "TokenType_SINGLE_LINE_COMMENT", "get$TokenType_SINGLE_LINE_COMMENT", function() {
  var t1, t2;
  t1 = new $.TokenType("SINGLE_LINE_COMMENT", 8, null, null);
  t2 = $.get$TokenClass_NO_CLASS();
  t1._tokenClass = t2;
  t1._lexeme = null;
  return t1;
}, function() {
  return $.TokenType_SINGLE_LINE_COMMENT;
});
Isolate.$lazy($, "STRING", "TokenType_STRING", "get$TokenType_STRING", function() {
  var t1, t2;
  t1 = new $.TokenType("STRING", 9, null, null);
  t2 = $.get$TokenClass_NO_CLASS();
  t1._tokenClass = t2;
  t1._lexeme = null;
  return t1;
}, function() {
  return $.TokenType_STRING;
});
Isolate.$lazy($, "AMPERSAND", "TokenType_AMPERSAND", "get$TokenType_AMPERSAND", function() {
  var t1, t2;
  t1 = $.get$TokenClass_BITWISE_AND_OPERATOR();
  t2 = new $.TokenType("AMPERSAND", 10, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "&";
  return t2;
}, function() {
  return $.TokenType_AMPERSAND;
});
Isolate.$lazy($, "AMPERSAND_AMPERSAND", "TokenType_AMPERSAND_AMPERSAND", "get$TokenType_AMPERSAND_AMPERSAND", function() {
  var t1, t2;
  t1 = $.get$TokenClass_LOGICAL_AND_OPERATOR();
  t2 = new $.TokenType("AMPERSAND_AMPERSAND", 11, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "&&";
  return t2;
}, function() {
  return $.TokenType_AMPERSAND_AMPERSAND;
});
Isolate.$lazy($, "AMPERSAND_EQ", "TokenType_AMPERSAND_EQ", "get$TokenType_AMPERSAND_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_ASSIGNMENT_OPERATOR();
  t2 = new $.TokenType("AMPERSAND_EQ", 12, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "&=";
  return t2;
}, function() {
  return $.TokenType_AMPERSAND_EQ;
});
Isolate.$lazy($, "AT", "TokenType_AT", "get$TokenType_AT", function() {
  var t1 = new $.TokenType("AT", 13, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = "@";
  return t1;
}, function() {
  return $.TokenType_AT;
});
Isolate.$lazy($, "BANG", "TokenType_BANG", "get$TokenType_BANG", function() {
  var t1, t2;
  t1 = $.get$TokenClass_UNARY_PREFIX_OPERATOR();
  t2 = new $.TokenType("BANG", 14, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "!";
  return t2;
}, function() {
  return $.TokenType_BANG;
});
Isolate.$lazy($, "BANG_EQ", "TokenType_BANG_EQ", "get$TokenType_BANG_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_EQUALITY_OPERATOR();
  t2 = new $.TokenType("BANG_EQ", 15, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "!=";
  return t2;
}, function() {
  return $.TokenType_BANG_EQ;
});
Isolate.$lazy($, "BAR", "TokenType_BAR", "get$TokenType_BAR", function() {
  var t1, t2;
  t1 = $.get$TokenClass_BITWISE_OR_OPERATOR();
  t2 = new $.TokenType("BAR", 16, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "|";
  return t2;
}, function() {
  return $.TokenType_BAR;
});
Isolate.$lazy($, "BAR_BAR", "TokenType_BAR_BAR", "get$TokenType_BAR_BAR", function() {
  var t1, t2;
  t1 = $.get$TokenClass_LOGICAL_OR_OPERATOR();
  t2 = new $.TokenType("BAR_BAR", 17, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "||";
  return t2;
}, function() {
  return $.TokenType_BAR_BAR;
});
Isolate.$lazy($, "BAR_EQ", "TokenType_BAR_EQ", "get$TokenType_BAR_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_ASSIGNMENT_OPERATOR();
  t2 = new $.TokenType("BAR_EQ", 18, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "|=";
  return t2;
}, function() {
  return $.TokenType_BAR_EQ;
});
Isolate.$lazy($, "COLON", "TokenType_COLON", "get$TokenType_COLON", function() {
  var t1 = new $.TokenType("COLON", 19, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = ":";
  return t1;
}, function() {
  return $.TokenType_COLON;
});
Isolate.$lazy($, "COMMA", "TokenType_COMMA", "get$TokenType_COMMA", function() {
  var t1 = new $.TokenType("COMMA", 20, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = ",";
  return t1;
}, function() {
  return $.TokenType_COMMA;
});
Isolate.$lazy($, "CARET", "TokenType_CARET", "get$TokenType_CARET", function() {
  var t1, t2;
  t1 = $.get$TokenClass_BITWISE_XOR_OPERATOR();
  t2 = new $.TokenType("CARET", 21, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "^";
  return t2;
}, function() {
  return $.TokenType_CARET;
});
Isolate.$lazy($, "CARET_EQ", "TokenType_CARET_EQ", "get$TokenType_CARET_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_ASSIGNMENT_OPERATOR();
  t2 = new $.TokenType("CARET_EQ", 22, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "^=";
  return t2;
}, function() {
  return $.TokenType_CARET_EQ;
});
Isolate.$lazy($, "CLOSE_CURLY_BRACKET", "TokenType_CLOSE_CURLY_BRACKET", "get$TokenType_CLOSE_CURLY_BRACKET", function() {
  var t1 = new $.TokenType("CLOSE_CURLY_BRACKET", 23, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = "}";
  return t1;
}, function() {
  return $.TokenType_CLOSE_CURLY_BRACKET;
});
Isolate.$lazy($, "CLOSE_PAREN", "TokenType_CLOSE_PAREN", "get$TokenType_CLOSE_PAREN", function() {
  var t1 = new $.TokenType("CLOSE_PAREN", 24, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = ")";
  return t1;
}, function() {
  return $.TokenType_CLOSE_PAREN;
});
Isolate.$lazy($, "CLOSE_SQUARE_BRACKET", "TokenType_CLOSE_SQUARE_BRACKET", "get$TokenType_CLOSE_SQUARE_BRACKET", function() {
  var t1 = new $.TokenType("CLOSE_SQUARE_BRACKET", 25, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = "]";
  return t1;
}, function() {
  return $.TokenType_CLOSE_SQUARE_BRACKET;
});
Isolate.$lazy($, "EQ", "TokenType_EQ", "get$TokenType_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_ASSIGNMENT_OPERATOR();
  t2 = new $.TokenType("EQ", 26, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "=";
  return t2;
}, function() {
  return $.TokenType_EQ;
});
Isolate.$lazy($, "EQ_EQ", "TokenType_EQ_EQ", "get$TokenType_EQ_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_EQUALITY_OPERATOR();
  t2 = new $.TokenType("EQ_EQ", 27, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "==";
  return t2;
}, function() {
  return $.TokenType_EQ_EQ;
});
Isolate.$lazy($, "FUNCTION", "TokenType_FUNCTION", "get$TokenType_FUNCTION", function() {
  var t1 = new $.TokenType("FUNCTION", 28, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = "=>";
  return t1;
}, function() {
  return $.TokenType_FUNCTION;
});
Isolate.$lazy($, "GT", "TokenType_GT", "get$TokenType_GT", function() {
  var t1, t2;
  t1 = $.get$TokenClass_RELATIONAL_OPERATOR();
  t2 = new $.TokenType("GT", 29, null, null);
  t2._tokenClass = t1;
  t2._lexeme = ">";
  return t2;
}, function() {
  return $.TokenType_GT;
});
Isolate.$lazy($, "GT_EQ", "TokenType_GT_EQ", "get$TokenType_GT_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_RELATIONAL_OPERATOR();
  t2 = new $.TokenType("GT_EQ", 30, null, null);
  t2._tokenClass = t1;
  t2._lexeme = ">=";
  return t2;
}, function() {
  return $.TokenType_GT_EQ;
});
Isolate.$lazy($, "GT_GT", "TokenType_GT_GT", "get$TokenType_GT_GT", function() {
  var t1, t2;
  t1 = $.get$TokenClass_SHIFT_OPERATOR();
  t2 = new $.TokenType("GT_GT", 31, null, null);
  t2._tokenClass = t1;
  t2._lexeme = ">>";
  return t2;
}, function() {
  return $.TokenType_GT_GT;
});
Isolate.$lazy($, "GT_GT_EQ", "TokenType_GT_GT_EQ", "get$TokenType_GT_GT_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_ASSIGNMENT_OPERATOR();
  t2 = new $.TokenType("GT_GT_EQ", 32, null, null);
  t2._tokenClass = t1;
  t2._lexeme = ">>=";
  return t2;
}, function() {
  return $.TokenType_GT_GT_EQ;
});
Isolate.$lazy($, "HASH", "TokenType_HASH", "get$TokenType_HASH", function() {
  var t1 = new $.TokenType("HASH", 33, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = "#";
  return t1;
}, function() {
  return $.TokenType_HASH;
});
Isolate.$lazy($, "INDEX", "TokenType_INDEX", "get$TokenType_INDEX", function() {
  var t1, t2;
  t1 = $.get$TokenClass_UNARY_POSTFIX_OPERATOR();
  t2 = new $.TokenType("INDEX", 34, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "[]";
  return t2;
}, function() {
  return $.TokenType_INDEX;
});
Isolate.$lazy($, "INDEX_EQ", "TokenType_INDEX_EQ", "get$TokenType_INDEX_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_UNARY_POSTFIX_OPERATOR();
  t2 = new $.TokenType("INDEX_EQ", 35, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "[]=";
  return t2;
}, function() {
  return $.TokenType_INDEX_EQ;
});
Isolate.$lazy($, "LT", "TokenType_LT", "get$TokenType_LT", function() {
  var t1, t2;
  t1 = $.get$TokenClass_RELATIONAL_OPERATOR();
  t2 = new $.TokenType("LT", 37, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "<";
  return t2;
}, function() {
  return $.TokenType_LT;
});
Isolate.$lazy($, "LT_EQ", "TokenType_LT_EQ", "get$TokenType_LT_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_RELATIONAL_OPERATOR();
  t2 = new $.TokenType("LT_EQ", 38, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "<=";
  return t2;
}, function() {
  return $.TokenType_LT_EQ;
});
Isolate.$lazy($, "LT_LT", "TokenType_LT_LT", "get$TokenType_LT_LT", function() {
  var t1, t2;
  t1 = $.get$TokenClass_SHIFT_OPERATOR();
  t2 = new $.TokenType("LT_LT", 39, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "<<";
  return t2;
}, function() {
  return $.TokenType_LT_LT;
});
Isolate.$lazy($, "LT_LT_EQ", "TokenType_LT_LT_EQ", "get$TokenType_LT_LT_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_ASSIGNMENT_OPERATOR();
  t2 = new $.TokenType("LT_LT_EQ", 40, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "<<=";
  return t2;
}, function() {
  return $.TokenType_LT_LT_EQ;
});
Isolate.$lazy($, "MINUS", "TokenType_MINUS", "get$TokenType_MINUS", function() {
  var t1, t2;
  t1 = $.get$TokenClass_ADDITIVE_OPERATOR();
  t2 = new $.TokenType("MINUS", 41, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "-";
  return t2;
}, function() {
  return $.TokenType_MINUS;
});
Isolate.$lazy($, "MINUS_EQ", "TokenType_MINUS_EQ", "get$TokenType_MINUS_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_ASSIGNMENT_OPERATOR();
  t2 = new $.TokenType("MINUS_EQ", 42, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "-=";
  return t2;
}, function() {
  return $.TokenType_MINUS_EQ;
});
Isolate.$lazy($, "MINUS_MINUS", "TokenType_MINUS_MINUS", "get$TokenType_MINUS_MINUS", function() {
  var t1, t2;
  t1 = $.get$TokenClass_UNARY_PREFIX_OPERATOR();
  t2 = new $.TokenType("MINUS_MINUS", 43, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "--";
  return t2;
}, function() {
  return $.TokenType_MINUS_MINUS;
});
Isolate.$lazy($, "OPEN_CURLY_BRACKET", "TokenType_OPEN_CURLY_BRACKET", "get$TokenType_OPEN_CURLY_BRACKET", function() {
  var t1 = new $.TokenType("OPEN_CURLY_BRACKET", 44, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = "{";
  return t1;
}, function() {
  return $.TokenType_OPEN_CURLY_BRACKET;
});
Isolate.$lazy($, "OPEN_PAREN", "TokenType_OPEN_PAREN", "get$TokenType_OPEN_PAREN", function() {
  var t1, t2;
  t1 = $.get$TokenClass_UNARY_POSTFIX_OPERATOR();
  t2 = new $.TokenType("OPEN_PAREN", 45, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "(";
  return t2;
}, function() {
  return $.TokenType_OPEN_PAREN;
});
Isolate.$lazy($, "OPEN_SQUARE_BRACKET", "TokenType_OPEN_SQUARE_BRACKET", "get$TokenType_OPEN_SQUARE_BRACKET", function() {
  var t1, t2;
  t1 = $.get$TokenClass_UNARY_POSTFIX_OPERATOR();
  t2 = new $.TokenType("OPEN_SQUARE_BRACKET", 46, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "[";
  return t2;
}, function() {
  return $.TokenType_OPEN_SQUARE_BRACKET;
});
Isolate.$lazy($, "PERCENT", "TokenType_PERCENT", "get$TokenType_PERCENT", function() {
  var t1, t2;
  t1 = $.get$TokenClass_MULTIPLICATIVE_OPERATOR();
  t2 = new $.TokenType("PERCENT", 47, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "%";
  return t2;
}, function() {
  return $.TokenType_PERCENT;
});
Isolate.$lazy($, "PERCENT_EQ", "TokenType_PERCENT_EQ", "get$TokenType_PERCENT_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_ASSIGNMENT_OPERATOR();
  t2 = new $.TokenType("PERCENT_EQ", 48, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "%=";
  return t2;
}, function() {
  return $.TokenType_PERCENT_EQ;
});
Isolate.$lazy($, "PERIOD", "TokenType_PERIOD", "get$TokenType_PERIOD", function() {
  var t1, t2;
  t1 = $.get$TokenClass_UNARY_POSTFIX_OPERATOR();
  t2 = new $.TokenType("PERIOD", 49, null, null);
  t2._tokenClass = t1;
  t2._lexeme = ".";
  return t2;
}, function() {
  return $.TokenType_PERIOD;
});
Isolate.$lazy($, "PERIOD_PERIOD", "TokenType_PERIOD_PERIOD", "get$TokenType_PERIOD_PERIOD", function() {
  var t1, t2;
  t1 = $.get$TokenClass_CASCADE_OPERATOR();
  t2 = new $.TokenType("PERIOD_PERIOD", 50, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "..";
  return t2;
}, function() {
  return $.TokenType_PERIOD_PERIOD;
});
Isolate.$lazy($, "PLUS", "TokenType_PLUS", "get$TokenType_PLUS", function() {
  var t1, t2;
  t1 = $.get$TokenClass_ADDITIVE_OPERATOR();
  t2 = new $.TokenType("PLUS", 51, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "+";
  return t2;
}, function() {
  return $.TokenType_PLUS;
});
Isolate.$lazy($, "PLUS_EQ", "TokenType_PLUS_EQ", "get$TokenType_PLUS_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_ASSIGNMENT_OPERATOR();
  t2 = new $.TokenType("PLUS_EQ", 52, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "+=";
  return t2;
}, function() {
  return $.TokenType_PLUS_EQ;
});
Isolate.$lazy($, "PLUS_PLUS", "TokenType_PLUS_PLUS", "get$TokenType_PLUS_PLUS", function() {
  var t1, t2;
  t1 = $.get$TokenClass_UNARY_PREFIX_OPERATOR();
  t2 = new $.TokenType("PLUS_PLUS", 53, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "++";
  return t2;
}, function() {
  return $.TokenType_PLUS_PLUS;
});
Isolate.$lazy($, "QUESTION", "TokenType_QUESTION", "get$TokenType_QUESTION", function() {
  var t1, t2;
  t1 = $.get$TokenClass_CONDITIONAL_OPERATOR();
  t2 = new $.TokenType("QUESTION", 54, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "?";
  return t2;
}, function() {
  return $.TokenType_QUESTION;
});
Isolate.$lazy($, "SEMICOLON", "TokenType_SEMICOLON", "get$TokenType_SEMICOLON", function() {
  var t1 = new $.TokenType("SEMICOLON", 55, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = ";";
  return t1;
}, function() {
  return $.TokenType_SEMICOLON;
});
Isolate.$lazy($, "SLASH", "TokenType_SLASH", "get$TokenType_SLASH", function() {
  var t1, t2;
  t1 = $.get$TokenClass_MULTIPLICATIVE_OPERATOR();
  t2 = new $.TokenType("SLASH", 56, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "/";
  return t2;
}, function() {
  return $.TokenType_SLASH;
});
Isolate.$lazy($, "SLASH_EQ", "TokenType_SLASH_EQ", "get$TokenType_SLASH_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_ASSIGNMENT_OPERATOR();
  t2 = new $.TokenType("SLASH_EQ", 57, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "/=";
  return t2;
}, function() {
  return $.TokenType_SLASH_EQ;
});
Isolate.$lazy($, "STAR", "TokenType_STAR", "get$TokenType_STAR", function() {
  var t1, t2;
  t1 = $.get$TokenClass_MULTIPLICATIVE_OPERATOR();
  t2 = new $.TokenType("STAR", 58, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "*";
  return t2;
}, function() {
  return $.TokenType_STAR;
});
Isolate.$lazy($, "STAR_EQ", "TokenType_STAR_EQ", "get$TokenType_STAR_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_ASSIGNMENT_OPERATOR();
  t2 = new $.TokenType("STAR_EQ", 59, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "*=";
  return t2;
}, function() {
  return $.TokenType_STAR_EQ;
});
Isolate.$lazy($, "STRING_INTERPOLATION_EXPRESSION", "TokenType_STRING_INTERPOLATION_EXPRESSION", "get$TokenType_STRING_INTERPOLATION_EXPRESSION", function() {
  var t1 = new $.TokenType("STRING_INTERPOLATION_EXPRESSION", 60, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = "${";
  return t1;
}, function() {
  return $.TokenType_STRING_INTERPOLATION_EXPRESSION;
});
Isolate.$lazy($, "STRING_INTERPOLATION_IDENTIFIER", "TokenType_STRING_INTERPOLATION_IDENTIFIER", "get$TokenType_STRING_INTERPOLATION_IDENTIFIER", function() {
  var t1 = new $.TokenType("STRING_INTERPOLATION_IDENTIFIER", 61, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = "$";
  return t1;
}, function() {
  return $.TokenType_STRING_INTERPOLATION_IDENTIFIER;
});
Isolate.$lazy($, "TILDE", "TokenType_TILDE", "get$TokenType_TILDE", function() {
  var t1, t2;
  t1 = $.get$TokenClass_UNARY_PREFIX_OPERATOR();
  t2 = new $.TokenType("TILDE", 62, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "~";
  return t2;
}, function() {
  return $.TokenType_TILDE;
});
Isolate.$lazy($, "TILDE_SLASH", "TokenType_TILDE_SLASH", "get$TokenType_TILDE_SLASH", function() {
  var t1, t2;
  t1 = $.get$TokenClass_MULTIPLICATIVE_OPERATOR();
  t2 = new $.TokenType("TILDE_SLASH", 63, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "~/";
  return t2;
}, function() {
  return $.TokenType_TILDE_SLASH;
});
Isolate.$lazy($, "TILDE_SLASH_EQ", "TokenType_TILDE_SLASH_EQ", "get$TokenType_TILDE_SLASH_EQ", function() {
  var t1, t2;
  t1 = $.get$TokenClass_ASSIGNMENT_OPERATOR();
  t2 = new $.TokenType("TILDE_SLASH_EQ", 64, null, null);
  t2._tokenClass = t1;
  t2._lexeme = "~/=";
  return t2;
}, function() {
  return $.TokenType_TILDE_SLASH_EQ;
});
Isolate.$lazy($, "BACKPING", "TokenType_BACKPING", "get$TokenType_BACKPING", function() {
  var t1 = new $.TokenType("BACKPING", 65, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = "`";
  return t1;
}, function() {
  return $.TokenType_BACKPING;
});
Isolate.$lazy($, "BACKSLASH", "TokenType_BACKSLASH", "get$TokenType_BACKSLASH", function() {
  var t1 = new $.TokenType("BACKSLASH", 66, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = "\\";
  return t1;
}, function() {
  return $.TokenType_BACKSLASH;
});
Isolate.$lazy($, "PERIOD_PERIOD_PERIOD", "TokenType_PERIOD_PERIOD_PERIOD", "get$TokenType_PERIOD_PERIOD_PERIOD", function() {
  var t1 = new $.TokenType("PERIOD_PERIOD_PERIOD", 67, null, null);
  t1._tokenClass = $.get$TokenClass_NO_CLASS();
  t1._lexeme = "...";
  return t1;
}, function() {
  return $.TokenType_PERIOD_PERIOD_PERIOD;
});
Isolate.$lazy($, "EMPTY_ARRAY", "Source_EMPTY_ARRAY", "get$Source_EMPTY_ARRAY", function() {
  var t1 = $.List_List(0, $.Source);
  t1.$builtinTypeInfo = [$.Source];
  return t1;
}, function() {
  return $.Source_EMPTY_ARRAY;
});
Isolate.$lazy($, "HTML", "SourceKind_HTML", "get$SourceKind_HTML", function() {
  return new $.SourceKind("HTML", 0);
}, function() {
  return $.SourceKind_HTML;
});
Isolate.$lazy($, "LIBRARY", "SourceKind_LIBRARY", "get$SourceKind_LIBRARY", function() {
  return new $.SourceKind("LIBRARY", 1);
}, function() {
  return $.SourceKind_LIBRARY;
});
Isolate.$lazy($, "PART", "SourceKind_PART", "get$SourceKind_PART", function() {
  return new $.SourceKind("PART", 2);
}, function() {
  return $.SourceKind_PART;
});
Isolate.$lazy($, "UNKNOWN", "SourceKind_UNKNOWN", "get$SourceKind_UNKNOWN", function() {
  return new $.SourceKind("UNKNOWN", 3);
}, function() {
  return $.SourceKind_UNKNOWN;
});
Isolate.$lazy($, "REQUIRED", "ParameterKind_REQUIRED", "get$ParameterKind_REQUIRED", function() {
  var t1 = new $.ParameterKind("REQUIRED", 0, false);
  t1._isOptional2 = false;
  return t1;
}, function() {
  return $.ParameterKind_REQUIRED;
});
Isolate.$lazy($, "POSITIONAL", "ParameterKind_POSITIONAL", "get$ParameterKind_POSITIONAL", function() {
  var t1 = new $.ParameterKind("POSITIONAL", 1, false);
  t1._isOptional2 = true;
  return t1;
}, function() {
  return $.ParameterKind_POSITIONAL;
});
Isolate.$lazy($, "NAMED", "ParameterKind_NAMED", "get$ParameterKind_NAMED", function() {
  var t1 = new $.ParameterKind("NAMED", 2, false);
  t1._isOptional2 = true;
  return t1;
}, function() {
  return $.ParameterKind_NAMED;
});
Isolate.$lazy($, "fileSystemManager", "fileSystemManager", "get$fileSystemManager", function() {
  var t1 = new $.HashMap(0, null, null, null, null);
  t1.$builtinTypeInfo = [$.JSString, $.FileSystem];
  return new $.FileSystemManager(t1);
}, function() {
  return $.fileSystemManager;
});
Isolate.$lazy($, "sdkFileSystem", "sdkFileSystem", "get$sdkFileSystem", function() {
  var t1, t2;
  t1 = new $.SdkFileSystem(null);
  t2 = new $._SdkFolder(null, null, null, "sdk");
  t2.rootFs = t1;
  t1._root = t2;
  return t1;
}, function() {
  return $.sdkFileSystem;
});
Isolate.$lazy($, "_proxiedObjectTable", "_proxiedObjectTable0", "get$_proxiedObjectTable0", function() {
  return $._ProxiedObjectTable$0();
}, function() {
  return $._proxiedObjectTable0;
});
Isolate.$lazy($, "_proxiedObjectTable", "_proxiedObjectTable", "get$_proxiedObjectTable", function() {
  return $._ProxiedObjectTable$();
}, function() {
  return $._proxiedObjectTable;
});
Isolate.$lazy($, "wrapAsync", "wrapAsync", "get$wrapAsync", function() {
  return new $.closure();
}, function() {
  return $.wrapAsync;
});
Isolate.$lazy($, "chromePrefsLocal", "chromePrefsLocal", "get$chromePrefsLocal", function() {
  var t1, t2, t3;
  t1 = $.get$storage();
  t2 = $.PreferenceEvent;
  t2 = t2;
  t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
  t3.$builtinTypeInfo = [t2];
  t3._stream = $._ControllerStream$(t3, t2);
  t2 = t3;
  t2 = new $.ChromePreferenceStore(t2, null);
  t2._storageArea = t1.local;
  return t2;
}, function() {
  return $.chromePrefsLocal;
});
Isolate.$lazy($, "chromePrefsSync", "chromePrefsSync", "get$chromePrefsSync", function() {
  var t1, t2, t3;
  t1 = $.get$storage();
  t2 = $.PreferenceEvent;
  t2 = t2;
  t3 = new $._AsyncStreamController(null, null, null, null, null, null, 0, null);
  t3.$builtinTypeInfo = [t2];
  t3._stream = $._ControllerStream$(t3, t2);
  t2 = t3;
  t2 = new $.ChromePreferenceStore(t2, null);
  t2._storageArea = t1.sync;
  return t2;
}, function() {
  return $.chromePrefsSync;
});
Isolate.$lazy($, "_testCases", "_testCases", "get$_testCases", function() {
  var t1 = $.List_List($, $.TestCase);
  t1.$builtinTypeInfo = [$.TestCase];
  return t1;
}, function() {
  return $._testCases;
});
Isolate.$lazy($, "testCases", "testCases", "get$testCases", function() {
  var t1 = new $.UnmodifiableListView($.get$_testCases());
  t1.$builtinTypeInfo = [$.TestCase];
  return t1;
}, function() {
  return $.testCases;
});
Isolate.$lazy($, "_rootContext", "_rootContext", "get$_rootContext", function() {
  var t1, t2, t3;
  t1 = new $._GroupContext(null, "", null, null);
  t2 = t1.parent;
  t3 = t2 == null;
  t1._testSetup = t3 ? null : t2.get$testSetup();
  t1._testTeardown = t3 ? null : t2.get$testTeardown();
  return t1;
}, function() {
  return $._rootContext;
});
Isolate.$lazy($, "_currentContext", "_currentContext", "get$_currentContext", function() {
  return $.get$_rootContext();
}, function() {
  return $._currentContext;
});
Isolate.$lazy($, "_frameRegExp", "_frameRegExp", "get$_frameRegExp", function() {
  return new $.JSSyntaxRegExp($.JSSyntaxRegExp_makeNative("^\\s*(?:(?:#\\d+\\s*)|(?:at )|(?:))(.+)\\s*[@\\(]((?:.+:\\/\\/.+\\/[^:]*)|(?:dart:[^:]*)|(?:package:[^:]*)):([:\\d]+)[\\)]?$", false, true, false), null, null);
}, function() {
  return $._frameRegExp;
});
Isolate.$lazy($, "_bindingMap", "_bindingMap", "get$_bindingMap", function() {
  var str = window.navigator.platform;
  return $.makeLiteralMap(["META", 91, "CTRL", $.JSString_methods.indexOf$1(str != null ? $.toLowerCase$0$s(str) : "", "mac") !== -1 ? 91 : 17, "MACCTRL", 17, "ALT", 18, "SHIFT", 16, "F1", 112, "F2", 113, "F3", 114, "F4", 115, "F5", 116, "F6", 117, "F7", 118, "F8", 119, "F9", 120, "F10", 121, "F11", 122, "F12", 123, "TAB", 9]);
}, function() {
  return $._bindingMap;
});
Isolate.$lazy($, "container", "FlexLayout_container", "get$FlexLayout_container", function() {
  return new $.FlexLayoutContainer();
}, function() {
  return $.FlexLayout_container;
});
Isolate.$lazy($, "child", "FlexLayout_child", "get$FlexLayout_child", function() {
  return new $.FlexLayoutChild();
}, function() {
  return $.FlexLayout_child;
});
// Native classes
$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("BarProp", $.BarProp);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethodsNonleaf("Blob", $.Blob);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment0);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("CSSFontFaceLoadEvent", $.CssFontFaceLoadEvent);

$.defineNativeMethods("CSSStyleDeclaration", $.CssStyleDeclaration);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("DirectoryEntry", $.DirectoryEntry);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethods("DOMImplementation", $.DomImplementation);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethodsNonleaf("Entry", $.Entry);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("File", $.File0);

$.defineNativeMethods("FileEntry", $.FileEntry);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement0);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequest", $.HttpRequest);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethods("MediaKeyMessageEvent", $.MediaKeyMessageEvent);

$.defineNativeMethods("MediaKeyNeededEvent", $.MediaKeyNeededEvent);

$.defineNativeMethods("MediaStream", $.MediaStream);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("MIDIConnectionEvent", $.MidiConnectionEvent);

$.defineNativeMethods("MIDIMessageEvent", $.MidiMessageEvent);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("MutationObserver|WebKitMutationObserver", $.MutationObserver);

$.defineNativeMethods("MutationRecord", $.MutationRecord);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeList|RadioNodeList", $.NodeList0);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("ResourceProgressEvent", $.ResourceProgressEvent);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("SecurityPolicyViolationEvent", $.SecurityPolicyViolationEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("Selection", $.Selection0);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("SpeechSynthesisEvent", $.SpeechSynthesisEvent);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent|WebKitTransitionEvent", $.TransitionEvent);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("MouseScrollEvent|MouseWheelEvent|WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("Attr", $._Attr);

$.defineNativeMethods("ClientRect", $._ClientRect);

$.defineNativeMethods("Entity", $._Entity);

$.defineNativeMethods("EntryArray", $._EntryArray);

$.defineNativeMethods("NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedEnumeration", $.AnimatedEnumeration);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethods("SVGAnimatedString", $.AnimatedString);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethodsNonleaf("AudioContext", $.AudioContext);

$.defineNativeMethods("AudioDestinationNode", $.AudioDestinationNode);

$.defineNativeMethodsNonleaf("AudioNode", $.AudioNode);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethodsNonleaf("AudioSourceNode", $.AudioSourceNode);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("OfflineAudioContext", $.OfflineAudioContext);

$.defineNativeMethods("OscillatorNode", $.OscillatorNode);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);

$.defineNativeMethods("ArrayBuffer", $.ByteBuffer);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.TypedData);

$.defineNativeMethods("DataView", $.ByteData);

$.defineNativeMethods("Float32Array", $.Float32List);

$.defineNativeMethods("Float64Array", $.Float64List);

$.defineNativeMethods("Int16Array", $.Int16List);

$.defineNativeMethods("Int32Array", $.Int32List);

$.defineNativeMethods("Int8Array", $.Int8List);

$.defineNativeMethods("Uint16Array", $.Uint16List);

$.defineNativeMethods("Uint32Array", $.Uint32List);

$.defineNativeMethods("Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);


var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.initializeDispatchPropertyCSP(function(a) {
  $.getDispatchProperty = a;
}, [function(a) {
  return a.___dart_dispatch_record_ZxYxX_3_;
}, function(a) {
  return a.___dart_dispatch_record_ZxYxX_2_;
}, function(a) {
  return a.___dart_dispatch_record_ZxYxX_1_;
}, function(a) {
  return a.___dart_dispatch_record_ZxYxX_0_;
}], $.Interceptor.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main8$closure); });
      } else {
        $.startRootIsolate($.main8$closure);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main8$closure); });
  } else {
    $.startRootIsolate($.main8$closure);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function defineClass(name, cls, constructor, prototype) {
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = !!{}.__proto__;
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "object" && classData instanceof Array) {
          classData = fields = classData[0];
        }
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        var constructor = defineClass(name, cls, fields, desc);
        constructor["@"] = desc;
        isolateProperties[cls] = constructor;
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue, getter) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    return Isolate;
  };
}
//@ sourceMappingURL=webitor.dart.js.map
